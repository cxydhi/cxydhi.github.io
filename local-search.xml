<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>手撸Mybatis（五）——连接数据库进行insert，update和delete</title>
    <link href="/2024/05/05/%E6%89%8B%E6%92%B8Mybatis%EF%BC%88%E4%BA%94%EF%BC%89%E2%80%94%E2%80%94%E8%BF%9E%E6%8E%A5%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9B%E8%A1%8Cinsert%EF%BC%8Cupdate%E5%92%8Cdelete/"/>
    <url>/2024/05/05/%E6%89%8B%E6%92%B8Mybatis%EF%BC%88%E4%BA%94%EF%BC%89%E2%80%94%E2%80%94%E8%BF%9E%E6%8E%A5%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9B%E8%A1%8Cinsert%EF%BC%8Cupdate%E5%92%8Cdelete/</url>
    
    <content type="html"><![CDATA[<h3 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h3><p>在上一章中，我们成功实现了数据库的连接，以及单个字段的查询、resultType映射查询、resultMap映射查询。在本章，我们将讲解关于增加、修改和删除操作。</p><h3 id="insert操作"><a href="#insert操作" class="headerlink" title="insert操作"></a>insert操作</h3><p>首先，我们修改IUserMapper类，添加insertUser接口</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs json">package com.yang.mybatis.test;<br><br>public interface IUserMapper <span class="hljs-punctuation">&#123;</span><br>    String queryUserName(Integer id);<br><br>    Integer queryUserAge(Integer id);<br><br>    User queryUserById(Integer id);<br><br>    IdUserNameVO queryIdUserNameVOById(Integer id);<br><br>    void insertUser(User user);<br><span class="hljs-punctuation">&#125;</span><br><br></code></pre></td></tr></table></figure><p>修改UserMapper.xml，加上insertUser相关的xml块</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs json">&lt;insert id=<span class="hljs-string">&quot;insertUser&quot;</span> parameterType=<span class="hljs-string">&quot;com.yang.mybatis.test.User&quot;</span>&gt;<br>       insert into user( user_name<span class="hljs-punctuation">,</span> password<span class="hljs-punctuation">,</span> age<span class="hljs-punctuation">,</span> create_time)<br>       values( #<span class="hljs-punctuation">&#123;</span>userName<span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span> #<span class="hljs-punctuation">&#123;</span>password<span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span> #<span class="hljs-punctuation">&#123;</span>age<span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span> #<span class="hljs-punctuation">&#123;</span>createTime<span class="hljs-punctuation">&#125;</span>)<br>   &lt;/insert&gt;<br></code></pre></td></tr></table></figure><p>我们注意到，对于每一个接口方法，其对应的xml块，类型有select，insert，update和delete这几种类型，此外，还有一个parameterType参数，因此，我们需要再次修改MybatisSqlStatement类，加上operateType和parameterType参数</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs json">public class MybatisSqlStatement implements Serializable <span class="hljs-punctuation">&#123;</span><br>    private String namespace;<br><br>    private String id;<br><br>    private String sql;<br><br>    private String resultType;<br><br>    private String resultMap;<br><br>    private String operateType;<br><br>    private String parameterType;<br>  <br>    ...省略getter 和setter<br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>接着修改XmlMybatisMapperParser的parseStatement方法，在解析mapper.xml的时候，设置对应的值</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs json">private void parseStatement(MybatisMapperXmlConfiguration mybatisMapperXmlConfiguration<span class="hljs-punctuation">,</span> List&lt;Element&gt; elements) <span class="hljs-punctuation">&#123;</span><br>       if (elements == <span class="hljs-literal"><span class="hljs-keyword">null</span></span> || elements.isEmpty()) <span class="hljs-punctuation">&#123;</span><br>           return;<br>       <span class="hljs-punctuation">&#125;</span><br>       String namespace = mybatisMapperXmlConfiguration.getMapperName();<br>       for (Element element <span class="hljs-punctuation">:</span> elements) <span class="hljs-punctuation">&#123;</span><br>           String id = element.attributeValue(<span class="hljs-string">&quot;id&quot;</span>);<br>           String resultType = element.attributeValue(<span class="hljs-string">&quot;resultType&quot;</span>);<br>           String resultMap = element.attributeValue(<span class="hljs-string">&quot;resultMap&quot;</span>);<br>           String parameterType = element.attributeValue(<span class="hljs-string">&quot;parameterType&quot;</span>);<br>           String sql = element.getText().trim();<br><br>           MybatisSqlStatement mybatisSqlStatement = new MybatisSqlStatement();<br>           mybatisSqlStatement.setNamespace(namespace);<br>           mybatisSqlStatement.setId(id);<br>           mybatisSqlStatement.setSql(sql);<br>           mybatisSqlStatement.setResultType(resultType);<br>           mybatisSqlStatement.setResultMap(resultMap);<br>           mybatisSqlStatement.setParameterType(parameterType);<br>           mybatisSqlStatement.setOperateType(element.getName().toLowerCase());<br><br>           mybatisMapperXmlConfiguration.addMybatisSqlStatement(mybatisSqlStatement);<br>       <span class="hljs-punctuation">&#125;</span><br>   <span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>定义IMybatisPreparedStatementBuilder接口，用于接收请求参数并设置参数值到preparedStatement</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs json">package com.yang.mybatis.execute;<br><br><br><br>import com.yang.mybatis.execute.request.MybatisPreparedStatementBuilderRequest;<br><br>import java.sql.PreparedStatement;<br>import java.sql.SQLException;<br><br>public interface IMybatisPreparedStatementBuilder <span class="hljs-punctuation">&#123;</span><br>    PreparedStatement buildPreparedStatement(MybatisPreparedStatementBuilderRequest mybatisPreparedStatementBuilderRequest) throws SQLException;<br><span class="hljs-punctuation">&#125;</span><br><br></code></pre></td></tr></table></figure><p>其中，MybatisPreparedStatementBuilderRequest的定义如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs json">package com.yang.mybatis.execute.request;<br><br>import com.yang.mybatis.config.MybatisSqlStatement;<br><br>import java.io.Serializable;<br>import java.sql.Connection;<br><br>public class MybatisPreparedStatementBuilderRequest implements Serializable <span class="hljs-punctuation">&#123;</span><br>    private Connection connection;<br>    private Object<span class="hljs-punctuation">[</span><span class="hljs-punctuation">]</span> parameters;<br>    private MybatisSqlStatement mybatisSqlStatement;<br>    private String operateType;<br><br>    public Connection getConnection() <span class="hljs-punctuation">&#123;</span><br>        return connection;<br>    <span class="hljs-punctuation">&#125;</span><br><br>    public void setConnection(Connection connection) <span class="hljs-punctuation">&#123;</span><br>        this.connection = connection;<br>    <span class="hljs-punctuation">&#125;</span><br><br>    public Object<span class="hljs-punctuation">[</span><span class="hljs-punctuation">]</span> getParameters() <span class="hljs-punctuation">&#123;</span><br>        return parameters;<br>    <span class="hljs-punctuation">&#125;</span><br><br>    public void setParameters(Object<span class="hljs-punctuation">[</span><span class="hljs-punctuation">]</span> parameters) <span class="hljs-punctuation">&#123;</span><br>        this.parameters = parameters;<br>    <span class="hljs-punctuation">&#125;</span><br><br>    public MybatisSqlStatement getMybatisSqlStatement() <span class="hljs-punctuation">&#123;</span><br>        return mybatisSqlStatement;<br>    <span class="hljs-punctuation">&#125;</span><br><br>    public void setMybatisSqlStatement(MybatisSqlStatement mybatisSqlStatement) <span class="hljs-punctuation">&#123;</span><br>        this.mybatisSqlStatement = mybatisSqlStatement;<br>    <span class="hljs-punctuation">&#125;</span><br><br>    public String getOperateType() <span class="hljs-punctuation">&#123;</span><br>        return operateType;<br>    <span class="hljs-punctuation">&#125;</span><br><br>    public void setOperateType(String operateType) <span class="hljs-punctuation">&#123;</span><br>        this.operateType = operateType;<br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br><br></code></pre></td></tr></table></figure><p>该接口的默认实现类为：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><code class="hljs json">package com.yang.mybatis.execute;<br><br>import com.yang.mybatis.config.MybatisSqlStatement;<br>import com.yang.mybatis.execute.request.MybatisPreparedStatementBuilderRequest;<br>import org.apache.commons.lang3.StringUtils;<br><br>import java.lang.reflect.Field;<br>import java.sql.Connection;<br>import java.sql.PreparedStatement;<br>import java.sql.SQLException;<br>import java.util.ArrayList;<br>import java.util.HashMap;<br>import java.util.List;<br>import java.util.Map;<br><br>public class DefaultMybatisPreparedStatementBuilder implements IMybatisPreparedStatementBuilder <span class="hljs-punctuation">&#123;</span><br>    @Override<br>    public PreparedStatement buildPreparedStatement(MybatisPreparedStatementBuilderRequest mybatisPreparedStatementBuilderRequest) throws SQLException <span class="hljs-punctuation">&#123;</span><br>        Connection connection = mybatisPreparedStatementBuilderRequest.getConnection();<br>        Object<span class="hljs-punctuation">[</span><span class="hljs-punctuation">]</span> parameters = mybatisPreparedStatementBuilderRequest.getParameters();<br><br>        MybatisSqlStatement mybatisSqlStatement = mybatisPreparedStatementBuilderRequest.getMybatisSqlStatement();<br>        String rawSql = mybatisSqlStatement.getSql();<br><br>        List&lt;String&gt; parameterNameList = new ArrayList&lt;&gt;();<br>        String sql = extractRawSql(rawSql<span class="hljs-punctuation">,</span> parameterNameList);<br>        PreparedStatement preparedStatement = connection.prepareStatement(sql);<br><br>        String parameterType = mybatisSqlStatement.getParameterType();<br>        if (StringUtils.isEmpty(parameterType)) <span class="hljs-punctuation">&#123;</span><br>            if (parameterNameList.size() != parameters.length) <span class="hljs-punctuation">&#123;</span><br>                throw new RuntimeException(<span class="hljs-string">&quot;SQL语句参数个数不匹配====&quot;</span>);<br>            <span class="hljs-punctuation">&#125;</span><br>            int index = <span class="hljs-number">1</span>;<br>            for (Object o <span class="hljs-punctuation">:</span> parameters) <span class="hljs-punctuation">&#123;</span><br>                preparedStatement.setObject(index ++<span class="hljs-punctuation">,</span> o);<br>            <span class="hljs-punctuation">&#125;</span><br>            return preparedStatement;<br>        <span class="hljs-punctuation">&#125;</span><br><br>        try <span class="hljs-punctuation">&#123;</span><br>            Object parameter = parameters<span class="hljs-punctuation">[</span><span class="hljs-number">0</span><span class="hljs-punctuation">]</span>;<br>            Class&lt;?&gt; aClass = Class.forName(parameterType);<br>            Field<span class="hljs-punctuation">[</span><span class="hljs-punctuation">]</span> fields = aClass.getDeclaredFields();<br>            Map&lt;String<span class="hljs-punctuation">,</span> Field&gt; filedName2FieldMap = new HashMap&lt;&gt;();<br>            for (Field field <span class="hljs-punctuation">:</span> fields) <span class="hljs-punctuation">&#123;</span><br>                filedName2FieldMap.put(field.getName()<span class="hljs-punctuation">,</span> field);<br>            <span class="hljs-punctuation">&#125;</span><br><br>            List&lt;Object&gt; parameterValueList = new ArrayList&lt;&gt;();<br>            for (String parameterName <span class="hljs-punctuation">:</span> parameterNameList) <span class="hljs-punctuation">&#123;</span><br>                Field field = filedName2FieldMap.get(parameterName);<br>                if (field == <span class="hljs-literal"><span class="hljs-keyword">null</span></span>) <span class="hljs-punctuation">&#123;</span><br>                    throw new RuntimeException(<span class="hljs-string">&quot;SQL参数不存在&quot;</span>);<br>                <span class="hljs-punctuation">&#125;</span><br>                field.setAccessible(<span class="hljs-literal"><span class="hljs-keyword">true</span></span>);<br>                Object value = field.get(parameter);<br>                parameterValueList.add(value);<br>            <span class="hljs-punctuation">&#125;</span><br><br>            int index = <span class="hljs-number">1</span>;<br>            for (Object o <span class="hljs-punctuation">:</span> parameterValueList) <span class="hljs-punctuation">&#123;</span><br>                preparedStatement.setObject(index++<span class="hljs-punctuation">,</span> o);<br>            <span class="hljs-punctuation">&#125;</span><br>            return preparedStatement;<br>        <span class="hljs-punctuation">&#125;</span> catch (ClassNotFoundException | IllegalAccessException e) <span class="hljs-punctuation">&#123;</span><br>            e.printStackTrace();<br>            throw new RuntimeException(e);<br>        <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br><br>    private String extractRawSql(String rawSql<span class="hljs-punctuation">,</span> List&lt;String&gt; parameterNameList) <span class="hljs-punctuation">&#123;</span><br>        StringBuilder sqlBuilder = new StringBuilder();<br>        int start = <span class="hljs-number">0</span>;<br>        int end = <span class="hljs-number">-1</span>;<br>        while ((end = rawSql.indexOf(<span class="hljs-string">&quot;#&quot;</span><span class="hljs-punctuation">,</span> start)) != <span class="hljs-number">-1</span>) <span class="hljs-punctuation">&#123;</span><br>            sqlBuilder.append(rawSql.substring(start<span class="hljs-punctuation">,</span> end - <span class="hljs-number">1</span>))<br>                    .append(<span class="hljs-string">&quot; ? &quot;</span>);<br>            int parameterStart = end + <span class="hljs-number">2</span>;<br>            int parameterEnd = rawSql.indexOf(<span class="hljs-string">&quot;&#125;&quot;</span><span class="hljs-punctuation">,</span> parameterStart);<br>            parameterNameList.add(rawSql.substring(parameterStart<span class="hljs-punctuation">,</span> parameterEnd));<br>            start = parameterEnd + <span class="hljs-number">1</span>;<br>        <span class="hljs-punctuation">&#125;</span><br>        sqlBuilder.append(rawSql.substring(start));<br><br>        return sqlBuilder.toString();<br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br><br></code></pre></td></tr></table></figure><p>然后，我们修改DefaultMybatisSqlSession类，在execute方法中我们先使用IMybatisPreparedStatementBuilder来构建PreparedStatement，然后执行相关操作，最后再通过IMybatisResultParser来对结果进行解析。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><code class="hljs json">package com.yang.mybatis.session;<br><br>import com.yang.mybatis.config.MybatisConfiguration;<br>import com.yang.mybatis.config.MybatisEnvironment;<br>import com.yang.mybatis.config.MybatisMapperXmlConfiguration;<br>import com.yang.mybatis.config.MybatisSqlStatement;<br>import com.yang.mybatis.execute.DefaultMybatisPreparedStatementBuilder;<br>import com.yang.mybatis.execute.DefaultMybatisResultParser;<br>import com.yang.mybatis.execute.IMybatisPreparedStatementBuilder;<br>import com.yang.mybatis.execute.IMybatisResultParser;<br>import com.yang.mybatis.execute.request.MybatisPreparedStatementBuilderRequest;<br>import com.yang.mybatis.execute.request.MybatisResultParserRequest;<br>import com.yang.mybatis.proxy.MapperProxyFactory;<br><br>import java.sql.Connection;<br>import java.sql.PreparedStatement;<br>import java.sql.ResultSet;<br>import java.sql.SQLException;<br>import java.util.Map;<br><br><br>public class DefaultMybatisSqlSession implements IMybatisSqlSession <span class="hljs-punctuation">&#123;</span><br>    private MapperProxyFactory mapperProxyFactory;<br>    private MybatisConfiguration mybatisConfiguration;<br><br>    private IMybatisResultParser iMybatisResultParser;<br><br>    private IMybatisPreparedStatementBuilder iMybatisPreparedStatementBuilder;<br><br>    public DefaultMybatisSqlSession(MapperProxyFactory mapperProxyFactory<span class="hljs-punctuation">,</span> IMybatisPreparedStatementBuilder iMybatisPreparedStatementBuilder<span class="hljs-punctuation">,</span><br>                                    IMybatisResultParser iMybatisResultParser) <span class="hljs-punctuation">&#123;</span><br>        this.mapperProxyFactory = mapperProxyFactory;<br>        this.mybatisConfiguration = mapperProxyFactory.getMybatisConfiguration();<br>        this.iMybatisPreparedStatementBuilder = iMybatisPreparedStatementBuilder;<br>        this.iMybatisResultParser = iMybatisResultParser;<br>    <span class="hljs-punctuation">&#125;</span><br><br>    @Override<br>    public &lt;T&gt; T execute(String method<span class="hljs-punctuation">,</span> Object parameter) <span class="hljs-punctuation">&#123;</span><br>        Map&lt;String<span class="hljs-punctuation">,</span> MybatisSqlStatement&gt; mapperMethod2SqlStatementsMap = mapperProxyFactory.getMybatisConfiguration().getMapperMethod2SqlStatementsMap();<br>        MybatisSqlStatement mybatisSqlStatement = mapperMethod2SqlStatementsMap.get(method);<br><br>        MybatisEnvironment defaultMybatisEnvironment = this.mybatisConfiguration.getDefaultMybatisEnvironment();<br><br>        return new TransactionInvoke&lt;T&gt;() <span class="hljs-punctuation">&#123;</span><br>            @Override<br>            public T execute(Connection connection) throws SQLException <span class="hljs-punctuation">&#123;</span><br>                Object<span class="hljs-punctuation">[</span><span class="hljs-punctuation">]</span> parameters = (Object<span class="hljs-punctuation">[</span><span class="hljs-punctuation">]</span>) parameter;<br>                String operateType = mybatisSqlStatement.getOperateType();<br><br>                MybatisPreparedStatementBuilderRequest mybatisPreparedStatementBuilderRequest = new MybatisPreparedStatementBuilderRequest();<br>                mybatisPreparedStatementBuilderRequest.setConnection(connection);<br>                mybatisPreparedStatementBuilderRequest.setMybatisSqlStatement(mybatisSqlStatement);<br>                mybatisPreparedStatementBuilderRequest.setParameters(parameters);<br>                mybatisPreparedStatementBuilderRequest.setOperateType(operateType);<br>                PreparedStatement preparedStatement = iMybatisPreparedStatementBuilder.buildPreparedStatement(mybatisPreparedStatementBuilderRequest);<br><br>                ResultSet resultSet = <span class="hljs-literal"><span class="hljs-keyword">null</span></span>;<br>                if (<span class="hljs-string">&quot;select&quot;</span>.equals(operateType)) <span class="hljs-punctuation">&#123;</span><br>                    resultSet = preparedStatement.executeQuery();<br>                <span class="hljs-punctuation">&#125;</span> else <span class="hljs-punctuation">&#123;</span><br>                    preparedStatement.execute();<br>                <span class="hljs-punctuation">&#125;</span><br><br>                String mapperName = mybatisSqlStatement.getNamespace();<br>                MybatisMapperXmlConfiguration mybatisMapperXmlConfiguration = mybatisConfiguration.getMybatisMapperXmlConfiguration(mapperName);<br><br>                MybatisResultParserRequest mybatisResultParserRequest = new MybatisResultParserRequest();<br>                mybatisResultParserRequest.setResultSet(resultSet);<br>                mybatisResultParserRequest.setMybatisSqlStatement(mybatisSqlStatement);<br>                mybatisResultParserRequest.setMybatisMapperXmlConfiguration(mybatisMapperXmlConfiguration);<br>                mybatisResultParserRequest.setOperateType(operateType);<br>                T result = iMybatisResultParser.parseResult(mybatisResultParserRequest);<br>                if (resultSet != <span class="hljs-literal"><span class="hljs-keyword">null</span></span>) <span class="hljs-punctuation">&#123;</span><br>                    resultSet.close();<br>                <span class="hljs-punctuation">&#125;</span><br>                return result;<br>            <span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-punctuation">&#125;</span>.invoke(defaultMybatisEnvironment.getMybatisDataSource());<br>    <span class="hljs-punctuation">&#125;</span><br><br>    @Override<br>    public &lt;T&gt; T getMapper(Class&lt;T&gt; type) <span class="hljs-punctuation">&#123;</span><br>        return (T) mapperProxyFactory.newInstance(type<span class="hljs-punctuation">,</span> this);<br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br><br></code></pre></td></tr></table></figure><p>这里还需要修改DefaultMybatisSqlSessionFactory类，将IMybatisResultParser和IMybatisPreparedStatementBuilder的构建职责迁移于此，从而避免每一个SqlSession都需要重复创建这些类。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs json">package com.yang.mybatis.session;<br><br>import com.yang.mybatis.execute.DefaultMybatisPreparedStatementBuilder;<br>import com.yang.mybatis.execute.DefaultMybatisResultParser;<br>import com.yang.mybatis.execute.IMybatisPreparedStatementBuilder;<br>import com.yang.mybatis.execute.IMybatisResultParser;<br>import com.yang.mybatis.proxy.MapperProxyFactory;<br><br>public class DefaultMybatisSqlSessionFactory implements IMybatisSqlSessionFactory <span class="hljs-punctuation">&#123;</span><br>    private MapperProxyFactory mapperProxyFactory;<br>    private IMybatisPreparedStatementBuilder iMybatisPreparedStatementBuilder = new DefaultMybatisPreparedStatementBuilder();<br>    private IMybatisResultParser iMybatisResultParser = new DefaultMybatisResultParser();<br><br>    public DefaultMybatisSqlSessionFactory(MapperProxyFactory mapperProxyFactory) <span class="hljs-punctuation">&#123;</span><br>        this.mapperProxyFactory = mapperProxyFactory;<br>    <span class="hljs-punctuation">&#125;</span><br><br>    @Override<br>    public IMybatisSqlSession openSession() <span class="hljs-punctuation">&#123;</span><br>        return new DefaultMybatisSqlSession(mapperProxyFactory<span class="hljs-punctuation">,</span> iMybatisPreparedStatementBuilder<span class="hljs-punctuation">,</span> iMybatisResultParser);<br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br><br></code></pre></td></tr></table></figure><p>添加测试代码，进行测试：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs json">package com.yang.mybatis.test;<br><br>import com.yang.mybatis.config.parser.XmlMybatisConfigurationParser;<br>import com.yang.mybatis.config.parser.XmlMybatisMapperParser;<br>import com.yang.mybatis.session.IMybatisSqlSession;<br>import com.yang.mybatis.session.IMybatisSqlSessionFactory;<br>import com.yang.mybatis.session.MybatisSqlSessionFactoryBuilder;<br><br>import java.time.LocalDateTime;<br><br><br>public class Main <span class="hljs-punctuation">&#123;</span><br>    public static void main(String<span class="hljs-punctuation">[</span><span class="hljs-punctuation">]</span> args) <span class="hljs-punctuation">&#123;</span><br>        String configPath = <span class="hljs-string">&quot;mybatis-config.xml&quot;</span>;<br>        IMybatisSqlSessionFactory mybatisSqlSessionFactory = new MybatisSqlSessionFactoryBuilder()<br>                .setMybatisMapperParser(new XmlMybatisMapperParser())<br>                .setMybatisConfigurationParser(new XmlMybatisConfigurationParser())<br>                .setConfigPath(configPath)<br>                .buildSqlSessionFactory();<br>        IMybatisSqlSession mybatisSqlSession = mybatisSqlSessionFactory.openSession();<br>        IUserMapper userMapper = mybatisSqlSession.getMapper(IUserMapper.class);<br><br>        User user = new User();<br>        user.setUserName(<span class="hljs-string">&quot;test&quot;</span>);<br>        user.setPassword(<span class="hljs-string">&quot;test&quot;</span>);<br>        user.setAge(<span class="hljs-number">4</span>);<br>        user.setCreateTime(LocalDateTime.now());<br>        userMapper.insertUser(user);<br>    <span class="hljs-punctuation">&#125;</span><br><br><span class="hljs-punctuation">&#125;</span><br><br></code></pre></td></tr></table></figure><p>运行上述方法，再次查看数据库，结果如下：</p><img src="/2024/05/05/%E6%89%8B%E6%92%B8Mybatis%EF%BC%88%E4%BA%94%EF%BC%89%E2%80%94%E2%80%94%E8%BF%9E%E6%8E%A5%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9B%E8%A1%8Cinsert%EF%BC%8Cupdate%E5%92%8Cdelete/1.png" class=""><h3 id="update操作"><a href="#update操作" class="headerlink" title="update操作"></a>update操作</h3><p>首先，我们在IUserMapper接口上，添加一个updateUserById方法</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs json">void updateUserById(User user);<br><br></code></pre></td></tr></table></figure><p>然后修改UserMapper.xml，添加上updateUserById相关的xml块</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs json">&lt;update id=<span class="hljs-string">&quot;updateUserById&quot;</span> parameterType=<span class="hljs-string">&quot;com.yang.mybatis.test.User&quot;</span>&gt;<br>       update user<br>       set user_name = #<span class="hljs-punctuation">&#123;</span>userName<span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>           password = #<span class="hljs-punctuation">&#123;</span>password<span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>           age = #<span class="hljs-punctuation">&#123;</span>age<span class="hljs-punctuation">&#125;</span><br>       where id = #<span class="hljs-punctuation">&#123;</span>id<span class="hljs-punctuation">&#125;</span><br>   &lt;/update&gt;<br></code></pre></td></tr></table></figure><p>添加测试方法，进行测试</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs json">String configPath = <span class="hljs-string">&quot;mybatis-config.xml&quot;</span>;<br>     MybatisSqlSessionFactory mybatisSqlSessionFactory = new MybatisSqlSessionFactoryBuilder()<br>             .setMybatisMapperParser(new XmlMybatisMapperParser())<br>             .setMybatisConfigurationParser(new XmlMybatisConfigurationParser())<br>             .setConfigPath(configPath)<br>             .buildSqlSessionFactory();<br>     IMybatisSqlSession mybatisSqlSession = mybatisSqlSessionFactory.openSession();<br>     IUserMapper userMapper = mybatisSqlSession.getMapper(IUserMapper.class);<br>     User user = userMapper.queryUserById(<span class="hljs-number">4</span>);<br>     user.setUserName(<span class="hljs-string">&quot;cxy1&quot;</span>);<br>     user.setPassword(<span class="hljs-string">&quot;1234&quot;</span>);<br>     user.setAge(<span class="hljs-number">10</span>);<br>     userMapper.updateUserById(user);<br></code></pre></td></tr></table></figure><p>运行方法后，查看数据库，结果如下：</p><img src="/2024/05/05/%E6%89%8B%E6%92%B8Mybatis%EF%BC%88%E4%BA%94%EF%BC%89%E2%80%94%E2%80%94%E8%BF%9E%E6%8E%A5%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9B%E8%A1%8Cinsert%EF%BC%8Cupdate%E5%92%8Cdelete/2.png" class=""><h3 id="delete操作"><a href="#delete操作" class="headerlink" title="delete操作"></a>delete操作</h3><p>首先，修改IUserMapper，添加deleteUserById方法</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs json">void deleteUserById(Integer id);<br><br></code></pre></td></tr></table></figure><p>然后在UserMapper.xml中添加上对应的xml块</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs json">&lt;delete id=<span class="hljs-string">&quot;deleteUserById&quot;</span> parameterType=<span class="hljs-string">&quot;int&quot;</span>&gt;<br>        delete from user<br>        where id = #<span class="hljs-punctuation">&#123;</span>id<span class="hljs-punctuation">&#125;</span><br>    &lt;/delete&gt;<br></code></pre></td></tr></table></figure><p>添加测试方法，进行测试：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs json">public static void main(String<span class="hljs-punctuation">[</span><span class="hljs-punctuation">]</span> args) <span class="hljs-punctuation">&#123;</span><br>       String configPath = <span class="hljs-string">&quot;mybatis-config.xml&quot;</span>;<br>       IMybatisSqlSessionFactory mybatisSqlSessionFactory = new MybatisSqlSessionFactoryBuilder()<br>               .setMybatisMapperParser(new XmlMybatisMapperParser())<br>               .setMybatisConfigurationParser(new XmlMybatisConfigurationParser())<br>               .setConfigPath(configPath)<br>               .buildSqlSessionFactory();<br>       IMybatisSqlSession mybatisSqlSession = mybatisSqlSessionFactory.openSession();<br>       IUserMapper userMapper = mybatisSqlSession.getMapper(IUserMapper.class);<br>       userMapper.deleteUserById(<span class="hljs-number">5</span>);<br>   <span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>结果如下:</p><img src="/2024/05/05/%E6%89%8B%E6%92%B8Mybatis%EF%BC%88%E4%BA%94%EF%BC%89%E2%80%94%E2%80%94%E8%BF%9E%E6%8E%A5%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9B%E8%A1%8Cinsert%EF%BC%8Cupdate%E5%92%8Cdelete/3.png" class=""><p>可以看出，这里因为我们使用的是parameterType是int而不是java.lang.Integer，所以会报错，但是一般情况下，像int，float，long等小写，一般我们也会使用的，而且用的频率比java.lang.Integer的频率更大，那么，我们其实可以添加一个假名，将int这些小写的方式和对应的包装类关联起来。我们修改DefaultMybatisPreparedStatementBuilder，修改内容如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><code class="hljs json">package com.yang.mybatis.execute;<br><br>import com.yang.mybatis.config.MybatisSqlStatement;<br>import com.yang.mybatis.execute.request.MybatisPreparedStatementBuilderRequest;<br>import org.apache.commons.lang3.StringUtils;<br><br>import java.lang.reflect.Field;<br>import java.sql.Connection;<br>import java.sql.PreparedStatement;<br>import java.sql.SQLException;<br>import java.util.ArrayList;<br>import java.util.HashMap;<br>import java.util.List;<br>import java.util.Map;<br><br>public class DefaultMybatisPreparedStatementBuilder implements IMybatisPreparedStatementBuilder <span class="hljs-punctuation">&#123;</span><br>    private Map&lt;String<span class="hljs-punctuation">,</span> String&gt; baseAliasMap = new HashMap&lt;&gt;();<br><br>    <span class="hljs-punctuation">&#123;</span><br>        baseAliasMap.put(<span class="hljs-string">&quot;int&quot;</span><span class="hljs-punctuation">,</span> Integer.class.getName());<br>        baseAliasMap.put(<span class="hljs-string">&quot;float&quot;</span><span class="hljs-punctuation">,</span> Float.class.getName());<br>        baseAliasMap.put(<span class="hljs-string">&quot;double&quot;</span><span class="hljs-punctuation">,</span> Double.class.getName());<br>        baseAliasMap.put(<span class="hljs-string">&quot;long&quot;</span><span class="hljs-punctuation">,</span> Long.class.getName());<br>        baseAliasMap.put(<span class="hljs-string">&quot;byte&quot;</span><span class="hljs-punctuation">,</span> Byte.class.getName());<br>        baseAliasMap.put(<span class="hljs-string">&quot;short&quot;</span><span class="hljs-punctuation">,</span> Short.class.getName());<br>        baseAliasMap.put(<span class="hljs-string">&quot;string&quot;</span><span class="hljs-punctuation">,</span> String.class.getName());<br>        baseAliasMap.put(<span class="hljs-string">&quot;String&quot;</span><span class="hljs-punctuation">,</span> String.class.getName());<br>        baseAliasMap.put(<span class="hljs-string">&quot;char&quot;</span><span class="hljs-punctuation">,</span> Character.class.getName());<br>    <span class="hljs-punctuation">&#125;</span><br>    @Override<br>    public PreparedStatement buildPreparedStatement(MybatisPreparedStatementBuilderRequest mybatisPreparedStatementBuilderRequest) throws SQLException <span class="hljs-punctuation">&#123;</span><br>        Connection connection = mybatisPreparedStatementBuilderRequest.getConnection();<br>        Object<span class="hljs-punctuation">[</span><span class="hljs-punctuation">]</span> parameters = mybatisPreparedStatementBuilderRequest.getParameters();<br><br>        MybatisSqlStatement mybatisSqlStatement = mybatisPreparedStatementBuilderRequest.getMybatisSqlStatement();<br>        String rawSql = mybatisSqlStatement.getSql();<br><br>        List&lt;String&gt; parameterNameList = new ArrayList&lt;&gt;();<br>        String sql = extractRawSql(rawSql<span class="hljs-punctuation">,</span> parameterNameList);<br>        PreparedStatement preparedStatement = connection.prepareStatement(sql);<br><br>        String parameterType = mybatisSqlStatement.getParameterType();<br>        if (StringUtils.isEmpty(parameterType)) <span class="hljs-punctuation">&#123;</span><br>            if (parameterNameList.size() != parameters.length) <span class="hljs-punctuation">&#123;</span><br>                throw new RuntimeException(<span class="hljs-string">&quot;SQL语句参数个数不匹配====&quot;</span>);<br>            <span class="hljs-punctuation">&#125;</span><br>            int index = <span class="hljs-number">1</span>;<br>            for (Object o <span class="hljs-punctuation">:</span> parameters) <span class="hljs-punctuation">&#123;</span><br>                preparedStatement.setObject(index ++<span class="hljs-punctuation">,</span> o);<br>            <span class="hljs-punctuation">&#125;</span><br>            return preparedStatement;<br>        <span class="hljs-punctuation">&#125;</span><br><br>        try <span class="hljs-punctuation">&#123;</span><br>            Object parameter = parameters<span class="hljs-punctuation">[</span><span class="hljs-number">0</span><span class="hljs-punctuation">]</span>;<br>            if (baseAliasMap.containsKey(parameterType)) <span class="hljs-punctuation">&#123;</span><br>                if (parameters.length != <span class="hljs-number">1</span>) <span class="hljs-punctuation">&#123;</span><br>                    throw new RuntimeException(<span class="hljs-string">&quot;SQL语句有误, 只能有一个parameterType参数&quot;</span>);<br>                <span class="hljs-punctuation">&#125;</span><br>                preparedStatement.setObject(<span class="hljs-number">1</span><span class="hljs-punctuation">,</span> parameter);<br>                return preparedStatement;<br>            <span class="hljs-punctuation">&#125;</span><br>            Class&lt;?&gt; aClass = Class.forName(parameterType);<br>            Field<span class="hljs-punctuation">[</span><span class="hljs-punctuation">]</span> fields = aClass.getDeclaredFields();<br>            Map&lt;String<span class="hljs-punctuation">,</span> Field&gt; filedName2FieldMap = new HashMap&lt;&gt;();<br>            for (Field field <span class="hljs-punctuation">:</span> fields) <span class="hljs-punctuation">&#123;</span><br>                filedName2FieldMap.put(field.getName()<span class="hljs-punctuation">,</span> field);<br>            <span class="hljs-punctuation">&#125;</span><br><br>            List&lt;Object&gt; parameterValueList = new ArrayList&lt;&gt;();<br>            for (String parameterName <span class="hljs-punctuation">:</span> parameterNameList) <span class="hljs-punctuation">&#123;</span><br>                Field field = filedName2FieldMap.get(parameterName);<br>                if (field == <span class="hljs-literal"><span class="hljs-keyword">null</span></span>) <span class="hljs-punctuation">&#123;</span><br>                    throw new RuntimeException(<span class="hljs-string">&quot;SQL参数不存在&quot;</span>);<br>                <span class="hljs-punctuation">&#125;</span><br>                field.setAccessible(<span class="hljs-literal"><span class="hljs-keyword">true</span></span>);<br>                Object value = field.get(parameter);<br>                parameterValueList.add(value);<br>            <span class="hljs-punctuation">&#125;</span><br><br>            int index = <span class="hljs-number">1</span>;<br>            for (Object o <span class="hljs-punctuation">:</span> parameterValueList) <span class="hljs-punctuation">&#123;</span><br>                preparedStatement.setObject(index++<span class="hljs-punctuation">,</span> o);<br>            <span class="hljs-punctuation">&#125;</span><br>            return preparedStatement;<br>        <span class="hljs-punctuation">&#125;</span> catch (ClassNotFoundException | IllegalAccessException e) <span class="hljs-punctuation">&#123;</span><br>            throw new RuntimeException(e);<br>        <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br><br>    private String extractRawSql(String rawSql<span class="hljs-punctuation">,</span> List&lt;String&gt; parameterNameList) <span class="hljs-punctuation">&#123;</span><br>        StringBuilder sqlBuilder = new StringBuilder();<br>        int start = <span class="hljs-number">0</span>;<br>        int end = <span class="hljs-number">-1</span>;<br>        while ((end = rawSql.indexOf(<span class="hljs-string">&quot;#&quot;</span><span class="hljs-punctuation">,</span> start)) != <span class="hljs-number">-1</span>) <span class="hljs-punctuation">&#123;</span><br>            sqlBuilder.append(rawSql.substring(start<span class="hljs-punctuation">,</span> end - <span class="hljs-number">1</span>))<br>                    .append(<span class="hljs-string">&quot; ? &quot;</span>);<br>            int parameterStart = end + <span class="hljs-number">2</span>;<br>            int parameterEnd = rawSql.indexOf(<span class="hljs-string">&quot;&#125;&quot;</span><span class="hljs-punctuation">,</span> parameterStart);<br>            parameterNameList.add(rawSql.substring(parameterStart<span class="hljs-punctuation">,</span> parameterEnd));<br>            start = parameterEnd + <span class="hljs-number">1</span>;<br>        <span class="hljs-punctuation">&#125;</span><br>        sqlBuilder.append(rawSql.substring(start));<br><br>        return sqlBuilder.toString();<br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br><br></code></pre></td></tr></table></figure><p>再次运行测试方法，这次没有报错了，然后我们查看数据库，结果如下，说明删除成功了。 </p><img src="/2024/05/05/%E6%89%8B%E6%92%B8Mybatis%EF%BC%88%E4%BA%94%EF%BC%89%E2%80%94%E2%80%94%E8%BF%9E%E6%8E%A5%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9B%E8%A1%8Cinsert%EF%BC%8Cupdate%E5%92%8Cdelete/4.png" class="">]]></content>
    
    
    
    <tags>
      
      <tag>-Mybatis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>手撸Mybatis（四）——连接数据库进行简单查询</title>
    <link href="/2024/05/05/%E6%89%8B%E6%92%B8Mybatis%EF%BC%88%E5%9B%9B%EF%BC%89%E2%80%94%E2%80%94%E8%BF%9E%E6%8E%A5%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9B%E8%A1%8C%E7%AE%80%E5%8D%95%E6%9F%A5%E8%AF%A2/"/>
    <url>/2024/05/05/%E6%89%8B%E6%92%B8Mybatis%EF%BC%88%E5%9B%9B%EF%BC%89%E2%80%94%E2%80%94%E8%BF%9E%E6%8E%A5%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9B%E8%A1%8C%E7%AE%80%E5%8D%95%E6%9F%A5%E8%AF%A2/</url>
    
    <content type="html"><![CDATA[<h3 id="添加数据库操作模板"><a href="#添加数据库操作模板" class="headerlink" title="添加数据库操作模板"></a>添加数据库操作模板</h3><p>对于JDBC操作，一般包括以下几个步骤：<br>1）注册驱动<br>2）建立连接<br>3）执行sql语句<br>4）处理结果<br>5）释放资源<br>上面这些步骤，真正和我们处理相关的，是第三步和第四步，其他步骤，都是通用的逻辑，因此，我们可以将这些步骤抽象成一个模板方法类，其内容如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs json">package com.yang.mybatis.session;<br><br>import com.yang.mybatis.config.MybatisDataSource;<br><br>import java.sql.Connection;<br>import java.sql.DriverManager;<br>import java.sql.SQLException;<br><br><br>public abstract class TransactionInvoke&lt;T&gt; <span class="hljs-punctuation">&#123;</span><br>    public T invoke(MybatisDataSource mybatisDataSource) <span class="hljs-punctuation">&#123;</span><br>        String username = mybatisDataSource.getUsername();<br>        String password = mybatisDataSource.getPassword();<br>        String url = mybatisDataSource.getUrl();<br>        String driver = mybatisDataSource.getDriver();<br><br>        Connection connection = <span class="hljs-literal"><span class="hljs-keyword">null</span></span>;<br>        T result = <span class="hljs-literal"><span class="hljs-keyword">null</span></span>;<br>        try <span class="hljs-punctuation">&#123;</span><br>            Class.forName(driver);<br>            connection = DriverManager.getConnection(url<span class="hljs-punctuation">,</span> username<span class="hljs-punctuation">,</span> password);<br>            connection.setAutoCommit(<span class="hljs-literal"><span class="hljs-keyword">false</span></span>);<br>            result = execute(connection);<br>            connection.commit();<br>        <span class="hljs-punctuation">&#125;</span> catch (SQLException e) <span class="hljs-punctuation">&#123;</span><br>            try <span class="hljs-punctuation">&#123;</span><br>                connection.rollback();<br>            <span class="hljs-punctuation">&#125;</span> catch (SQLException ex) <span class="hljs-punctuation">&#123;</span><br>                throw new RuntimeException(ex);<br>            <span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-punctuation">&#125;</span> catch (ClassNotFoundException e) <span class="hljs-punctuation">&#123;</span><br>            throw new RuntimeException(e);<br>        <span class="hljs-punctuation">&#125;</span> finally <span class="hljs-punctuation">&#123;</span><br>            closeResource(connection);<br>        <span class="hljs-punctuation">&#125;</span><br>        return result;<br>    <span class="hljs-punctuation">&#125;</span><br><br>    private void closeResource(Connection connection) <span class="hljs-punctuation">&#123;</span><br>        if (connection != <span class="hljs-literal"><span class="hljs-keyword">null</span></span>) <span class="hljs-punctuation">&#123;</span><br>            try <span class="hljs-punctuation">&#123;</span><br>                connection.close();<br>            <span class="hljs-punctuation">&#125;</span> catch (SQLException e) <span class="hljs-punctuation">&#123;</span><br>                throw new RuntimeException(e);<br>            <span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br><br>    public abstract T execute(Connection connection) throws SQLException;<br><span class="hljs-punctuation">&#125;</span><br><br></code></pre></td></tr></table></figure><p>因为涉及到数据库操作，所以我们要先引入mysql的依赖：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs json">&lt;dependency&gt;<br>          &lt;groupId&gt;mysql&lt;/groupId&gt;<br>          &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;<br>          &lt;version&gt;<span class="hljs-number">8.0</span><span class="hljs-number">.27</span>&lt;/version&gt;<br>      &lt;/dependency&gt;<br></code></pre></td></tr></table></figure><h3 id="查询某个字段"><a href="#查询某个字段" class="headerlink" title="查询某个字段"></a>查询某个字段</h3><p>首先，我们修改DefaultMybatisSqlSession中，在该类中，执行我们的sql语句，其中，执行sql和对sql查询结果进行处理的内容，收敛在execute方法中。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><code class="hljs json">package com.yang.mybatis.session;<br><br>import com.yang.mybatis.config.MybatisConfiguration;<br>import com.yang.mybatis.config.MybatisEnvironment;<br>import com.yang.mybatis.config.MybatisSqlStatement;<br>import com.yang.mybatis.proxy.MapperProxyFactory;<br><br>import java.sql.Connection;<br>import java.sql.PreparedStatement;<br>import java.sql.ResultSet;<br>import java.sql.SQLException;<br>import java.util.ArrayList;<br>import java.util.List;<br>import java.util.Map;<br><br><br>public class DefaultMybatisSqlSession implements IMybatisSqlSession <span class="hljs-punctuation">&#123;</span><br>    private MapperProxyFactory mapperProxyFactory;<br>    private MybatisConfiguration mybatisConfiguration;<br><br>    public DefaultMybatisSqlSession(MapperProxyFactory mapperProxyFactory) <span class="hljs-punctuation">&#123;</span><br>        this.mapperProxyFactory = mapperProxyFactory;<br>        this.mybatisConfiguration = mapperProxyFactory.getMybatisConfiguration();<br>    <span class="hljs-punctuation">&#125;</span><br><br>    @Override<br>    public &lt;T&gt; T execute(String method<span class="hljs-punctuation">,</span> Object parameter) <span class="hljs-punctuation">&#123;</span><br>        Map&lt;String<span class="hljs-punctuation">,</span> MybatisSqlStatement&gt; mapperMethod2SqlStatementsMap = mapperProxyFactory.getMybatisConfiguration().getMapperMethod2SqlStatementsMap();<br>        MybatisSqlStatement mybatisSqlStatement = mapperMethod2SqlStatementsMap.get(method);<br><br><br>        MybatisEnvironment defaultMybatisEnvironment = this.mybatisConfiguration.getDefaultMybatisEnvironment();<br><br>        return new TransactionInvoke&lt;T&gt;() <span class="hljs-punctuation">&#123;</span><br>            @Override<br>            public T execute(Connection connection) throws SQLException <span class="hljs-punctuation">&#123;</span><br>                String rawSql = mybatisSqlStatement.getSql();<br>                List&lt;String&gt; parameterNameList = new ArrayList&lt;&gt;();<br>                String sql = extractRawSql(rawSql<span class="hljs-punctuation">,</span> parameterNameList);<br>                Object<span class="hljs-punctuation">[</span><span class="hljs-punctuation">]</span> parameters = (Object<span class="hljs-punctuation">[</span><span class="hljs-punctuation">]</span>) parameter;<br>                PreparedStatement preparedStatement = connection.prepareStatement(sql);<br>                if (parameterNameList.size() != parameters.length) <span class="hljs-punctuation">&#123;</span><br>                    throw new RuntimeException(<span class="hljs-string">&quot;SQL语句参数个数不匹配====&quot;</span>);<br>                <span class="hljs-punctuation">&#125;</span><br>                int index = <span class="hljs-number">1</span>;<br>                for (Object o <span class="hljs-punctuation">:</span> parameters) <span class="hljs-punctuation">&#123;</span><br>                    preparedStatement.setObject(index ++<span class="hljs-punctuation">,</span> o);<br>                <span class="hljs-punctuation">&#125;</span><br>                ResultSet resultSet = preparedStatement.executeQuery();<br><br>                T result = <span class="hljs-literal"><span class="hljs-keyword">null</span></span>;<br>                if (resultSet.next()) <span class="hljs-punctuation">&#123;</span><br>                    result = (T) resultSet.getObject(<span class="hljs-number">1</span>);<br>                <span class="hljs-punctuation">&#125;</span><br><br>                resultSet.close();<br>                return result;<br>            <span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-punctuation">&#125;</span>.invoke(defaultMybatisEnvironment.getMybatisDataSource());<br>    <span class="hljs-punctuation">&#125;</span><br><br>    private String extractRawSql(String rawSql<span class="hljs-punctuation">,</span> List&lt;String&gt; parameterNameList) <span class="hljs-punctuation">&#123;</span><br>        StringBuilder sqlBuilder = new StringBuilder();<br>        int start = <span class="hljs-number">0</span>;<br>        int end = <span class="hljs-number">-1</span>;<br>        while ((end = rawSql.indexOf(<span class="hljs-string">&quot;#&quot;</span><span class="hljs-punctuation">,</span> start)) != <span class="hljs-number">-1</span>) <span class="hljs-punctuation">&#123;</span><br>            sqlBuilder.append(rawSql.substring(start<span class="hljs-punctuation">,</span> end - <span class="hljs-number">1</span>))<br>                    .append(<span class="hljs-string">&quot; ? &quot;</span>);<br>            int parameterStart = end + <span class="hljs-number">2</span>;<br>            int parameterEnd = rawSql.indexOf(<span class="hljs-string">&quot;&#125;&quot;</span><span class="hljs-punctuation">,</span> parameterStart);<br>            parameterNameList.add(rawSql.substring(parameterStart<span class="hljs-punctuation">,</span> parameterEnd));<br>            start = parameterEnd + <span class="hljs-number">1</span>;<br>        <span class="hljs-punctuation">&#125;</span><br>        sqlBuilder.append(rawSql.substring(start));<br><br>        return sqlBuilder.toString();<br>    <span class="hljs-punctuation">&#125;</span><br><br><br>    @Override<br>    public &lt;T&gt; T getMapper(Class&lt;T&gt; type) <span class="hljs-punctuation">&#123;</span><br>        return (T) mapperProxyFactory.newInstance(type<span class="hljs-punctuation">,</span> this);<br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br><br></code></pre></td></tr></table></figure><p>最后我们添加测试方法，进行测试：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs json">String configPath = <span class="hljs-string">&quot;mybatis-config.xml&quot;</span>;<br>        IMybatisSqlSessionFactory mybatisSqlSessionFactory = new MybatisSqlSessionFactoryBuilder()<br>                .setMybatisMapperParser(new XmlMybatisMapperParser())<br>                .setMybatisConfigurationParser(new XmlMybatisConfigurationParser())<br>                .setConfigPath(configPath)<br>                .buildSqlSessionFactory();<br><br>        IMybatisSqlSession mybatisSqlSession = mybatisSqlSessionFactory.openSession();<br><br>        IUserMapper userMapper = mybatisSqlSession.getMapper(IUserMapper.class);<br>        System.out.println(userMapper.queryUserName(<span class="hljs-number">1</span>));<br></code></pre></td></tr></table></figure><p>测试结果如下：</p><img src="/2024/05/05/%E6%89%8B%E6%92%B8Mybatis%EF%BC%88%E5%9B%9B%EF%BC%89%E2%80%94%E2%80%94%E8%BF%9E%E6%8E%A5%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9B%E8%A1%8C%E7%AE%80%E5%8D%95%E6%9F%A5%E8%AF%A2/1.png" class=""><h3 id="查询结果封装为对象"><a href="#查询结果封装为对象" class="headerlink" title="查询结果封装为对象"></a>查询结果封装为对象</h3><h4 id="基于resultType"><a href="#基于resultType" class="headerlink" title="基于resultType"></a>基于resultType</h4><p>上述的操作，只对查询某个字段有效，假设我们要获取的是一个对象，比如我们在UserMapper添加如下方法：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs json">User queryUserById(Integer id);<br><br></code></pre></td></tr></table></figure><p>其中，User类内容如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs json"><br>public class User implements Serializable <span class="hljs-punctuation">&#123;</span><br>    private Integer id;<br><br>    private String userName;<br><br>    private String password;<br><br>    private Integer age;<br><br>    private LocalDateTime createTime;<br><br>    public Integer getId() <span class="hljs-punctuation">&#123;</span><br>        return id;<br>    <span class="hljs-punctuation">&#125;</span><br><br>    public void setId(Integer id) <span class="hljs-punctuation">&#123;</span><br>        this.id = id;<br>    <span class="hljs-punctuation">&#125;</span><br><br>    public String getUserName() <span class="hljs-punctuation">&#123;</span><br>        return userName;<br>    <span class="hljs-punctuation">&#125;</span><br><br>    public void setUserName(String userName) <span class="hljs-punctuation">&#123;</span><br>        this.userName = userName;<br>    <span class="hljs-punctuation">&#125;</span><br><br>    public String getPassword() <span class="hljs-punctuation">&#123;</span><br>        return password;<br>    <span class="hljs-punctuation">&#125;</span><br><br>    public void setPassword(String password) <span class="hljs-punctuation">&#123;</span><br>        this.password = password;<br>    <span class="hljs-punctuation">&#125;</span><br><br>    public Integer getAge() <span class="hljs-punctuation">&#123;</span><br>        return age;<br>    <span class="hljs-punctuation">&#125;</span><br><br>    public void setAge(Integer age) <span class="hljs-punctuation">&#123;</span><br>        this.age = age;<br>    <span class="hljs-punctuation">&#125;</span><br><br>    public LocalDateTime getCreateTime() <span class="hljs-punctuation">&#123;</span><br>        return createTime;<br>    <span class="hljs-punctuation">&#125;</span><br><br>    public void setCreateTime(LocalDateTime createTime) <span class="hljs-punctuation">&#123;</span><br>        this.createTime = createTime;<br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br><br></code></pre></td></tr></table></figure><p>该方法对于的mapperxml查询块如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs json">&lt;select id=<span class="hljs-string">&quot;queryUserById&quot;</span> resultType=<span class="hljs-string">&quot;com.yang.mybatis.test.User&quot;</span>&gt;<br>      select * from user<br>      where id = #<span class="hljs-punctuation">&#123;</span>id<span class="hljs-punctuation">&#125;</span><br>  &lt;/select&gt;<br></code></pre></td></tr></table></figure><p>此时，当我们使用JDBC执行sql，获取ResultSet后，我们可以根据resultType的类型，通过反射的方式，来创建对应的结果，并将属性填充到对象中。<br>首先，我们修改MybatisSqlStatement，添加resultType字段</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs json">package com.yang.mybatis.config;<br><br>import java.io.Serializable;<br><br>public class MybatisSqlStatement implements Serializable <span class="hljs-punctuation">&#123;</span><br>    private String namespace;<br><br>    private String id;<br><br>    private String sql;<br>    <br>    private String resultType;<br><br>    public String getNamespace() <span class="hljs-punctuation">&#123;</span><br>        return namespace;<br>    <span class="hljs-punctuation">&#125;</span><br><br>    public void setNamespace(String namespace) <span class="hljs-punctuation">&#123;</span><br>        this.namespace = namespace;<br>    <span class="hljs-punctuation">&#125;</span><br><br>    public String getId() <span class="hljs-punctuation">&#123;</span><br>        return id;<br>    <span class="hljs-punctuation">&#125;</span><br><br>    public void setId(String id) <span class="hljs-punctuation">&#123;</span><br>        this.id = id;<br>    <span class="hljs-punctuation">&#125;</span><br><br>    public String getSql() <span class="hljs-punctuation">&#123;</span><br>        return sql;<br>    <span class="hljs-punctuation">&#125;</span><br><br>    public void setSql(String sql) <span class="hljs-punctuation">&#123;</span><br>        this.sql = sql;<br>    <span class="hljs-punctuation">&#125;</span><br><br>    public String getResultType() <span class="hljs-punctuation">&#123;</span><br>        return resultType;<br>    <span class="hljs-punctuation">&#125;</span><br><br>    public void setResultType(String resultType) <span class="hljs-punctuation">&#123;</span><br>        this.resultType = resultType;<br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br><br></code></pre></td></tr></table></figure><p>然后修改XmlMybatisMapperParser的parseStatement方法，设置对应的resultType值</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs json">private void parseStatement(List&lt;MybatisSqlStatement&gt; mybatisSqlStatements<span class="hljs-punctuation">,</span> List&lt;Element&gt; elements<span class="hljs-punctuation">,</span> Element root) <span class="hljs-punctuation">&#123;</span><br>        if (elements == <span class="hljs-literal"><span class="hljs-keyword">null</span></span> || elements.isEmpty()) <span class="hljs-punctuation">&#123;</span><br>            return;<br>        <span class="hljs-punctuation">&#125;</span><br>        String namespace = root.attributeValue(<span class="hljs-string">&quot;namespace&quot;</span>);<br>        for (Element element <span class="hljs-punctuation">:</span> elements) <span class="hljs-punctuation">&#123;</span><br>            String id = element.attributeValue(<span class="hljs-string">&quot;id&quot;</span>);<br>            String resultType = element.attributeValue(<span class="hljs-string">&quot;resultType&quot;</span>);<br>            String sql = element.getText().trim();<br><br>            MybatisSqlStatement mybatisSqlStatement = new MybatisSqlStatement();<br>            mybatisSqlStatement.setNamespace(namespace);<br>            mybatisSqlStatement.setId(id);<br>            mybatisSqlStatement.setSql(sql);<br>            mybatisSqlStatement.setResultType(resultType);<br><br>            mybatisSqlStatements.add(mybatisSqlStatement);<br>        <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>最后修改DefaultMybatisSqlSession:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><code class="hljs json">package com.yang.mybatis.session;<br><br>import com.google.common.base.CaseFormat;<br>import com.yang.mybatis.config.MybatisConfiguration;<br>import com.yang.mybatis.config.MybatisEnvironment;<br>import com.yang.mybatis.config.MybatisSqlStatement;<br>import com.yang.mybatis.proxy.MapperProxyFactory;<br><br>import java.lang.reflect.Field;<br>import java.sql.Connection;<br>import java.sql.PreparedStatement;<br>import java.sql.ResultSet;<br>import java.sql.SQLException;<br>import java.util.ArrayList;<br>import java.util.HashMap;<br>import java.util.List;<br>import java.util.Map;<br><br><br>public class DefaultMybatisSqlSession implements IMybatisSqlSession <span class="hljs-punctuation">&#123;</span><br>    private MapperProxyFactory mapperProxyFactory;<br>    private MybatisConfiguration mybatisConfiguration;<br><br>    public DefaultMybatisSqlSession(MapperProxyFactory mapperProxyFactory) <span class="hljs-punctuation">&#123;</span><br>        this.mapperProxyFactory = mapperProxyFactory;<br>        this.mybatisConfiguration = mapperProxyFactory.getMybatisConfiguration();<br>    <span class="hljs-punctuation">&#125;</span><br><br>    @Override<br>    public &lt;T&gt; T execute(String method<span class="hljs-punctuation">,</span> Object parameter) <span class="hljs-punctuation">&#123;</span><br>        Map&lt;String<span class="hljs-punctuation">,</span> MybatisSqlStatement&gt; mapperMethod2SqlStatementsMap = mapperProxyFactory.getMybatisConfiguration().getMapperMethod2SqlStatementsMap();<br>        MybatisSqlStatement mybatisSqlStatement = mapperMethod2SqlStatementsMap.get(method);<br><br><br>        MybatisEnvironment defaultMybatisEnvironment = this.mybatisConfiguration.getDefaultMybatisEnvironment();<br><br>        return new TransactionInvoke&lt;T&gt;() <span class="hljs-punctuation">&#123;</span><br>            @Override<br>            public T execute(Connection connection) throws SQLException <span class="hljs-punctuation">&#123;</span><br>                String rawSql = mybatisSqlStatement.getSql();<br>                List&lt;String&gt; parameterNameList = new ArrayList&lt;&gt;();<br>                String sql = extractRawSql(rawSql<span class="hljs-punctuation">,</span> parameterNameList);<br>                Object<span class="hljs-punctuation">[</span><span class="hljs-punctuation">]</span> parameters = (Object<span class="hljs-punctuation">[</span><span class="hljs-punctuation">]</span>) parameter;<br>                PreparedStatement preparedStatement = connection.prepareStatement(sql);<br>                if (parameterNameList.size() != parameters.length) <span class="hljs-punctuation">&#123;</span><br>                    throw new RuntimeException(<span class="hljs-string">&quot;SQL语句参数个数不匹配====&quot;</span>);<br>                <span class="hljs-punctuation">&#125;</span><br>                int index = <span class="hljs-number">1</span>;<br>                for (Object o <span class="hljs-punctuation">:</span> parameters) <span class="hljs-punctuation">&#123;</span><br>                    preparedStatement.setObject(index ++<span class="hljs-punctuation">,</span> o);<br>                <span class="hljs-punctuation">&#125;</span><br>                ResultSet resultSet = preparedStatement.executeQuery();<br><br>                T result = parseResult(resultSet<span class="hljs-punctuation">,</span> mybatisSqlStatement);<br>                resultSet.close();<br>                return result;<br>            <span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-punctuation">&#125;</span>.invoke(defaultMybatisEnvironment.getMybatisDataSource());<br>    <span class="hljs-punctuation">&#125;</span><br><br>    private &lt;T&gt; T parseResult(ResultSet resultSet<span class="hljs-punctuation">,</span> MybatisSqlStatement mybatisSqlStatement) throws SQLException <span class="hljs-punctuation">&#123;</span><br>        String resultType = mybatisSqlStatement.getResultType();<br>        if (resultType == <span class="hljs-literal"><span class="hljs-keyword">null</span></span> || resultType.isEmpty()) <span class="hljs-punctuation">&#123;</span><br>            return (T) resultSet.getObject(<span class="hljs-number">1</span>);<br>        <span class="hljs-punctuation">&#125;</span><br><br>        try <span class="hljs-punctuation">&#123;</span><br>            Class&lt;?&gt; aClass = Class.forName(resultType);<br>            Field<span class="hljs-punctuation">[</span><span class="hljs-punctuation">]</span> fields = aClass.getDeclaredFields();<br>            Map&lt;String<span class="hljs-punctuation">,</span> String&gt; fieldName2ColumnNameMap = new HashMap&lt;&gt;();<br>            Map&lt;String<span class="hljs-punctuation">,</span> Field&gt; fieldName2FieldMap = new HashMap&lt;&gt;();<br>            for (Field field <span class="hljs-punctuation">:</span> fields) <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-comment">// 驼峰命名转下划线</span><br>                String columnName = CaseFormat.LOWER_CAMEL.to(CaseFormat.LOWER_UNDERSCORE<span class="hljs-punctuation">,</span> field.getName());<br>                fieldName2ColumnNameMap.put(field.getName()<span class="hljs-punctuation">,</span> columnName);<br>                fieldName2FieldMap.put(field.getName()<span class="hljs-punctuation">,</span> field);<br>            <span class="hljs-punctuation">&#125;</span><br><br>            Object result = aClass.newInstance();<br>            while (resultSet.next()) <span class="hljs-punctuation">&#123;</span><br>                for (Map.Entry&lt;String<span class="hljs-punctuation">,</span> String&gt; entry <span class="hljs-punctuation">:</span> fieldName2ColumnNameMap.entrySet()) <span class="hljs-punctuation">&#123;</span><br>                    String fieldName = entry.getKey();<br>                    String columnName = entry.getValue();<br><br>                    Object columnValue = resultSet.getObject(columnName);<br>                    Field field = fieldName2FieldMap.get(fieldName);<br>                    field.setAccessible(<span class="hljs-literal"><span class="hljs-keyword">true</span></span>);<br>                    field.set(result<span class="hljs-punctuation">,</span> columnValue);<br>                <span class="hljs-punctuation">&#125;</span><br>            <span class="hljs-punctuation">&#125;</span><br>            return (T)result;<br>        <span class="hljs-punctuation">&#125;</span> catch (ClassNotFoundException e) <span class="hljs-punctuation">&#123;</span><br>            throw new RuntimeException(e);<br>        <span class="hljs-punctuation">&#125;</span> catch (InstantiationException | IllegalAccessException e) <span class="hljs-punctuation">&#123;</span><br>            throw new RuntimeException(e);<br>        <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br><br>    private String extractRawSql(String rawSql<span class="hljs-punctuation">,</span> List&lt;String&gt; parameterNameList) <span class="hljs-punctuation">&#123;</span><br>        StringBuilder sqlBuilder = new StringBuilder();<br>        int start = <span class="hljs-number">0</span>;<br>        int end = <span class="hljs-number">-1</span>;<br>        while ((end = rawSql.indexOf(<span class="hljs-string">&quot;#&quot;</span><span class="hljs-punctuation">,</span> start)) != <span class="hljs-number">-1</span>) <span class="hljs-punctuation">&#123;</span><br>            sqlBuilder.append(rawSql.substring(start<span class="hljs-punctuation">,</span> end - <span class="hljs-number">1</span>))<br>                    .append(<span class="hljs-string">&quot; ? &quot;</span>);<br>            int parameterStart = end + <span class="hljs-number">2</span>;<br>            int parameterEnd = rawSql.indexOf(<span class="hljs-string">&quot;&#125;&quot;</span><span class="hljs-punctuation">,</span> parameterStart);<br>            parameterNameList.add(rawSql.substring(parameterStart<span class="hljs-punctuation">,</span> parameterEnd));<br>            start = parameterEnd + <span class="hljs-number">1</span>;<br>        <span class="hljs-punctuation">&#125;</span><br>        sqlBuilder.append(rawSql.substring(start));<br><br>        return sqlBuilder.toString();<br>    <span class="hljs-punctuation">&#125;</span><br><br><br>    @Override<br>    public &lt;T&gt; T getMapper(Class&lt;T&gt; type) <span class="hljs-punctuation">&#123;</span><br>        return (T) mapperProxyFactory.newInstance(type<span class="hljs-punctuation">,</span> this);<br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br><br></code></pre></td></tr></table></figure><p>这里将和结果相关的解析，抽取到parseResult方法中，此外，因为数据库是字段是下划线格式，类的属性是驼峰格式，因此，这里引入了Guava依赖，方便使用它的CaseFormat类进行格式转化。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs json">&lt;dependency&gt;<br>          &lt;groupId&gt;com.google.guava&lt;/groupId&gt;<br>          &lt;artifactId&gt;guava&lt;/artifactId&gt;<br>          &lt;version&gt;<span class="hljs-number">31.1</span>-jre&lt;/version&gt;<br>      &lt;/dependency&gt;<br></code></pre></td></tr></table></figure><p>最后，我们添加测试方法，进行测试：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs json">public static void main(String<span class="hljs-punctuation">[</span><span class="hljs-punctuation">]</span> args) <span class="hljs-punctuation">&#123;</span><br>       String configPath = <span class="hljs-string">&quot;mybatis-config.xml&quot;</span>;<br>       IMybatisSqlSessionFactory mybatisSqlSessionFactory = new MybatisSqlSessionFactoryBuilder()<br>               .setMybatisMapperParser(new XmlMybatisMapperParser())<br>               .setMybatisConfigurationParser(new XmlMybatisConfigurationParser())<br>               .setConfigPath(configPath)<br>               .buildSqlSessionFactory();<br><br>       IMybatisSqlSession mybatisSqlSession = mybatisSqlSessionFactory.openSession();<br><br>       IUserMapper userMapper = mybatisSqlSession.getMapper(IUserMapper.class);<br>       User user = userMapper.queryUserById(<span class="hljs-number">1</span>);<br>       System.out.println(user);<br>       System.out.println(user.getId());<br>       System.out.println(user.getUserName());<br>       System.out.println(user.getPassword());<br>       System.out.println(user.getAge());<br>       System.out.println(user.getCreateTime());<br>   <span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>测试结果如下：</p><img src="/2024/05/05/%E6%89%8B%E6%92%B8Mybatis%EF%BC%88%E5%9B%9B%EF%BC%89%E2%80%94%E2%80%94%E8%BF%9E%E6%8E%A5%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9B%E8%A1%8C%E7%AE%80%E5%8D%95%E6%9F%A5%E8%AF%A2/2.png" class=""><h4 id="基于resultMap"><a href="#基于resultMap" class="headerlink" title="基于resultMap"></a>基于resultMap</h4><p>上面的方式，是基于resultType来进行解析的，但是在mybatis中，还有另外一种将sql字段和类对象属性映射的方式，就是resultMap。<br>首先，我们创建一个IdUserNameVO类</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs json">package com.yang.mybatis.test;<br><br>import java.io.Serializable;<br><br>public class IdUserNameVO implements Serializable <span class="hljs-punctuation">&#123;</span><br>    private Integer id;<br><br>    private String userName;<br><br>    public Integer getId() <span class="hljs-punctuation">&#123;</span><br>        return id;<br>    <span class="hljs-punctuation">&#125;</span><br><br>    public void setId(Integer id) <span class="hljs-punctuation">&#123;</span><br>        this.id = id;<br>    <span class="hljs-punctuation">&#125;</span><br><br>    public String getUserName() <span class="hljs-punctuation">&#123;</span><br>        return userName;<br>    <span class="hljs-punctuation">&#125;</span><br><br>    public void setUserName(String userName) <span class="hljs-punctuation">&#123;</span><br>        this.userName = userName;<br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br><br></code></pre></td></tr></table></figure><p>在IUserMapper中，我们添加下列方法：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs json">IdUserNameVO queryIdUserNameVOById(Integer id);<br><br></code></pre></td></tr></table></figure><p>修改UserMapper.xml，加上queryIdUserNameVOById的sql语句和对应的resultMap</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs json">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;<br>&lt;!DOCTYPE mapper<br>        PUBLIC <span class="hljs-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span><br>        <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;<br><br><br>&lt;mapper namespace=<span class="hljs-string">&quot;com.yang.mybatis.test.IUserMapper&quot;</span>&gt;<br>    &lt;resultMap id=<span class="hljs-string">&quot;idUserName&quot;</span> type=<span class="hljs-string">&quot;com.yang.mybatis.test.IdUserNameVO&quot;</span>&gt;<br>        &lt;id property=<span class="hljs-string">&quot;id&quot;</span> column=<span class="hljs-string">&quot;id&quot;</span> javaType=<span class="hljs-string">&quot;Integer&quot;</span> jdbcType=<span class="hljs-string">&quot;int&quot;</span>/&gt;<br>        &lt;result property=<span class="hljs-string">&quot;userName&quot;</span> column=<span class="hljs-string">&quot;user_name&quot;</span> javaType=<span class="hljs-string">&quot;String&quot;</span> jdbcType=<span class="hljs-string">&quot;VARCHAR&quot;</span>/&gt;<br>    &lt;/resultMap&gt;<br><br>    &lt;select id=<span class="hljs-string">&quot;queryUserName&quot;</span>&gt;<br>        select user_name from user where id = #<span class="hljs-punctuation">&#123;</span>id<span class="hljs-punctuation">&#125;</span><br>    &lt;/select&gt;<br>    &lt;select id=<span class="hljs-string">&quot;queryUserAge&quot;</span>&gt;<br>        select age from user where id = #<span class="hljs-punctuation">&#123;</span>id<span class="hljs-punctuation">&#125;</span><br>    &lt;/select&gt;<br>    &lt;select id=<span class="hljs-string">&quot;queryUserById&quot;</span> resultType=<span class="hljs-string">&quot;com.yang.mybatis.test.User&quot;</span>&gt;<br>        select * from user<br>        where id = #<span class="hljs-punctuation">&#123;</span>id<span class="hljs-punctuation">&#125;</span><br>    &lt;/select&gt;<br>    &lt;select id=<span class="hljs-string">&quot;queryIdUserNameVOById&quot;</span> resultMap=<span class="hljs-string">&quot;idUserName&quot;</span>&gt;<br>        select id<span class="hljs-punctuation">,</span> user_name<br>        from user<br>        where id = #<span class="hljs-punctuation">&#123;</span>id<span class="hljs-punctuation">&#125;</span><br>    &lt;/select&gt;<br>&lt;/mapper&gt;<br></code></pre></td></tr></table></figure><p>之前，我们在解析每一个mapper.xml文件时，解析出来的结果，是一个MybatisSqlStatement列表，但是这种方式还不能更好的表达一个mapper.xml中包含的信息，因此，我们修改代码，现在对于每一个mapper.xml文件，解析出来的结果位MybatisMapperXmlConfiguration类，该类定义如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs json">package com.yang.mybatis.config;<br><br>import java.io.Serializable;<br>import java.util.ArrayList;<br>import java.util.HashMap;<br>import java.util.List;<br>import java.util.Map;<br><br>public class MybatisMapperXmlConfiguration implements Serializable <span class="hljs-punctuation">&#123;</span><br>    private String mapperName;<br><br>    private List&lt;MybatisSqlStatement&gt; mybatisSqlStatements = new ArrayList&lt;&gt;();<br><br>    private Map&lt;String<span class="hljs-punctuation">,</span> MybatisResultMap&gt; mybatisResultMaps = new HashMap&lt;&gt;();<br><br><br>    public List&lt;MybatisSqlStatement&gt; getMybatisSqlStatements() <span class="hljs-punctuation">&#123;</span><br>        return mybatisSqlStatements;<br>    <span class="hljs-punctuation">&#125;</span><br><br>    public void setMybatisSqlStatements(List&lt;MybatisSqlStatement&gt; mybatisSqlStatements) <span class="hljs-punctuation">&#123;</span><br>        this.mybatisSqlStatements = mybatisSqlStatements;<br>    <span class="hljs-punctuation">&#125;</span><br><br>    public List&lt;MybatisResultMap&gt; getMybatisResultMaps() <span class="hljs-punctuation">&#123;</span><br>        return new ArrayList&lt;&gt;(mybatisResultMaps.values());<br>    <span class="hljs-punctuation">&#125;</span><br><br><br>    public void addMybatisSqlStatement(MybatisSqlStatement mybatisSqlStatement) <span class="hljs-punctuation">&#123;</span><br>        this.mybatisSqlStatements.add(mybatisSqlStatement);<br>    <span class="hljs-punctuation">&#125;</span><br><br>    public void addMybatisResultMap(MybatisResultMap mybatisResultMap) <span class="hljs-punctuation">&#123;</span><br>        this.mybatisResultMaps.put(mybatisResultMap.getId()<span class="hljs-punctuation">,</span> mybatisResultMap);<br>    <span class="hljs-punctuation">&#125;</span><br><br>    public MybatisResultMap getMybatisResultMap(String id) <span class="hljs-punctuation">&#123;</span><br>        return this.mybatisResultMaps.get(id);<br>    <span class="hljs-punctuation">&#125;</span><br><br>    public String getMapperName() <span class="hljs-punctuation">&#123;</span><br>        return mapperName;<br>    <span class="hljs-punctuation">&#125;</span><br><br>    public void setMapperName(String mapperName) <span class="hljs-punctuation">&#123;</span><br>        this.mapperName = mapperName;<br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br><br></code></pre></td></tr></table></figure><p>MybatisResultMap的定义如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs json">package com.yang.mybatis.config;<br><br>import java.io.Serializable;<br>import java.util.ArrayList;<br>import java.util.List;<br><br>public class MybatisResultMap implements Serializable <span class="hljs-punctuation">&#123;</span><br>    private String id;<br>    private String type;<br>    private MybatisResultMapProperty idProperty;<br><br>    private List&lt;MybatisResultMapProperty&gt; properties = new ArrayList&lt;&gt;();<br><br>    public void addMybatisResultMapProperty(MybatisResultMapProperty mybatisResultMapProperty) <span class="hljs-punctuation">&#123;</span><br>        this.properties.add(mybatisResultMapProperty);<br>    <span class="hljs-punctuation">&#125;</span><br><br>    public String getId() <span class="hljs-punctuation">&#123;</span><br>        return id;<br>    <span class="hljs-punctuation">&#125;</span><br><br>    public void setId(String id) <span class="hljs-punctuation">&#123;</span><br>        this.id = id;<br>    <span class="hljs-punctuation">&#125;</span><br><br>    public String getType() <span class="hljs-punctuation">&#123;</span><br>        return type;<br>    <span class="hljs-punctuation">&#125;</span><br><br>    public void setType(String type) <span class="hljs-punctuation">&#123;</span><br>        this.type = type;<br>    <span class="hljs-punctuation">&#125;</span><br><br>    public MybatisResultMapProperty getIdProperty() <span class="hljs-punctuation">&#123;</span><br>        return idProperty;<br>    <span class="hljs-punctuation">&#125;</span><br><br>    public void setIdProperty(MybatisResultMapProperty idProperty) <span class="hljs-punctuation">&#123;</span><br>        this.idProperty = idProperty;<br>    <span class="hljs-punctuation">&#125;</span><br><br>    public List&lt;MybatisResultMapProperty&gt; getProperties() <span class="hljs-punctuation">&#123;</span><br>        return this.properties;<br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br><br></code></pre></td></tr></table></figure><p>MybatisResultMapProperty类定义如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs json">package com.yang.mybatis.config;<br><br>import java.io.Serializable;<br><br>public class MybatisResultMapProperty implements Serializable <span class="hljs-punctuation">&#123;</span><br>    private String property;<br><br>    private String column;<br><br>    private String javaType;<br><br>    private String jdbcType;<br><br>   ... 省略getter和setter<br><span class="hljs-punctuation">&#125;</span><br><br></code></pre></td></tr></table></figure><p>我们修改IMybatisMapperParser接口：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs json">package com.yang.mybatis.config.parser;<br><br>import com.yang.mybatis.config.MybatisMapperXmlConfiguration;<br><br>public interface IMybatisMapperParser <span class="hljs-punctuation">&#123;</span><br>    MybatisMapperXmlConfiguration parseMapper(String path);<br><span class="hljs-punctuation">&#125;</span><br><br></code></pre></td></tr></table></figure><p>修改MybatisStatement，加上resultMap属性：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs json">package com.yang.mybatis.config;<br><br>import java.io.Serializable;<br><br>public class MybatisSqlStatement implements Serializable <span class="hljs-punctuation">&#123;</span><br>    private String namespace;<br><br>    private String id;<br><br>    private String sql;<br><br>    private String resultType;<br><br>    private String resultMap;<br><br>    public String getNamespace() <span class="hljs-punctuation">&#123;</span><br>        return namespace;<br>    <span class="hljs-punctuation">&#125;</span><br><br>    public void setNamespace(String namespace) <span class="hljs-punctuation">&#123;</span><br>        this.namespace = namespace;<br>    <span class="hljs-punctuation">&#125;</span><br><br>    public String getId() <span class="hljs-punctuation">&#123;</span><br>        return id;<br>    <span class="hljs-punctuation">&#125;</span><br><br>    public void setId(String id) <span class="hljs-punctuation">&#123;</span><br>        this.id = id;<br>    <span class="hljs-punctuation">&#125;</span><br><br>    public String getSql() <span class="hljs-punctuation">&#123;</span><br>        return sql;<br>    <span class="hljs-punctuation">&#125;</span><br><br>    public void setSql(String sql) <span class="hljs-punctuation">&#123;</span><br>        this.sql = sql;<br>    <span class="hljs-punctuation">&#125;</span><br><br>    public String getResultType() <span class="hljs-punctuation">&#123;</span><br>        return resultType;<br>    <span class="hljs-punctuation">&#125;</span><br><br>    public void setResultType(String resultType) <span class="hljs-punctuation">&#123;</span><br>        this.resultType = resultType;<br>    <span class="hljs-punctuation">&#125;</span><br><br>    public String getResultMap() <span class="hljs-punctuation">&#123;</span><br>        return resultMap;<br>    <span class="hljs-punctuation">&#125;</span><br><br>    public void setResultMap(String resultMap) <span class="hljs-punctuation">&#123;</span><br>        this.resultMap = resultMap;<br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br><br></code></pre></td></tr></table></figure><p>修改其IMybatisMapperParser具体实现：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></td><td class="code"><pre><code class="hljs json">package com.yang.mybatis.config.parser;<br><br>import com.yang.mybatis.config.MybatisMapperXmlConfiguration;<br>import com.yang.mybatis.config.MybatisResultMap;<br>import com.yang.mybatis.config.MybatisResultMapProperty;<br>import com.yang.mybatis.config.MybatisSqlStatement;<br>import org.dom4j.Document;<br>import org.dom4j.DocumentException;<br>import org.dom4j.Element;<br>import org.dom4j.io.SAXReader;<br><br>import java.io.InputStream;<br>import java.util.HashSet;<br>import java.util.List;<br>import java.util.Set;<br><br>public class XmlMybatisMapperParser implements IMybatisMapperParser <span class="hljs-punctuation">&#123;</span><br>    private final static Set&lt;String&gt; tagSet = new HashSet&lt;&gt;();<br><br>    private final static Set&lt;String&gt; resultMapTagSet = new HashSet&lt;&gt;();<br><br>    static <span class="hljs-punctuation">&#123;</span><br>        tagSet.add(<span class="hljs-string">&quot;select&quot;</span>);<br>        tagSet.add(<span class="hljs-string">&quot;insert&quot;</span>);<br>        tagSet.add(<span class="hljs-string">&quot;update&quot;</span>);<br>        tagSet.add(<span class="hljs-string">&quot;delete&quot;</span>);<br>        tagSet.add(<span class="hljs-string">&quot;SELECT&quot;</span>);<br>        tagSet.add(<span class="hljs-string">&quot;INSERT&quot;</span>);<br>        tagSet.add(<span class="hljs-string">&quot;UPDATE&quot;</span>);<br>        tagSet.add(<span class="hljs-string">&quot;DELETE&quot;</span>);<br><br>        resultMapTagSet.add(<span class="hljs-string">&quot;resultMap&quot;</span>);<br>        resultMapTagSet.add(<span class="hljs-string">&quot;ResultMap&quot;</span>);<br>    <span class="hljs-punctuation">&#125;</span><br>    @Override<br>    public MybatisMapperXmlConfiguration parseMapper(String path) <span class="hljs-punctuation">&#123;</span><br>        MybatisMapperXmlConfiguration mybatisMapperXmlConfiguration = new MybatisMapperXmlConfiguration();<br>        try <span class="hljs-punctuation">&#123;</span><br>            InputStream inputStream = this.getClass().getClassLoader().getResourceAsStream(path);<br>            SAXReader saxReader = new SAXReader();<br>            Document document = saxReader.read(inputStream);<br>            Element root = document.getRootElement();<br><br>            parseMapperName(mybatisMapperXmlConfiguration<span class="hljs-punctuation">,</span> root);<br>            for (String tag <span class="hljs-punctuation">:</span> tagSet) <span class="hljs-punctuation">&#123;</span><br>                List&lt;Element&gt; elements = root.elements(tag);<br>                parseStatement(mybatisMapperXmlConfiguration<span class="hljs-punctuation">,</span> elements);<br>            <span class="hljs-punctuation">&#125;</span><br>            for (String tag<span class="hljs-punctuation">:</span> resultMapTagSet) <span class="hljs-punctuation">&#123;</span><br>                List&lt;Element&gt; elements = root.elements(tag);<br>                parseResultMap(mybatisMapperXmlConfiguration<span class="hljs-punctuation">,</span> elements);<br>            <span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-punctuation">&#125;</span> catch (DocumentException e) <span class="hljs-punctuation">&#123;</span><br>            e.printStackTrace();<br>        <span class="hljs-punctuation">&#125;</span><br>        return mybatisMapperXmlConfiguration;<br>    <span class="hljs-punctuation">&#125;</span><br><br>    private void parseMapperName(MybatisMapperXmlConfiguration mybatisMapperXmlConfiguration<span class="hljs-punctuation">,</span> Element root) <span class="hljs-punctuation">&#123;</span><br>        String mapperName = root.attributeValue(<span class="hljs-string">&quot;namespace&quot;</span>);<br>        mybatisMapperXmlConfiguration.setMapperName(mapperName);<br><br>    <span class="hljs-punctuation">&#125;</span><br><br>    private void parseResultMap(MybatisMapperXmlConfiguration mybatisMapperXmlConfiguration<span class="hljs-punctuation">,</span> List&lt;Element&gt; elements) <span class="hljs-punctuation">&#123;</span><br>        if (elements == <span class="hljs-literal"><span class="hljs-keyword">null</span></span> || elements.isEmpty()) <span class="hljs-punctuation">&#123;</span><br>            return;<br>        <span class="hljs-punctuation">&#125;</span><br>        for (Element element <span class="hljs-punctuation">:</span> elements) <span class="hljs-punctuation">&#123;</span><br>            String id = element.attributeValue(<span class="hljs-string">&quot;id&quot;</span>);<br>            String type = element.attributeValue(<span class="hljs-string">&quot;type&quot;</span>);<br><br>            MybatisResultMap mybatisResultMap = new MybatisResultMap();<br>            mybatisResultMap.setId(id);<br>            mybatisResultMap.setType(type);<br><br>            Element idElement = element.element(<span class="hljs-string">&quot;id&quot;</span>);<br>            if (idElement != <span class="hljs-literal"><span class="hljs-keyword">null</span></span>) <span class="hljs-punctuation">&#123;</span><br>                MybatisResultMapProperty mybatisResultMapProperty = buildMybatisResultMapProperty(idElement);<br>                mybatisResultMap.addMybatisResultMapProperty(mybatisResultMapProperty);<br>                mybatisResultMap.setIdProperty(mybatisResultMapProperty);<br>            <span class="hljs-punctuation">&#125;</span><br><br>            List&lt;Element&gt; resultList = element.elements(<span class="hljs-string">&quot;result&quot;</span>);<br>            for (Element resultElement <span class="hljs-punctuation">:</span> resultList) <span class="hljs-punctuation">&#123;</span><br>                MybatisResultMapProperty mybatisResultMapProperty = buildMybatisResultMapProperty(resultElement);<br>                mybatisResultMap.addMybatisResultMapProperty(mybatisResultMapProperty);<br>            <span class="hljs-punctuation">&#125;</span><br><br>            mybatisMapperXmlConfiguration.addMybatisResultMap(mybatisResultMap);<br>        <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br><br>    private MybatisResultMapProperty buildMybatisResultMapProperty(Element element) <span class="hljs-punctuation">&#123;</span><br>        MybatisResultMapProperty mybatisResultMapProperty = new MybatisResultMapProperty();<br>        String property = element.attributeValue(<span class="hljs-string">&quot;property&quot;</span>);<br>        String column = element.attributeValue(<span class="hljs-string">&quot;column&quot;</span>);<br>        String javaType = element.attributeValue(<span class="hljs-string">&quot;javaType&quot;</span>);<br>        String jdbcType = element.attributeValue(<span class="hljs-string">&quot;jdbcType&quot;</span>);<br>        mybatisResultMapProperty.setProperty(property);<br>        mybatisResultMapProperty.setColumn(column);<br>        mybatisResultMapProperty.setJavaType(javaType);<br>        mybatisResultMapProperty.setJdbcType(jdbcType);<br>        return mybatisResultMapProperty;<br>    <span class="hljs-punctuation">&#125;</span><br><br>    private void parseStatement(MybatisMapperXmlConfiguration mybatisMapperXmlConfiguration<span class="hljs-punctuation">,</span> List&lt;Element&gt; elements) <span class="hljs-punctuation">&#123;</span><br>        if (elements == <span class="hljs-literal"><span class="hljs-keyword">null</span></span> || elements.isEmpty()) <span class="hljs-punctuation">&#123;</span><br>            return;<br>        <span class="hljs-punctuation">&#125;</span><br>        String namespace = mybatisMapperXmlConfiguration.getMapperName();<br>        for (Element element <span class="hljs-punctuation">:</span> elements) <span class="hljs-punctuation">&#123;</span><br>            String id = element.attributeValue(<span class="hljs-string">&quot;id&quot;</span>);<br>            String resultType = element.attributeValue(<span class="hljs-string">&quot;resultType&quot;</span>);<br>            String resultMap = element.attributeValue(<span class="hljs-string">&quot;resultMap&quot;</span>);<br>            String sql = element.getText().trim();<br><br>            MybatisSqlStatement mybatisSqlStatement = new MybatisSqlStatement();<br>            mybatisSqlStatement.setNamespace(namespace);<br>            mybatisSqlStatement.setId(id);<br>            mybatisSqlStatement.setSql(sql);<br>            mybatisSqlStatement.setResultType(resultType);<br>            mybatisSqlStatement.setResultMap(resultMap);<br><br>            mybatisMapperXmlConfiguration.addMybatisSqlStatement(mybatisSqlStatement);<br>        <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br><br></code></pre></td></tr></table></figure><p>修改MybatisSqlSessionFactoryBuilder类：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs json">package com.yang.mybatis.session;<br><br>import com.yang.mybatis.config.MybatisConfiguration;<br>import com.yang.mybatis.config.MybatisMapperXmlConfiguration;<br>import com.yang.mybatis.config.MybatisSqlStatement;<br>import com.yang.mybatis.config.parser.IMybatisConfigurationParser;<br>import com.yang.mybatis.config.parser.IMybatisMapperParser;<br>import com.yang.mybatis.mapper.MapperProxyFactory;<br><br>import java.util.List;<br><br>public class MybatisSqlSessionFactoryBuilder <span class="hljs-punctuation">&#123;</span><br>    private IMybatisConfigurationParser mybatisConfigurationParser;<br><br>    private IMybatisMapperParser mybatisMapperParser;<br><br>    private String configPath;<br><br>    public MybatisSqlSessionFactory buildSqlSessionFactory() <span class="hljs-punctuation">&#123;</span><br>        if (configPath == <span class="hljs-literal"><span class="hljs-keyword">null</span></span> || configPath.isEmpty()) <span class="hljs-punctuation">&#123;</span><br>            throw new RuntimeException(<span class="hljs-string">&quot;配置文件路径不合法==========&quot;</span>);<br>        <span class="hljs-punctuation">&#125;</span><br>        if (this.mybatisMapperParser == <span class="hljs-literal"><span class="hljs-keyword">null</span></span> || this.mybatisConfigurationParser == <span class="hljs-literal"><span class="hljs-keyword">null</span></span>) <span class="hljs-punctuation">&#123;</span><br>            throw new RuntimeException(<span class="hljs-string">&quot;缺少解析器=======&quot;</span>);<br>        <span class="hljs-punctuation">&#125;</span><br>        MybatisConfiguration mybatisConfiguration = mybatisConfigurationParser.parser(configPath);<br>        List&lt;String&gt; mapperPaths = mybatisConfiguration.getMapperPaths();<br>        for (String mapperPath <span class="hljs-punctuation">:</span> mapperPaths) <span class="hljs-punctuation">&#123;</span><br>            MybatisMapperXmlConfiguration mybatisMapperXmlConfiguration = this.mybatisMapperParser.parseMapper(mapperPath);<br>            List&lt;MybatisSqlStatement&gt; mybatisSqlStatements = mybatisMapperXmlConfiguration.getMybatisSqlStatements();<br>            for (MybatisSqlStatement mybatisSqlStatement <span class="hljs-punctuation">:</span> mybatisSqlStatements) <span class="hljs-punctuation">&#123;</span><br>                String mapperMethod = mybatisSqlStatement.getNamespace() + <span class="hljs-string">&quot;.&quot;</span> + mybatisSqlStatement.getId();<br>                mybatisConfiguration.putMapperMethod2MybatisSqlStatement(mapperMethod<span class="hljs-punctuation">,</span> mybatisSqlStatement);<br>            <span class="hljs-punctuation">&#125;</span><br>            mybatisConfiguration.putMapperXmlConfiguration(mybatisMapperXmlConfiguration.getMapperName()<span class="hljs-punctuation">,</span> mybatisMapperXmlConfiguration);<br>        <span class="hljs-punctuation">&#125;</span><br><br>        MapperProxyFactory mapperProxyFactory = new MapperProxyFactory(mybatisConfiguration);<br>        return new DefaultMybatisSqlSessionFactory(mapperProxyFactory);<br>    <span class="hljs-punctuation">&#125;</span><br><br>    public MybatisSqlSessionFactoryBuilder setConfigPath(String configPath) <span class="hljs-punctuation">&#123;</span><br>        this.configPath = configPath;<br>        return this;<br>    <span class="hljs-punctuation">&#125;</span><br><br>    public MybatisSqlSessionFactoryBuilder setMybatisConfigurationParser(IMybatisConfigurationParser iMybatisConfigurationParser) <span class="hljs-punctuation">&#123;</span><br>        this.mybatisConfigurationParser = iMybatisConfigurationParser;<br>        return this;<br>    <span class="hljs-punctuation">&#125;</span><br><br>    public MybatisSqlSessionFactoryBuilder setMybatisMapperParser(IMybatisMapperParser iMybatisMapperParser) <span class="hljs-punctuation">&#123;</span><br>        this.mybatisMapperParser = iMybatisMapperParser;<br>        return this;<br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br><br></code></pre></td></tr></table></figure><p>之前对于结果的解析，我们都是在DefaultMybatisSqlSession类中进行的，但是现在我们发现，结果的类型逐渐变得多样性了，如果都放在DefaultMybatisSqlSession类中，会使这个类十分庞大，因此，我们将解析结果的职责， 提取到IMybatisResultParser类中，首先定义该接口：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs json">package com.yang.mybatis.execute;<br><br>import com.yang.mybatis.execute.request.MybatisResultParserRequest;<br><br>import java.sql.SQLException;<br><br>public interface IMybatisResultParser <span class="hljs-punctuation">&#123;</span><br>    final static int ONE_COLUMNE = <span class="hljs-number">0</span>;<br>    final static int RESULT_TYPE = <span class="hljs-number">1</span>;<br>    final static int RESULT_MAP = <span class="hljs-number">2</span>;<br><br>    &lt;T&gt; T parseResult(MybatisResultParserRequest mybatisResultParserRequest) throws SQLException;<br><span class="hljs-punctuation">&#125;</span><br><br></code></pre></td></tr></table></figure><p>MybatisResultParserRequest:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs json">package com.yang.mybatis.execute.request;<br><br>import com.yang.mybatis.config.MybatisMapperXmlConfiguration;<br>import com.yang.mybatis.config.MybatisSqlStatement;<br><br>import java.io.Serializable;<br>import java.sql.ResultSet;<br><br>public class MybatisResultParserRequest implements Serializable <span class="hljs-punctuation">&#123;</span><br>    private ResultSet resultSet;<br>    private MybatisSqlStatement mybatisSqlStatement;<br>    private MybatisMapperXmlConfiguration mybatisMapperXmlConfiguration;<br><br>    public MybatisResultParserRequest() <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-punctuation">&#125;</span><br><br><br>    public ResultSet getResultSet() <span class="hljs-punctuation">&#123;</span><br>        return resultSet;<br>    <span class="hljs-punctuation">&#125;</span><br><br>    public void setResultSet(ResultSet resultSet) <span class="hljs-punctuation">&#123;</span><br>        this.resultSet = resultSet;<br>    <span class="hljs-punctuation">&#125;</span><br><br>    public MybatisSqlStatement getMybatisSqlStatement() <span class="hljs-punctuation">&#123;</span><br>        return mybatisSqlStatement;<br>    <span class="hljs-punctuation">&#125;</span><br><br>    public void setMybatisSqlStatement(MybatisSqlStatement mybatisSqlStatement) <span class="hljs-punctuation">&#123;</span><br>        this.mybatisSqlStatement = mybatisSqlStatement;<br>    <span class="hljs-punctuation">&#125;</span><br><br>    public MybatisMapperXmlConfiguration getMybatisMapperXmlConfiguration() <span class="hljs-punctuation">&#123;</span><br>        return mybatisMapperXmlConfiguration;<br>    <span class="hljs-punctuation">&#125;</span><br><br>    public void setMybatisMapperXmlConfiguration(MybatisMapperXmlConfiguration mybatisMapperXmlConfiguration) <span class="hljs-punctuation">&#123;</span><br>        this.mybatisMapperXmlConfiguration = mybatisMapperXmlConfiguration;<br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br><br></code></pre></td></tr></table></figure><p>然后定义其具体实现：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><code class="hljs json">package com.yang.mybatis.execute;<br><br>import com.google.common.base.CaseFormat;<br>import com.yang.mybatis.config.MybatisMapperXmlConfiguration;<br>import com.yang.mybatis.config.MybatisResultMap;<br>import com.yang.mybatis.config.MybatisResultMapProperty;<br>import com.yang.mybatis.config.MybatisSqlStatement;<br>import com.yang.mybatis.execute.request.MybatisResultParserRequest;<br>import org.apache.commons.lang3.StringUtils;<br><br>import java.lang.reflect.Field;<br>import java.sql.ResultSet;<br>import java.sql.SQLException;<br>import java.util.HashMap;<br>import java.util.Map;<br>import java.util.stream.Collectors;<br><br>public class DefaultMybatisResultParser implements IMybatisResultParser <span class="hljs-punctuation">&#123;</span><br>    @Override<br>    public &lt;T&gt; T parseResult(MybatisResultParserRequest mybatisResultParserRequest) throws SQLException <span class="hljs-punctuation">&#123;</span><br>        ResultSet resultSet = mybatisResultParserRequest.getResultSet();<br>        if (resultSet == <span class="hljs-literal"><span class="hljs-keyword">null</span></span>) <span class="hljs-punctuation">&#123;</span><br>            return <span class="hljs-literal"><span class="hljs-keyword">null</span></span>;<br>        <span class="hljs-punctuation">&#125;</span><br>        MybatisSqlStatement mybatisSqlStatement = mybatisResultParserRequest.getMybatisSqlStatement();<br>        MybatisMapperXmlConfiguration mybatisMapperXmlConfiguration = mybatisResultParserRequest.getMybatisMapperXmlConfiguration();<br>        int resultTypeCode = parseResultTypeCode(mybatisSqlStatement);<br>        switch (resultTypeCode) <span class="hljs-punctuation">&#123;</span><br>            case ONE_COLUMNE<span class="hljs-punctuation">:</span><br>                return parseResultOfOneColumn(resultSet<span class="hljs-punctuation">,</span> mybatisSqlStatement);<br>            case RESULT_TYPE<span class="hljs-punctuation">:</span><br>                return parseResultOfResultType(resultSet<span class="hljs-punctuation">,</span> mybatisSqlStatement);<br>        <span class="hljs-punctuation">&#125;</span><br>        return parseResultOfResultMap(resultSet<span class="hljs-punctuation">,</span> mybatisSqlStatement<span class="hljs-punctuation">,</span> mybatisMapperXmlConfiguration);<br>    <span class="hljs-punctuation">&#125;</span><br><br>    private &lt;T&gt; T parseResultOfResultMap(ResultSet resultSet<span class="hljs-punctuation">,</span> MybatisSqlStatement mybatisSqlStatement<span class="hljs-punctuation">,</span><br>                                         MybatisMapperXmlConfiguration mybatisMapperXmlConfiguration) throws SQLException <span class="hljs-punctuation">&#123;</span><br>        String resultMap = mybatisSqlStatement.getResultMap();<br><br>        MybatisResultMap mybatisResultMap = mybatisMapperXmlConfiguration.getMybatisResultMap(resultMap);<br><br>        String classType = mybatisResultMap.getType();<br>        Map&lt;String<span class="hljs-punctuation">,</span> String&gt; fieldName2ColumnNameMap = mybatisResultMap.getProperties()<br>                .stream()<br>                .collect(Collectors.toMap(MybatisResultMapProperty<span class="hljs-punctuation">:</span><span class="hljs-punctuation">:</span>getProperty<span class="hljs-punctuation">,</span> MybatisResultMapProperty<span class="hljs-punctuation">:</span><span class="hljs-punctuation">:</span>getColumn));<br><br>        return parseResultOfClassAndFields(resultSet<span class="hljs-punctuation">,</span> classType<span class="hljs-punctuation">,</span> fieldName2ColumnNameMap);<br>    <span class="hljs-punctuation">&#125;</span><br><br>    private &lt;T&gt; T parseResultOfResultType(ResultSet resultSet<span class="hljs-punctuation">,</span> MybatisSqlStatement mybatisSqlStatement) throws SQLException <span class="hljs-punctuation">&#123;</span><br>        String resultType = mybatisSqlStatement.getResultType();<br><br>        try <span class="hljs-punctuation">&#123;</span><br>            Class&lt;?&gt; aClass = Class.forName(resultType);<br>            Field<span class="hljs-punctuation">[</span><span class="hljs-punctuation">]</span> fields = aClass.getDeclaredFields();<br>            Map&lt;String<span class="hljs-punctuation">,</span> String&gt; fieldName2ColumnNameMap = new HashMap&lt;&gt;();<br>            for (Field field <span class="hljs-punctuation">:</span> fields) <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-comment">// 驼峰命名转下划线</span><br>                String columnName = CaseFormat.LOWER_CAMEL.to(CaseFormat.LOWER_UNDERSCORE<span class="hljs-punctuation">,</span> field.getName());<br>                fieldName2ColumnNameMap.put(field.getName()<span class="hljs-punctuation">,</span> columnName);<br>            <span class="hljs-punctuation">&#125;</span><br><br>            return parseResultOfClassAndFields(resultSet<span class="hljs-punctuation">,</span> resultType<span class="hljs-punctuation">,</span> fieldName2ColumnNameMap);<br>        <span class="hljs-punctuation">&#125;</span> catch (ClassNotFoundException e) <span class="hljs-punctuation">&#123;</span><br>            throw new RuntimeException(e);<br>        <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br><br>    private &lt;T&gt; T parseResultOfClassAndFields(ResultSet resultSet<span class="hljs-punctuation">,</span> String classType<span class="hljs-punctuation">,</span> Map&lt;String<span class="hljs-punctuation">,</span> String&gt; fieldName2ColumnNameMap ) throws SQLException <span class="hljs-punctuation">&#123;</span><br>        try <span class="hljs-punctuation">&#123;</span><br>            Class&lt;?&gt; aClass = Class.forName(classType);<br>            Field<span class="hljs-punctuation">[</span><span class="hljs-punctuation">]</span> fields = aClass.getDeclaredFields();<br><br>            Map&lt;String<span class="hljs-punctuation">,</span> Field&gt; fieldName2FieldMap = new HashMap&lt;&gt;();<br>            for (Field field <span class="hljs-punctuation">:</span> fields) <span class="hljs-punctuation">&#123;</span><br>                fieldName2FieldMap.put(field.getName()<span class="hljs-punctuation">,</span> field);<br>            <span class="hljs-punctuation">&#125;</span><br><br>            Object result = aClass.newInstance();<br>            while (resultSet.next()) <span class="hljs-punctuation">&#123;</span><br>                for (Map.Entry&lt;String<span class="hljs-punctuation">,</span> String&gt; entry <span class="hljs-punctuation">:</span> fieldName2ColumnNameMap.entrySet()) <span class="hljs-punctuation">&#123;</span><br>                    String fieldName = entry.getKey();<br>                    String columnName = entry.getValue();<br><br>                    Object columnValue = resultSet.getObject(columnName);<br>                    Field field = fieldName2FieldMap.get(fieldName);<br>                    field.setAccessible(<span class="hljs-literal"><span class="hljs-keyword">true</span></span>);<br>                    field.set(result<span class="hljs-punctuation">,</span> columnValue);<br>                <span class="hljs-punctuation">&#125;</span><br>            <span class="hljs-punctuation">&#125;</span><br>            return (T)result;<br>        <span class="hljs-punctuation">&#125;</span> catch (ClassNotFoundException | InstantiationException | IllegalAccessException e) <span class="hljs-punctuation">&#123;</span><br>            throw new RuntimeException(e);<br>        <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br><br>    private &lt;T&gt; T parseResultOfOneColumn(ResultSet resultSet<span class="hljs-punctuation">,</span> MybatisSqlStatement mybatisSqlStatement) throws SQLException <span class="hljs-punctuation">&#123;</span><br>        return (T) resultSet.getObject(<span class="hljs-number">1</span>);<br>    <span class="hljs-punctuation">&#125;</span><br><br>    private int parseResultTypeCode(MybatisSqlStatement mybatisSqlStatement) <span class="hljs-punctuation">&#123;</span><br>        String resultType = mybatisSqlStatement.getResultType();<br>        String resultMap = mybatisSqlStatement.getResultMap();<br>        if (StringUtils.isEmpty(resultType) &amp;&amp; StringUtils.isEmpty(resultMap)) <span class="hljs-punctuation">&#123;</span><br>            return ONE_COLUMNE;<br>        <span class="hljs-punctuation">&#125;</span><br>        if (StringUtils.isNotEmpty(resultType) &amp;&amp; StringUtils.isNotEmpty(resultMap)) <span class="hljs-punctuation">&#123;</span><br>            throw new RuntimeException(<span class="hljs-string">&quot;resultType和resultMap不能同时存在&quot;</span>);<br>        <span class="hljs-punctuation">&#125;</span><br>        if (StringUtils.isNotEmpty(resultType)) <span class="hljs-punctuation">&#123;</span><br>            return RESULT_TYPE;<br>        <span class="hljs-punctuation">&#125;</span><br>        return RESULT_MAP;<br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br><br></code></pre></td></tr></table></figure><p>最后，我们修改DefaultMybatisSqlSession类：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><code class="hljs json">package com.yang.mybatis.session;<br><br>import com.yang.mybatis.config.MybatisConfiguration;<br>import com.yang.mybatis.config.MybatisEnvironment;<br>import com.yang.mybatis.config.MybatisMapperXmlConfiguration;<br>import com.yang.mybatis.config.MybatisSqlStatement;<br>import com.yang.mybatis.execute.DefaultMybatisResultParser;<br>import com.yang.mybatis.execute.IMybatisResultParser;<br>import com.yang.mybatis.execute.request.MybatisResultParserRequest;<br>import com.yang.mybatis.proxy.MapperProxyFactory;<br><br>import java.sql.Connection;<br>import java.sql.PreparedStatement;<br>import java.sql.ResultSet;<br>import java.sql.SQLException;<br>import java.util.ArrayList;<br>import java.util.List;<br>import java.util.Map;<br><br><br>public class DefaultMybatisSqlSession implements IMybatisSqlSession <span class="hljs-punctuation">&#123;</span><br>    private MapperProxyFactory mapperProxyFactory;<br>    private MybatisConfiguration mybatisConfiguration;<br><br>    private IMybatisResultParser iMybatisResultParser = new DefaultMybatisResultParser();<br><br>    public DefaultMybatisSqlSession(MapperProxyFactory mapperProxyFactory) <span class="hljs-punctuation">&#123;</span><br>        this.mapperProxyFactory = mapperProxyFactory;<br>        this.mybatisConfiguration = mapperProxyFactory.getMybatisConfiguration();<br>    <span class="hljs-punctuation">&#125;</span><br><br>    @Override<br>    public &lt;T&gt; T execute(String method<span class="hljs-punctuation">,</span> Object parameter) <span class="hljs-punctuation">&#123;</span><br>        Map&lt;String<span class="hljs-punctuation">,</span> MybatisSqlStatement&gt; mapperMethod2SqlStatementsMap = mapperProxyFactory.getMybatisConfiguration().getMapperMethod2SqlStatementsMap();<br>        MybatisSqlStatement mybatisSqlStatement = mapperMethod2SqlStatementsMap.get(method);<br><br><br>        MybatisEnvironment defaultMybatisEnvironment = this.mybatisConfiguration.getDefaultMybatisEnvironment();<br><br>        return new TransactionInvoke&lt;T&gt;() <span class="hljs-punctuation">&#123;</span><br>            @Override<br>            public T execute(Connection connection) throws SQLException <span class="hljs-punctuation">&#123;</span><br>                String rawSql = mybatisSqlStatement.getSql();<br>                List&lt;String&gt; parameterNameList = new ArrayList&lt;&gt;();<br>                String sql = extractRawSql(rawSql<span class="hljs-punctuation">,</span> parameterNameList);<br>                Object<span class="hljs-punctuation">[</span><span class="hljs-punctuation">]</span> parameters = (Object<span class="hljs-punctuation">[</span><span class="hljs-punctuation">]</span>) parameter;<br>                PreparedStatement preparedStatement = connection.prepareStatement(sql);<br>                if (parameterNameList.size() != parameters.length) <span class="hljs-punctuation">&#123;</span><br>                    throw new RuntimeException(<span class="hljs-string">&quot;SQL语句参数个数不匹配====&quot;</span>);<br>                <span class="hljs-punctuation">&#125;</span><br>                int index = <span class="hljs-number">1</span>;<br>                for (Object o <span class="hljs-punctuation">:</span> parameters) <span class="hljs-punctuation">&#123;</span><br>                    preparedStatement.setObject(index ++<span class="hljs-punctuation">,</span> o);<br>                <span class="hljs-punctuation">&#125;</span><br>                ResultSet resultSet = preparedStatement.executeQuery();<br><br>                String mapperName = mybatisSqlStatement.getNamespace();<br>                MybatisMapperXmlConfiguration mybatisMapperXmlConfiguration = mybatisConfiguration.getMybatisMapperXmlConfiguration(mapperName);<br><br>                MybatisResultParserRequest mybatisResultParserRequest = new MybatisResultParserRequest();<br>                mybatisResultParserRequest.setResultSet(resultSet);<br>                mybatisResultParserRequest.setMybatisSqlStatement(mybatisSqlStatement);<br>                mybatisResultParserRequest.setMybatisMapperXmlConfiguration(mybatisMapperXmlConfiguration);<br>                T result = iMybatisResultParser.parseResult(mybatisResultParserRequest);<br>                resultSet.close();<br>                return result;<br>            <span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-punctuation">&#125;</span>.invoke(defaultMybatisEnvironment.getMybatisDataSource());<br>    <span class="hljs-punctuation">&#125;</span><br><br>    private String extractRawSql(String rawSql<span class="hljs-punctuation">,</span> List&lt;String&gt; parameterNameList) <span class="hljs-punctuation">&#123;</span><br>        StringBuilder sqlBuilder = new StringBuilder();<br>        int start = <span class="hljs-number">0</span>;<br>        int end = <span class="hljs-number">-1</span>;<br>        while ((end = rawSql.indexOf(<span class="hljs-string">&quot;#&quot;</span><span class="hljs-punctuation">,</span> start)) != <span class="hljs-number">-1</span>) <span class="hljs-punctuation">&#123;</span><br>            sqlBuilder.append(rawSql.substring(start<span class="hljs-punctuation">,</span> end - <span class="hljs-number">1</span>))<br>                    .append(<span class="hljs-string">&quot; ? &quot;</span>);<br>            int parameterStart = end + <span class="hljs-number">2</span>;<br>            int parameterEnd = rawSql.indexOf(<span class="hljs-string">&quot;&#125;&quot;</span><span class="hljs-punctuation">,</span> parameterStart);<br>            parameterNameList.add(rawSql.substring(parameterStart<span class="hljs-punctuation">,</span> parameterEnd));<br>            start = parameterEnd + <span class="hljs-number">1</span>;<br>        <span class="hljs-punctuation">&#125;</span><br>        sqlBuilder.append(rawSql.substring(start));<br><br>        return sqlBuilder.toString();<br>    <span class="hljs-punctuation">&#125;</span><br><br><br>    @Override<br>    public &lt;T&gt; T getMapper(Class&lt;T&gt; type) <span class="hljs-punctuation">&#123;</span><br>        return (T) mapperProxyFactory.newInstance(type<span class="hljs-punctuation">,</span> this);<br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br><br></code></pre></td></tr></table></figure><p>添加测试代码，进行测试：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs json">public static void main(String<span class="hljs-punctuation">[</span><span class="hljs-punctuation">]</span> args) <span class="hljs-punctuation">&#123;</span><br>        String configPath = <span class="hljs-string">&quot;mybatis-config.xml&quot;</span>;<br>        IMybatisSqlSessionFactory mybatisSqlSessionFactory = new MybatisSqlSessionFactoryBuilder()<br>                .setMybatisConfigurationParser(new XmlMybatisConfigurationParser())<br>                .setMybatisMapperParser(new XmlMybatisMapperParser())<br>                .setConfigPath(configPath)<br>                .buildSqlSessionFactory();<br>        IMybatisSqlSession mybatisSqlSession = mybatisSqlSessionFactory.openSession();<br>        IUserMapper userMapper = mybatisSqlSession.getMapper(IUserMapper.class);<br>        IdUserNameVO idUserNameVO = userMapper.queryIdUserNameVOById(<span class="hljs-number">1</span>);<br>        System.out.println(idUserNameVO.getId());<br>        System.out.println(idUserNameVO.getUserName());<br>    <span class="hljs-punctuation">&#125;</span><br><br></code></pre></td></tr></table></figure><p>测试结果如下：</p><img src="/2024/05/05/%E6%89%8B%E6%92%B8Mybatis%EF%BC%88%E5%9B%9B%EF%BC%89%E2%80%94%E2%80%94%E8%BF%9E%E6%8E%A5%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9B%E8%A1%8C%E7%AE%80%E5%8D%95%E6%9F%A5%E8%AF%A2/3.png" class="">]]></content>
    
    
    
    <tags>
      
      <tag>-Mybatis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>手撸Mybatis（三）——收敛SQL操作到SqlSession</title>
    <link href="/2024/05/05/%E6%89%8B%E6%92%B8Mybatis%EF%BC%88%E4%B8%89%EF%BC%89%E2%80%94%E2%80%94%E6%94%B6%E6%95%9BSQL%E6%93%8D%E4%BD%9C%E5%88%B0SqlSession/"/>
    <url>/2024/05/05/%E6%89%8B%E6%92%B8Mybatis%EF%BC%88%E4%B8%89%EF%BC%89%E2%80%94%E2%80%94%E6%94%B6%E6%95%9BSQL%E6%93%8D%E4%BD%9C%E5%88%B0SqlSession/</url>
    
    <content type="html"><![CDATA[<h3 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h3><p>在上一章中，我们实现了读取mapper配置并构造相关的mapper代理对象，读取mapper.xml文件中的sql信息等操作，现在，在上一章的基础上，我们接着开始链接数据库，通过封装JDBC，来实现我们数据库操作。</p><h4 id="数据库准备"><a href="#数据库准备" class="headerlink" title="数据库准备"></a>数据库准备</h4><p>我们创建一个user表，用于后续进行测试，user表的结构如下图所示：</p><img src="/2024/05/05/%E6%89%8B%E6%92%B8Mybatis%EF%BC%88%E4%B8%89%EF%BC%89%E2%80%94%E2%80%94%E6%94%B6%E6%95%9BSQL%E6%93%8D%E4%BD%9C%E5%88%B0SqlSession/1.png" class=""><p>user表的内容如下：</p><img src="/2024/05/05/%E6%89%8B%E6%92%B8Mybatis%EF%BC%88%E4%B8%89%EF%BC%89%E2%80%94%E2%80%94%E6%94%B6%E6%95%9BSQL%E6%93%8D%E4%BD%9C%E5%88%B0SqlSession/2.png" class=""><h4 id="添加User类"><a href="#添加User类" class="headerlink" title="添加User类"></a>添加User类</h4><p>我们根据表结构，创建对应的user类，user类的结构如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs json">package com.yang.mybatis.test;<br><br>import java.io.Serializable;<br>import java.util.Date;<br><br>public class User implements Serializable <span class="hljs-punctuation">&#123;</span><br>    private Integer id;<br>    <br>    private String userName;<br>    <br>    private String password;<br>    <br>    private Integer age;<br>    <br>    private Date createTime;<br><br>    public Integer getId() <span class="hljs-punctuation">&#123;</span><br>        return id;<br>    <span class="hljs-punctuation">&#125;</span><br><br>    public void setId(Integer id) <span class="hljs-punctuation">&#123;</span><br>        this.id = id;<br>    <span class="hljs-punctuation">&#125;</span><br><br>    public String getUserName() <span class="hljs-punctuation">&#123;</span><br>        return userName;<br>    <span class="hljs-punctuation">&#125;</span><br><br>    public void setUserName(String userName) <span class="hljs-punctuation">&#123;</span><br>        this.userName = userName;<br>    <span class="hljs-punctuation">&#125;</span><br><br>    public String getPassword() <span class="hljs-punctuation">&#123;</span><br>        return password;<br>    <span class="hljs-punctuation">&#125;</span><br><br>    public void setPassword(String password) <span class="hljs-punctuation">&#123;</span><br>        this.password = password;<br>    <span class="hljs-punctuation">&#125;</span><br><br>    public Integer getAge() <span class="hljs-punctuation">&#123;</span><br>        return age;<br>    <span class="hljs-punctuation">&#125;</span><br><br>    public void setAge(Integer age) <span class="hljs-punctuation">&#123;</span><br>        this.age = age;<br>    <span class="hljs-punctuation">&#125;</span><br><br>    public Date getCreateTime() <span class="hljs-punctuation">&#123;</span><br>        return createTime;<br>    <span class="hljs-punctuation">&#125;</span><br><br>    public void setCreateTime(Date createTime) <span class="hljs-punctuation">&#123;</span><br>        this.createTime = createTime;<br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br><br></code></pre></td></tr></table></figure><h4 id="JDBC基础操作"><a href="#JDBC基础操作" class="headerlink" title="JDBC基础操作"></a>JDBC基础操作</h4><p>在使用jdbc之前，我们先引入mysql的依赖</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs json">&lt;dependency&gt;<br>            &lt;groupId&gt;mysql&lt;/groupId&gt;<br>            &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;<br>            &lt;version&gt;<span class="hljs-number">8.0</span><span class="hljs-number">.27</span>&lt;/version&gt;<br>        &lt;/dependency&gt;<br></code></pre></td></tr></table></figure><p>jdbc的操作，一般分为下面几个步骤：<br>1）加载JDBC驱动程序<br>2）创建数据库链接<br>3）创建一个preparedStatement<br>4）执行SQL语句<br>5）遍历数据集<br>6）处理异常，关闭JDBC对象资源<br>示例代码如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs json">public static void main(String<span class="hljs-punctuation">[</span><span class="hljs-punctuation">]</span> args) throws SQLException <span class="hljs-punctuation">&#123;</span><br>       String url = <span class="hljs-string">&quot;jdbc:mysql://localhost:3306/test?useSSL=false&quot;</span>;<br>       String username = <span class="hljs-string">&quot;root&quot;</span>;<br>       String password = <span class="hljs-string">&quot;3fa4d180&quot;</span>;<br><br>       Connection conn = <span class="hljs-literal"><span class="hljs-keyword">null</span></span>;<br>       try <span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-comment">// 1. 加载驱动</span><br>           Class.forName(<span class="hljs-string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);<br>          <span class="hljs-comment">// 2. 创建数据库链接</span><br>           conn = DriverManager.getConnection(url<span class="hljs-punctuation">,</span> username<span class="hljs-punctuation">,</span> password);<br>           conn.setAutoCommit(<span class="hljs-literal"><span class="hljs-keyword">false</span></span>);<br><br>          <span class="hljs-comment">// 3. 创建preparedStatement</span><br>           String sql = <span class="hljs-string">&quot;select user_name from user where id = ?&quot;</span>;<br>           PreparedStatement preparedStatement = conn.prepareStatement(sql);<br>           preparedStatement.setInt(<span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span>);<br>           <span class="hljs-comment">// 4. 执行sql</span><br>          ResultSet resultSet = preparedStatement.executeQuery();<br>          <span class="hljs-comment">// 5. 遍历结果</span><br>          if (resultSet.next()) <span class="hljs-punctuation">&#123;</span><br>               System.out.println(resultSet.getString(<span class="hljs-number">1</span>));<br>           <span class="hljs-punctuation">&#125;</span><br>           conn.commit();<br>       <span class="hljs-punctuation">&#125;</span> catch (SQLException | ClassNotFoundException e) <span class="hljs-punctuation">&#123;</span><br>           conn.rollback();<br>           e.printStackTrace();<br>       <span class="hljs-punctuation">&#125;</span> finally <span class="hljs-punctuation">&#123;</span><br>         <span class="hljs-comment">// 6. 释放连接</span><br>           conn.close();<br>       <span class="hljs-punctuation">&#125;</span><br>   <span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>执行上述代码，结果如下：</p><img src="/2024/05/05/%E6%89%8B%E6%92%B8Mybatis%EF%BC%88%E4%B8%89%EF%BC%89%E2%80%94%E2%80%94%E6%94%B6%E6%95%9BSQL%E6%93%8D%E4%BD%9C%E5%88%B0SqlSession/3.png" class=""><h3 id="将sql操作，收敛到SqlSession"><a href="#将sql操作，收敛到SqlSession" class="headerlink" title="将sql操作，收敛到SqlSession"></a>将sql操作，收敛到SqlSession</h3><p>在上一章，当我们调用mapper的方法时，最终是通过在MapperProxy中获取对应的MybatisStatement，然后打印出sql信息的，但是如果后续操作数据库是，也在MapperProxy中执行sql的话，不太方便管理。因此，我们添加一个IMybatisSqlSession类，后续对于数据库的操作，收敛到此类进行。<br>首先，我们添加IMybatisSqlSession：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs json">package com.yang.mybatis.session;<br><br>public interface IMybatisSqlSession <span class="hljs-punctuation">&#123;</span><br><br>    &lt;T&gt; T execute(String method<span class="hljs-punctuation">,</span> Object parameter);<br><br>    &lt;T&gt; T getMapper(Class&lt;T&gt; type);<br><span class="hljs-punctuation">&#125;</span><br><br></code></pre></td></tr></table></figure><p>然后添加其默认实现：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs json">package com.yang.mybatis.session;<br><br>import com.yang.mybatis.proxy.MapperProxyFactory;<br><br>public class DefaultMybatisSqlSession implements IMybatisSqlSession <span class="hljs-punctuation">&#123;</span><br>    private MapperProxyFactory mapperProxyFactory;<br><br>    public DefaultMybatisSqlSession(MapperProxyFactory mapperProxyFactory) <span class="hljs-punctuation">&#123;</span><br>        this.mapperProxyFactory = mapperProxyFactory;<br>    <span class="hljs-punctuation">&#125;</span><br><br>    @Override<br>    public &lt;T&gt; T execute(String method<span class="hljs-punctuation">,</span> Object parameter) <span class="hljs-punctuation">&#123;</span><br>        return (T)(<span class="hljs-string">&quot;你被代理了!&quot;</span> + method + <span class="hljs-string">&quot;,入参:&quot;</span> + parameter);<br>    <span class="hljs-punctuation">&#125;</span><br><br>    @Override<br>    public &lt;T&gt; T getMapper(Class&lt;T&gt; type) <span class="hljs-punctuation">&#123;</span><br>        return (T) mapperProxyFactory.newInstance(type<span class="hljs-punctuation">,</span> this);<br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br><br></code></pre></td></tr></table></figure><p>添加IMybatisSqlSession的工厂接口</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs json">package com.yang.mybatis.session;<br><br>public interface MybatisSqlSessionFactory <span class="hljs-punctuation">&#123;</span><br>    IMybatisSqlSession openSession();<br><span class="hljs-punctuation">&#125;</span><br><br></code></pre></td></tr></table></figure><p>添加工厂的默认实现：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs json">package com.yang.mybatis.session;<br><br>import com.yang.mybatis.proxy.MapperProxyFactory;<br><br>public class DefaultMybatisSqlSessionFactory implements IMybatisSqlSessionFactory <span class="hljs-punctuation">&#123;</span><br>    private MapperProxyFactory mapperProxyFactory;<br><br>    public DefaultMybatisSqlSessionFactory(MapperProxyFactory mapperProxyFactory) <span class="hljs-punctuation">&#123;</span><br>        this.mapperProxyFactory = mapperProxyFactory;<br>    <span class="hljs-punctuation">&#125;</span><br><br>    @Override<br>    public IMybatisSqlSession openSession() <span class="hljs-punctuation">&#123;</span><br>        return new DefaultMybatisSqlSession(mapperProxyFactory);<br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br><br></code></pre></td></tr></table></figure><p>修改MapperProxyFactory，在新建MapperProxy的时候，将imybatisSqlSession传递给MapperProxy。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs json">package com.yang.mybatis.proxy;<br><br>import com.yang.mybatis.config.MybatisConfiguration;<br>import com.yang.mybatis.session.IMybatisSqlSession;<br><br>import java.lang.reflect.Proxy;<br><br>public class MapperProxyFactory <span class="hljs-punctuation">&#123;</span><br>    private MybatisConfiguration mybatisConfiguration;<br><br><br>    public MapperProxyFactory(MybatisConfiguration mybatisConfiguration) <span class="hljs-punctuation">&#123;</span><br>        this.mybatisConfiguration = mybatisConfiguration;<br>    <span class="hljs-punctuation">&#125;</span><br><br>    public Object newInstance(Class mapperType<span class="hljs-punctuation">,</span> IMybatisSqlSession mybatisSqlSession) <span class="hljs-punctuation">&#123;</span><br>        MapperProxy mapperProxy = new MapperProxy(mapperType<span class="hljs-punctuation">,</span> mybatisSqlSession);<br>        return Proxy.newProxyInstance(mapperType.getClassLoader()<span class="hljs-punctuation">,</span><br>                new Class<span class="hljs-punctuation">[</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">&#123;</span>mapperType<span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>                mapperProxy);<br>    <span class="hljs-punctuation">&#125;</span><br><br>    public MybatisConfiguration getMybatisConfiguration() <span class="hljs-punctuation">&#123;</span><br>        return mybatisConfiguration;<br>    <span class="hljs-punctuation">&#125;</span><br><br>    public void setMybatisConfiguration(MybatisConfiguration mybatisConfiguration) <span class="hljs-punctuation">&#123;</span><br>        this.mybatisConfiguration = mybatisConfiguration;<br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br><br></code></pre></td></tr></table></figure><p>然后修改MapperProxy，在真正执行的时候，通过iMybatisSqlSession的execute，来执行sql操作，以此实现sql操作由iMybatisSqlSession来统一管理。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs json">package com.yang.mybatis.proxy;<br><br>import com.yang.mybatis.session.IMybatisSqlSession;<br><br>import java.lang.reflect.InvocationHandler;<br>import java.lang.reflect.Method;<br><br>public class MapperProxy&lt;T&gt; implements InvocationHandler <span class="hljs-punctuation">&#123;</span><br><br>    private Class&lt;T&gt; mapperInterface;<br><br>    private IMybatisSqlSession sqlSession;<br><br>    public MapperProxy(Class&lt;T&gt; mapperInterface<span class="hljs-punctuation">,</span> IMybatisSqlSession mybatisSqlSession) <span class="hljs-punctuation">&#123;</span><br>        this.mapperInterface = mapperInterface;<br>        this.sqlSession = mybatisSqlSession;<br>    <span class="hljs-punctuation">&#125;</span><br><br>    @Override<br>    public Object invoke(Object proxy<span class="hljs-punctuation">,</span> Method method<span class="hljs-punctuation">,</span> Object<span class="hljs-punctuation">[</span><span class="hljs-punctuation">]</span> args) throws Throwable <span class="hljs-punctuation">&#123;</span><br>        if (Object.class.equals(method.getDeclaringClass())) <span class="hljs-punctuation">&#123;</span><br>            return method.invoke(this<span class="hljs-punctuation">,</span> args);<br>        <span class="hljs-punctuation">&#125;</span><br>        String methodName = this.mapperInterface.getName() + <span class="hljs-string">&quot;.&quot;</span> + method.getName();<br>        return sqlSession.execute(methodName<span class="hljs-punctuation">,</span> args);<br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br><br></code></pre></td></tr></table></figure><p>最后，我们添加sqlSession工厂类的创建者，通过创建者模式，来创建SqlSession工厂</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs json">package com.yang.mybatis.session;<br><br>import com.yang.mybatis.config.MybatisConfiguration;<br>import com.yang.mybatis.config.MybatisSqlStatement;<br>import com.yang.mybatis.config.parser.IMybatisConfigurationParser;<br>import com.yang.mybatis.config.parser.IMybatisMapperParser;<br>import com.yang.mybatis.proxy.MapperProxyFactory;<br><br>import java.util.List;<br>import java.util.Map;<br>import java.util.stream.Collectors;<br><br>public class MybatisSqlSessionFactoryBuilder <span class="hljs-punctuation">&#123;</span><br>    private IMybatisConfigurationParser mybatisConfigurationParser;<br><br>    private IMybatisMapperParser mybatisMapperParser;<br><br>    private String configPath;<br><br>    public IMybatisSqlSessionFactory buildSqlSessionFactory() <span class="hljs-punctuation">&#123;</span><br>        if (configPath == <span class="hljs-literal"><span class="hljs-keyword">null</span></span> || configPath.isEmpty()) <span class="hljs-punctuation">&#123;</span><br>            throw new RuntimeException(<span class="hljs-string">&quot;配置文件路径不合法==========&quot;</span>);<br>        <span class="hljs-punctuation">&#125;</span><br>        if (this.mybatisMapperParser == <span class="hljs-literal"><span class="hljs-keyword">null</span></span> || this.mybatisConfigurationParser == <span class="hljs-literal"><span class="hljs-keyword">null</span></span>) <span class="hljs-punctuation">&#123;</span><br>            throw new RuntimeException(<span class="hljs-string">&quot;缺少解析器=======&quot;</span>);<br>        <span class="hljs-punctuation">&#125;</span><br>        MybatisConfiguration mybatisConfiguration = mybatisConfigurationParser.parser(configPath);<br>        List&lt;String&gt; mapperPaths = mybatisConfiguration.getMapperPaths();<br>        for (String mapperPath <span class="hljs-punctuation">:</span> mapperPaths) <span class="hljs-punctuation">&#123;</span><br>            List&lt;MybatisSqlStatement&gt; mybatisSqlStatements = this.mybatisMapperParser.parseMapper(mapperPath);<br>            Map&lt;String<span class="hljs-punctuation">,</span> List&lt;MybatisSqlStatement&gt;&gt; mapperNameGroupMap = mybatisSqlStatements.stream()<br>                    .collect(Collectors.groupingBy(MybatisSqlStatement<span class="hljs-punctuation">:</span><span class="hljs-punctuation">:</span>getNamespace));<br><br>            for (Map.Entry&lt;String<span class="hljs-punctuation">,</span> List&lt;MybatisSqlStatement&gt;&gt; entry <span class="hljs-punctuation">:</span> mapperNameGroupMap.entrySet()) <span class="hljs-punctuation">&#123;</span><br>                String mapperName = entry.getKey();<br>                List&lt;MybatisSqlStatement&gt; sqlSessionList = entry.getValue();<br>                mybatisConfiguration.putMybatisSqlStatementList(mapperName<span class="hljs-punctuation">,</span> sqlSessionList);<br>            <span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-punctuation">&#125;</span><br><br>        MapperProxyFactory mapperProxyFactory = new MapperProxyFactory(mybatisConfiguration);<br>        return new DefaultMybatisSqlSessionFactory(mapperProxyFactory);<br>    <span class="hljs-punctuation">&#125;</span><br><br>    public MybatisSqlSessionFactoryBuilder setConfigPath(String configPath) <span class="hljs-punctuation">&#123;</span><br>        this.configPath = configPath;<br>        return this;<br>    <span class="hljs-punctuation">&#125;</span><br><br>    public MybatisSqlSessionFactoryBuilder setMybatisConfigurationParser(IMybatisConfigurationParser iMybatisConfigurationParser) <span class="hljs-punctuation">&#123;</span><br>        this.mybatisConfigurationParser = iMybatisConfigurationParser;<br>        return this;<br>    <span class="hljs-punctuation">&#125;</span><br><br>    public MybatisSqlSessionFactoryBuilder setMybatisMapperParser(IMybatisMapperParser iMybatisMapperParser) <span class="hljs-punctuation">&#123;</span><br>        this.mybatisMapperParser = iMybatisMapperParser;<br>        return this;<br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br><br></code></pre></td></tr></table></figure><p>添加测试代码，进行测试：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs json">package com.yang.mybatis.test;<br><br>import com.yang.mybatis.config.parser.XmlMybatisConfigurationParser;<br>import com.yang.mybatis.config.parser.XmlMybatisMapperParser;<br>import com.yang.mybatis.session.IMybatisSqlSession;<br>import com.yang.mybatis.session.IMybatisSqlSessionFactory;<br>import com.yang.mybatis.session.MybatisSqlSessionFactoryBuilder;<br><br><br>public class Main <span class="hljs-punctuation">&#123;</span><br>    public static void main(String<span class="hljs-punctuation">[</span><span class="hljs-punctuation">]</span> args) <span class="hljs-punctuation">&#123;</span><br>        String configPath = <span class="hljs-string">&quot;mybatis-config.xml&quot;</span>;<br>        IMybatisSqlSessionFactory mybatisSqlSessionFactory = new MybatisSqlSessionFactoryBuilder()<br>                .setMybatisMapperParser(new XmlMybatisMapperParser())<br>                .setMybatisConfigurationParser(new XmlMybatisConfigurationParser())<br>                .setConfigPath(configPath)<br>                .buildSqlSessionFactory();<br><br>        IMybatisSqlSession mybatisSqlSession = mybatisSqlSessionFactory.openSession();<br><br>        IUserMapper userMapper = mybatisSqlSession.getMapper(IUserMapper.class);<br>        System.out.println(userMapper.queryUserName(<span class="hljs-number">1</span>));<br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br><br></code></pre></td></tr></table></figure><img src="/2024/05/05/%E6%89%8B%E6%92%B8Mybatis%EF%BC%88%E4%B8%89%EF%BC%89%E2%80%94%E2%80%94%E6%94%B6%E6%95%9BSQL%E6%93%8D%E4%BD%9C%E5%88%B0SqlSession/4.png" class=""><h3 id="SqlSession获取执行方法对应的sql语句"><a href="#SqlSession获取执行方法对应的sql语句" class="headerlink" title="SqlSession获取执行方法对应的sql语句"></a>SqlSession获取执行方法对应的sql语句</h3><p>首先，修改MybatisConfiguration，之前是将每一个mapper和他所拥有的MybatisSqlStatement列表关联起来，现在感觉粒度太大，因此，该为每一个mapper的方法和对应的MybatisSqlStatement关联。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs json">package com.yang.mybatis.config;<br><br>import java.io.Serializable;<br>import java.util.ArrayList;<br>import java.util.HashMap;<br>import java.util.List;<br>import java.util.Map;<br><br>public class MybatisConfiguration implements Serializable <span class="hljs-punctuation">&#123;</span><br>    private Map&lt;String<span class="hljs-punctuation">,</span> MybatisEnvironment&gt; id2EnvironmentMap = new HashMap&lt;&gt;();<br><br>    private MybatisEnvironment defaultMybatisEnvironment;<br><br>    private List&lt;String&gt; mapperPaths = new ArrayList&lt;&gt;();<br><br>    private Map&lt;String<span class="hljs-punctuation">,</span> MybatisSqlStatement&gt; mapperMethod2SqlStatementsMap = new HashMap&lt;&gt;();<br><br>    public void putMapperMethod2MybatisSqlStatement(String mapperMethod<span class="hljs-punctuation">,</span> MybatisSqlStatement mybatisSqlStatement) <span class="hljs-punctuation">&#123;</span><br>        this.mapperMethod2SqlStatementsMap.put(mapperMethod<span class="hljs-punctuation">,</span> mybatisSqlStatement);<br>    <span class="hljs-punctuation">&#125;</span><br><br>    public MybatisSqlStatement getMybatisSqlStatement(String mapperMethod) <span class="hljs-punctuation">&#123;</span><br>        return this.mapperMethod2SqlStatementsMap.get(mapperMethod);<br>    <span class="hljs-punctuation">&#125;</span><br><br>    public Map&lt;String<span class="hljs-punctuation">,</span> MybatisSqlStatement&gt; getMapperMethod2SqlStatementsMap() <span class="hljs-punctuation">&#123;</span><br>        return this.mapperMethod2SqlStatementsMap;<br>    <span class="hljs-punctuation">&#125;</span><br><br><br>    public void addEnvironment(String id<span class="hljs-punctuation">,</span> MybatisEnvironment mybatisEnvironment) <span class="hljs-punctuation">&#123;</span><br>        this.id2EnvironmentMap.put(id<span class="hljs-punctuation">,</span> mybatisEnvironment);<br>    <span class="hljs-punctuation">&#125;</span><br><br>    public MybatisEnvironment getEnvironment(String id) <span class="hljs-punctuation">&#123;</span><br>        return id2EnvironmentMap.get(id);<br>    <span class="hljs-punctuation">&#125;</span><br><br>    public MybatisEnvironment getDefaultMybatisEnvironment() <span class="hljs-punctuation">&#123;</span><br>        return defaultMybatisEnvironment;<br>    <span class="hljs-punctuation">&#125;</span><br><br>    public void setDefaultMybatisEnvironment(MybatisEnvironment defaultMybatisEnvironment) <span class="hljs-punctuation">&#123;</span><br>        this.defaultMybatisEnvironment = defaultMybatisEnvironment;<br>    <span class="hljs-punctuation">&#125;</span><br><br>    public void addMapperPath(String mapperPath) <span class="hljs-punctuation">&#123;</span><br>        this.mapperPaths.add(mapperPath);<br>    <span class="hljs-punctuation">&#125;</span><br><br>    public List&lt;String&gt; getMapperPaths() <span class="hljs-punctuation">&#123;</span><br>        return this.mapperPaths;<br>    <span class="hljs-punctuation">&#125;</span><br><br>    public List&lt;MybatisEnvironment&gt; getEnvironments() <span class="hljs-punctuation">&#123;</span><br>        return new ArrayList&lt;&gt;(id2EnvironmentMap.values());<br>    <span class="hljs-punctuation">&#125;</span><br><br><span class="hljs-punctuation">&#125;</span><br><br></code></pre></td></tr></table></figure><p>然后修改MybatisSqlSessionFactoryBuilder:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs json">package com.yang.mybatis.session;<br><br>import com.yang.mybatis.config.MybatisConfiguration;<br>import com.yang.mybatis.config.MybatisSqlStatement;<br>import com.yang.mybatis.config.parser.IMybatisConfigurationParser;<br>import com.yang.mybatis.config.parser.IMybatisMapperParser;<br>import com.yang.mybatis.proxy.MapperProxyFactory;<br><br>import java.util.List;<br><br>public class MybatisSqlSessionFactoryBuilder <span class="hljs-punctuation">&#123;</span><br>    private IMybatisConfigurationParser mybatisConfigurationParser;<br><br>    private IMybatisMapperParser mybatisMapperParser;<br><br>    private String configPath;<br><br>    public IMybatisSqlSessionFactory buildSqlSessionFactory() <span class="hljs-punctuation">&#123;</span><br>        if (configPath == <span class="hljs-literal"><span class="hljs-keyword">null</span></span> || configPath.isEmpty()) <span class="hljs-punctuation">&#123;</span><br>            throw new RuntimeException(<span class="hljs-string">&quot;配置文件路径不合法==========&quot;</span>);<br>        <span class="hljs-punctuation">&#125;</span><br>        if (this.mybatisMapperParser == <span class="hljs-literal"><span class="hljs-keyword">null</span></span> || this.mybatisConfigurationParser == <span class="hljs-literal"><span class="hljs-keyword">null</span></span>) <span class="hljs-punctuation">&#123;</span><br>            throw new RuntimeException(<span class="hljs-string">&quot;缺少解析器=======&quot;</span>);<br>        <span class="hljs-punctuation">&#125;</span><br>        MybatisConfiguration mybatisConfiguration = mybatisConfigurationParser.parser(configPath);<br>        List&lt;String&gt; mapperPaths = mybatisConfiguration.getMapperPaths();<br>        for (String mapperPath <span class="hljs-punctuation">:</span> mapperPaths) <span class="hljs-punctuation">&#123;</span><br>            List&lt;MybatisSqlStatement&gt; mybatisSqlStatements = this.mybatisMapperParser.parseMapper(mapperPath);<br>            for (MybatisSqlStatement mybatisSqlStatement <span class="hljs-punctuation">:</span> mybatisSqlStatements) <span class="hljs-punctuation">&#123;</span><br>                String methodName = mybatisSqlStatement.getNamespace() + <span class="hljs-string">&quot;.&quot;</span> + mybatisSqlStatement.getId();<br>                mybatisConfiguration.putMapperMethod2MybatisSqlStatement(methodName<span class="hljs-punctuation">,</span> mybatisSqlStatement);<br>            <span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-punctuation">&#125;</span><br><br>        MapperProxyFactory mapperProxyFactory = new MapperProxyFactory(mybatisConfiguration);<br>        return new DefaultMybatisSqlSessionFactory(mapperProxyFactory);<br>    <span class="hljs-punctuation">&#125;</span><br><br>    public MybatisSqlSessionFactoryBuilder setConfigPath(String configPath) <span class="hljs-punctuation">&#123;</span><br>        this.configPath = configPath;<br>        return this;<br>    <span class="hljs-punctuation">&#125;</span><br><br>    public MybatisSqlSessionFactoryBuilder setMybatisConfigurationParser(IMybatisConfigurationParser iMybatisConfigurationParser) <span class="hljs-punctuation">&#123;</span><br>        this.mybatisConfigurationParser = iMybatisConfigurationParser;<br>        return this;<br>    <span class="hljs-punctuation">&#125;</span><br><br>    public MybatisSqlSessionFactoryBuilder setMybatisMapperParser(IMybatisMapperParser iMybatisMapperParser) <span class="hljs-punctuation">&#123;</span><br>        this.mybatisMapperParser = iMybatisMapperParser;<br>        return this;<br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br><br></code></pre></td></tr></table></figure><p>修改DefaultMybatisSqlSession类，获取方法对应的MybatisStatement</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs json">package com.yang.mybatis.session;<br><br>import com.yang.mybatis.config.MybatisSqlStatement;<br>import com.yang.mybatis.proxy.MapperProxyFactory;<br><br><br>public class DefaultMybatisSqlSession implements IMybatisSqlSession <span class="hljs-punctuation">&#123;</span><br>    private MapperProxyFactory mapperProxyFactory;<br><br>    public DefaultMybatisSqlSession(MapperProxyFactory mapperProxyFactory) <span class="hljs-punctuation">&#123;</span><br>        this.mapperProxyFactory = mapperProxyFactory;<br>    <span class="hljs-punctuation">&#125;</span><br><br>    @Override<br>    public &lt;T&gt; T execute(String method<span class="hljs-punctuation">,</span> Object parameter) <span class="hljs-punctuation">&#123;</span><br>        MybatisSqlStatement mybatisSqlStatement = this.mapperProxyFactory.getMybatisConfiguration().getMybatisSqlStatement(method);<br>        return (T)(<span class="hljs-string">&quot;method:&quot;</span> + method + <span class="hljs-string">&quot;sql:&quot;</span>+ mybatisSqlStatement.getSql() + <span class="hljs-string">&quot;,入参:&quot;</span> + parameter);<br>    <span class="hljs-punctuation">&#125;</span><br><br>    @Override<br>    public &lt;T&gt; T getMapper(Class&lt;T&gt; type) <span class="hljs-punctuation">&#123;</span><br>        return (T) mapperProxyFactory.newInstance(type<span class="hljs-punctuation">,</span> this);<br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br><br></code></pre></td></tr></table></figure><p>添加测试方法进行测试：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs json">public static void main(String<span class="hljs-punctuation">[</span><span class="hljs-punctuation">]</span> args) <span class="hljs-punctuation">&#123;</span><br>       String configPath = <span class="hljs-string">&quot;mybatis-config.xml&quot;</span>;<br>       MybatisSqlSessionFactory mybatisSqlSessionFactory = new MybatisSqlSessionFactoryBuilder()<br>               .setMybatisMapperParser(new XmlMybatisMapperParser())<br>               .setMybatisConfigurationParser(new XmlMybatisConfigurationParser())<br>               .setConfigPath(configPath)<br>               .buildSqlSessionFactory();<br><br>       IMybatisSqlSession mybatisSqlSession = mybatisSqlSessionFactory.openSession();<br><br>       IUserMapper userMapper = mybatisSqlSession.getMapper(IUserMapper.class);<br>       System.out.println(userMapper.queryUserAge(<span class="hljs-number">1</span>));<br>   <span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>测试结果如下：</p><img src="/2024/05/05/%E6%89%8B%E6%92%B8Mybatis%EF%BC%88%E4%B8%89%EF%BC%89%E2%80%94%E2%80%94%E6%94%B6%E6%95%9BSQL%E6%93%8D%E4%BD%9C%E5%88%B0SqlSession/5.png" class=""><h3 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h3><p><a href="https://blog.csdn.net/weixin_43520450/article/details/107230205">https://blog.csdn.net/weixin_43520450&#x2F;article&#x2F;details&#x2F;107230205</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>-Mybatis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>手撸Mybatis（二）——配置项的获取</title>
    <link href="/2024/05/05/%E6%89%8B%E6%92%B8Mybatis%EF%BC%88%E4%BA%8C%EF%BC%89%E2%80%94%E2%80%94%E9%85%8D%E7%BD%AE%E9%A1%B9%E7%9A%84%E8%8E%B7%E5%8F%96/"/>
    <url>/2024/05/05/%E6%89%8B%E6%92%B8Mybatis%EF%BC%88%E4%BA%8C%EF%BC%89%E2%80%94%E2%80%94%E9%85%8D%E7%BD%AE%E9%A1%B9%E7%9A%84%E8%8E%B7%E5%8F%96/</url>
    
    <content type="html"><![CDATA[<h3 id="配置项解析"><a href="#配置项解析" class="headerlink" title="配置项解析"></a>配置项解析</h3><p>在mybatis中，一般我们会定义一个mapper-config.xml文件，来配置数据库连接的相关信息，以及我们的mapperxml文件存放目录。在本章，我们会读取这些文件，将其配置信息进行解析。<br>因为涉及到xml的解析，因此，我们先添加dom4j的依赖，以方便后续解析xml</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs json">&lt;dependency&gt;<br>            &lt;groupId&gt;org.dom4j&lt;/groupId&gt;<br>            &lt;artifactId&gt;dom4j&lt;/artifactId&gt;<br>            &lt;version&gt;<span class="hljs-number">2.1</span><span class="hljs-number">.3</span>&lt;/version&gt;<br>        &lt;/dependency&gt;<br></code></pre></td></tr></table></figure><p>mybatis-config.xml的内容如下，对于每一个环境，都有对应的数据源信息，此外，mappers标签存储的是mapper.xml文件的位置。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs json">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;<br>&lt;!DOCTYPE configuration<br>        PUBLIC <span class="hljs-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span><br>        <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;<br>&lt;configuration&gt;<br>    &lt;environments default=<span class="hljs-string">&quot;development&quot;</span>&gt;<br>        &lt;environment id=<span class="hljs-string">&quot;development&quot;</span>&gt;<br>            &lt;transactionManager type=<span class="hljs-string">&quot;JDBC&quot;</span>/&gt;<br>            &lt;dataSource type=<span class="hljs-string">&quot;POOLED&quot;</span>&gt;<br>                &lt;property name=<span class="hljs-string">&quot;driver&quot;</span> value=<span class="hljs-string">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;<br>                &lt;property name=<span class="hljs-string">&quot;url&quot;</span> value=<span class="hljs-string">&quot;jdbc:mysql://192.168.102.128:3306/test&quot;</span>/&gt;<br>                &lt;property name=<span class="hljs-string">&quot;username&quot;</span> value=<span class="hljs-string">&quot;root&quot;</span>/&gt;<br>                &lt;property name=<span class="hljs-string">&quot;password&quot;</span> value=<span class="hljs-string">&quot;123456&quot;</span>/&gt;<br>            &lt;/dataSource&gt;<br>        &lt;/environment&gt;<br>    &lt;/environments&gt;<br>    &lt;mappers&gt;<br>        &lt;mapper resource=<span class="hljs-string">&quot;mapper/UserMapper.xml&quot;</span>/&gt;<br>    &lt;/mappers&gt;<br>&lt;/configuration&gt;<br></code></pre></td></tr></table></figure><p>首先，我们添加MybatisDataSource，用来记录数据源信息</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs json">package com.yang.mybatis.config;<br><br>import java.io.Serializable;<br><br>public class MybatisDataSource implements Serializable <span class="hljs-punctuation">&#123;</span><br>    private String driver;<br>    private String url;<br>    private String username;<br>    private String password;<br><br>    public String getDriver() <span class="hljs-punctuation">&#123;</span><br>        return driver;<br>    <span class="hljs-punctuation">&#125;</span><br><br>    public String getUrl() <span class="hljs-punctuation">&#123;</span><br>        return url;<br>    <span class="hljs-punctuation">&#125;</span><br><br>    public String getUsername() <span class="hljs-punctuation">&#123;</span><br>        return username;<br>    <span class="hljs-punctuation">&#125;</span><br><br>    public String getPassword() <span class="hljs-punctuation">&#123;</span><br>        return password;<br>    <span class="hljs-punctuation">&#125;</span><br><br>    public void setDriver(String driver) <span class="hljs-punctuation">&#123;</span><br>        this.driver = driver;<br>    <span class="hljs-punctuation">&#125;</span><br><br>    public void setUrl(String url) <span class="hljs-punctuation">&#123;</span><br>        this.url = url;<br>    <span class="hljs-punctuation">&#125;</span><br><br>    public void setUsername(String username) <span class="hljs-punctuation">&#123;</span><br>        this.username = username;<br>    <span class="hljs-punctuation">&#125;</span><br><br>    public void setPassword(String password) <span class="hljs-punctuation">&#123;</span><br>        this.password = password;<br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br><br></code></pre></td></tr></table></figure><p>然后添加一个MybatisEnvironment，用来存储环境信息</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs json">package com.yang.mybatis.config;<br><br>import java.io.Serializable;<br><br>public class MybatisEnvironment implements Serializable <span class="hljs-punctuation">&#123;</span><br>    private String id;<br><br>    private MybatisDataSource mybatisDataSource;<br><br>    public String getId() <span class="hljs-punctuation">&#123;</span><br>        return id;<br>    <span class="hljs-punctuation">&#125;</span><br><br>    public void setId(String id) <span class="hljs-punctuation">&#123;</span><br>        this.id = id;<br>    <span class="hljs-punctuation">&#125;</span><br><br>    public MybatisDataSource getMybatisDataSource() <span class="hljs-punctuation">&#123;</span><br>        return mybatisDataSource;<br>    <span class="hljs-punctuation">&#125;</span><br><br>    public void setMybatisDataSource(MybatisDataSource mybatisDataSource) <span class="hljs-punctuation">&#123;</span><br>        this.mybatisDataSource = mybatisDataSource;<br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br><br></code></pre></td></tr></table></figure><p>然后是MybatisConfiguration，我们读取mybatis-config.xml配置文件后，配置信息就存储在这个类中。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs json">package com.yang.mybatis.config;<br><br>import java.io.Serializable;<br>import java.util.ArrayList;<br>import java.util.HashMap;<br>import java.util.List;<br>import java.util.Map;<br><br>public class MybatisConfiguration implements Serializable <span class="hljs-punctuation">&#123;</span><br>    private Map&lt;String<span class="hljs-punctuation">,</span> MybatisEnvironment&gt; id2EnvironmentMap = new HashMap&lt;&gt;();<br><br>    private MybatisEnvironment defaultMybatisEnvironment;<br><br>    private List&lt;String&gt; mapperPaths = new ArrayList&lt;&gt;();<br><br>    public void addEnvironment(String id<span class="hljs-punctuation">,</span> MybatisEnvironment mybatisEnvironment) <span class="hljs-punctuation">&#123;</span><br>        this.id2EnvironmentMap.put(id<span class="hljs-punctuation">,</span> mybatisEnvironment);<br>    <span class="hljs-punctuation">&#125;</span><br><br>    public MybatisEnvironment getEnvironment(String id) <span class="hljs-punctuation">&#123;</span><br>        return id2EnvironmentMap.get(id);<br>    <span class="hljs-punctuation">&#125;</span><br><br>    public MybatisEnvironment getDefaultMybatisEnvironment() <span class="hljs-punctuation">&#123;</span><br>        return defaultMybatisEnvironment;<br>    <span class="hljs-punctuation">&#125;</span><br><br>    public void setDefaultMybatisEnvironment(MybatisEnvironment defaultMybatisEnvironment) <span class="hljs-punctuation">&#123;</span><br>        this.defaultMybatisEnvironment = defaultMybatisEnvironment;<br>    <span class="hljs-punctuation">&#125;</span><br><br>    public void addMapperPath(String mapperPath) <span class="hljs-punctuation">&#123;</span><br>        this.mapperPaths.add(mapperPath);<br>    <span class="hljs-punctuation">&#125;</span><br><br>    public List&lt;String&gt; getMapperPaths() <span class="hljs-punctuation">&#123;</span><br>        return this.mapperPaths;<br>    <span class="hljs-punctuation">&#125;</span><br><br>    public List&lt;MybatisEnvironment&gt; getEnvironments() <span class="hljs-punctuation">&#123;</span><br>        return new ArrayList&lt;&gt;(id2EnvironmentMap.values());<br>    <span class="hljs-punctuation">&#125;</span><br><br><span class="hljs-punctuation">&#125;</span><br><br></code></pre></td></tr></table></figure><p>对于mybatis-config.xml的解析，我们定义一个IMybatisConfigParser接口</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs json">package com.yang.mybatis.config.parser;<br><br>import com.yang.mybatis.config.MybatisConfiguration;<br><br>public interface IMybatisConfigurationParser <span class="hljs-punctuation">&#123;</span><br>    MybatisConfiguration parser(String path) ;<br><span class="hljs-punctuation">&#125;</span><br><br></code></pre></td></tr></table></figure><p>然后定义其实现类：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><code class="hljs json">package com.yang.mybatis.config.parser;<br><br>import com.yang.mybatis.config.MybatisConfiguration;<br>import com.yang.mybatis.config.MybatisDataSource;<br>import com.yang.mybatis.config.MybatisEnvironment;<br>import org.dom4j.Document;<br>import org.dom4j.Element;<br>import org.dom4j.io.SAXReader;<br><br>import java.io.InputStream;<br>import java.util.HashMap;<br>import java.util.List;<br>import java.util.Map;<br><br>public class XmlMybatisConfigurationParser implements IMybatisConfigurationParser <span class="hljs-punctuation">&#123;</span><br><br>    @Override<br>    public MybatisConfiguration parser(String path) <span class="hljs-punctuation">&#123;</span><br>        MybatisConfiguration mybatisConfiguration = new MybatisConfiguration();<br>        try <span class="hljs-punctuation">&#123;</span><br>            InputStream inputStream = this.getClass().getClassLoader().getResourceAsStream(path);<br>            SAXReader saxReader = new SAXReader();<br>            <span class="hljs-comment">// 1. 读取文档</span><br>            Document document = saxReader.read(inputStream);<br>            Element root = document.getRootElement();<br><br>            parseEnvironments(mybatisConfiguration<span class="hljs-punctuation">,</span> root.element(<span class="hljs-string">&quot;environments&quot;</span>));<br>            parseMappers(mybatisConfiguration<span class="hljs-punctuation">,</span> root.element(<span class="hljs-string">&quot;mappers&quot;</span>));<br>        <span class="hljs-punctuation">&#125;</span> catch (Exception e) <span class="hljs-punctuation">&#123;</span><br>            e.printStackTrace();<br>        <span class="hljs-punctuation">&#125;</span><br>        return mybatisConfiguration;<br>    <span class="hljs-punctuation">&#125;</span><br><br>    private void parseMappers(MybatisConfiguration mybatisConfiguration<span class="hljs-punctuation">,</span> Element mappers) <span class="hljs-punctuation">&#123;</span><br>        List&lt;Element&gt; mapperList = mappers.elements(<span class="hljs-string">&quot;mapper&quot;</span>);<br>        for (Element mapper <span class="hljs-punctuation">:</span> mapperList) <span class="hljs-punctuation">&#123;</span><br>            String resource = mapper.attributeValue(<span class="hljs-string">&quot;resource&quot;</span>);<br>            mybatisConfiguration.addMapperPath(resource);<br>        <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br><br>    private void parseEnvironments(MybatisConfiguration mybatisConfiguration<span class="hljs-punctuation">,</span> Element environments) <span class="hljs-punctuation">&#123;</span><br>        String defaultId = environments.attributeValue(<span class="hljs-string">&quot;default&quot;</span>);<br>        for (Element element <span class="hljs-punctuation">:</span> environments.elements()) <span class="hljs-punctuation">&#123;</span><br>            String id = element.attributeValue(<span class="hljs-string">&quot;id&quot;</span>);<br><br>            Element dataSource = element.element(<span class="hljs-string">&quot;dataSource&quot;</span>);<br>            List&lt;Element&gt; properties = dataSource.elements(<span class="hljs-string">&quot;property&quot;</span>);<br>            Map&lt;String<span class="hljs-punctuation">,</span> String&gt; propertyMap = new HashMap&lt;&gt;();<br>            for (Element property <span class="hljs-punctuation">:</span> properties) <span class="hljs-punctuation">&#123;</span><br>                propertyMap.put(property.attributeValue(<span class="hljs-string">&quot;name&quot;</span>)<span class="hljs-punctuation">,</span> property.attributeValue(<span class="hljs-string">&quot;value&quot;</span>));<br>            <span class="hljs-punctuation">&#125;</span><br>            String driver = propertyMap.get(<span class="hljs-string">&quot;driver&quot;</span>);<br>            String url = propertyMap.get(<span class="hljs-string">&quot;url&quot;</span>);<br>            String username = propertyMap.get(<span class="hljs-string">&quot;username&quot;</span>);<br>            String password = propertyMap.get(<span class="hljs-string">&quot;password&quot;</span>);<br>            MybatisDataSource mybatisDataSource = new MybatisDataSource();<br>            mybatisDataSource.setDriver(driver);<br>            mybatisDataSource.setUrl(url);<br>            mybatisDataSource.setUsername(username);<br>            mybatisDataSource.setPassword(password);<br><br>            MybatisEnvironment mybatisEnvironment = new MybatisEnvironment();<br>            mybatisEnvironment.setId(id);<br>            mybatisEnvironment.setMybatisDataSource(mybatisDataSource);<br>            mybatisConfiguration.addEnvironment(id<span class="hljs-punctuation">,</span> mybatisEnvironment);<br>            if (id.equals(defaultId)) <span class="hljs-punctuation">&#123;</span><br>                mybatisConfiguration.setDefaultMybatisEnvironment(mybatisEnvironment);<br>            <span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br><br></code></pre></td></tr></table></figure><p>然后添加测试代码进行测试：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs json">IMybatisConfigurationParser mybatisConfigurationParser = new XmlMybatisConfigurationParser();<br>       MybatisConfiguration mybatisConfiguration = mybatisConfigurationParser.parser(<span class="hljs-string">&quot;mybatis-config.xml&quot;</span>);<br>       System.out.println(<span class="hljs-string">&quot;mapperPaths==========&quot;</span>);<br>       for (String mapperPath <span class="hljs-punctuation">:</span> mybatisConfiguration.getMapperPaths()) <span class="hljs-punctuation">&#123;</span><br>           System.out.println(mapperPath);<br>       <span class="hljs-punctuation">&#125;</span><br>       System.out.println(<span class="hljs-string">&quot;environments========&quot;</span>);<br>       for (MybatisEnvironment environment <span class="hljs-punctuation">:</span> mybatisConfiguration.getEnvironments()) <span class="hljs-punctuation">&#123;</span><br>           MybatisDataSource mybatisDataSource = environment.getMybatisDataSource();<br>           System.out.println(<span class="hljs-string">&quot;id:&quot;</span> + environment.getId()<br>           + <span class="hljs-string">&quot;,driver:&quot;</span> + mybatisDataSource.getDriver()<br>           + <span class="hljs-string">&quot;,url:&quot;</span> + mybatisDataSource.getUrl()<br>           + <span class="hljs-string">&quot;,username:&quot;</span> + mybatisDataSource.getUsername()<br>           + <span class="hljs-string">&quot;,password:&quot;</span> + mybatisDataSource.getPassword());<br>       <span class="hljs-punctuation">&#125;</span><br>       System.out.println(<span class="hljs-string">&quot;defaultEnvironment=======&quot;</span>);<br>       MybatisEnvironment defaultMybatisEnvironment = mybatisConfiguration.getDefaultMybatisEnvironment();<br>       MybatisDataSource mybatisDataSource = defaultMybatisEnvironment.getMybatisDataSource();<br>       System.out.println(<span class="hljs-string">&quot;id:&quot;</span> + defaultMybatisEnvironment.getId()<br>               + <span class="hljs-string">&quot;,driver:&quot;</span> + mybatisDataSource.getDriver()<br>               + <span class="hljs-string">&quot;,url:&quot;</span> + mybatisDataSource.getUrl()<br>               + <span class="hljs-string">&quot;,username:&quot;</span> + mybatisDataSource.getUsername()<br>               + <span class="hljs-string">&quot;,password:&quot;</span> + mybatisDataSource.getPassword());<br></code></pre></td></tr></table></figure><p>结果如下：</p><img src="/2024/05/05/%E6%89%8B%E6%92%B8Mybatis%EF%BC%88%E4%BA%8C%EF%BC%89%E2%80%94%E2%80%94%E9%85%8D%E7%BD%AE%E9%A1%B9%E7%9A%84%E8%8E%B7%E5%8F%96/1.png" class=""><h3 id="mapperXml的解析"><a href="#mapperXml的解析" class="headerlink" title="mapperXml的解析"></a>mapperXml的解析</h3><p>首先添加一个MybatisSqlStatement</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs json">package com.yang.mybatis.config;<br><br>import java.io.Serializable;<br><br>public class MybatisSqlStatement implements Serializable <span class="hljs-punctuation">&#123;</span><br>    private String namespace;<br><br>    private String id;<br><br>    private String sql;<br><br>    public String getNamespace() <span class="hljs-punctuation">&#123;</span><br>        return namespace;<br>    <span class="hljs-punctuation">&#125;</span><br><br>    public void setNamespace(String namespace) <span class="hljs-punctuation">&#123;</span><br>        this.namespace = namespace;<br>    <span class="hljs-punctuation">&#125;</span><br><br>    public String getId() <span class="hljs-punctuation">&#123;</span><br>        return id;<br>    <span class="hljs-punctuation">&#125;</span><br><br>    public void setId(String id) <span class="hljs-punctuation">&#123;</span><br>        this.id = id;<br>    <span class="hljs-punctuation">&#125;</span><br><br>    public String getSql() <span class="hljs-punctuation">&#123;</span><br>        return sql;<br>    <span class="hljs-punctuation">&#125;</span><br><br>    public void setSql(String sql) <span class="hljs-punctuation">&#123;</span><br>        this.sql = sql;<br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br><br></code></pre></td></tr></table></figure><p>添加解析mapper文件的接口</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs json">package com.yang.mybatis.config.parser;<br><br>import com.yang.mybatis.config.MybatisSqlStatement;<br><br>import java.util.List;<br><br>public interface IMybatisMapperParser <span class="hljs-punctuation">&#123;</span><br>    List&lt;MybatisSqlStatement&gt; parseMapper(String path);<br><span class="hljs-punctuation">&#125;</span><br><br></code></pre></td></tr></table></figure><p>具体实现：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs json">package com.yang.mybatis.config.parser;<br><br>import com.yang.mybatis.config.MybatisSqlStatement;<br>import org.dom4j.Document;<br>import org.dom4j.DocumentException;<br>import org.dom4j.Element;<br>import org.dom4j.io.SAXReader;<br><br>import java.io.InputStream;<br>import java.util.ArrayList;<br>import java.util.HashSet;<br>import java.util.List;<br>import java.util.Set;<br><br>public class XmlMybatisMapperParser implements IMybatisMapperParser <span class="hljs-punctuation">&#123;</span><br>    private final static Set&lt;String&gt; tagSet = new HashSet&lt;&gt;();<br><br>    static <span class="hljs-punctuation">&#123;</span><br>        tagSet.add(<span class="hljs-string">&quot;select&quot;</span>);<br>        tagSet.add(<span class="hljs-string">&quot;insert&quot;</span>);<br>        tagSet.add(<span class="hljs-string">&quot;update&quot;</span>);<br>        tagSet.add(<span class="hljs-string">&quot;delete&quot;</span>);<br>        tagSet.add(<span class="hljs-string">&quot;SELECT&quot;</span>);<br>        tagSet.add(<span class="hljs-string">&quot;INSERT&quot;</span>);<br>        tagSet.add(<span class="hljs-string">&quot;UPDATE&quot;</span>);<br>        tagSet.add(<span class="hljs-string">&quot;DELETE&quot;</span>);<br>    <span class="hljs-punctuation">&#125;</span><br>    @Override<br>    public List&lt;MybatisSqlStatement&gt; parseMapper(String path) <span class="hljs-punctuation">&#123;</span><br>        List&lt;MybatisSqlStatement&gt; mybatisSqlStatements = new ArrayList&lt;&gt;();<br>        try <span class="hljs-punctuation">&#123;</span><br>            InputStream inputStream = this.getClass().getClassLoader().getResourceAsStream(path);<br>            SAXReader saxReader = new SAXReader();<br>            Document document = saxReader.read(inputStream);<br>            Element root = document.getRootElement();<br><br>            for (String tag <span class="hljs-punctuation">:</span> tagSet) <span class="hljs-punctuation">&#123;</span><br>                List&lt;Element&gt; elements = root.elements(tag);<br>                parseStatement(mybatisSqlStatements<span class="hljs-punctuation">,</span> elements<span class="hljs-punctuation">,</span> root);<br>            <span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-punctuation">&#125;</span> catch (DocumentException e) <span class="hljs-punctuation">&#123;</span><br>            e.printStackTrace();<br>        <span class="hljs-punctuation">&#125;</span><br>        return mybatisSqlStatements;<br>    <span class="hljs-punctuation">&#125;</span><br><br>    private void parseStatement(List&lt;MybatisSqlStatement&gt; mybatisSqlStatements<span class="hljs-punctuation">,</span> List&lt;Element&gt; elements<span class="hljs-punctuation">,</span> Element root) <span class="hljs-punctuation">&#123;</span><br>        if (elements == <span class="hljs-literal"><span class="hljs-keyword">null</span></span> || elements.isEmpty()) <span class="hljs-punctuation">&#123;</span><br>            return;<br>        <span class="hljs-punctuation">&#125;</span><br>        String namespace = root.attributeValue(<span class="hljs-string">&quot;namespace&quot;</span>);<br>        for (Element element <span class="hljs-punctuation">:</span> elements) <span class="hljs-punctuation">&#123;</span><br>            String id = element.attributeValue(<span class="hljs-string">&quot;id&quot;</span>);<br>            String sql = element.getText().trim();<br><br>            MybatisSqlStatement mybatisSqlStatement = new MybatisSqlStatement();<br>            mybatisSqlStatement.setNamespace(namespace);<br>            mybatisSqlStatement.setId(id);<br>            mybatisSqlStatement.setSql(sql);<br><br>            mybatisSqlStatements.add(mybatisSqlStatement);<br>        <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br><br></code></pre></td></tr></table></figure><p>然后，我们创建一个UserMapper.xml，用于测试，该文件内容如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs json">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;<br>&lt;!DOCTYPE mapper<br>        PUBLIC <span class="hljs-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span><br>        <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;<br><br><br>&lt;mapper namespace=<span class="hljs-string">&quot;com.yang.mybatis.test.IUserMapper&quot;</span>&gt;<br>    &lt;select id=<span class="hljs-string">&quot;queryUserName&quot;</span>&gt;<br>        select user_name from user where id = #<span class="hljs-punctuation">&#123;</span>id<span class="hljs-punctuation">&#125;</span><br>    &lt;/select&gt;<br>    &lt;select id=<span class="hljs-string">&quot;queryUserAge&quot;</span>&gt;<br>        select age from user where id = #<span class="hljs-punctuation">&#123;</span>id<span class="hljs-punctuation">&#125;</span><br>    &lt;/select&gt;<br>&lt;/mapper&gt;<br></code></pre></td></tr></table></figure><p>添加测试代码，进行测试：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs json">public static void main(String<span class="hljs-punctuation">[</span><span class="hljs-punctuation">]</span> args) <span class="hljs-punctuation">&#123;</span><br>    IMybatisMapperParser mybatisMapperParser = new XmlMybatisMapperParser();<br>    List&lt;MybatisSqlStatement&gt; mybatisSqlStatements = mybatisMapperParser.parseMapper(<span class="hljs-string">&quot;mapper/UserMapper.xml&quot;</span>);<br>    for (MybatisSqlStatement mybatisSqlStatement <span class="hljs-punctuation">:</span> mybatisSqlStatements) <span class="hljs-punctuation">&#123;</span><br>        System.out.println(<span class="hljs-string">&quot;=================&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;namespace:&quot;</span> + mybatisSqlStatement.getNamespace());<br>        System.out.println(<span class="hljs-string">&quot;id:&quot;</span> + mybatisSqlStatement.getId());<br>        System.out.println(<span class="hljs-string">&quot;sql:&quot;</span> + mybatisSqlStatement.getSql());<br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>结果如下：</p><img src="/2024/05/05/%E6%89%8B%E6%92%B8Mybatis%EF%BC%88%E4%BA%8C%EF%BC%89%E2%80%94%E2%80%94%E9%85%8D%E7%BD%AE%E9%A1%B9%E7%9A%84%E8%8E%B7%E5%8F%96/2.png" class=""><h3 id="MapperProxyFactory注册Mapper"><a href="#MapperProxyFactory注册Mapper" class="headerlink" title="MapperProxyFactory注册Mapper"></a>MapperProxyFactory注册Mapper</h3><p>这里再修改一些MybatisConfiguration，因为mapperXML里的内容，其实我认为也属于配置项，因此收敛到MybatisConfiguration，方便后续统一管理</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs json">package com.yang.mybatis.config;<br><br>import java.io.Serializable;<br>import java.util.ArrayList;<br>import java.util.HashMap;<br>import java.util.List;<br>import java.util.Map;<br><br>public class MybatisConfiguration implements Serializable <span class="hljs-punctuation">&#123;</span><br>    private Map&lt;String<span class="hljs-punctuation">,</span> MybatisEnvironment&gt; id2EnvironmentMap = new HashMap&lt;&gt;();<br><br>    private MybatisEnvironment defaultMybatisEnvironment;<br><br>    private List&lt;String&gt; mapperPaths = new ArrayList&lt;&gt;();<br><br>    private Map&lt;String<span class="hljs-punctuation">,</span> List&lt;MybatisSqlStatement&gt;&gt; mapper2SqlStatementsMap = new HashMap&lt;&gt;();<br><br>    public void putMybatisSqlStatementList(String mapperName<span class="hljs-punctuation">,</span> List&lt;MybatisSqlStatement&gt; mybatisSqlStatementList) <span class="hljs-punctuation">&#123;</span><br>        if (mapper2SqlStatementsMap.containsKey(mapperName)) <span class="hljs-punctuation">&#123;</span><br>            mapper2SqlStatementsMap.get(mapperName).addAll(mybatisSqlStatementList);<br>        <span class="hljs-punctuation">&#125;</span> else <span class="hljs-punctuation">&#123;</span><br>            mapper2SqlStatementsMap.put(mapperName<span class="hljs-punctuation">,</span> mybatisSqlStatementList);<br>        <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br><br>    public Map&lt;String<span class="hljs-punctuation">,</span> List&lt;MybatisSqlStatement&gt;&gt; getMapper2SqlStatementsMap() <span class="hljs-punctuation">&#123;</span><br>        return this.mapper2SqlStatementsMap;<br>    <span class="hljs-punctuation">&#125;</span><br><br>    public void addEnvironment(String id<span class="hljs-punctuation">,</span> MybatisEnvironment mybatisEnvironment) <span class="hljs-punctuation">&#123;</span><br>        this.id2EnvironmentMap.put(id<span class="hljs-punctuation">,</span> mybatisEnvironment);<br>    <span class="hljs-punctuation">&#125;</span><br><br>    public MybatisEnvironment getEnvironment(String id) <span class="hljs-punctuation">&#123;</span><br>        return id2EnvironmentMap.get(id);<br>    <span class="hljs-punctuation">&#125;</span><br><br>    public MybatisEnvironment getDefaultMybatisEnvironment() <span class="hljs-punctuation">&#123;</span><br>        return defaultMybatisEnvironment;<br>    <span class="hljs-punctuation">&#125;</span><br><br>    public void setDefaultMybatisEnvironment(MybatisEnvironment defaultMybatisEnvironment) <span class="hljs-punctuation">&#123;</span><br>        this.defaultMybatisEnvironment = defaultMybatisEnvironment;<br>    <span class="hljs-punctuation">&#125;</span><br><br>    public void addMapperPath(String mapperPath) <span class="hljs-punctuation">&#123;</span><br>        this.mapperPaths.add(mapperPath);<br>    <span class="hljs-punctuation">&#125;</span><br><br>    public List&lt;String&gt; getMapperPaths() <span class="hljs-punctuation">&#123;</span><br>        return this.mapperPaths;<br>    <span class="hljs-punctuation">&#125;</span><br><br>    public List&lt;MybatisEnvironment&gt; getEnvironments() <span class="hljs-punctuation">&#123;</span><br>        return new ArrayList&lt;&gt;(id2EnvironmentMap.values());<br>    <span class="hljs-punctuation">&#125;</span><br><br><span class="hljs-punctuation">&#125;</span><br><br></code></pre></td></tr></table></figure><p>然后修改MapperProxy，接收MybatisSqlStatement数组，在执行的时候，根据执行方法，找到对应的MybatisSqlStatement，获取mapper Xml对应的sql语句，并打印出来</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs json">package com.yang.mybatis.mapper;<br><br>import com.yang.mybatis.config.MybatisSqlStatement;<br><br>import java.lang.reflect.InvocationHandler;<br>import java.lang.reflect.Method;<br>import java.util.HashMap;<br>import java.util.List;<br>import java.util.Map;<br><br>public class MapperProxy&lt;T&gt; implements InvocationHandler <span class="hljs-punctuation">&#123;</span><br>    private Map&lt;String<span class="hljs-punctuation">,</span> MybatisSqlStatement&gt; sqlSessionMap = new HashMap&lt;&gt;();<br><br>    private Class&lt;T&gt; mapperInterface;<br><br>    public MapperProxy(Class&lt;T&gt; mapperInterface<span class="hljs-punctuation">,</span> List&lt;MybatisSqlStatement&gt; mybatisSqlStatementList) <span class="hljs-punctuation">&#123;</span><br>        this.mapperInterface = mapperInterface;<br>        for (MybatisSqlStatement mybatisSqlStatement <span class="hljs-punctuation">:</span> mybatisSqlStatementList) <span class="hljs-punctuation">&#123;</span><br>            String mapperName = mybatisSqlStatement.getNamespace();<br>            String id = mybatisSqlStatement.getId();<br>            String key = mapperName + <span class="hljs-string">&quot;.&quot;</span> + id;<br>            sqlSessionMap.put(key<span class="hljs-punctuation">,</span> mybatisSqlStatement);<br>        <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br><br>    @Override<br>    public Object invoke(Object proxy<span class="hljs-punctuation">,</span> Method method<span class="hljs-punctuation">,</span> Object<span class="hljs-punctuation">[</span><span class="hljs-punctuation">]</span> args) throws Throwable <span class="hljs-punctuation">&#123;</span><br>        if (Object.class.equals(method.getDeclaringClass())) <span class="hljs-punctuation">&#123;</span><br>            return method.invoke(this<span class="hljs-punctuation">,</span> args);<br>        <span class="hljs-punctuation">&#125;</span><br>        String key = this.mapperInterface.getName() + <span class="hljs-string">&quot;.&quot;</span> + method.getName();<br>        return <span class="hljs-string">&quot;你的被代理了!&quot;</span> + sqlSessionMap.get(key).getSql();<br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br><br></code></pre></td></tr></table></figure><p>接着修改MybatisProxyFactory，通过配置信息，加载对应的mapper.xml文件并进行解析</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs json">package com.yang.mybatis.mapper;<br><br>import com.yang.mybatis.config.MybatisConfiguration;<br>import com.yang.mybatis.config.MybatisSqlStatement;<br><br>import java.lang.reflect.Proxy;<br>import java.util.HashMap;<br>import java.util.List;<br>import java.util.Map;<br><br>public class MapperProxyFactory <span class="hljs-punctuation">&#123;</span><br>    private Map&lt;Class<span class="hljs-punctuation">,</span> MapperProxy&gt; mapperProxyMap = new HashMap&lt;&gt;();<br><br><br>    public MapperProxyFactory(MybatisConfiguration mybatisConfiguration) <span class="hljs-punctuation">&#123;</span><br>        Map&lt;String<span class="hljs-punctuation">,</span> List&lt;MybatisSqlStatement&gt;&gt; mapperName2SqlStatementsMap = mybatisConfiguration.getMapper2SqlStatementsMap();<br>        mapperName2SqlStatementsMap.forEach((mapperName<span class="hljs-punctuation">,</span> sqlStatementList) -&gt; <span class="hljs-punctuation">&#123;</span><br>            try <span class="hljs-punctuation">&#123;</span><br>                Class&lt;?&gt; type = Class.forName(mapperName);<br>                mapperProxyMap.put(type<span class="hljs-punctuation">,</span> new MapperProxy(type<span class="hljs-punctuation">,</span> sqlStatementList));<br>            <span class="hljs-punctuation">&#125;</span> catch (ClassNotFoundException e) <span class="hljs-punctuation">&#123;</span><br>                throw new RuntimeException(e);<br>            <span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-punctuation">&#125;</span>);<br>    <span class="hljs-punctuation">&#125;</span><br><br>    public Object newInstance(Class mapperType) <span class="hljs-punctuation">&#123;</span><br>        MapperProxy mapperProxy = mapperProxyMap.get(mapperType);<br>        return Proxy.newProxyInstance(mapperType.getClassLoader()<span class="hljs-punctuation">,</span><br>                new Class<span class="hljs-punctuation">[</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">&#123;</span>mapperType<span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>                mapperProxy);<br>    <span class="hljs-punctuation">&#125;</span><br><br><span class="hljs-punctuation">&#125;</span><br><br></code></pre></td></tr></table></figure><p>添加测试方法，进行测试：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs json">public static void main(String<span class="hljs-punctuation">[</span><span class="hljs-punctuation">]</span> args) <span class="hljs-punctuation">&#123;</span><br>        IMybatisConfigurationParser iMybatisConfigurationParser = new XmlMybatisConfigurationParser();<br>        MybatisConfiguration mybatisConfiguration = iMybatisConfigurationParser.parser(<span class="hljs-string">&quot;mybatis-config.xml&quot;</span>);<br><br>        IMybatisMapperParser iMybatisMapperParser = new XmlMybatisMapperParser();<br>        List&lt;String&gt; mapperPaths = mybatisConfiguration.getMapperPaths();<br>        for (String mapperPath <span class="hljs-punctuation">:</span> mapperPaths) <span class="hljs-punctuation">&#123;</span><br>            List&lt;MybatisSqlStatement&gt; mybatisSqlStatements = iMybatisMapperParser.parseMapper(mapperPath);<br>            Map&lt;String<span class="hljs-punctuation">,</span> List&lt;MybatisSqlStatement&gt;&gt; mapperNameGroupMap = mybatisSqlStatements.stream()<br>                    .collect(Collectors.groupingBy(MybatisSqlStatement<span class="hljs-punctuation">:</span><span class="hljs-punctuation">:</span>getNamespace));<br><br>            for (Map.Entry&lt;String<span class="hljs-punctuation">,</span> List&lt;MybatisSqlStatement&gt;&gt; entry <span class="hljs-punctuation">:</span> mapperNameGroupMap.entrySet()) <span class="hljs-punctuation">&#123;</span><br>                String mapperName = entry.getKey();<br>                List&lt;MybatisSqlStatement&gt; sqlSessionList = entry.getValue();<br>                mybatisConfiguration.putMybatisSqlStatementList(mapperName<span class="hljs-punctuation">,</span> sqlSessionList);<br>            <span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-punctuation">&#125;</span><br><br>        MapperProxyFactory mapperProxyFactory = new MapperProxyFactory(mybatisConfiguration);<br>        IUserMapper userMapper = (IUserMapper) mapperProxyFactory.newInstance(IUserMapper.class);<br>        System.out.println(userMapper.queryUserName(<span class="hljs-number">1</span>));<br>    <span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>测试结果如下：</p><img src="/2024/05/05/%E6%89%8B%E6%92%B8Mybatis%EF%BC%88%E4%BA%8C%EF%BC%89%E2%80%94%E2%80%94%E9%85%8D%E7%BD%AE%E9%A1%B9%E7%9A%84%E8%8E%B7%E5%8F%96/3.png" class=""><h3 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h3><p><a href="https://zhuanlan.zhihu.com/p/338300626">https://zhuanlan.zhihu.com/p/338300626</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>-Mybatis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>手撸Mybatis（一）——代理mapper</title>
    <link href="/2024/05/05/%E6%89%8B%E6%92%B8Mybatis%EF%BC%88%E4%B8%80%EF%BC%89%E2%80%94%E2%80%94%E4%BB%A3%E7%90%86mapper/"/>
    <url>/2024/05/05/%E6%89%8B%E6%92%B8Mybatis%EF%BC%88%E4%B8%80%EF%BC%89%E2%80%94%E2%80%94%E4%BB%A3%E7%90%86mapper/</url>
    
    <content type="html"><![CDATA[<h3 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h3><p>最近刚写完毕设，闲来无事，看到网上有一个手撸Mybatis的教程，于是想自己实现一个简易版的Mybatis。</p><h3 id="创建简单的映射器代理工厂"><a href="#创建简单的映射器代理工厂" class="headerlink" title="创建简单的映射器代理工厂"></a>创建简单的映射器代理工厂</h3><p>在使用mybatis的时候，我们一般只需要定义mapper的接口，并添加相应的@Mapper注解，然后实现对应的xml文件即可，而不需要对mapper接口进行具体的实现。其实本质上，这些mapper接口是有实现的，但不是我们手动通过implement来实现，而是通过代理的方式进行实现。因此，对于Mybatis的手撸，首先要关注的，就是如何对mapper进行代理。<br>首先我们定义一个MapperProxy，该类实现InvocationHandler接口，通过实现该接口，实现动态代理。这里有两个属性——sqlSession和mapperInterface，其中，sqlSession是用来模拟执行sql语句的。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs json">package com.yang.mybatis.proxy;<br><br>import java.lang.reflect.InvocationHandler;<br>import java.lang.reflect.Method;<br>import java.util.Map;<br><br>public class MapperProxy&lt;T&gt; implements InvocationHandler <span class="hljs-punctuation">&#123;</span><br>    private Map&lt;String<span class="hljs-punctuation">,</span> Object&gt; sqlSession ;<br><br>    private Class&lt;T&gt; mapperInterface;<br><br>    public MapperProxy(Map&lt;String<span class="hljs-punctuation">,</span> Object&gt; sqlSession<span class="hljs-punctuation">,</span> Class&lt;T&gt; mapperInterface) <span class="hljs-punctuation">&#123;</span><br>        this.sqlSession = sqlSession;<br>        this.mapperInterface = mapperInterface;<br>    <span class="hljs-punctuation">&#125;</span><br><br>    @Override<br>    public Object invoke(Object proxy<span class="hljs-punctuation">,</span> Method method<span class="hljs-punctuation">,</span> Object<span class="hljs-punctuation">[</span><span class="hljs-punctuation">]</span> args) throws Throwable <span class="hljs-punctuation">&#123;</span><br>        if (Object.class.equals(method.getDeclaringClass())) <span class="hljs-punctuation">&#123;</span><br>            return method.invoke(this<span class="hljs-punctuation">,</span> args);<br>        <span class="hljs-punctuation">&#125;</span><br>        String key = this.mapperInterface.getName() + <span class="hljs-string">&quot;.&quot;</span> + method.getName();<br>        return sqlSession.get(key);<br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br><br></code></pre></td></tr></table></figure><p>当我们在执行mapper的某个方法时，最终会进入到invoke方法，并通过sqlSession来获取模拟值。<br>接着我们定义MapperProxyFactory，每一个mapper都有一个MapperProxyFactory与之相对于，然后newInstance方法接收模拟的sql结果，并通过Proxy.newProxyInstance创建动态代理对象。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs json">package com.yang.mybatis.proxy;<br><br>import java.lang.reflect.Proxy;<br>import java.util.Map;<br><br>public class MapperProxyFactory &lt;T&gt; <span class="hljs-punctuation">&#123;</span><br>    private final Class&lt;T&gt; mapperInterface;<br><br>    public MapperProxyFactory(Class&lt;T&gt; mapperInterface) <span class="hljs-punctuation">&#123;</span><br>        this.mapperInterface = mapperInterface;<br>    <span class="hljs-punctuation">&#125;</span><br><br>    public T newInstance(Map&lt;String<span class="hljs-punctuation">,</span> Object&gt; sqlSession) <span class="hljs-punctuation">&#123;</span><br>        MapperProxy&lt;T&gt; mapperProxy = new MapperProxy&lt;&gt;(sqlSession<span class="hljs-punctuation">,</span> mapperInterface);<br>        return (T) Proxy.newProxyInstance(mapperInterface.getClassLoader()<span class="hljs-punctuation">,</span><br>                new Class<span class="hljs-punctuation">[</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">&#123;</span>mapperInterface<span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>                mapperProxy);<br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br><br></code></pre></td></tr></table></figure><p>最后，我们先创建一个IUserMapper类</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs json">package com.yang.mybatis.test;<br><br>public interface IUserMapper <span class="hljs-punctuation">&#123;</span><br>        String queryUserName(Integer id);<br><br>        Integer queryUserAge(Integer id);<br><span class="hljs-punctuation">&#125;</span><br><br></code></pre></td></tr></table></figure><p>然后创建对应的测试方法</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs json">package com.yang.mybatis.test;<br><br>import com.yang.mybatis.proxy.MapperProxyFactory;<br><br>import java.util.HashMap;<br>import java.util.Map;<br><br>public class Main <span class="hljs-punctuation">&#123;</span><br>    public static void main(String<span class="hljs-punctuation">[</span><span class="hljs-punctuation">]</span> args) <span class="hljs-punctuation">&#123;</span><br>        MapperProxyFactory&lt;IUserMapper&gt; userDaoMapperProxyFactory = new MapperProxyFactory&lt;&gt;(IUserMapper.class);<br>        Map&lt;String<span class="hljs-punctuation">,</span> Object&gt; sqlSession = new HashMap&lt;&gt;();<br>        sqlSession.put(<span class="hljs-string">&quot;com.yang.mybatis.test.IUserMapper.queryUserName&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;模拟查询用户名&quot;</span>);<br>        sqlSession.put(<span class="hljs-string">&quot;com.yang.mybatis.test.IUserMapper.queryUserAge&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-number">1</span>);<br>        IUserMapper iUserMapper = userDaoMapperProxyFactory.newInstance(sqlSession);<br>        System.out.println(iUserMapper.queryUserAge(<span class="hljs-number">1</span>));<br>        System.out.println(iUserMapper.queryUserName(<span class="hljs-number">1</span>));<br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br><br></code></pre></td></tr></table></figure><p>运行结果如下：</p><img src="/2024/05/05/%E6%89%8B%E6%92%B8Mybatis%EF%BC%88%E4%B8%80%EF%BC%89%E2%80%94%E2%80%94%E4%BB%A3%E7%90%86mapper/1.png" class=""><h3 id="实现映射器的注册和使用"><a href="#实现映射器的注册和使用" class="headerlink" title="实现映射器的注册和使用"></a>实现映射器的注册和使用</h3><p>像上述的这种方法，我们每次要获取一个Mapper，就要new一个对应的MapperProxyFactory，这样不太方便。一般情况下，mapper是放在同一个包下的，那么我们可以通过扫描包，来初始化MapperProxyFactory。至于上一节的sqlSession，因为我们目前是模拟数据，所以在初始化过程中，把这些模拟数据要随便mock住就行。<br>因为要扫描包获取包下的Class类，我们先添加hutool-all，以便通过其提供的ClassScanner获取包</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs json">&lt;dependency&gt;<br>         &lt;groupId&gt;cn.hutool&lt;/groupId&gt;<br>         &lt;artifactId&gt;hutool-all&lt;/artifactId&gt;<br>         &lt;version&gt;<span class="hljs-number">5.8</span><span class="hljs-number">.12</span>&lt;/version&gt;<br>     &lt;/dependency&gt;<br></code></pre></td></tr></table></figure><p>然后，我们修改MapperProxyFactory</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs json">package com.yang.mybatis.proxy;<br><br>import cn.hutool.core.lang.ClassScanner;<br><br>import java.lang.reflect.Method;<br>import java.lang.reflect.Proxy;<br>import java.util.HashMap;<br>import java.util.Map;<br>import java.util.Set;<br><br>public class MapperProxyFactory <span class="hljs-punctuation">&#123;</span><br>    private Map&lt;Class<span class="hljs-punctuation">,</span> MapperProxy&gt; mapperProxyMap = new HashMap&lt;&gt;();<br><br>    public MapperProxyFactory(String packageName) <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-comment">// 扫描包</span><br>        ClassScanner scanner = new ClassScanner(packageName);<br>        Set&lt;Class&lt;?&gt;&gt; mapperTypes = scanner.scan();<br>        for (Class&lt;?&gt; mapperType <span class="hljs-punctuation">:</span> mapperTypes) <span class="hljs-punctuation">&#123;</span><br>            if (!mapperType.isInterface()) <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-comment">// 只对接口进行处理</span><br>                continue;<br>            <span class="hljs-punctuation">&#125;</span><br><br>            Map&lt;String<span class="hljs-punctuation">,</span> String&gt; mockSqlSession = mockSqlSession(mapperType);<br>            MapperProxy mapperProxy = new MapperProxy(mockSqlSession<span class="hljs-punctuation">,</span> mapperType);<br>            mapperProxyMap.put(mapperType<span class="hljs-punctuation">,</span> mapperProxy);<br>        <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br><br>    public Object newInstance(Class mapperType) <span class="hljs-punctuation">&#123;</span><br>        MapperProxy mapperProxy = mapperProxyMap.get(mapperType);<br>        return Proxy.newProxyInstance(mapperType.getClassLoader()<span class="hljs-punctuation">,</span><br>                new Class<span class="hljs-punctuation">[</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">&#123;</span>mapperType<span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>                mapperProxy);<br>    <span class="hljs-punctuation">&#125;</span><br><br>    private Map&lt;String<span class="hljs-punctuation">,</span> String&gt; mockSqlSession(Class mapperType) <span class="hljs-punctuation">&#123;</span><br>        Map&lt;String<span class="hljs-punctuation">,</span> String&gt; sqlSession = new HashMap&lt;&gt;();<br>        for (Method method <span class="hljs-punctuation">:</span> mapperType.getMethods()) <span class="hljs-punctuation">&#123;</span><br>            String methodName = method.getName();<br>            String key = mapperType.getName() + <span class="hljs-string">&quot;.&quot;</span> + methodName;<br>            sqlSession.put(key<span class="hljs-punctuation">,</span> key);<br>        <span class="hljs-punctuation">&#125;</span><br>        return sqlSession;<br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>最后进行测试：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs json">public static void main(String<span class="hljs-punctuation">[</span><span class="hljs-punctuation">]</span> args) <span class="hljs-punctuation">&#123;</span><br>      MapperProxyFactory mapperProxyFactory = new MapperProxyFactory(<span class="hljs-string">&quot;com.yang.mybatis.test&quot;</span>);<br>      IUserMapper iUserMapper = (IUserMapper) mapperProxyFactory.newInstance(IUserMapper.class);<br>      System.out.println(iUserMapper.queryUserName(<span class="hljs-number">1</span>));<br>  <span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>测试结果如下：</p><img src="/2024/05/05/%E6%89%8B%E6%92%B8Mybatis%EF%BC%88%E4%B8%80%EF%BC%89%E2%80%94%E2%80%94%E4%BB%A3%E7%90%86mapper/2.png" class="">]]></content>
    
    
    
    <tags>
      
      <tag>-Mybatis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringSecurity学习2—SpringSecurity授权</title>
    <link href="/2024/04/03/SpringSecurity%E5%AD%A6%E4%B9%A02%E2%80%94SpringSecurity%E6%8E%88%E6%9D%83/"/>
    <url>/2024/04/03/SpringSecurity%E5%AD%A6%E4%B9%A02%E2%80%94SpringSecurity%E6%8E%88%E6%9D%83/</url>
    
    <content type="html"><![CDATA[<h3 id="1-引言"><a href="#1-引言" class="headerlink" title="1. 引言"></a>1. 引言</h3><p>Spring Security进行认证和鉴权的时候，就是利用一系列的Filter来进行拦截的。如下图所示，一个请求想要访问到API就会从左到右经过蓝线框里的过滤器，其中黄色部分是负责认证的过滤器，蓝色部分负责异常处理，橙色部分则是负责授权。经过一些列拦截最终访问到我们的API。</p><img src="/2024/04/03/SpringSecurity%E5%AD%A6%E4%B9%A02%E2%80%94SpringSecurity%E6%8E%88%E6%9D%83/1.png" class=""><p>这里需要重点关注两个过滤器：UsernamePasswordAuthenticationFilter负责登录认证，FilterSecurityInterceptor负责权限授权。<br>在SpringSecurity中，会使用默认的FilterSecurityInterceptor来进行权限校验，在FilterSecurityInterceptor中会从SecurityContextHolder获取其中的Authentication，然后获取其中的权限信息，判断当前用户是否拥有访问当前资源所需的权限。<br>SpringSecurity中的Authentication类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Authentication</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Principal</span>, Serializable &#123;<br><span class="hljs-comment">//权限数据列表</span><br>    Collection&lt;? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">GrantedAuthority</span>&gt; getAuthorities();<br><br>    Object <span class="hljs-title function_">getCredentials</span><span class="hljs-params">()</span>;<br><br>    Object <span class="hljs-title function_">getDetails</span><span class="hljs-params">()</span>;<br><br>    Object <span class="hljs-title function_">getPrincipal</span><span class="hljs-params">()</span>;<br><br>    <span class="hljs-type">boolean</span> <span class="hljs-title function_">isAuthenticated</span><span class="hljs-params">()</span>;<br><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAuthenticated</span><span class="hljs-params">(<span class="hljs-type">boolean</span> var1)</span> <span class="hljs-keyword">throws</span> IllegalArgumentException;<br>&#125;<br></code></pre></td></tr></table></figure><p>Principal: 用户信息，没有认证时一般是用户名，认证后一般是用户对象<br>Credentials: 用户凭证，一般是密码<br>Authorities: 用户权限</p><h3 id="2-代码示例"><a href="#2-代码示例" class="headerlink" title="2. 代码示例"></a>2. 代码示例</h3><p>将权限信息，赋值给UserDetails<br>在我们之前自定义的UserContextDetails中，已经有对应的权限信息了，因此，我们可以将其权限信息，转化为对应的Authority类，我们修改MyUserDetails类，将UserContextDetails中和权限相关的类，转化为SpringSecurity体系中的权限类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.yang.infrastructure.security;<br><br><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSONObject;<br><span class="hljs-keyword">import</span> com.yang.infrastructure.auth.PermissionDetails;<br><span class="hljs-keyword">import</span> com.yang.infrastructure.auth.UserContextDetails;<br><span class="hljs-keyword">import</span> lombok.Data;<br><span class="hljs-keyword">import</span> org.springframework.security.core.GrantedAuthority;<br><span class="hljs-keyword">import</span> org.springframework.security.core.authority.AuthorityUtils;<br><span class="hljs-keyword">import</span> org.springframework.security.core.userdetails.UserDetails;<br><span class="hljs-keyword">import</span> org.springframework.util.CollectionUtils;<br><br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.Collection;<br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">import</span> java.util.stream.Collectors;<br><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyUserDetails</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserDetails</span> &#123;<br>    <span class="hljs-keyword">private</span> UserContextDetails userContextDetails;<br><br>    <span class="hljs-keyword">private</span> String password;<br><br>    <span class="hljs-keyword">private</span> List&lt;GrantedAuthority&gt; authorityList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MyUserDetails</span><span class="hljs-params">(UserContextDetails userContextDetails)</span> &#123;<br>        <span class="hljs-built_in">this</span>.userContextDetails = userContextDetails;<br>        richAuthority();<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">richAuthority</span><span class="hljs-params">()</span> &#123;<br>        List&lt;PermissionDetails&gt; permissionDetails = userContextDetails.getPermissionDetails();<br>        <span class="hljs-keyword">if</span> (CollectionUtils.isEmpty(permissionDetails)) &#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        String[] permissions = permissionDetails.stream().map(PermissionDetails::getName)<br>                .collect(Collectors.toList()).toArray(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[<span class="hljs-number">0</span>]);<br>        <span class="hljs-built_in">this</span>.authorityList = AuthorityUtils.createAuthorityList(permissions);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MyUserDetails</span><span class="hljs-params">(UserContextDetails userContextDetails, String password)</span> &#123;<br>        <span class="hljs-built_in">this</span>.userContextDetails = userContextDetails;<br>        <span class="hljs-built_in">this</span>.password = password;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Collection&lt;? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">GrantedAuthority</span>&gt; getAuthorities() &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.authorityList;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getPassword</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.password;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getUsername</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> userContextDetails.getUsername();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isAccountNonExpired</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isAccountNonLocked</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isCredentialsNonExpired</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isEnabled</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>然后还需要修改JwtTokenVerifyFilter类，在构建UsernamePasswordAuthenticationToken的时候，将权限赋值上去。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.yang.infrastructure.security.filter;<br><br><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSONObject;<br><span class="hljs-keyword">import</span> com.yang.domain.data.Role;<br><span class="hljs-keyword">import</span> com.yang.infrastructure.auth.PermissionDetails;<br><span class="hljs-keyword">import</span> com.yang.infrastructure.auth.UserContextDetails;<br><span class="hljs-keyword">import</span> com.yang.infrastructure.auth.config.JwtTokenProperty;<br><span class="hljs-keyword">import</span> com.yang.infrastructure.auth.request.JwtTokenVerifyRequest;<br><span class="hljs-keyword">import</span> com.yang.infrastructure.auth.response.JwtTokenVerifyDTO;<br><span class="hljs-keyword">import</span> com.yang.infrastructure.auth.service.JwtTokenService;<br><span class="hljs-keyword">import</span> com.yang.infrastructure.security.MyUserDetails;<br><span class="hljs-keyword">import</span> com.yang.infrastructure.utils.RedisUtils;<br><span class="hljs-keyword">import</span> com.yang.infrastructure.utils.SpringContextUtils;<br><span class="hljs-keyword">import</span> org.apache.commons.lang3.StringUtils;<br><span class="hljs-keyword">import</span> org.springframework.security.authentication.UsernamePasswordAuthenticationToken;<br><span class="hljs-keyword">import</span> org.springframework.security.core.context.SecurityContextHolder;<br><span class="hljs-keyword">import</span> org.springframework.security.core.userdetails.UserDetails;<br><span class="hljs-keyword">import</span> org.springframework.web.filter.OncePerRequestFilter;<br><br><span class="hljs-keyword">import</span> javax.servlet.FilterChain;<br><span class="hljs-keyword">import</span> javax.servlet.ServletException;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">import</span> java.util.stream.Collectors;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JwtTokenVerifyFilter</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">OncePerRequestFilter</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doFilterInternal</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">token</span> <span class="hljs-operator">=</span> request.getHeader(<span class="hljs-string">&quot;token&quot;</span>);<br>        <span class="hljs-keyword">if</span> (StringUtils.isEmpty(token)) &#123;<br>            filterChain.doFilter(request, response);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br><br>        <span class="hljs-type">UserContextDetails</span> <span class="hljs-variable">userContextDetails</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">userDetailsFromRedis</span> <span class="hljs-operator">=</span> getUserDetailsFromRedis(token);<br>        <span class="hljs-keyword">if</span> (userDetailsFromRedis != <span class="hljs-literal">null</span>) &#123;<br>            userContextDetails = (UserContextDetails) userDetailsFromRedis;<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (userContextDetails == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-type">JwtTokenService</span> <span class="hljs-variable">jwtTokenService</span> <span class="hljs-operator">=</span> SpringContextUtils.getBeanOfType(JwtTokenService.class);<br>            <span class="hljs-type">JwtTokenProperty</span> <span class="hljs-variable">jwtTokenProperty</span> <span class="hljs-operator">=</span> SpringContextUtils.getBeanOfType(JwtTokenProperty.class);<br><br>            <span class="hljs-type">JwtTokenVerifyRequest</span> <span class="hljs-variable">jwtTokenVerifyRequest</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JwtTokenVerifyRequest</span>();<br>            jwtTokenVerifyRequest.setToken(token);<br>            jwtTokenVerifyRequest.setSecret(jwtTokenProperty.getSecret());<br><br>            <span class="hljs-type">JwtTokenVerifyDTO</span> <span class="hljs-variable">verify</span> <span class="hljs-operator">=</span> jwtTokenService.verify(jwtTokenVerifyRequest);<br>            <span class="hljs-keyword">if</span> (verify == <span class="hljs-literal">null</span>) &#123;<br>                filterChain.doFilter(request, response);<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br><br>            userContextDetails = <span class="hljs-keyword">new</span> <span class="hljs-title class_">UserContextDetails</span>();<br>            userContextDetails.setId(Integer.valueOf(verify.getSubject()));<br>            userContextDetails.setToken(token);<br>            userContextDetails.setUsername(verify.getPayLoads().get(<span class="hljs-string">&quot;username&quot;</span>));<br>            userContextDetails.setExtendMap(verify.getPayLoads());<br>            List&lt;Role&gt; roles = JSONObject.parseArray(verify.getPayLoads().get(<span class="hljs-string">&quot;roles&quot;</span>), Role.class);<br>            userContextDetails.setPermissionDetails(roles.stream().map(role -&gt; &#123;<br>                <span class="hljs-type">PermissionDetails</span> <span class="hljs-variable">permissionDetails</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PermissionDetails</span>();<br>                permissionDetails.setName(role.getCode());<br>                <span class="hljs-keyword">return</span> permissionDetails;<br>            &#125;).collect(Collectors.toList()));<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (userContextDetails == <span class="hljs-literal">null</span>) &#123;<br>            filterChain.doFilter(request, response);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-type">UserDetails</span> <span class="hljs-variable">userDetails</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyUserDetails</span>(userContextDetails);<br>        <span class="hljs-type">UsernamePasswordAuthenticationToken</span> <span class="hljs-variable">authenticationToken</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UsernamePasswordAuthenticationToken</span>(userDetails, <span class="hljs-literal">null</span>, userDetails.getAuthorities());<br>        SecurityContextHolder.getContext().setAuthentication(authenticationToken);<br>        filterChain.doFilter(request, response);<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> Object <span class="hljs-title function_">getUserDetailsFromRedis</span><span class="hljs-params">(String token)</span> &#123;<br>        <span class="hljs-type">RedisUtils</span> <span class="hljs-variable">redisUtils</span> <span class="hljs-operator">=</span> SpringContextUtils.getBeanOfType(RedisUtils.class);<br>        <span class="hljs-keyword">return</span> redisUtils.getKey(<span class="hljs-string">&quot;token:&quot;</span> + token);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2-2-URL层面的授权"><a href="#2-2-URL层面的授权" class="headerlink" title="2.2. URL层面的授权"></a>2.2. URL层面的授权</h4><p>在配置类中，http.authorizeRequests()主要是对url进行控制，配置顺序会影响之后授权的效果，越是具体的应该放前面，越是笼统的应该放后面。<br>anyRequest(): 表示匹配所有的请求，一般情况下此方法都会使用，设置全部内容都需要进行认证，会放到最后。<br>antMatchers：参数是不定向参数，每个参数是一个ant表达式，用于匹配URL规则。</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc">ANT 通配符说明<br>? 匹配任何单字符<br><span class="hljs-bullet">* </span>匹配0或者任意数量的字符<br><span class="hljs-bullet">** </span>匹配0或者更多的目录<br></code></pre></td></tr></table></figure><p>假设我们对&#x2F;security&#x2F;permitAll可以免认证，配置为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">http.authorizeRequests<br>.antMatchers(<span class="hljs-string">&quot;/security/permitAll&quot;</span>).permitAll()<br></code></pre></td></tr></table></figure><p>在上述配置中，我们在antMatchers(“&#x2F;security&#x2F;permitAll”)后调用了permitAll()表示不需要认证，随意访问，在SpringSecurity中提供了多种内置控制。</p><h5 id="2-2-1-直接授权"><a href="#2-2-1-直接授权" class="headerlink" title="2.2.1. 直接授权"></a>2.2.1. 直接授权</h5><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>permitAll()</td><td>所匹配的 URL ,任何人都允许访问</td></tr><tr><td>denyAll()</td><td>所匹配的 URL, 任何人都不允许被访问</td></tr><tr><td>authenticated()</td><td>所匹配的 URL ,任何人 都需要被认证才能访问</td></tr><tr><td>anonymous()</td><td>表示可以匿名访问匹配的 URL。和 permitAll()效果类似，只是设置为 anonymous()的 url 会执行 filter 链中</td></tr><tr><td>rememberMe()</td><td>被“remember me”的用户允许访问</td></tr><tr><td>fullyAuthenticated()</td><td>如果用户不是被 remember me ,才可以访问。</td></tr></tbody></table><p>anonymouse和permitAll的区别：前者表示匿名访问，仅允许匿名用户访问，如果登录认证后，带有token信息再去请求，这个anonymouse关联的资源就不能访问；permitAll登录能访问，不登陆也能返回，一般用于静态资源js等。<br>假设我们的SpringSecurity配置如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.yang.infrastructure.security.config;<br><br><span class="hljs-keyword">import</span> com.yang.infrastructure.security.filter.JwtTokenVerifyFilter;<br><span class="hljs-keyword">import</span> com.yang.infrastructure.security.handler.JwtAccessDeniedExceptionHandler;<br><span class="hljs-keyword">import</span> com.yang.infrastructure.security.handler.JwtAuthenticationExceptionHandler;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><span class="hljs-keyword">import</span> org.springframework.security.config.annotation.web.builders.HttpSecurity;<br><span class="hljs-keyword">import</span> org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;<br><span class="hljs-keyword">import</span> org.springframework.security.config.http.SessionCreationPolicy;<br><span class="hljs-keyword">import</span> org.springframework.security.web.SecurityFilterChain;<br><span class="hljs-keyword">import</span> org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;<br><br><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@EnableWebSecurity</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SecurityConfig</span> &#123;<br><br>    <span class="hljs-meta">@Bean</span><br>    SecurityFilterChain <span class="hljs-title function_">filterChain</span><span class="hljs-params">(HttpSecurity httpSecurity)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        httpSecurity.headers().cacheControl(); <span class="hljs-comment">// 禁用缓存</span><br>        <span class="hljs-comment">// 登录和注册接口，放行</span><br>        <span class="hljs-keyword">return</span> httpSecurity.authorizeRequests()<br>                .antMatchers(<span class="hljs-string">&quot;/user/login&quot;</span>).permitAll()<br>                .antMatchers(<span class="hljs-string">&quot;/user/register&quot;</span>).permitAll()<br>                .antMatchers(<span class="hljs-string">&quot;/security/permitAll&quot;</span>).permitAll()<br>                .antMatchers(<span class="hljs-string">&quot;/security/anonymous&quot;</span>).anonymous()<br>                .anyRequest().authenticated()<br>                .and()<br>                .csrf().disable()<br>                .sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS) <span class="hljs-comment">// 设置无状态连接，即不创建session</span><br>                .and()<br>                .cors().disable() <span class="hljs-comment">// 解决跨域问题</span><br>                .exceptionHandling()<br>                .authenticationEntryPoint(<span class="hljs-keyword">new</span> <span class="hljs-title class_">JwtAuthenticationExceptionHandler</span>()) <span class="hljs-comment">// 未认证异常处理</span><br>                .accessDeniedHandler(<span class="hljs-keyword">new</span> <span class="hljs-title class_">JwtAccessDeniedExceptionHandler</span>()) <span class="hljs-comment">// 权限不足异常处理</span><br>                .and()<br>                .addFilterBefore(<span class="hljs-keyword">new</span> <span class="hljs-title class_">JwtTokenVerifyFilter</span>(), UsernamePasswordAuthenticationFilter.class) <span class="hljs-comment">// 添加自定义过滤器</span><br>                .build();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里对登录、注册、permitAll接口放行，对anonymouse接口允许匿名访问。然后我们添加对应的controller</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.yang.controller;<br><br><span class="hljs-keyword">import</span> com.yang.infrastructure.common.Response;<br><span class="hljs-keyword">import</span> org.springframework.security.core.context.SecurityContextHolder;<br><span class="hljs-keyword">import</span> org.springframework.security.core.userdetails.UserDetails;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.GetMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<br><br><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(value = &quot;/security&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SecurityController</span> &#123;<br><br>    <span class="hljs-meta">@GetMapping(value = &quot;/hello&quot;)</span><br>    <span class="hljs-keyword">public</span> Response <span class="hljs-title function_">hello</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">UserDetails</span>  <span class="hljs-variable">userDetails</span> <span class="hljs-operator">=</span> (UserDetails) SecurityContextHolder.getContext().getAuthentication().getPrincipal();<br>        System.out.println(userDetails);<br>        <span class="hljs-keyword">return</span> Response.success(<span class="hljs-string">&quot;hello&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@GetMapping(value = &quot;/anonymous&quot;)</span><br>    <span class="hljs-keyword">public</span> Response <span class="hljs-title function_">anonymous</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> Response.success(<span class="hljs-string">&quot;anonymous&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@GetMapping(value = &quot;/permitAll&quot;)</span><br>    <span class="hljs-keyword">public</span> Response <span class="hljs-title function_">permitAll</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> Response.success(<span class="hljs-string">&quot;permitAll&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行项目，进行测试，在未登录的情况下，访问anonymous和permitAll接口：</p><img src="/2024/04/03/SpringSecurity%E5%AD%A6%E4%B9%A02%E2%80%94SpringSecurity%E6%8E%88%E6%9D%83/2.png" class=""><img src="/2024/04/03/SpringSecurity%E5%AD%A6%E4%B9%A02%E2%80%94SpringSecurity%E6%8E%88%E6%9D%83/3.png" class=""><p>在登录情况下访问anonymous和permitAll</p><img src="/2024/04/03/SpringSecurity%E5%AD%A6%E4%B9%A02%E2%80%94SpringSecurity%E6%8E%88%E6%9D%83/4.png" class=""><img src="/2024/04/03/SpringSecurity%E5%AD%A6%E4%B9%A02%E2%80%94SpringSecurity%E6%8E%88%E6%9D%83/5.png" class=""><h5 id="2-2-2-权限授权"><a href="#2-2-2-权限授权" class="headerlink" title="2.2.2. 权限授权"></a>2.2.2. 权限授权</h5><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>hasAuthority(String authorities)</td><td>拥有指定权限的用户可以访问</td></tr><tr><td>hasAnyAuthority(String… authorities)</td><td>拥有指定任一权限的用户可访问</td></tr></tbody></table><p>我们修改SpringSecurity的配置，添加下面的权限信息：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">.antMatchers(<span class="hljs-string">&quot;/security/student&quot;</span>)<br>.hasAuthority(<span class="hljs-string">&quot;STUDENT&quot;</span>)<br>.antMatchers(<span class="hljs-string">&quot;/security/studentOrCounselor&quot;</span>)<br>.hasAnyAuthority(<span class="hljs-string">&quot;STUDENT&quot;</span>, <span class="hljs-string">&quot;COUNSELOR&quot;</span>)<br></code></pre></td></tr></table></figure><p>然后添加相应的测试接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(value = &quot;/student&quot;)</span><br><span class="hljs-keyword">public</span> Response <span class="hljs-title function_">student</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> Response.success(<span class="hljs-string">&quot;学生可以访问&quot;</span>);<br>&#125;<br><br><span class="hljs-meta">@GetMapping(value = &quot;/studentOrCounselor&quot;)</span><br><span class="hljs-keyword">public</span> Response <span class="hljs-title function_">studentOrCounselor</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> Response.success(<span class="hljs-string">&quot;学生或辅导员可以访问&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>接着，使用学生账号访问上面两个接口：</p><img src="/2024/04/03/SpringSecurity%E5%AD%A6%E4%B9%A02%E2%80%94SpringSecurity%E6%8E%88%E6%9D%83/6.png" class=""><img src="/2024/04/03/SpringSecurity%E5%AD%A6%E4%B9%A02%E2%80%94SpringSecurity%E6%8E%88%E6%9D%83/7.png" class=""><p>使用辅导员账号访问上面两个接口</p><img src="/2024/04/03/SpringSecurity%E5%AD%A6%E4%B9%A02%E2%80%94SpringSecurity%E6%8E%88%E6%9D%83/8.png" class=""><img src="/2024/04/03/SpringSecurity%E5%AD%A6%E4%B9%A02%E2%80%94SpringSecurity%E6%8E%88%E6%9D%83/9.png" class=""><h5 id="2-2-3-角色授权"><a href="#2-2-3-角色授权" class="headerlink" title="2.2.3. 角色授权"></a>2.2.3. 角色授权</h5><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>hasRole(String role)</td><td>拥有指定角色的用户可以访问,角色将被增加ROLE_前缀</td></tr><tr><td>hasAnyRoles(String… roles)</td><td>拥有指定任一角色的用户可访问</td></tr></tbody></table><p>这个功能和基于权限认证感觉差不多，只是我们在设置Authority的时候，要加上ROLE_前缀，不然匹配不上，这里就不做演示了。</p><h4 id="2-3-基于注解进行权限校验"><a href="#2-3-基于注解进行权限校验" class="headerlink" title="2.3. 基于注解进行权限校验"></a>2.3. 基于注解进行权限校验</h4><p>在SpringSecurity中，可以通过使用注解的方式进行权限校验，以下是一些常用的SpringSecurity注解：<br>1）@PreAuthorize和@ PostAuthorize: 用于方法安全性，可以定义方法执行前或执行后的权限校验。前者用于方法执行前，可以根据表达式判断是否有权限执行该方法，后者用于方法执行后，可以检测方法执行的结果是否有权限。<br>2）@Secured：该注解用于方法或类上，要求用户具有所有的指定角色。<br>3）@PermitAll：用于方法或类上，表示该方法对所有用户开放，无需权限即可访问。<br>4）@DenyAll：用于方法或类上，表示该方法对所有用户都不可访问。<br>5）@Authenticated：用于方法上，表示用户需要被认证（即已经通过身份验证）。<br>上述这些注解，SpringSecurity会利用表达式进行动态权限校验，其中可以使用hasRole、hasAuthority、hasAnyRole、hasAnyAuthority等方法来判断用户角色或权限。<br>在方法的权限控制上，SpringSecurity支持三种类型的注解，JSR-250注解，@Secured注解和表达式的注解，这三种注解默认都没有启动，需要通过@EnableGlobalMethodSecurity来启用，这些注解都可以卸载Service接口或方法上，也可以写到Controller或Controller的方法上。</p><h5 id="2-3-1-表达式的注解"><a href="#2-3-1-表达式的注解" class="headerlink" title="2.3.1. 表达式的注解"></a>2.3.1. 表达式的注解</h5><p>我们以PreAuthorize注解为例，首先，要在配置类中开启注解，在配置类上，加上下面这行代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@EnableGlobalMethodSecurity(prePostEnabled = true)</span><br></code></pre></td></tr></table></figure><p>然后，我们添加两个接口，用于测试PreAuthorize注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@PreAuthorize(value = &quot;hasAuthority(&#x27;STUDENT&#x27;)&quot;)</span><br>  <span class="hljs-meta">@GetMapping(value = &quot;/permitStudent&quot;)</span><br>  <span class="hljs-keyword">public</span> Response <span class="hljs-title function_">permitStudent</span><span class="hljs-params">()</span> &#123;<br>      <span class="hljs-keyword">return</span> Response.success(<span class="hljs-string">&quot;学生才有权限&quot;</span>);<br>  &#125;<br><br>  <span class="hljs-meta">@PreAuthorize(value = &quot;hasAnyAuthority(&#x27;STUDENT&#x27;, &#x27;COUNSELOR&#x27;)&quot;)</span><br>  <span class="hljs-meta">@GetMapping(value = &quot;/permitStudentAndCounselor&quot;)</span><br>  <span class="hljs-keyword">public</span> Response <span class="hljs-title function_">permitStudentAndCounselor</span><span class="hljs-params">()</span> &#123;<br>      <span class="hljs-keyword">return</span> Response.success(<span class="hljs-string">&quot;学生和辅导员才有权限&quot;</span>);<br>  &#125;<br></code></pre></td></tr></table></figure><p>使用学生账号，访问上面两个接口：</p><img src="/2024/04/03/SpringSecurity%E5%AD%A6%E4%B9%A02%E2%80%94SpringSecurity%E6%8E%88%E6%9D%83/10.png" class=""><img src="/2024/04/03/SpringSecurity%E5%AD%A6%E4%B9%A02%E2%80%94SpringSecurity%E6%8E%88%E6%9D%83/11.png" class=""><p>使用辅导员账号访问上面两个接口：</p><img src="/2024/04/03/SpringSecurity%E5%AD%A6%E4%B9%A02%E2%80%94SpringSecurity%E6%8E%88%E6%9D%83/12.png" class=""><img src="/2024/04/03/SpringSecurity%E5%AD%A6%E4%B9%A02%E2%80%94SpringSecurity%E6%8E%88%E6%9D%83/13.png" class=""><h5 id="2-3-2-JSR-250注解"><a href="#2-3-2-JSR-250注解" class="headerlink" title="2.3.2. JSR-250注解"></a>2.3.2. JSR-250注解</h5><p>首先，修改SpringSecurity配置类，在刚才的基础上，开启jsr-250注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@EnableGlobalMethodSecurity(prePostEnabled = true, jsr250Enabled = true)</span><br></code></pre></td></tr></table></figure><p>然后添加一个接口，用于测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@PermitAll</span><br> <span class="hljs-meta">@GetMapping(value = &quot;/jsr250PermitAll&quot;)</span><br> <span class="hljs-keyword">public</span> Response <span class="hljs-title function_">jsr250PermitAll</span><span class="hljs-params">()</span> &#123;<br>     <span class="hljs-keyword">return</span> Response.success(<span class="hljs-string">&quot;jsr250PermitAll&quot;</span>);<br> &#125;<br></code></pre></td></tr></table></figure><p>首先，分别使用不同权限的用户登录token，访问该接口，结果如下：</p><img src="/2024/04/03/SpringSecurity%E5%AD%A6%E4%B9%A02%E2%80%94SpringSecurity%E6%8E%88%E6%9D%83/14.png" class=""><p>然后，不携带token访问该接口（未登录状态下访问接口）：</p><img src="/2024/04/03/SpringSecurity%E5%AD%A6%E4%B9%A02%E2%80%94SpringSecurity%E6%8E%88%E6%9D%83/15.png" class=""><p>这里会被拦截，原因是会先经过FilterSecurityInterceptor过滤器，利用匿名的认证用户进行投票决策，此时vote返回-1（因为没有匹配到当前url，只能匹配authenticated)，默认AffirmativeBased决策下就会直接抛出AccessDeniedException，因此就不会今日到MethodSecurityInterceptor的判断逻辑，必须认证之后才行。debug过程如下：<br>首先会浸入FilterSecurityInterceptor过滤器：</p><img src="/2024/04/03/SpringSecurity%E5%AD%A6%E4%B9%A02%E2%80%94SpringSecurity%E6%8E%88%E6%9D%83/16.png" class=""><img src="/2024/04/03/SpringSecurity%E5%AD%A6%E4%B9%A02%E2%80%94SpringSecurity%E6%8E%88%E6%9D%83/17.png" class=""><p>此时使用的是匿名的认证用户，进行投票决策</p><img src="/2024/04/03/SpringSecurity%E5%AD%A6%E4%B9%A02%E2%80%94SpringSecurity%E6%8E%88%E6%9D%83/18.png" class=""><img src="/2024/04/03/SpringSecurity%E5%AD%A6%E4%B9%A02%E2%80%94SpringSecurity%E6%8E%88%E6%9D%83/19.png" class=""><p>因为没有匹配到当前url，智能匹配authenticated，因此vote返回-1</p><img src="/2024/04/03/SpringSecurity%E5%AD%A6%E4%B9%A02%E2%80%94SpringSecurity%E6%8E%88%E6%9D%83/20.png" class=""><img src="/2024/04/03/SpringSecurity%E5%AD%A6%E4%B9%A02%E2%80%94SpringSecurity%E6%8E%88%E6%9D%83/21.png" class=""><p>最后，抛出AccessDeniedException异常</p><img src="/2024/04/03/SpringSecurity%E5%AD%A6%E4%B9%A02%E2%80%94SpringSecurity%E6%8E%88%E6%9D%83/22.png" class=""><h5 id="2-3-3-Secured注解"><a href="#2-3-3-Secured注解" class="headerlink" title="2.3.3. Secured注解"></a>2.3.3. Secured注解</h5><p>首先，修改SpringSecurity的配置类，开启Secured注解的支持。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@EnableGlobalMethodSecurity(prePostEnabled = true, jsr250Enabled = true, securedEnabled = true)</span><br></code></pre></td></tr></table></figure><p>Secured是专门用来判断是否具有角色的，参数要以ROLE开头，不过我们之前设置的权限，如STUDENT、COUNSELOR都没有以ROLE开头，我们先修改一些MyUserDetails类的richAuthority，加上ROLE前缀。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">richAuthority</span><span class="hljs-params">()</span> &#123;<br>      List&lt;PermissionDetails&gt; permissionDetails = userContextDetails.getPermissionDetails();<br>      <span class="hljs-keyword">if</span> (CollectionUtils.isEmpty(permissionDetails)) &#123;<br>          <span class="hljs-keyword">return</span>;<br>      &#125;<br>      String[] permissions = permissionDetails.stream().map(permission -&gt; <span class="hljs-string">&quot;ROLE_&quot;</span> + permission.getName())<br>              .collect(Collectors.toList()).toArray(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[<span class="hljs-number">0</span>]);<br>      <span class="hljs-built_in">this</span>.authorityList = AuthorityUtils.createAuthorityList(permissions);<br>  &#125;<br></code></pre></td></tr></table></figure><p>然后添加测试方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Secured(value = &quot;ROLE_STUDENT&quot;)</span><br>   <span class="hljs-meta">@GetMapping(value = &quot;/securedStudent&quot;)</span><br>   <span class="hljs-keyword">public</span> Response <span class="hljs-title function_">securedStudent</span><span class="hljs-params">()</span> &#123;<br>       <span class="hljs-keyword">return</span> Response.success(<span class="hljs-string">&quot;securedStudent&quot;</span>);<br>   &#125;<br></code></pre></td></tr></table></figure><p>分别用学生账号和辅导员账号访问该接口，结果如下：</p><img src="/2024/04/03/SpringSecurity%E5%AD%A6%E4%B9%A02%E2%80%94SpringSecurity%E6%8E%88%E6%9D%83/23.png" class=""><img src="/2024/04/03/SpringSecurity%E5%AD%A6%E4%B9%A02%E2%80%94SpringSecurity%E6%8E%88%E6%9D%83/24.png" class=""><h3 id="3-参考文章"><a href="#3-参考文章" class="headerlink" title="3. 参考文章"></a>3. 参考文章</h3><p><a href="https://blog.csdn.net/weixin_46073538/article/details/128641746">https://blog.csdn.net/weixin_46073538/article/details/128641746</a><br><a href="https://blog.csdn.net/qq_41071876/article/details/122086856">https://blog.csdn.net/qq_41071876/article/details/122086856</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>SpringBoot</tag>
      
      <tag>SpringSecurity</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringSecurity学习1—SpringSecurity认证</title>
    <link href="/2024/04/03/SpringSecurity%E5%AD%A6%E4%B9%A01%E2%80%94SpringSecurity%E8%AE%A4%E8%AF%81/"/>
    <url>/2024/04/03/SpringSecurity%E5%AD%A6%E4%B9%A01%E2%80%94SpringSecurity%E8%AE%A4%E8%AF%81/</url>
    
    <content type="html"><![CDATA[<h3 id="1-简介"><a href="#1-简介" class="headerlink" title="1. 简介"></a>1. 简介</h3><p>Spring Security是一个用于包含应用程序安全性的Java框架，它提供了一套全面的安全解决方案，包括身份验证、授权、防止攻击等功能。它基于过滤器链的概念，可以轻松地集成到任何基于Spring的应用程序中，它支持多种身份验证选项和授权策略，此外，还提供一些附加功能，如集成第三方身份验证提供商和单点登录，以及会话管理和密码编码等。</p><h3 id="2-SpringBoot整合SpringSecurity"><a href="#2-SpringBoot整合SpringSecurity" class="headerlink" title="2. SpringBoot整合SpringSecurity"></a>2. SpringBoot整合SpringSecurity</h3><h4 id="2-1-引言"><a href="#2-1-引言" class="headerlink" title="2.1. 引言"></a>2.1. 引言</h4><p>代码实现，基于前两章提到的登录、注册和鉴权项目，这里将使用SpringSecurity框架，逐步替代前两章自定义的认证授权实现。首先，注释掉WebMvcConfiguration类，去除该类对我们后续使用SpringSecurity的影响。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//package com.yang.infrastructure.configuration;</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">//import com.yang.infrastructure.auth.interceptors.JwtTokenVerifyInterceptor;</span><br><span class="hljs-comment">//import com.yang.infrastructure.auth.interceptors.PermissionVerifyInterceptor;</span><br><span class="hljs-comment">//import org.springframework.context.annotation.Configuration;</span><br><span class="hljs-comment">//import org.springframework.web.servlet.config.annotation.InterceptorRegistry;</span><br><span class="hljs-comment">//import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">//@Configuration</span><br><span class="hljs-comment">//public class WebMvcConfiguration implements WebMvcConfigurer &#123;</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">//    @Override</span><br><span class="hljs-comment">//    public void addInterceptors(InterceptorRegistry registry) &#123;</span><br><span class="hljs-comment">//        registry.addInterceptor(new JwtTokenVerifyInterceptor())</span><br><span class="hljs-comment">//                .addPathPatterns(&quot;/**&quot;) // 拦截所有请求</span><br><span class="hljs-comment">//                .excludePathPatterns(&quot;/user/login&quot;, &quot;/user/register&quot;); // 排除登录、注册接口</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">//        PermissionVerifyInterceptor permissionVerifyInterceptor = new PermissionVerifyInterceptor();</span><br><span class="hljs-comment">//        permissionVerifyInterceptor.addPermission(&quot;STUDENT&quot;, &quot;/student/needPermission&quot;);</span><br><span class="hljs-comment">//        permissionVerifyInterceptor.addPermission(&quot;COUNSELOR&quot;, &quot;/counselor/*&quot;);</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">//        registry.addInterceptor(permissionVerifyInterceptor)</span><br><span class="hljs-comment">//                .addPathPatterns(&quot;/**&quot;) // 拦截所有请求</span><br><span class="hljs-comment">//                .excludePathPatterns(&quot;/user/login&quot;, &quot;/user/register&quot;); // 排除登录、注册接口</span><br><span class="hljs-comment">//    &#125;</span><br><span class="hljs-comment">//&#125;</span><br></code></pre></td></tr></table></figure><h4 id="2-2-SpringSecurity完整流程"><a href="#2-2-SpringSecurity完整流程" class="headerlink" title="2.2. SpringSecurity完整流程"></a>2.2. SpringSecurity完整流程</h4><p>SpringSecurity功能的实现主要是一系列过滤器链相互配合完成的</p><img src="/2024/04/03/SpringSecurity%E5%AD%A6%E4%B9%A01%E2%80%94SpringSecurity%E8%AE%A4%E8%AF%81/1.png" class=""><p>SecurityContextPersistenceFilter：整个拦截过程的入口和出口（也就是第一个和最后一个拦截器），会在请求开始时从配置后的SecurityContextRepository中获取SecurityContext，然后把它设置给SecurityContextHolder，请求完成后将SecurityContextHolder持有的SecurityContext再保存到配置后的SecurityContextRepository，同时清除SecurityContextHolder所持有的SecurityContext；<br>UsernamePasswordAuthenticationFilter：用于处理来自表单提交的认证，该表单必须提供对应的用户名和密码，其内部还有登录成功或失败后进行处理的AuthenticationSuccessHandler和AuthenticationFailureHandler，这些都可以根据需求做相关改变；<br>Filter Security Interceptor：用于保护web资源，使用AccessDecisionManager对当前用户进行授权访问；<br>ExceptionTranslationFilter：捕获来着FilterChain所有的异常，并进行处理，但它只会处理两类异常：AuthenticationException和AccessDeniedException，其他异常会继续抛出。</p><h4 id="2-3-认证流程"><a href="#2-3-认证流程" class="headerlink" title="2.3. 认证流程"></a>2.3. 认证流程</h4><img src="/2024/04/03/SpringSecurity%E5%AD%A6%E4%B9%A01%E2%80%94SpringSecurity%E8%AE%A4%E8%AF%81/2.png" class=""><p>AuthenticationManager：定义认证Authentication的方法<br>UserDetailsService：加载用户特定数据的核心接口，里面定义了一个根据用户名查询用户信息的方法<br>UserDetails接口：提供核心用户信息，通过UserDetailsService根据用户名获取处理的用户信息，要封装成UserDetails对象返回，然后将这些信息封装到Authentication对象中。<br>入门案例<br>引入依赖<br>首先，我们引入SpringSecurity的依赖</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;dependency&gt;<br>           &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;<br>           &lt;artifactId&gt;spring-boot-starter-security&lt;/artifactId&gt;<br>       &lt;/dependency&gt;<br></code></pre></td></tr></table></figure><p>然后定义一个测试接口，用于测试SpringSecurity：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.yang.controller;<br><br><span class="hljs-keyword">import</span> com.yang.infrastructure.common.Response;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.GetMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<br><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(value = &quot;/security&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SecurityController</span> &#123;<br><br>    <span class="hljs-meta">@GetMapping(value = &quot;/hello&quot;)</span><br>    <span class="hljs-keyword">public</span> Response <span class="hljs-title function_">hello</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> Response.success(<span class="hljs-string">&quot;hello&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>启动项目，访问&#x2F;security&#x2F;hello接口，此时会跳转到登录界面</p><img src="/2024/04/03/SpringSecurity%E5%AD%A6%E4%B9%A01%E2%80%94SpringSecurity%E8%AE%A4%E8%AF%81/3.png" class=""><p>在控制台中，我们可以看到如下内容</p><img src="/2024/04/03/SpringSecurity%E5%AD%A6%E4%B9%A01%E2%80%94SpringSecurity%E8%AE%A4%E8%AF%81/4.png" class=""><p>我们使用user用户名，以及控制台中的密码，在表单提交登录,此时便会跳转到登录成功页面。</p><img src="/2024/04/03/SpringSecurity%E5%AD%A6%E4%B9%A01%E2%80%94SpringSecurity%E8%AE%A4%E8%AF%81/5.png" class=""><h4 id="2-4-2-UserDetailsService"><a href="#2-4-2-UserDetailsService" class="headerlink" title="2.4.2. UserDetailsService"></a>2.4.2. UserDetailsService</h4><p>在每次启动项目的时候，我们查看控制台时，总是能看到下面生成了一串UUID字符串</p><img src="/2024/04/03/SpringSecurity%E5%AD%A6%E4%B9%A01%E2%80%94SpringSecurity%E8%AE%A4%E8%AF%81/6.png" class=""><p>这是因为在默认情况下，SpringSecurity自动化地帮我们完成以下三件事情：<br>1）开启FormLogin登录认证模式：假设我们还没有登录，然后访问&#x2F;security&#x2F;hello测试接口，那么请求会被重定向到页面&#x2F;login，提示使用用户名和密码登录。<br>2）生成用于登录的用户名和密码：用户名是user，密码就是上面启动日志中随机生成的字符串<br>3）注册用于认证和鉴权的过滤器：SpringSecurity本质就是通过过滤器或过滤器（链）实现的，每一个接口请求都会按顺序经过这些过滤器的“过滤”，每个过滤器承担各自的职责，组合起来共同完成认证和鉴权，根据配置的不同，注册的过滤器有所不同。<br>使用默认用户名和随机密码的方式不够灵活，因此，我们可以实现SpringSecurity提供的UserDetailsService接口。这里先介绍SpringSecurity预置的两种常见的存储介质实现：<br>1）InMemoryUserDetailsManager：基于内存的实现<br>2）JdbcUserDetailsManager：基于数据库的实现<br>我们介绍以下InMemoryUserDetailsManager，我们创建用户实例和InMemoryUserDetailsManager实例，并使用@Bean将InMemoryUserDetailsManager实例注入到SpringSecurity中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SecurityConfig</span> &#123;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> UserDetailsManager <span class="hljs-title function_">users</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">UserDetails</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> User.builder()<br>                .username(<span class="hljs-string">&quot;cxy&quot;</span>)<br>                .password(<span class="hljs-string">&quot;&#123;bcrypt&#125;$2a$10$CrPsv1X3hM&quot;</span> +<br>                        <span class="hljs-string">&quot;.giwVZyNsrKuaRvpJZyGQycJg78xT7Dm68K4DWN/lxS&quot;</span>) <span class="hljs-comment">// 使用Bcrypt算法加密</span><br>                .roles(<span class="hljs-string">&quot;USER&quot;</span>)<br>                .build();<br><br>        <span class="hljs-type">InMemoryUserDetailsManager</span> <span class="hljs-variable">manager</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InMemoryUserDetailsManager</span>();<br>        manager.createUser(user);<br>        <span class="hljs-keyword">return</span> manager;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>重新启动项目，访问测试接口&#x2F;security&#x2F;hello，用户名输入cxy，密码输入123456</p><img src="/2024/04/03/SpringSecurity%E5%AD%A6%E4%B9%A01%E2%80%94SpringSecurity%E8%AE%A4%E8%AF%81/7.png" class=""><img src="/2024/04/03/SpringSecurity%E5%AD%A6%E4%B9%A01%E2%80%94SpringSecurity%E8%AE%A4%E8%AF%81/8.png" class=""><p>JdbcUserDetailsManager的实现与InMemoryUserDetailsManager类似，这里就不赘述了。<br>除了上面这两种内置实现，我们还可以自定义UserDetailsService的实现。但这里不进行介绍，因为UserDetailsService是基于表单认证这种模式的，而有时候，我们的登录方式、登录页面与它提供的又不一样，因此，我们下面会讲到，如何接入我们自定义的登录接口，登录方式。</p><h4 id="2-4-3-登录和注册放行"><a href="#2-4-3-登录和注册放行" class="headerlink" title="2.4.3. 登录和注册放行"></a>2.4.3. 登录和注册放行</h4><p>上面这种整合方式，会对所有的请求进行拦截，但是一般情况下，我们是不拦截用户登录和用户注册接口的，而且现在的项目一般是前后端分离，没必要跳转到专门的登录页面。<br>这里使用的springboot版本是2.7.0，在Spring Boot 2.7.0之前的版本中，我们需要写个配置类继承WebSecurityConfigurerAdapter，然后重写Adapter中的三个方法进行配置，如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@EnableWebSecurity</span><br><span class="hljs-meta">@EnableGlobalMethodSecurity(prePostEnabled = true)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OldSecurityConfig</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">WebSecurityConfigurerAdapter</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> UmsAdminService adminService;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configure</span><span class="hljs-params">(HttpSecurity httpSecurity)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">//省略HttpSecurity的配置</span><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configure</span><span class="hljs-params">(AuthenticationManagerBuilder auth)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        auth.userDetailsService(userDetailsService())<br>                .passwordEncoder(passwordEncoder());<br>    &#125;<br>    <br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> AuthenticationManager <span class="hljs-title function_">authenticationManagerBean</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">super</span>.authenticationManagerBean();<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>但这种方式在SpringBoot 2.7.0中，WebSecurityConfigurerAdapter已经被弃用了，新用法中，无需继承WebSecurityConfigurerAdapter，只需要直接声明一个配置类，再配置一个生成SecurityFilterChainBean方法，配置信息如下，我们对&#x2F;user&#x2F;login和&#x2F;user&#x2F;register接口，进行放行，而其他接口，都需要进行验证。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.yang.infrastructure.auth.config;<br><br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><span class="hljs-keyword">import</span> org.springframework.security.config.annotation.web.builders.HttpSecurity;<br><span class="hljs-keyword">import</span> org.springframework.security.config.http.SessionCreationPolicy;<br><span class="hljs-keyword">import</span> org.springframework.security.web.SecurityFilterChain;<br><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SecurityConfig</span> &#123;<br>    <span class="hljs-meta">@Bean</span><br>    SecurityFilterChain <span class="hljs-title function_">filterChain</span><span class="hljs-params">(HttpSecurity httpSecurity)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">// 登录和注册接口，放行</span><br>        <span class="hljs-keyword">return</span> httpSecurity.authorizeRequests()<br>                .antMatchers(<span class="hljs-string">&quot;/user/login&quot;</span>).permitAll()<br>                .antMatchers(<span class="hljs-string">&quot;/user/register&quot;</span>).permitAll()<br>                .anyRequest().authenticated()<br>                .and()<br>                .csrf().disable()<br>                .sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS) <span class="hljs-comment">// 设置无状态连接，即不创建session</span><br>                .and()<br>                .cors().disable() <span class="hljs-comment">// 解决跨域问题</span><br>                .build();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>http.authorizeHttpRequests(): 指定哪些请求需要什么样的认证或授权，这里使用anyRequest()和authenticated()表示所有请求均需要认证。<br>http.authorizeHttpRequests()：表示我们使用HttpBasic认证。<br>在上面的配置中，我们配置了登录接口和注册接口允许放行，其他接口进行拦截，然后我们访问登录接口，可以看出登录接口放行通过，能顺利访问。</p><img src="/2024/04/03/SpringSecurity%E5%AD%A6%E4%B9%A01%E2%80%94SpringSecurity%E8%AE%A4%E8%AF%81/9.png" class=""><p>再访问&#x2F;security&#x2F;hello接口，结果是403，说明无权访问。</p><img src="/2024/04/03/SpringSecurity%E5%AD%A6%E4%B9%A01%E2%80%94SpringSecurity%E8%AE%A4%E8%AF%81/10.png" class=""><h5 id="2-4-4-异常处理"><a href="#2-4-4-异常处理" class="headerlink" title="2.4.4. 异常处理"></a>2.4.4. 异常处理</h5><p>在最开始的时候，我们没有配置任何东西时，没有权限便会默认跳转到用户登录界面，现在因为我们没有配置登录表单路径，所以会直接提示403，我们可以在配置类中，配置异常处理方式，方便返回一些格式化的数据供前端做出决策。<br>我们创建一个JwtAuthenticationExceptionHandler，该类实现自AuthenticationEntryPoint接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JwtAuthenticationExceptionHandler</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">AuthenticationEntryPoint</span> &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">commence</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, AuthenticationException authException)</span> <span class="hljs-keyword">throws</span> IOException, ServletException &#123;<br>        sendErrorResponse(response);<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sendErrorResponse</span><span class="hljs-params">(HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        Response&lt;Object&gt; errorResponse = Response.fail(ResultCode.AUTHENTICATION_FAIL);<br>        response.setCharacterEncoding(<span class="hljs-string">&quot;UTF-8&quot;</span>);<br>        response.setStatus(HttpStatus.UNAUTHORIZED.value());<br>        <span class="hljs-type">PrintWriter</span> <span class="hljs-variable">writer</span> <span class="hljs-operator">=</span> response.getWriter();<br>        writer.write(JSONObject.toJSONString(errorResponse));<br>        writer.flush();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>然后我们修改SpringSecurity的配置类，添加上和异常处理相关的配置：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SecurityConfig</span> &#123;<br>    <span class="hljs-meta">@Bean</span><br>    SecurityFilterChain <span class="hljs-title function_">filterChain</span><span class="hljs-params">(HttpSecurity httpSecurity)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">// 登录和注册接口，放行</span><br>        <span class="hljs-keyword">return</span> httpSecurity.authorizeRequests()<br>                .antMatchers(<span class="hljs-string">&quot;/user/login&quot;</span>).permitAll()<br>                .antMatchers(<span class="hljs-string">&quot;/user/register&quot;</span>).permitAll()<br>                .anyRequest().authenticated()<br>                .and()<br>                .csrf().disable()<br>                .sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS) <span class="hljs-comment">// 设置无状态连接，即不创建session</span><br>                .and()<br>                .cors().disable() <span class="hljs-comment">// 解决跨域问题</span><br>                .exceptionHandling()<br>                .authenticationEntryPoint(<span class="hljs-keyword">new</span> <span class="hljs-title class_">JwtAuthenticationExceptionHandler</span>()) <span class="hljs-comment">// 未认证异常处理</span><br>                .and()<br>                .build();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>接着再次访问&#x2F;security&#x2F;hello接口，结果如下：</p><img src="/2024/04/03/SpringSecurity%E5%AD%A6%E4%B9%A01%E2%80%94SpringSecurity%E8%AE%A4%E8%AF%81/11.png" class=""><p>同理，在权限不足的情况下，我们也可以实现相关的异常处理类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JwtAccessDeniedExceptionHandler</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">AccessDeniedHandler</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handle</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, AccessDeniedException accessDeniedException)</span> <span class="hljs-keyword">throws</span> IOException, ServletException &#123;<br>        sendErrorResponse(response);<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sendErrorResponse</span><span class="hljs-params">(HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        Response&lt;Object&gt; errorResponse = Response.fail(ResultCode.ACCESS_DENIED);<br>        response.setCharacterEncoding(<span class="hljs-string">&quot;UTF-8&quot;</span>);<br>        response.setStatus(HttpStatus.UNAUTHORIZED.value());<br>        <span class="hljs-type">PrintWriter</span> <span class="hljs-variable">writer</span> <span class="hljs-operator">=</span> response.getWriter();<br>        writer.write(JSONObject.toJSONString(errorResponse));<br>        writer.flush();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>修改配置类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SecurityConfig</span> &#123;<br>    <span class="hljs-meta">@Bean</span><br>    SecurityFilterChain <span class="hljs-title function_">filterChain</span><span class="hljs-params">(HttpSecurity httpSecurity)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">// 登录和注册接口，放行</span><br>        <span class="hljs-keyword">return</span> httpSecurity.authorizeRequests()<br>                .antMatchers(<span class="hljs-string">&quot;/user/login&quot;</span>).permitAll()<br>                .antMatchers(<span class="hljs-string">&quot;/user/register&quot;</span>).permitAll()<br>                .anyRequest().authenticated()<br>                .and()<br>                .csrf().disable()<br>                .sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS) <span class="hljs-comment">// 设置无状态连接，即不创建session</span><br>                .and()<br>                .cors().disable() <span class="hljs-comment">// 解决跨域问题</span><br>                .exceptionHandling()<br>                .authenticationEntryPoint(<span class="hljs-keyword">new</span> <span class="hljs-title class_">JwtAuthenticationExceptionHandler</span>()) <span class="hljs-comment">// 未认证异常处理</span><br>                .accessDeniedHandler(<span class="hljs-keyword">new</span> <span class="hljs-title class_">JwtAccessDeniedExceptionHandler</span>()) <span class="hljs-comment">// 权限不足异常处理</span><br>                .and()<br>                .build();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="2-4-5-认证过滤器"><a href="#2-4-5-认证过滤器" class="headerlink" title="2.4.5. 认证过滤器"></a>2.4.5. 认证过滤器</h5><p>当我们登录成功后，一般会返回一个token，然后前端后续将这个token，携带于请求头，想后端发起访问，后端解析这个token，来判断该请求是否认证通过，通过，则放行。在SpringSecurity中，我们可以通过addFilterBefore()将我们自定义过滤器添加上去，然后再我们的自定义过滤器中，实现相关的token解析逻辑。<br>首先我们定义一个MyUserDetails类，实现UserDetails接口，UserDetails提供用户的核心信息，在前两篇文章中，用户的核心信息，存储于UserContextDetails类中，这里我们沿用该类，当然，也可以自己重新定义一个类用于保存用户的核心信息，甚至直接把用户实体类作为核心信息，这个依据项目的需要。目前的实现中，除了获取用户名之外，其他都是空实现，因为其他的接口，暂时还不需要。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.yang.infrastructure.security;<br><br><span class="hljs-keyword">import</span> com.yang.infrastructure.auth.UserContextDetails;<br><span class="hljs-keyword">import</span> lombok.Data;<br><span class="hljs-keyword">import</span> org.springframework.security.core.GrantedAuthority;<br><span class="hljs-keyword">import</span> org.springframework.security.core.userdetails.UserDetails;<br><br><span class="hljs-keyword">import</span> java.util.Collection;<br><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyUserDetails</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserDetails</span> &#123;<br>    <span class="hljs-keyword">private</span> UserContextDetails userContextDetails;<br><br>    <span class="hljs-keyword">private</span> String password;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MyUserDetails</span><span class="hljs-params">(UserContextDetails userContextDetails)</span> &#123;<br>        <span class="hljs-built_in">this</span>.userContextDetails = userContextDetails;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MyUserDetails</span><span class="hljs-params">(UserContextDetails userContextDetails, String password)</span> &#123;<br>        <span class="hljs-built_in">this</span>.userContextDetails = userContextDetails;<br>        <span class="hljs-built_in">this</span>.password = password;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Collection&lt;? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">GrantedAuthority</span>&gt; getAuthorities() &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getPassword</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.password;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getUsername</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> userContextDetails.getUsername();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isAccountNonExpired</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isAccountNonLocked</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isCredentialsNonExpired</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isEnabled</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>我们我们添加一个JwtTokenVerifyFilter，这个类继承于OncePerRequestFilter，其具体实现如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.yang.infrastructure.security.filter;<br><br><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSONObject;<br><span class="hljs-keyword">import</span> com.yang.domain.data.Role;<br><span class="hljs-keyword">import</span> com.yang.infrastructure.auth.PermissionDetails;<br><span class="hljs-keyword">import</span> com.yang.infrastructure.auth.UserContextDetails;<br><span class="hljs-keyword">import</span> com.yang.infrastructure.auth.config.JwtTokenProperty;<br><span class="hljs-keyword">import</span> com.yang.infrastructure.auth.request.JwtTokenVerifyRequest;<br><span class="hljs-keyword">import</span> com.yang.infrastructure.auth.response.JwtTokenVerifyDTO;<br><span class="hljs-keyword">import</span> com.yang.infrastructure.auth.service.JwtTokenService;<br><span class="hljs-keyword">import</span> com.yang.infrastructure.security.MyUserDetails;<br><span class="hljs-keyword">import</span> com.yang.infrastructure.utils.RedisUtils;<br><span class="hljs-keyword">import</span> com.yang.infrastructure.utils.SpringContextUtils;<br><span class="hljs-keyword">import</span> org.apache.commons.lang3.StringUtils;<br><span class="hljs-keyword">import</span> org.springframework.security.authentication.UsernamePasswordAuthenticationToken;<br><span class="hljs-keyword">import</span> org.springframework.security.core.context.SecurityContextHolder;<br><span class="hljs-keyword">import</span> org.springframework.security.core.userdetails.UserDetails;<br><span class="hljs-keyword">import</span> org.springframework.web.filter.OncePerRequestFilter;<br><br><span class="hljs-keyword">import</span> javax.servlet.FilterChain;<br><span class="hljs-keyword">import</span> javax.servlet.ServletException;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">import</span> java.util.stream.Collectors;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JwtTokenVerifyFilter</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">OncePerRequestFilter</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doFilterInternal</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">token</span> <span class="hljs-operator">=</span> request.getHeader(<span class="hljs-string">&quot;token&quot;</span>);<br>        <span class="hljs-keyword">if</span> (StringUtils.isEmpty(token)) &#123;<br>            filterChain.doFilter(request, response);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br><br>        <span class="hljs-type">UserContextDetails</span> <span class="hljs-variable">userContextDetails</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">userDetailsFromRedis</span> <span class="hljs-operator">=</span> getUserDetailsFromRedis(token);<br>        <span class="hljs-keyword">if</span> (userDetailsFromRedis != <span class="hljs-literal">null</span>) &#123;<br>            userContextDetails = (UserContextDetails) userDetailsFromRedis;<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (userContextDetails == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-type">JwtTokenService</span> <span class="hljs-variable">jwtTokenService</span> <span class="hljs-operator">=</span> SpringContextUtils.getBeanOfType(JwtTokenService.class);<br>            <span class="hljs-type">JwtTokenProperty</span> <span class="hljs-variable">jwtTokenProperty</span> <span class="hljs-operator">=</span> SpringContextUtils.getBeanOfType(JwtTokenProperty.class);<br><br>            <span class="hljs-type">JwtTokenVerifyRequest</span> <span class="hljs-variable">jwtTokenVerifyRequest</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JwtTokenVerifyRequest</span>();<br>            jwtTokenVerifyRequest.setToken(token);<br>            jwtTokenVerifyRequest.setSecret(jwtTokenProperty.getSecret());<br><br>            <span class="hljs-type">JwtTokenVerifyDTO</span> <span class="hljs-variable">verify</span> <span class="hljs-operator">=</span> jwtTokenService.verify(jwtTokenVerifyRequest);<br>            <span class="hljs-keyword">if</span> (verify == <span class="hljs-literal">null</span>) &#123;<br>                filterChain.doFilter(request, response);<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br><br>            userContextDetails = <span class="hljs-keyword">new</span> <span class="hljs-title class_">UserContextDetails</span>();<br>            userContextDetails.setId(Integer.valueOf(verify.getSubject()));<br>            userContextDetails.setToken(token);<br>            userContextDetails.setUsername(verify.getPayLoads().get(<span class="hljs-string">&quot;username&quot;</span>));<br>            userContextDetails.setExtendMap(verify.getPayLoads());<br>            List&lt;Role&gt; roles = JSONObject.parseArray(verify.getPayLoads().get(<span class="hljs-string">&quot;roles&quot;</span>), Role.class);<br>            userContextDetails.setPermissionDetails(roles.stream().map(role -&gt; &#123;<br>                <span class="hljs-type">PermissionDetails</span> <span class="hljs-variable">permissionDetails</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PermissionDetails</span>();<br>                permissionDetails.setName(role.getCode());<br>                <span class="hljs-keyword">return</span> permissionDetails;<br>            &#125;).collect(Collectors.toList()));<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (userContextDetails == <span class="hljs-literal">null</span>) &#123;<br>            filterChain.doFilter(request, response);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-type">UserDetails</span> <span class="hljs-variable">userDetails</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyUserDetails</span>(userContextDetails);<br>        <span class="hljs-type">UsernamePasswordAuthenticationToken</span> <span class="hljs-variable">authenticationToken</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UsernamePasswordAuthenticationToken</span>(userDetails, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>);<br>        SecurityContextHolder.getContext().setAuthentication(authenticationToken);<br>        filterChain.doFilter(request, response);<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> Object <span class="hljs-title function_">getUserDetailsFromRedis</span><span class="hljs-params">(String token)</span> &#123;<br>        <span class="hljs-type">RedisUtils</span> <span class="hljs-variable">redisUtils</span> <span class="hljs-operator">=</span> SpringContextUtils.getBeanOfType(RedisUtils.class);<br>        <span class="hljs-keyword">return</span> redisUtils.getKey(<span class="hljs-string">&quot;token:&quot;</span> + token);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>其实从上面的实现中，会发现，与我们之前的JwtTokenVerifyInterceptor很像，不过我们当时只是简单地通过线程上下文来传递用户核心信息，而SpringSecurity对此进一步作出封装:<br>1）UsernamePasswordAuthenticationToken：SpringSecurity用于表示基于用户名和密码地身份验证对象，继承自AbstractAuthenticationToken类，包含了用户名和密码等凭据信息，在身份验证过程中，UsernamePasswordAuthenticationToken用于封装用户提交地身份验证凭据，并在后续身份验证过程中进行传递和处理。<br>2）SecurityContextHolder：SpringSecurity用于管理安全上下文地持有者，提供一个静态方法getContext()用于获取当前线程中地安全上下文。<br>最后，我们将这个过滤器，添加到SpringSecurity的配置类中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SecurityConfig</span> &#123;<br>    <span class="hljs-meta">@Bean</span><br>    SecurityFilterChain <span class="hljs-title function_">filterChain</span><span class="hljs-params">(HttpSecurity httpSecurity)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">// 登录和注册接口，放行</span><br>        <span class="hljs-keyword">return</span> httpSecurity.authorizeRequests()<br>                .antMatchers(<span class="hljs-string">&quot;/user/login&quot;</span>).permitAll()<br>                .antMatchers(<span class="hljs-string">&quot;/user/register&quot;</span>).permitAll()<br>                .anyRequest().authenticated()<br>                .and()<br>                .csrf().disable()<br>                .sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS) <span class="hljs-comment">// 设置无状态连接，即不创建session</span><br>                .and()<br>                .cors().disable() <span class="hljs-comment">// 解决跨域问题</span><br>                .exceptionHandling()<br>                .authenticationEntryPoint(<span class="hljs-keyword">new</span> <span class="hljs-title class_">JwtAuthenticationExceptionHandler</span>()) <span class="hljs-comment">// 未认证异常处理</span><br>                .accessDeniedHandler(<span class="hljs-keyword">new</span> <span class="hljs-title class_">JwtAccessDeniedExceptionHandler</span>()) <span class="hljs-comment">// 权限不足异常处理</span><br>                .and()<br>                .addFilterBefore(<span class="hljs-keyword">new</span> <span class="hljs-title class_">JwtTokenVerifyFilter</span>(), UsernamePasswordAuthenticationFilter.class) <span class="hljs-comment">// 添加自定义过滤器</span><br>                .build();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>然后我们启动项目，先进行登录</p><img src="/2024/04/03/SpringSecurity%E5%AD%A6%E4%B9%A01%E2%80%94SpringSecurity%E8%AE%A4%E8%AF%81/12.png" class=""><p>登录成功后，携带该token，作为请求头，访问&#x2F;security&#x2F;hello测试接口,访问成功</p><img src="/2024/04/03/SpringSecurity%E5%AD%A6%E4%B9%A01%E2%80%94SpringSecurity%E8%AE%A4%E8%AF%81/13.png" class=""><p>然后我们携带一个无效的token，作为请求头，再次访问&#x2F;security&#x2F;hello测试接口</p><img src="/2024/04/03/SpringSecurity%E5%AD%A6%E4%B9%A01%E2%80%94SpringSecurity%E8%AE%A4%E8%AF%81/14.png" class=""><h3 id="3-参考文章"><a href="#3-参考文章" class="headerlink" title="3. 参考文章"></a>3. 参考文章</h3><p><a href="https://segmentfault.com/a/1190000041947192">https://segmentfault.com/a/1190000041947192</a><br><a href="https://blog.csdn.net/m0_37989980/article/details/107519382">https://blog.csdn.net/m0_37989980/article/details/107519382</a><br><a href="https://zhuanlan.zhihu.com/p/455858001">https://zhuanlan.zhihu.com/p/455858001</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>SpringBoot</tag>
      
      <tag>SpringSecurity</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>鉴权学习</title>
    <link href="/2024/04/03/%E9%89%B4%E6%9D%83%E5%AD%A6%E4%B9%A0/"/>
    <url>/2024/04/03/%E9%89%B4%E6%9D%83%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h3 id="1-引言"><a href="#1-引言" class="headerlink" title="1. 引言"></a>1. 引言</h3><p>鉴权指身份认证授权，在计算机安全领域，是指验证一个实体的身份并决定这个实体是否被授权执行某项任务的过程，简单来说，就是确认一个用户或者系统是否拥有进行某项操作的权权利。<br>鉴权通常包含两个方面：<br>1）身份认证（Authentication）：确定一个用户或实体是否为其声称的个体。这通常通过用户名和密码、生物特征识别、智能卡等方式实现。我们在上一篇提到的内容，就属于身份认证的相关内容。<br>2）授权（Authorization）：在身份被确认之后，鉴权系统还会检查该用户是否有权限执行特定的操作。例如，一个用户可能有权访问某个系统，但没有权限修改数据。<br>我们在上一章登录、注册学习的基础上，添加一个权限表和一个用户权限表。</p><img src="/2024/04/03/%E9%89%B4%E6%9D%83%E5%AD%A6%E4%B9%A0/1.png" class=""><img src="/2024/04/03/%E9%89%B4%E6%9D%83%E5%AD%A6%E4%B9%A0/2.png" class=""><p>以大学为例，一般有学生、辅导员、教务员、讲师、教授等身份，如下图所示：</p><img src="/2024/04/03/%E9%89%B4%E6%9D%83%E5%AD%A6%E4%B9%A0/3.png" class=""><h3 id="2-修改用户注册"><a href="#2-修改用户注册" class="headerlink" title="2. 修改用户注册"></a>2. 修改用户注册</h3><p>对于每个用户，都应该有对应的权限，用户和权限的关系，可以是一对多的，比如在大学内，一个人，既可以是学生，也可以是辅导员，比如兼职辅导员；既可以是讲师，也可以是班主任。因此，我们修改用户注册接口，在新增用户的同时，添加用户的权限。</p><h4 id="2-1-infrastructure层"><a href="#2-1-infrastructure层" class="headerlink" title="2.1. infrastructure层"></a>2.1. infrastructure层</h4><p>修改UserContextDetails类，加上用户权限信息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserContextDetails</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br>    <span class="hljs-keyword">private</span> Integer id;<br><br>    <span class="hljs-keyword">private</span> String token;<br><br>    <span class="hljs-keyword">private</span> String username;<br><br>    <span class="hljs-keyword">private</span> Map&lt;String, String&gt; extendMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br><br>    <span class="hljs-comment">// 权限</span><br>    <span class="hljs-keyword">private</span> List&lt;PermissionDetails&gt; permissionDetails = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>&#125;<br></code></pre></td></tr></table></figure><p>修改JwtTokenVerifyInterceptor类，在获取UserContextDetails时，填充用户权限信息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">preHandle</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>       <span class="hljs-type">String</span> <span class="hljs-variable">token</span> <span class="hljs-operator">=</span> request.getHeader(<span class="hljs-string">&quot;token&quot;</span>);<br>       <span class="hljs-keyword">if</span> (StringUtils.isEmpty(token)) &#123;<br>           <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BusinessException</span>(ResultCode.TOKEN_FAILED);<br>       &#125;<br>       <span class="hljs-type">Object</span> <span class="hljs-variable">userDetails</span> <span class="hljs-operator">=</span> getUserDetailsFromRedis(token);<br>       <span class="hljs-keyword">if</span> (userDetails != <span class="hljs-literal">null</span>) &#123; <span class="hljs-comment">// 判断该token在Redis是否存在</span><br>           <span class="hljs-comment">// 设置线程上下文</span><br>           System.out.println(<span class="hljs-string">&quot;设置线程上下文====================&quot;</span>);<br>           <span class="hljs-type">UserContextDetails</span> <span class="hljs-variable">userContextDetails</span> <span class="hljs-operator">=</span> (UserContextDetails) userDetails;<br>           userContextDetails.setToken(token);<br>           UserContextThreadLocal.setUserContextDetails(userContextDetails);<br>           <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>       &#125;<br><br>       <span class="hljs-type">JwtTokenService</span> <span class="hljs-variable">jwtTokenService</span> <span class="hljs-operator">=</span> SpringContextUtils.getBeanOfType(JwtTokenService.class);<br>       <span class="hljs-type">JwtTokenProperty</span> <span class="hljs-variable">jwtTokenProperty</span> <span class="hljs-operator">=</span> SpringContextUtils.getBeanOfType(JwtTokenProperty.class);<br><br>       <span class="hljs-type">JwtTokenVerifyRequest</span> <span class="hljs-variable">jwtTokenVerifyRequest</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JwtTokenVerifyRequest</span>();<br>       jwtTokenVerifyRequest.setToken(token);<br>       jwtTokenVerifyRequest.setSecret(jwtTokenProperty.getSecret());<br><br>       <span class="hljs-type">JwtTokenVerifyDTO</span> <span class="hljs-variable">verify</span> <span class="hljs-operator">=</span> jwtTokenService.verify(jwtTokenVerifyRequest);<br>       <span class="hljs-keyword">if</span> (verify == <span class="hljs-literal">null</span>) &#123;<br>           <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BusinessException</span>(ResultCode.TOKEN_FAILED);<br>       &#125;<br><br>       <span class="hljs-comment">// 设置线程上下文</span><br>       System.out.println(<span class="hljs-string">&quot;设置线程上下文====================&quot;</span>);<br>       <span class="hljs-type">UserContextDetails</span> <span class="hljs-variable">userContextDetails</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UserContextDetails</span>();<br>       userContextDetails.setId(Integer.valueOf(verify.getSubject()));<br>       userContextDetails.setToken(token);<br>       userContextDetails.setUsername(verify.getPayLoads().get(<span class="hljs-string">&quot;username&quot;</span>));<br>       userContextDetails.setExtendMap(verify.getPayLoads());<br>       List&lt;Role&gt; roles = JSONObject.parseArray(verify.getPayLoads().get(<span class="hljs-string">&quot;roles&quot;</span>), Role.class);<br>       userContextDetails.setPermissionDetails(roles.stream().map(role -&gt; &#123;<br>           <span class="hljs-type">PermissionDetails</span> <span class="hljs-variable">permissionDetails</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PermissionDetails</span>();<br>           permissionDetails.setName(role.getCode());<br>           <span class="hljs-keyword">return</span> permissionDetails;<br>       &#125;).collect(Collectors.toList()));<br>       UserContextThreadLocal.setUserContextDetails(userContextDetails);<br>       <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>   &#125;<br></code></pre></td></tr></table></figure><h4 id="2-2-domain层"><a href="#2-2-domain层" class="headerlink" title="2.2. domain层"></a>2.2. domain层</h4><p>添加Role和UserRole相关的实体类、存储类、领域服务类，这里不贴代码了，比较简单。<br>添加RoleEnum枚举类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.yang.domain.common;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">enum</span> <span class="hljs-title class_">RoleEnum</span> &#123;<br>    STUDENT(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;STUDENT&quot;</span>),<br>    COUNSELOR(<span class="hljs-number">2</span>, <span class="hljs-string">&quot;COUNSELOR&quot;</span>),<br>    ACADEMIC_ADMINISTRATOR(<span class="hljs-number">3</span>, <span class="hljs-string">&quot;ACADEMIC_ADMINISTRATOR&quot;</span>);<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> code;<br><br>    <span class="hljs-keyword">private</span> String description;<br><br>    RoleEnum(<span class="hljs-type">int</span> code, String description) &#123;<br>        <span class="hljs-built_in">this</span>.code = code;<br>        <span class="hljs-built_in">this</span>.description = description;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getCode</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.code;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getDescription</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.description;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> RoleEnum <span class="hljs-title function_">findByCode</span><span class="hljs-params">(<span class="hljs-type">int</span> code)</span> &#123;<br>        <span class="hljs-keyword">for</span> (RoleEnum role : values()) &#123;<br>            <span class="hljs-keyword">if</span> (role.getCode() == code) &#123;<br>                <span class="hljs-keyword">return</span> role;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>修改user实体类，加上权限列表属性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@TableName(value = &quot;t_user&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br>    <span class="hljs-meta">@TableId(type = IdType.AUTO)</span><br>    <span class="hljs-keyword">private</span> Integer id;<br><br>    <span class="hljs-keyword">private</span> String username;<br><br>    <span class="hljs-keyword">private</span> String password;<br><br>    <span class="hljs-keyword">private</span> String salt;<br><br>    <span class="hljs-comment">// 是否冻结 0未冻结 1已冻结</span><br>    <span class="hljs-keyword">private</span> Integer freeze;<br><br>    <span class="hljs-keyword">private</span> Date createTime;<br><br>    <span class="hljs-keyword">private</span> Date updateTime;<br><br>    <span class="hljs-meta">@TableField(exist = false)</span><br>    <span class="hljs-keyword">private</span> Map&lt;String, String&gt; featuresMap;<br><br>    <span class="hljs-keyword">private</span> String features;<br><br>    <span class="hljs-meta">@TableField(exist = false)</span><br>    <span class="hljs-keyword">private</span> List&lt;Role&gt; roles;<br>&#125;<br></code></pre></td></tr></table></figure><p>修改userRepository，在获取用户的时候，填充用户的权限信息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Repository</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserRepository</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">IUserRepository</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> UserMapper userMapper;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> IUserRoleRepository userRoleRepository;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> IRoleRepository roleRepository;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">UN_FREEZE</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">FREEZE</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">saveUser</span><span class="hljs-params">(User user)</span> &#123;<br>        user.setCreateTime(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());<br>        user.setUpdateTime(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());<br>        user.setFreeze(UN_FREEZE);<br>        user.setFeaturesMap(<span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;());<br>        user.setFeatures(JSONObject.toJSONString(user.getFeaturesMap()));<br>        <span class="hljs-keyword">return</span> userMapper.insert(user) &gt; <span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> User <span class="hljs-title function_">findByUsernameAndPassword</span><span class="hljs-params">(String username, String password)</span> &#123;<br>        LambdaQueryWrapper&lt;User&gt; queryWrapper = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LambdaQueryWrapper</span>&lt;&gt;();<br>        queryWrapper.eq(User::getUsername, username);<br>        queryWrapper.eq(User::getPassword, password);<br>        <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> userMapper.selectOne(queryWrapper);<br>        <span class="hljs-keyword">if</span> (user != <span class="hljs-literal">null</span>) &#123;<br>            user.setRoles(findRoleByUserId(user.getId()));<br>        &#125;<br>        <span class="hljs-keyword">return</span> user;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> User <span class="hljs-title function_">findByUsername</span><span class="hljs-params">(String username)</span> &#123;<br>        LambdaQueryWrapper&lt;User&gt; queryWrapper = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LambdaQueryWrapper</span>&lt;&gt;();<br>        queryWrapper.eq(User::getUsername, username);<br>        <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> userMapper.selectOne(queryWrapper);<br>        <span class="hljs-keyword">if</span> (user != <span class="hljs-literal">null</span>) &#123;<br>            user.setRoles(findRoleByUserId(user.getId()));<br>        &#125;<br>        <span class="hljs-keyword">return</span> user;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> User <span class="hljs-title function_">findById</span><span class="hljs-params">(Integer id)</span> &#123;<br>        <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> userMapper.selectById(id);<br>        <span class="hljs-keyword">if</span> (user != <span class="hljs-literal">null</span>) &#123;<br>            user.setRoles(findRoleByUserId(user.getId()));<br>        &#125;<br>        <span class="hljs-keyword">return</span> user;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">updateUser</span><span class="hljs-params">(User user)</span> &#123;<br>        user.setUpdateTime(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());<br>        <span class="hljs-keyword">return</span> userMapper.updateById(user) &gt; <span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> List&lt;Role&gt; <span class="hljs-title function_">findRoleByUserId</span><span class="hljs-params">(Integer userId)</span> &#123;<br>        List&lt;UserRole&gt; userRoles = userRoleRepository.findUserRoleByUserId(userId);<br>        <span class="hljs-keyword">if</span> (CollectionUtils.isEmpty(userRoles)) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        &#125;<br>        List&lt;Integer&gt; roleIdList = userRoles.stream().map(UserRole::getRoleId)<br>                .distinct().collect(Collectors.toList());<br>        <span class="hljs-keyword">return</span> roleRepository.findRoleInIds(roleIdList);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2-3-application层"><a href="#2-3-application层" class="headerlink" title="2.3. application层"></a>2.3. application层</h4><p>修改用户注册接口,添加用户之后，插入一条用户权限记录。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> User <span class="hljs-title function_">register</span><span class="hljs-params">(RegisterUserRequest request)</span> &#123;<br>      <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> userService.register(request);<br><br>      <span class="hljs-type">Integer</span> <span class="hljs-variable">roleId</span> <span class="hljs-operator">=</span> request.getRoleId();<br>      <span class="hljs-keyword">if</span> (roleId == <span class="hljs-literal">null</span> || roleService.findById(roleId) == <span class="hljs-literal">null</span>) &#123;<br>          roleId = RoleEnum.STUDENT.getCode();<br>      &#125;<br>      <br>      <span class="hljs-type">UserRole</span> <span class="hljs-variable">userRole</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UserRole</span>();<br>      userRole.setUserId(user.getId());<br>      userRole.setRoleId(roleId);<br>      <br>      userRoleService.save(userRole);<br>      <span class="hljs-keyword">return</span> user;<br>  &#125;<br></code></pre></td></tr></table></figure><p>在登录的时候，生成token时，将权限信息作为payloads的一部分，修改UserApplicationService的login方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> UserLoginDTO <span class="hljs-title function_">login</span><span class="hljs-params">(LoginUserRequest request)</span> &#123;<br>      <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> userService.login(request);<br>      <span class="hljs-keyword">if</span> (user == <span class="hljs-literal">null</span>) &#123;<br>          <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BusinessException</span>(ResultCode.LOGIN_FAILED);<br>      &#125;<br>      <span class="hljs-comment">// 生成token</span><br>      <span class="hljs-type">UserLoginDTO</span> <span class="hljs-variable">userLoginDTO</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UserLoginDTO</span>();<br>      userLoginDTO.setUser(user);<br><br>      <span class="hljs-type">JwtTokenGenerateRequest</span> <span class="hljs-variable">jwtGenerateRequest</span> <span class="hljs-operator">=</span> userLoginConvertor.convert2JwtTokenGenerateRequest(user);<br>      <span class="hljs-type">String</span> <span class="hljs-variable">token</span> <span class="hljs-operator">=</span> jwtTokenService.generateJwtToken(jwtGenerateRequest);<br>      userLoginDTO.setToken(token);<br><br>      <span class="hljs-type">UserContextDetails</span> <span class="hljs-variable">userContextDetails</span> <span class="hljs-operator">=</span> userLoginConvertor.convert2UserContextDetails(user);<br>      <span class="hljs-comment">// token存储到redis</span><br>      redisUtils.setKey(<span class="hljs-string">&quot;token:&quot;</span> + token, userContextDetails, jwtGenerateRequest.getExpireTime());<br>      <span class="hljs-keyword">return</span> userLoginDTO;<br>  &#125;<br></code></pre></td></tr></table></figure><p>将和UserDetailsContext相关的转化，收敛到UserLoginConvertor，方便维护</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserLoginConvertor</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> JwtTokenProperty jwtTokenProperty;<br><br>    <span class="hljs-keyword">public</span> JwtTokenGenerateRequest <span class="hljs-title function_">convert2JwtTokenGenerateRequest</span><span class="hljs-params">(User user)</span> &#123;<br>        <span class="hljs-type">JwtTokenGenerateRequest</span> <span class="hljs-variable">request</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JwtTokenGenerateRequest</span>();<br>        request.setSubject(user.getId().toString());<br>        request.setExpireTime(jwtTokenProperty.getExpire());<br>        request.setSecret(jwtTokenProperty.getSecret());<br>        request.setPayLoads(convert2Payloads(user));<br><br>        <span class="hljs-keyword">return</span> request;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> Map&lt;String, String&gt; <span class="hljs-title function_">convert2Payloads</span><span class="hljs-params">(User user)</span> &#123;<br>        Map&lt;String, String&gt; payloads = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        payloads.put(<span class="hljs-string">&quot;username&quot;</span>, user.getUsername());<br>        payloads.put(<span class="hljs-string">&quot;id&quot;</span>, user.getId().toString());<br>        payloads.put(<span class="hljs-string">&quot;salt&quot;</span>, user.getSalt());<br>        payloads.put(<span class="hljs-string">&quot;roles&quot;</span>, JSONObject.toJSONString(user.getRoles()));<br>        <span class="hljs-keyword">return</span> payloads;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> UserContextDetails <span class="hljs-title function_">convert2UserContextDetails</span><span class="hljs-params">(User user)</span> &#123;<br>        <span class="hljs-type">UserContextDetails</span> <span class="hljs-variable">userContextDetails</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UserContextDetails</span>();<br>        userContextDetails.setId(user.getId());<br>        userContextDetails.setUsername(user.getUsername());<br>        userContextDetails.setExtendMap(convert2Payloads(user));<br>        userContextDetails.setPermissionDetails(user.getRoles().stream().map(role -&gt; &#123;<br>            <span class="hljs-type">PermissionDetails</span> <span class="hljs-variable">permissionDetails</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PermissionDetails</span>();<br>            permissionDetails.setName(role.getCode());<br>            <span class="hljs-keyword">return</span> permissionDetails;<br>        &#125;).collect(Collectors.toList()));<br>        <span class="hljs-keyword">return</span> userContextDetails;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2-4-测试"><a href="#2-4-测试" class="headerlink" title="2.4. 测试"></a>2.4. 测试</h4><p>我们调用注册接口，分别添加张三、李四、王五的信息，他们分别是学生、辅导员、教务员，测试结果如下：</p><img src="/2024/04/03/%E9%89%B4%E6%9D%83%E5%AD%A6%E4%B9%A0/4.png" class=""><img src="/2024/04/03/%E9%89%B4%E6%9D%83%E5%AD%A6%E4%B9%A0/5.png" class=""><p>调用登录接口，然后查看对应的redis内容，可以看到确实有权限信息</p><img src="/2024/04/03/%E9%89%B4%E6%9D%83%E5%AD%A6%E4%B9%A0/6.png" class=""><h3 id="3-基于注解的鉴权"><a href="#3-基于注解的鉴权" class="headerlink" title="3. 基于注解的鉴权"></a>3. 基于注解的鉴权</h3><p>对于不同的角色，其权限一般是不同的，以请假为例，当学生因为某些原因不能上学时，可以请假，而请假一般需要有辅导员或教务员批准，因此，学生有请假的权限，教务员和辅导员有审批假条的权限。</p><h4 id="3-1-infrastructure层"><a href="#3-1-infrastructure层" class="headerlink" title="3.1. infrastructure层"></a>3.1. infrastructure层</h4><p>首先，添加一个权限注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Documented</span><br><span class="hljs-meta">@Retention(value = RetentionPolicy.RUNTIME)</span><br><span class="hljs-meta">@Target(value = ElementType.METHOD)</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> Permission &#123;<br>    String[] code();<br>&#125;<br></code></pre></td></tr></table></figure><p>然后添加一个切面类，解析该注解中，要求的权限，然后获取用户上下文，根据用户上下文中的权限，来判断是否有符合的，如果都不符合，那么抛出权限不足的异常。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.yang.infrastructure.auth.aspect;<br><br><span class="hljs-keyword">import</span> com.yang.infrastructure.auth.PermissionDetails;<br><span class="hljs-keyword">import</span> com.yang.infrastructure.auth.UserContextDetails;<br><span class="hljs-keyword">import</span> com.yang.infrastructure.auth.UserContextThreadLocal;<br><span class="hljs-keyword">import</span> com.yang.infrastructure.auth.annotations.Permission;<br><span class="hljs-keyword">import</span> com.yang.infrastructure.common.ResultCode;<br><span class="hljs-keyword">import</span> com.yang.infrastructure.exception.BusinessException;<br><span class="hljs-keyword">import</span> org.aspectj.lang.JoinPoint;<br><span class="hljs-keyword">import</span> org.aspectj.lang.annotation.Aspect;<br><span class="hljs-keyword">import</span> org.aspectj.lang.annotation.Before;<br><span class="hljs-keyword">import</span> org.aspectj.lang.annotation.Pointcut;<br><span class="hljs-keyword">import</span> org.aspectj.lang.reflect.MethodSignature;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><span class="hljs-keyword">import</span> org.springframework.util.CollectionUtils;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">import</span> java.util.Set;<br><span class="hljs-keyword">import</span> java.util.stream.Collectors;<br><br><span class="hljs-meta">@Aspect</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PermissionAspect</span> &#123;<br>    <span class="hljs-meta">@Pointcut(value = &quot;@annotation(com.yang.infrastructure.auth.annotations.Permission)&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">pointCut</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-meta">@Before(value = &quot;pointCut()&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">beforeAdvice</span><span class="hljs-params">(JoinPoint joinPoint)</span> &#123;<br>        <span class="hljs-type">MethodSignature</span> <span class="hljs-variable">methodSignature</span> <span class="hljs-operator">=</span> (MethodSignature) joinPoint.getSignature();<br>        <span class="hljs-type">Permission</span> <span class="hljs-variable">permission</span> <span class="hljs-operator">=</span> methodSignature.getMethod().getAnnotation(Permission.class);<br><br>        <span class="hljs-comment">// 获取注解中要求的权限</span><br>        String[] code = permission.code();<br>        <span class="hljs-keyword">if</span> (code == <span class="hljs-literal">null</span> || code.length == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-comment">// 没有指定权限时，不进行拦截</span><br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br><br>        <span class="hljs-comment">// 指定权限，先获取当前用户的权限列表</span><br>        <span class="hljs-type">UserContextDetails</span> <span class="hljs-variable">userContextDetails</span> <span class="hljs-operator">=</span> UserContextThreadLocal.get();<br>        List&lt;PermissionDetails&gt; permissionDetails = userContextDetails.getPermissionDetails();<br><br>        <span class="hljs-keyword">if</span> (CollectionUtils.isEmpty(permissionDetails)) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BusinessException</span>(ResultCode.ACCESS_DENIED);<br>        &#125;<br><br>        Set&lt;String&gt; ownPermissionSet = permissionDetails.stream().map(PermissionDetails::getName)<br>                .collect(Collectors.toSet());<br><br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">containPermission</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">for</span> (String c : code) &#123;<br>            <span class="hljs-keyword">if</span> (ownPermissionSet.contains(c)) &#123;<br>                containPermission = <span class="hljs-literal">true</span>;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (!containPermission) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BusinessException</span>(ResultCode.ACCESS_DENIED);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3-2-controller层"><a href="#3-2-controller层" class="headerlink" title="3.2. controller层"></a>3.2. controller层</h4><p>controller层中，添加一个LeaveController类，用于测试，其中，学生可以提出申请离校，而辅导员和教务员可以进行审批。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.yang.controller;<br><br><span class="hljs-keyword">import</span> com.yang.controller.request.leave.AskForLeaveRequest;<br><span class="hljs-keyword">import</span> com.yang.infrastructure.auth.UserContextDetails;<br><span class="hljs-keyword">import</span> com.yang.infrastructure.auth.UserContextThreadLocal;<br><span class="hljs-keyword">import</span> com.yang.infrastructure.auth.annotations.Permission;<br><span class="hljs-keyword">import</span> com.yang.infrastructure.common.Response;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.PostMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestBody;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<br><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(value = &quot;/leave&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LeaveController</span> &#123;<br><br>    <span class="hljs-meta">@PostMapping(&quot;/apply&quot;)</span><br>    <span class="hljs-meta">@Permission(code = &quot;STUDENT&quot;)</span><br>    <span class="hljs-keyword">public</span> Response <span class="hljs-title function_">applyForLeave</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> AskForLeaveRequest request)</span> &#123;<br>        <span class="hljs-type">UserContextDetails</span> <span class="hljs-variable">userContextDetails</span> <span class="hljs-operator">=</span> UserContextThreadLocal.get();<br>        System.out.println(userContextDetails.getUsername() + <span class="hljs-string">&quot;申请离校，离校时间：&quot;</span> + request.getLeaveDays()<br>        + <span class="hljs-string">&quot;，离校原因：&quot;</span> + request.getReason());<br>        System.out.println(userContextDetails.getPermissionDetails());<br>        <span class="hljs-keyword">return</span> Response.success();<br>    &#125;<br><br>    <span class="hljs-meta">@PostMapping(&quot;/approval&quot;)</span><br>    <span class="hljs-meta">@Permission(code = &#123;&quot;COUNSELOR&quot;, &quot;ACADEMIC_ADMINISTRATOR&quot;&#125;)</span><br>    <span class="hljs-keyword">public</span> Response <span class="hljs-title function_">approvalLeave</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">UserContextDetails</span> <span class="hljs-variable">userContextDetails</span> <span class="hljs-operator">=</span> UserContextThreadLocal.get();<br>        System.out.println(userContextDetails.getUsername() + <span class="hljs-string">&quot;审批离校申请&quot;</span>);<br>        System.out.println(userContextDetails.getPermissionDetails());<br>        <span class="hljs-keyword">return</span> Response.success();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3-3-测试"><a href="#3-3-测试" class="headerlink" title="3.3. 测试"></a>3.3. 测试</h4><p>首先用学生账号登录，然后分别访问&#x2F;apply接口和&#x2F;approval接口</p><img src="/2024/04/03/%E9%89%B4%E6%9D%83%E5%AD%A6%E4%B9%A0/7.png" class=""><img src="/2024/04/03/%E9%89%B4%E6%9D%83%E5%AD%A6%E4%B9%A0/8.png" class=""><p>然后登录一个辅导员账号，再次访问&#x2F;apply和&#x2F;approval接口</p><img src="/2024/04/03/%E9%89%B4%E6%9D%83%E5%AD%A6%E4%B9%A0/9.png" class=""><img src="/2024/04/03/%E9%89%B4%E6%9D%83%E5%AD%A6%E4%B9%A0/10.png" class=""><p>我们查看控制台，也能看到该账户的权限确实是辅导员权限</p><img src="/2024/04/03/%E9%89%B4%E6%9D%83%E5%AD%A6%E4%B9%A0/11.png" class=""><h3 id="4-基于拦截器的鉴权"><a href="#4-基于拦截器的鉴权" class="headerlink" title="4. 基于拦截器的鉴权"></a>4. 基于拦截器的鉴权</h3><p>虽然上述基于注解的鉴权，能完成用户的权限校验，但是如果我们有很多个接口，他们的权限要求都是一样的，比如以&#x2F;student开头地请求，都需要学生权限，如果是基于注解地鉴权，我们就需要对这些接口一个一个地加上注解，进行鉴权，这样很麻烦。因此，我们可以使用拦截器，对符合某些路径地请求，进行权限校验。</p><h4 id="4-1-infrastructure层"><a href="#4-1-infrastructure层" class="headerlink" title="4.1. infrastructure层"></a>4.1. infrastructure层</h4><p>我们在基础设施层，加上对应地拦截器，拦截用户请求，并解析出请求地路径，根据路径，找出该路径需要匹配地权限，最后再根据用户上下文，判断是否满足该权限。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.yang.infrastructure.auth.interceptors;<br><br><span class="hljs-keyword">import</span> com.yang.infrastructure.auth.PermissionDetails;<br><span class="hljs-keyword">import</span> com.yang.infrastructure.auth.UserContextDetails;<br><span class="hljs-keyword">import</span> com.yang.infrastructure.auth.UserContextThreadLocal;<br><span class="hljs-keyword">import</span> com.yang.infrastructure.common.ResultCode;<br><span class="hljs-keyword">import</span> com.yang.infrastructure.exception.BusinessException;<br><span class="hljs-keyword">import</span> org.apache.commons.lang3.StringUtils;<br><span class="hljs-keyword">import</span> org.springframework.util.CollectionUtils;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.HandlerInterceptor;<br><br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">import</span> java.util.Map;<br><span class="hljs-keyword">import</span> java.util.Optional;<br><span class="hljs-keyword">import</span> java.util.Set;<br><span class="hljs-keyword">import</span> java.util.concurrent.ConcurrentHashMap;<br><span class="hljs-keyword">import</span> java.util.function.Function;<br><span class="hljs-keyword">import</span> java.util.stream.Collectors;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PermissionVerifyInterceptor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">HandlerInterceptor</span> &#123;<br>    <span class="hljs-keyword">private</span> Map&lt;String, String&gt; uri2PermissionMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConcurrentHashMap</span>&lt;&gt;();<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addPermission</span><span class="hljs-params">(String permission, String... uris)</span> &#123;<br>        <span class="hljs-keyword">if</span> (uris.length &gt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">for</span> (String url : uris) &#123;<br>                uri2PermissionMap.put(url, permission);<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addPermission</span><span class="hljs-params">(String permission, List&lt;String&gt; uriList)</span> &#123;<br>        <span class="hljs-keyword">if</span> (CollectionUtils.isEmpty(uriList)) &#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-keyword">for</span> (String uri : uriList) &#123;<br>            uri2PermissionMap.put(uri, permission);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">preHandle</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">requestURI</span> <span class="hljs-operator">=</span> request.getRequestURI();<br><br>        <span class="hljs-type">String</span> <span class="hljs-variable">permission</span> <span class="hljs-operator">=</span> getPermissionOfUri(requestURI);<br>        <span class="hljs-keyword">if</span> (StringUtils.isEmpty(permission)) &#123;<br>            <span class="hljs-comment">// 没有权限要求，直接通过</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br>        <span class="hljs-type">UserContextDetails</span> <span class="hljs-variable">userContextDetails</span> <span class="hljs-operator">=</span> UserContextThreadLocal.get();<br>        List&lt;PermissionDetails&gt; permissionDetails = userContextDetails.getPermissionDetails();<br>        <span class="hljs-keyword">if</span> (CollectionUtils.isEmpty(permissionDetails)) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BusinessException</span>(ResultCode.ACCESS_DENIED);<br>        &#125;<br><br>        <span class="hljs-type">long</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> permissionDetails.stream()<br>                .filter(permissionDetail -&gt; permissionDetail.getName().equals(permission))<br>                .count();<br>        <span class="hljs-keyword">if</span> (count &lt;= <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BusinessException</span>(ResultCode.ACCESS_DENIED);<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> String <span class="hljs-title function_">getPermissionOfUri</span><span class="hljs-params">(String uri)</span> &#123;<br>        Set&lt;String&gt; keySet = <span class="hljs-built_in">this</span>.uri2PermissionMap.keySet();<br>        <span class="hljs-keyword">if</span> (keySet.contains(uri)) &#123;<br>            <span class="hljs-keyword">return</span> uri2PermissionMap.get(uri);<br>        &#125;<br><br>        Map&lt;String, String&gt; map = keySet.stream().filter(key -&gt; key.endsWith(<span class="hljs-string">&quot;*&quot;</span>))<br>                .collect(Collectors.toMap(key -&gt; &#123;<br>                    <span class="hljs-type">int</span> <span class="hljs-variable">index</span> <span class="hljs-operator">=</span> key.lastIndexOf(<span class="hljs-string">&quot;*&quot;</span>);<br>                    <span class="hljs-type">String</span> <span class="hljs-variable">tempKey</span> <span class="hljs-operator">=</span> key.substring(<span class="hljs-number">0</span>, index);<br>                    <span class="hljs-keyword">return</span> tempKey;<br>                &#125;, Function.identity()));<br><br>        <span class="hljs-keyword">for</span> (String key : map.keySet()) &#123;<br>            <span class="hljs-keyword">if</span> (uri.startsWith(key)) &#123;<br>                <span class="hljs-type">String</span> <span class="hljs-variable">originKey</span> <span class="hljs-operator">=</span> map.get(key);<br>                <span class="hljs-keyword">return</span> uri2PermissionMap.get(originKey);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>然后将这个拦截器，添加到配置中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.yang.infrastructure.configuration;<br><br><span class="hljs-keyword">import</span> com.yang.infrastructure.auth.interceptors.JwtTokenVerifyInterceptor;<br><span class="hljs-keyword">import</span> com.yang.infrastructure.auth.interceptors.PermissionVerifyInterceptor;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.config.annotation.InterceptorRegistry;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurer;<br><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WebMvcConfiguration</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">WebMvcConfigurer</span> &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addInterceptors</span><span class="hljs-params">(InterceptorRegistry registry)</span> &#123;<br>        registry.addInterceptor(<span class="hljs-keyword">new</span> <span class="hljs-title class_">JwtTokenVerifyInterceptor</span>())<br>                .addPathPatterns(<span class="hljs-string">&quot;/**&quot;</span>) <span class="hljs-comment">// 拦截所有请求</span><br>                .excludePathPatterns(<span class="hljs-string">&quot;/user/login&quot;</span>, <span class="hljs-string">&quot;/user/register&quot;</span>); <span class="hljs-comment">// 排除登录、注册接口</span><br><br>        <span class="hljs-type">PermissionVerifyInterceptor</span> <span class="hljs-variable">permissionVerifyInterceptor</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PermissionVerifyInterceptor</span>();<br>        permissionVerifyInterceptor.addPermission(<span class="hljs-string">&quot;STUDENT&quot;</span>, <span class="hljs-string">&quot;/student/needPermission&quot;</span>);<br>        permissionVerifyInterceptor.addPermission(<span class="hljs-string">&quot;COUNSELOR&quot;</span>, <span class="hljs-string">&quot;/counselor/*&quot;</span>);<br><br>        registry.addInterceptor(permissionVerifyInterceptor)<br>                .addPathPatterns(<span class="hljs-string">&quot;/**&quot;</span>) <span class="hljs-comment">// 拦截所有请求</span><br>                .excludePathPatterns(<span class="hljs-string">&quot;/user/login&quot;</span>, <span class="hljs-string">&quot;/user/register&quot;</span>); <span class="hljs-comment">// 排除登录、注册接口</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4-2-测试"><a href="#4-2-测试" class="headerlink" title="4.2. 测试"></a>4.2. 测试</h4><p>首先，使用辅导员的token，依次访问&#x2F;student&#x2F;needPermission, &#x2F;student&#x2F;notPermission和&#x2F;counselor的相关接口</p><img src="/2024/04/03/%E9%89%B4%E6%9D%83%E5%AD%A6%E4%B9%A0/12.png" class=""><img src="/2024/04/03/%E9%89%B4%E6%9D%83%E5%AD%A6%E4%B9%A0/13.png" class=""><img src="/2024/04/03/%E9%89%B4%E6%9D%83%E5%AD%A6%E4%B9%A0/14.png" class=""><p>然后使用普通学生的token，依次访问&#x2F;student&#x2F;needPermission, &#x2F;student&#x2F;notPermission和&#x2F;counselor的相关接口</p><img src="/2024/04/03/%E9%89%B4%E6%9D%83%E5%AD%A6%E4%B9%A0/15.png" class=""><img src="/2024/04/03/%E9%89%B4%E6%9D%83%E5%AD%A6%E4%B9%A0/16.png" class=""><img src="/2024/04/03/%E9%89%B4%E6%9D%83%E5%AD%A6%E4%B9%A0/17.png" class="">]]></content>
    
    
    
    <tags>
      
      <tag>SpringBoot</tag>
      
      <tag>SpringSecurity</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>登录、注册学习</title>
    <link href="/2024/04/03/%E7%99%BB%E5%BD%95%E3%80%81%E6%B3%A8%E5%86%8C%E5%AD%A6%E4%B9%A0/"/>
    <url>/2024/04/03/%E7%99%BB%E5%BD%95%E3%80%81%E6%B3%A8%E5%86%8C%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h3 id="1-引言"><a href="#1-引言" class="headerlink" title="1. 引言"></a>1. 引言</h3><p>在项目中，登录、注册一般都是项目的必备功能，因为它们的用户管理和身份验证的基础，通过登录和注册，能有效保护用户个人数据，并根据用户权限，进行对应的资源访问控制。此外，还能对注册后的用户进行行为分析，以便提供对应的个性化服务。</p><h3 id="2-登录、注册实现"><a href="#2-登录、注册实现" class="headerlink" title="2. 登录、注册实现"></a>2. 登录、注册实现</h3><h4 id="2-1-项目结构介绍"><a href="#2-1-项目结构介绍" class="headerlink" title="2.1. 项目结构介绍"></a>2.1. 项目结构介绍</h4><p>这里的项目结构，借鉴周志明老师提出的凤凰架构，将项目分为四层：<br>1）domain： 领域层，负责实现业务逻辑，即表达业务概念、处理业务状态信息以及业务规这些行为，提供对应的领域服务。<br>2）infrastructure：基础设施层，向其他层提供通用的技术能力，譬如持久化能力、远程访问通信、工具集等。<br>3）application：应用层，负责软件本身对外暴露的能力，通过整合各个领域服务，进行协助，对外提供服务，相当于各个领域服务的门面，类似于MVC架构中的service层。<br>4）controller：负责向用户显示信息或解释用户发出的命令，即MVC架构中的controller层。</p><img src="/2024/04/03/%E7%99%BB%E5%BD%95%E3%80%81%E6%B3%A8%E5%86%8C%E5%AD%A6%E4%B9%A0/1.png" class=""><h4 id="2-2-简单实现"><a href="#2-2-简单实现" class="headerlink" title="2.2. 简单实现"></a>2.2. 简单实现</h4><h5 id="2-2-1-准备工作"><a href="#2-2-1-准备工作" class="headerlink" title="2.2.1. 准备工作"></a>2.2.1. 准备工作</h5><p>首先引入下列依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.baomidou<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.4.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.commons<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>commons-lang3<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><p>创建对应的数据库，数据库表结构如下：</p><img src="/2024/04/03/%E7%99%BB%E5%BD%95%E3%80%81%E6%B3%A8%E5%86%8C%E5%AD%A6%E4%B9%A0/2.png" class=""><p>这里的username添加了唯一索引，因为用户名一般都是唯一的。</p><h5 id="2-2-2-domain层"><a href="#2-2-2-domain层" class="headerlink" title="2.2.2. domain层"></a>2.2.2. domain层</h5><p>创建对应的实体类，以及相关的repository仓储层和domainservice领域服务</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@TableName(value = &quot;t_user&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br>    <span class="hljs-meta">@TableId(type = IdType.AUTO)</span><br>    <span class="hljs-keyword">private</span> Integer id;<br><br>    <span class="hljs-keyword">private</span> String username;<br><br>    <span class="hljs-keyword">private</span> String password;<br><br>    <span class="hljs-comment">// 是否冻结 0未冻结 1已冻结</span><br>    <span class="hljs-keyword">private</span> Integer freeze;<br><br>    <span class="hljs-keyword">private</span> Date createTime;<br><br>    <span class="hljs-keyword">private</span> Date updateTime;<br><br>    <span class="hljs-keyword">private</span> Map&lt;String, String&gt; featuresMap;<br><br>    <span class="hljs-keyword">private</span> String features;<br>&#125;<br><br><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">IUserRepository</span> &#123;<br><br>    <span class="hljs-type">boolean</span> <span class="hljs-title function_">saveUser</span><span class="hljs-params">(User user)</span>;<br><br><br>    User <span class="hljs-title function_">findByUsernameAndPassword</span><span class="hljs-params">(String username, String password)</span>;<br>&#125;<br><br><br><br><span class="hljs-meta">@Repository</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserRepository</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">IUserRepository</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> UserMapper userMapper;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">UN_FREEZE</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">FREEZE</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">saveUser</span><span class="hljs-params">(User user)</span> &#123;<br>        user.setCreateTime(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());<br>        user.setUpdateTime(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());<br>        user.setFreeze(UN_FREEZE);<br>        user.setFeaturesMap(<span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;());<br>        user.setFeatures(JSONObject.toJSONString(user.getFeaturesMap()));<br>        <span class="hljs-keyword">return</span> userMapper.insert(user) &gt; <span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> User <span class="hljs-title function_">findByUsernameAndPassword</span><span class="hljs-params">(String username, String password)</span> &#123;<br>        LambdaQueryWrapper&lt;User&gt; queryWrapper = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LambdaQueryWrapper</span>&lt;&gt;();<br>        queryWrapper.eq(User::getUsername, username);<br>        queryWrapper.eq(User::getPassword, password);<br>        <span class="hljs-keyword">return</span> userMapper.selectOne(queryWrapper);<br>    &#125;<br><br><br>&#125;<br><br><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserService</span> &#123;<br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> IUserRepository userRepository;<br><br>    <span class="hljs-keyword">public</span> User <span class="hljs-title function_">register</span><span class="hljs-params">(RegisterUserRequest request)</span> &#123;<br>        <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<br>        user.setUsername(request.getUsername());<br>        user.setPassword(request.getPassword());<br>        <span class="hljs-keyword">try</span> &#123;<br>            userRepository.saveUser(user);<br>            <span class="hljs-keyword">return</span> user;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BusinessException</span>(ResultCode.SERVER_ERROR);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> User <span class="hljs-title function_">login</span><span class="hljs-params">(LoginUserRequest request)</span> &#123;<br>        <span class="hljs-keyword">return</span> userRepository.findByUsernameAndPassword(request.getUsername(), request.getPassword());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="2-2-3-controller层"><a href="#2-2-3-controller层" class="headerlink" title="2.2.3. controller层"></a>2.2.3. controller层</h5><p>添加userController，在该类中添加注册和登录的接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(value = &quot;/user&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserController</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> UserService userService;<br><br>    <span class="hljs-meta">@PostMapping(value = &quot;/register&quot;)</span><br>    <span class="hljs-keyword">public</span> Response&lt;User&gt; <span class="hljs-title function_">register</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> RegisterUserRequest request)</span> &#123;<br>        <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> userService.register(request);<br>        <span class="hljs-keyword">return</span> Response.success(user);<br>    &#125;<br><br>    <span class="hljs-meta">@PostMapping(value = &quot;/login&quot;)</span><br>    <span class="hljs-keyword">public</span> Response&lt;User&gt; <span class="hljs-title function_">login</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> LoginUserRequest request)</span> &#123;<br>        <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> userService.login(request);<br>        <span class="hljs-keyword">if</span> (user == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BusinessException</span>(ResultCode.LOGIN_FAILED);<br>        &#125;<br>        <span class="hljs-keyword">return</span> Response.success(user);<br>    &#125;<br>&#125;<br><br><br><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LoginUserRequest</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br>    <span class="hljs-keyword">private</span> String username;<br><br>    <span class="hljs-keyword">private</span> String password;<br>&#125;<br><br><br><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RegisterUserRequest</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br>    <span class="hljs-keyword">private</span> String username;<br><br>    <span class="hljs-keyword">private</span> String password;<br><br>&#125;<br></code></pre></td></tr></table></figure><h5 id="2-2-4-infrastructure层"><a href="#2-2-4-infrastructure层" class="headerlink" title="2.2.4. infrastructure层"></a>2.2.4. infrastructure层</h5><p>添加基础设施，比如异常类、返回结果类、错误码，全局异常处理等</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">enum</span> <span class="hljs-title class_">ResultCode</span> &#123;<br>    SUCCESS(<span class="hljs-number">200</span>, <span class="hljs-string">&quot;操作成功&quot;</span>),<br>    ACCESS_DENIED(<span class="hljs-number">403</span>, <span class="hljs-string">&quot;没有权限&quot;</span>),<br>    FAILED(<span class="hljs-number">400</span>, <span class="hljs-string">&quot;操作失败&quot;</span>),<br><br>    LOGIN_FAILED(<span class="hljs-number">400</span>, <span class="hljs-string">&quot;用户不存在或密码错误&quot;</span>),<br>    SERVER_ERROR(<span class="hljs-number">500</span>, <span class="hljs-string">&quot;服务器错误&quot;</span>);<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> code;<br><br>    <span class="hljs-keyword">private</span> String msg;<br><br>    ResultCode(<span class="hljs-type">int</span> code, String msg) &#123;<br>        <span class="hljs-built_in">this</span>.code = code;<br>        <span class="hljs-built_in">this</span>.msg = msg;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getCode</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.code;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getMsg</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.msg;<br>    &#125;<br>&#125;<br><br><br><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Response</span> &lt;T&gt; &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> code;<br><br>    <span class="hljs-keyword">private</span> String msg;<br><br>    <span class="hljs-keyword">private</span> T data;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">Response</span><span class="hljs-params">(Integer code, String msg)</span> &#123;<br>        <span class="hljs-built_in">this</span>.code = code;<br>        <span class="hljs-built_in">this</span>.msg = msg;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">Response</span><span class="hljs-params">(Integer code, String msg, T data)</span> &#123;<br>        <span class="hljs-built_in">this</span>.code = code;<br>        <span class="hljs-built_in">this</span>.msg = msg;<br>        <span class="hljs-built_in">this</span>.data = data;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">Response</span><span class="hljs-params">(ResultCode resultCode)</span> &#123;<br>        <span class="hljs-built_in">this</span>.code = resultCode.getCode();<br>        <span class="hljs-built_in">this</span>.msg = resultCode.getMsg();<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">Response</span><span class="hljs-params">(ResultCode resultCode, T data)</span> &#123;<br>        <span class="hljs-built_in">this</span>.code = resultCode.getCode();<br>        <span class="hljs-built_in">this</span>.msg = resultCode.getMsg();<br>        <span class="hljs-built_in">this</span>.data = data;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; Response&lt;T&gt; <span class="hljs-title function_">success</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Response</span>&lt;&gt;(ResultCode.SUCCESS);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; Response&lt;T&gt; <span class="hljs-title function_">success</span><span class="hljs-params">(T data)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Response</span>&lt;&gt;(ResultCode.SUCCESS, data);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; Response&lt;T&gt; <span class="hljs-title function_">fail</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Response</span>&lt;&gt;(ResultCode.FAILED);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; Response&lt;T&gt; <span class="hljs-title function_">error</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Response</span>&lt;&gt;(ResultCode.SERVER_ERROR);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; Response&lt;T&gt; <span class="hljs-title function_">fail</span><span class="hljs-params">(ResultCode resultCode)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Response</span>&lt;&gt;(resultCode);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; Response&lt;T&gt; <span class="hljs-title function_">fail</span><span class="hljs-params">(String msg)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Response</span>&lt;&gt;(ResultCode.FAILED.getCode(), msg);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getCode</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.code;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getMsg</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.msg;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> T <span class="hljs-title function_">getData</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.data;<br>    &#125;<br>&#125;<br><br><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BusinessException</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">RuntimeException</span> &#123;<br>    <span class="hljs-keyword">private</span> ResultCode resultCode;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">BusinessException</span><span class="hljs-params">(ResultCode resultCode)</span> &#123;<br>        <span class="hljs-built_in">super</span>(resultCode.getMsg());<br>        <span class="hljs-built_in">this</span>.resultCode = resultCode;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> ResultCode <span class="hljs-title function_">getResultCode</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.resultCode;<br>    &#125;<br>&#125;<br><br><br><br><span class="hljs-meta">@RestControllerAdvice</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">GlobalExceptionHandler</span> &#123;<br>    <span class="hljs-meta">@ExceptionHandler(value = BusinessException.class)</span><br>    <span class="hljs-keyword">public</span> Response <span class="hljs-title function_">handleBusinessException</span><span class="hljs-params">(BusinessException businessException)</span> &#123;<br>        <span class="hljs-keyword">return</span> Response.fail(businessException.getResultCode());<br>    &#125;<br><br>    <span class="hljs-meta">@ExceptionHandler(value = Exception.class)</span><br>    <span class="hljs-keyword">public</span> Response <span class="hljs-title function_">handleException</span><span class="hljs-params">(Exception e)</span> &#123;<br>        <span class="hljs-keyword">return</span> Response.fail(e.getMessage());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="2-2-5-application层"><a href="#2-2-5-application层" class="headerlink" title="2.2.5. application层"></a>2.2.5. application层</h5><p>因为现在的功能比较简单，不涉及到多个领域对象的交互，所以这里暂时不添加相关的应用服务。</p><h5 id="2-2-6-测试"><a href="#2-2-6-测试" class="headerlink" title="2.2.6. 测试"></a>2.2.6. 测试</h5><p>所以接口测试工具，分别对注册接口和登录接口进行访问</p><img src="/2024/04/03/%E7%99%BB%E5%BD%95%E3%80%81%E6%B3%A8%E5%86%8C%E5%AD%A6%E4%B9%A0/3.png" class=""><img src="/2024/04/03/%E7%99%BB%E5%BD%95%E3%80%81%E6%B3%A8%E5%86%8C%E5%AD%A6%E4%B9%A0/4.png" class=""><h4 id="2-3-密码加密"><a href="#2-3-密码加密" class="headerlink" title="2.3. 密码加密"></a>2.3. 密码加密</h4><p>上述流程虽然能够跑通，但是存在一个问题，用户密码在数据库中，以明文的方式进行存储，这样不太合理，容易将用户数据泄露出去。因此，这里进行修改。<br>在用户密码加密中，我们经常会使用到盐（Salt），盐是一种随机值，它与用户密码组合起来，形成一个组合密码，然后使用加密哈希函数（比如SHA-）对组合密码进行加密，生成哈希值，并将加密后的哈希值存储在数据库中，当用户登录时，系统会取出存储的哈希值，通过与用户输入的密码组合，进行哈希加密，然后比对与数据库中存储的值是否一致。</p><h5 id="2-3-1-修改表结构"><a href="#2-3-1-修改表结构" class="headerlink" title="2.3.1. 修改表结构"></a>2.3.1. 修改表结构</h5><p>在之前的表设计中，我们预留了一个features字段，表示扩展信息，我们其实可以将盐存入到扩展信息中，但是因为盐我们在登录中进场使用到，因此，还是单独作为一个字段，修改后的表结构如下：</p><img src="/2024/04/03/%E7%99%BB%E5%BD%95%E3%80%81%E6%B3%A8%E5%86%8C%E5%AD%A6%E4%B9%A0/5.png" class=""><h5 id="2-3-2-infrastructure层"><a href="#2-3-2-infrastructure层" class="headerlink" title="2.3.2. infrastructure层"></a>2.3.2. infrastructure层</h5><p>在基础设施层中，添加上加密工具类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.yang.infrastructure.utils;<br><br><span class="hljs-keyword">import</span> cn.hutool.crypto.SecureUtil;<br><span class="hljs-keyword">import</span> cn.hutool.crypto.digest.Digester;<br><br><span class="hljs-keyword">import</span> java.util.concurrent.ThreadLocalRandom;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EncryptUtils</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Digester</span> <span class="hljs-variable">sha256</span> <span class="hljs-operator">=</span> SecureUtil.sha256();<br>    <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">char</span>[] saltChars = <span class="hljs-string">&quot;0123456789abcdefghijklmnopqrstuvwxyz&quot;</span>.toCharArray();<br>    <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">SALT_LEN</span> <span class="hljs-operator">=</span> <span class="hljs-number">6</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 加密</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> originPwd</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> salt</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">encrypt</span><span class="hljs-params">(String originPwd, String salt)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">newPwd</span> <span class="hljs-operator">=</span> salt + originPwd;<br>        <span class="hljs-type">byte</span>[] digest = sha256.digest(newPwd);<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(digest);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 生成盐</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">generateSalt</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">sb</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<br>        <span class="hljs-type">ThreadLocalRandom</span> <span class="hljs-variable">threadLocalRandom</span> <span class="hljs-operator">=</span> ThreadLocalRandom.current();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; SALT_LEN; i++) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">index</span> <span class="hljs-operator">=</span> threadLocalRandom.nextInt(saltChars.length);<br>            sb.append(saltChars[index]);<br>        &#125;<br>        <span class="hljs-keyword">return</span> sb.toString();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="2-3-3-domain"><a href="#2-3-3-domain" class="headerlink" title="2.3.3. domain"></a>2.3.3. domain</h5><p>修改domain层中的userService，在注册的时候，设置盐，并对密码进行加密，在登录的时候，根据盐和输入密码，生成哈希值，与数据库中的哈希值进行对比。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.yang.domain.service;<br><br><span class="hljs-keyword">import</span> com.yang.controller.request.LoginUserRequest;<br><span class="hljs-keyword">import</span> com.yang.controller.request.RegisterUserRequest;<br><span class="hljs-keyword">import</span> com.yang.domain.data.User;<br><span class="hljs-keyword">import</span> com.yang.domain.repository.IUserRepository;<br><span class="hljs-keyword">import</span> com.yang.infrastructure.common.ResultCode;<br><span class="hljs-keyword">import</span> com.yang.infrastructure.exception.BusinessException;<br><span class="hljs-keyword">import</span> com.yang.infrastructure.utils.EncryptUtils;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Service;<br><br><span class="hljs-keyword">import</span> javax.annotation.Resource;<br><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserService</span> &#123;<br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> IUserRepository userRepository;<br><br>    <span class="hljs-keyword">public</span> User <span class="hljs-title function_">register</span><span class="hljs-params">(RegisterUserRequest request)</span> &#123;<br>        <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<br>        user.setUsername(request.getUsername());<br>        <span class="hljs-comment">// 设置盐</span><br>        user.setSalt(EncryptUtils.generateSalt());<br>        user.setPassword(EncryptUtils.encrypt(request.getPassword(), user.getSalt()));<br>        <span class="hljs-keyword">try</span> &#123;<br>            userRepository.saveUser(user);<br>            <span class="hljs-keyword">return</span> user;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BusinessException</span>(ResultCode.SERVER_ERROR);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> User <span class="hljs-title function_">login</span><span class="hljs-params">(LoginUserRequest request)</span> &#123;<br>        <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> userRepository.findByUsername(request.getUsername());<br>        <span class="hljs-type">String</span> <span class="hljs-variable">salt</span> <span class="hljs-operator">=</span> user.getSalt();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">password</span> <span class="hljs-operator">=</span> EncryptUtils.encrypt(request.getPassword(), salt);<br>        <span class="hljs-keyword">if</span> (password.equals(user.getPassword())) &#123;<br>            <span class="hljs-keyword">return</span> user;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="2-3-4-测试"><a href="#2-3-4-测试" class="headerlink" title="2.3.4. 测试"></a>2.3.4. 测试</h5><p>重新运行项目，调用注册接口和登录接口</p><img src="/2024/04/03/%E7%99%BB%E5%BD%95%E3%80%81%E6%B3%A8%E5%86%8C%E5%AD%A6%E4%B9%A0/6.png" class=""><img src="/2024/04/03/%E7%99%BB%E5%BD%95%E3%80%81%E6%B3%A8%E5%86%8C%E5%AD%A6%E4%B9%A0/7.png" class=""><p>查看数据库，可以看出此时的password确实是经过加密后生成的。</p><img src="/2024/04/03/%E7%99%BB%E5%BD%95%E3%80%81%E6%B3%A8%E5%86%8C%E5%AD%A6%E4%B9%A0/8.png" class=""><h3 id="3-Token生成"><a href="#3-Token生成" class="headerlink" title="3. Token生成"></a>3. Token生成</h3><h4 id="3-1-准备工作"><a href="#3-1-准备工作" class="headerlink" title="3.1. 准备工作"></a>3.1. 准备工作</h4><p>一般情况下，除了登录和注册接口，不需要进行登录拦截之外，其他的接口，都需要对用户的登录状态进行拦截，判断用户是否登录，如若未登录，则提示用户需要进行登录。对此，我们在用户登录成功后，可以返回一个token作为登录凭证返回给前端。</p><img src="/2024/04/03/%E7%99%BB%E5%BD%95%E3%80%81%E6%B3%A8%E5%86%8C%E5%AD%A6%E4%B9%A0/9.png" class=""><p>这里我们在构建token的时候，使用JWT来构建，JWT(JSON Web Token)是为了在网络应用环境间传递声明而执行的一种基于JSON的开放标准。JWT主要由三部分组成：<br>1）头部（Header），通常包含两部分信息，alg(alogirthm，指定用于签名或加密令牌的算法），typ（类型，表明令牌的类型为JWT）</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;alg&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;HS256&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;typ&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;JWT&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>2）有效载荷（Payload），一个json对象，包含一系列声明，比如sub（subject主题，通常是用户id），name（用户名称），exp（过期时间）等。<br>3）签名：对前两部分的串行化后的字符串使用指定的算法（如SHA256或RSA签名）生成的一个加密串，它的作用是保证令牌的完整性和真实性，保证传输过程中没有被修改。<br>这三个部分之间用.分隔，构成JWT的完整结构，如：</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gcode">eyJhbGciOiJIUzI<span class="hljs-number">1</span><span class="hljs-symbol">NiIsInR5</span>cCI<span class="hljs-number">6</span>IkpX<span class="hljs-attr">VCJ9</span>.eyJzdWIiOiIxMj<span class="hljs-name">M0</span><span class="hljs-symbol">NTY3</span>ODkwIiwibmFtZSI<span class="hljs-number">6</span>Ikpva<span class="hljs-name">G4</span>gR<span class="hljs-name">G9</span>lIiwiaWF<span class="hljs-number">0</span>Ijox<span class="hljs-symbol">NTE2</span>Mj<span class="hljs-name">M5</span>MDIyfQ.TJVA<span class="hljs-number">95</span><span class="hljs-keyword">Or</span><span class="hljs-name">M7</span>E<span class="hljs-number">2</span>cBab<span class="hljs-number">30</span>RMHrHDcEfxjoYZgeFO<span class="hljs-symbol">NFh7</span>H<span class="hljs-number">8</span>RU<br></code></pre></td></tr></table></figure><p>为整合JWT，我们引入下列依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.auth0<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>java-jwt<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.10.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="3-2-infrastructure层"><a href="#3-2-infrastructure层" class="headerlink" title="3.2. infrastructure层"></a>3.2. infrastructure层</h4><p>在基础设施层，我们添加和鉴权相关的信息，首先添加一个jwt配置类，用于配置jwt使用的密钥和过期时间</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.yang.infrastructure.auth.config;<br><br><span class="hljs-keyword">import</span> lombok.Data;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Value;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JwtTokenProperty</span> &#123;<br><br>    <span class="hljs-meta">@Value(&quot;$&#123;jwt.token.secret&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String secret;<br><br>    <span class="hljs-meta">@Value(&quot;$&#123;jwt.token.expire&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> Integer expire;<br>&#125;<br></code></pre></td></tr></table></figure><p>定义一个JwtTokenService接口，以及对应的实现类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">JwtTokenService</span> &#123;<br>    String <span class="hljs-title function_">generateJwtToken</span><span class="hljs-params">(JwtTokenGenerateRequest request)</span>;<br><br>    JwtTokenVerifyDTO <span class="hljs-title function_">verify</span><span class="hljs-params">(JwtTokenVerifyRequest request)</span>;<br><br>&#125;<br><br><br><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JwtTokenServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">JwtTokenService</span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Integer</span> <span class="hljs-variable">EXPIRE_TIME</span> <span class="hljs-operator">=</span> <span class="hljs-number">604800</span>;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">SECRET</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;helloworld&quot;</span>;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">generateJwtToken</span><span class="hljs-params">(JwtTokenGenerateRequest request)</span> &#123;<br>        JWTCreator.<span class="hljs-type">Builder</span> <span class="hljs-variable">builder</span> <span class="hljs-operator">=</span> JWT.create();<br>        <span class="hljs-keyword">if</span> (MapUtil.isNotEmpty(request.getPayLoads())) &#123;<br>            request.getPayLoads().forEach((k, v) -&gt; &#123;<br>                builder.withClaim(k, v);<br>            &#125;);<br>        &#125;<br><br>        <span class="hljs-type">Calendar</span> <span class="hljs-variable">expireTime</span> <span class="hljs-operator">=</span> Calendar.getInstance();<br>        expireTime.add(Calendar.SECOND, request.getExpireTime() != <span class="hljs-literal">null</span> ? request.getExpireTime() : EXPIRE_TIME);<br>        <span class="hljs-keyword">return</span> builder.withSubject(request.getSubject())<br>                .withIssuedAt(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>())<br>                .withExpiresAt(expireTime.getTime())<br>                .sign(Algorithm.HMAC256(StringUtils.isNotEmpty(request.getSecret()) ? request.getSecret() : SECRET));<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> JwtTokenVerifyDTO <span class="hljs-title function_">verify</span><span class="hljs-params">(JwtTokenVerifyRequest request)</span> &#123;<br>        <span class="hljs-type">JWTVerifier</span> <span class="hljs-variable">jwtVerifier</span> <span class="hljs-operator">=</span> JWT.require<br>                (Algorithm.HMAC256(StringUtils.isNotEmpty(request.getSecret()) ? request.getSecret() : SECRET))<br>                .build();<br>        <span class="hljs-type">DecodedJWT</span> <span class="hljs-variable">decodedJWT</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            decodedJWT = jwtVerifier.verify(request.getToken());<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BusinessException</span>(ResultCode.TOKEN_FAILED);<br>        &#125;<br><br>        <span class="hljs-type">JwtTokenVerifyDTO</span> <span class="hljs-variable">jwtTokenVerifyDTO</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JwtTokenVerifyDTO</span>();<br>        Map&lt;String, Claim&gt; claims = decodedJWT.getClaims();<br>        <span class="hljs-keyword">if</span> (MapUtil.isNotEmpty(claims)) &#123;<br>            claims.forEach((k, v) -&gt; &#123;<br>                jwtTokenVerifyDTO.getPayLoads().put(k, v.asString());<br>            &#125;);<br>        &#125;<br>        jwtTokenVerifyDTO.setSubject(decodedJWT.getSubject());<br>        jwtTokenVerifyDTO.setExpireTime(decodedJWT.getExpiresAt());<br>        <span class="hljs-keyword">return</span> jwtTokenVerifyDTO;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3-3-application层"><a href="#3-3-application层" class="headerlink" title="3.3. application层"></a>3.3. application层</h4><p>因为现在登录涉及到token等操作，对于token的生成， 这个不属于userService领域服务范围，因此就涉及到多个服务之间的协作，所以此时使用applicationService来整合多个服务。我们添加一个UserApplicationService类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.yang.application.service;<br><br><span class="hljs-keyword">import</span> com.yang.application.dto.UserLoginDTO;<br><span class="hljs-keyword">import</span> com.yang.controller.request.LoginUserRequest;<br><span class="hljs-keyword">import</span> com.yang.controller.request.RegisterUserRequest;<br><span class="hljs-keyword">import</span> com.yang.domain.data.User;<br><span class="hljs-keyword">import</span> com.yang.domain.service.UserService;<br><span class="hljs-keyword">import</span> com.yang.infrastructure.auth.config.JwtTokenProperty;<br><span class="hljs-keyword">import</span> com.yang.infrastructure.auth.request.JwtTokenGenerateRequest;<br><span class="hljs-keyword">import</span> com.yang.infrastructure.auth.service.JwtTokenService;<br><span class="hljs-keyword">import</span> com.yang.infrastructure.common.ResultCode;<br><span class="hljs-keyword">import</span> com.yang.infrastructure.exception.BusinessException;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Service;<br><br><span class="hljs-keyword">import</span> javax.annotation.Resource;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserApplicationService</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> UserService userService;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> JwtTokenProperty jwtTokenProperty;<br><br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> JwtTokenService jwtTokenService;<br><br>    <span class="hljs-keyword">public</span> User <span class="hljs-title function_">register</span><span class="hljs-params">(RegisterUserRequest request)</span> &#123;<br>        <span class="hljs-keyword">return</span> userService.register(request);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> UserLoginDTO <span class="hljs-title function_">login</span><span class="hljs-params">(LoginUserRequest request)</span> &#123;<br>        <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> userService.login(request);<br>        <span class="hljs-keyword">if</span> (user == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BusinessException</span>(ResultCode.LOGIN_FAILED);<br>        &#125;<br>        <span class="hljs-comment">// 生成token</span><br>        <span class="hljs-type">UserLoginDTO</span> <span class="hljs-variable">userLoginDTO</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UserLoginDTO</span>();<br>        userLoginDTO.setUser(user);<br><br>        <span class="hljs-type">JwtTokenGenerateRequest</span> <span class="hljs-variable">jwtGenerateRequest</span> <span class="hljs-operator">=</span> convert2JwtTokenGenerateRequest(user);<br>        userLoginDTO.setToken(jwtTokenService.generateJwtToken(jwtGenerateRequest));<br>        <span class="hljs-keyword">return</span> userLoginDTO;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> JwtTokenGenerateRequest <span class="hljs-title function_">convert2JwtTokenGenerateRequest</span><span class="hljs-params">(User user)</span> &#123;<br>        <span class="hljs-type">JwtTokenGenerateRequest</span> <span class="hljs-variable">request</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JwtTokenGenerateRequest</span>();<br>        request.setSubject(user.getId().toString());<br>        request.setExpireTime(jwtTokenProperty.getExpire());<br>        request.setSecret(jwtTokenProperty.getSecret());<br><br>        Map&lt;String, String&gt; payloads = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        payloads.put(<span class="hljs-string">&quot;username&quot;</span>, user.getUsername());<br>        payloads.put(<span class="hljs-string">&quot;id&quot;</span>, user.getId().toString());<br>        payloads.put(<span class="hljs-string">&quot;salt&quot;</span>, user.getSalt());<br>        request.setPayLoads(payloads);<br><br>        <span class="hljs-keyword">return</span> request;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3-4-controller层"><a href="#3-4-controller层" class="headerlink" title="3.4. controller层"></a>3.4. controller层</h4><p>我们修改controller层，改用applicationService，并添加一个接口，来测试我们的JwtTokenService解析是否正确</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.yang.controller;<br><br><span class="hljs-keyword">import</span> com.yang.application.service.UserApplicationService;<br><span class="hljs-keyword">import</span> com.yang.application.dto.UserLoginDTO;<br><span class="hljs-keyword">import</span> com.yang.controller.request.LoginUserRequest;<br><span class="hljs-keyword">import</span> com.yang.controller.request.RegisterUserRequest;<br><span class="hljs-keyword">import</span> com.yang.domain.data.User;<br><span class="hljs-keyword">import</span> com.yang.infrastructure.auth.config.JwtTokenProperty;<br><span class="hljs-keyword">import</span> com.yang.infrastructure.auth.request.JwtTokenVerifyRequest;<br><span class="hljs-keyword">import</span> com.yang.infrastructure.auth.response.JwtTokenVerifyDTO;<br><span class="hljs-keyword">import</span> com.yang.infrastructure.auth.service.JwtTokenService;<br><span class="hljs-keyword">import</span> com.yang.infrastructure.common.Response;<br><span class="hljs-keyword">import</span> com.yang.infrastructure.common.ResultCode;<br><span class="hljs-keyword">import</span> com.yang.infrastructure.exception.BusinessException;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.*;<br><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(value = &quot;/user&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserController</span> &#123;<br>   <span class="hljs-meta">@Autowired</span><br>   <span class="hljs-keyword">private</span> UserApplicationService userApplicationService;<br><br>    <span class="hljs-meta">@PostMapping(value = &quot;/register&quot;)</span><br>    <span class="hljs-keyword">public</span> Response&lt;User&gt; <span class="hljs-title function_">register</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> RegisterUserRequest request)</span> &#123;<br>        <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> userApplicationService.register(request);<br>        <span class="hljs-keyword">return</span> Response.success(user);<br>    &#125;<br><br>    <span class="hljs-meta">@PostMapping(value = &quot;/login&quot;)</span><br>    <span class="hljs-keyword">public</span> Response&lt;UserLoginDTO&gt; <span class="hljs-title function_">login</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> LoginUserRequest request)</span> &#123;<br>        <span class="hljs-type">UserLoginDTO</span> <span class="hljs-variable">userLoginDTO</span> <span class="hljs-operator">=</span> userApplicationService.login(request);<br>        <span class="hljs-keyword">if</span> (userLoginDTO == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BusinessException</span>(ResultCode.LOGIN_FAILED);<br>        &#125;<br>        <span class="hljs-keyword">return</span> Response.success(userLoginDTO);<br>    &#125;<br>    <br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> JwtTokenService jwtTokenService;<br>    <br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> JwtTokenProperty jwtTokenProperty;<br>    <br>    <span class="hljs-meta">@GetMapping(value = &quot;/verify&quot;)</span><br>    <span class="hljs-keyword">public</span> Response&lt;JwtTokenVerifyDTO&gt; <span class="hljs-title function_">verify</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(name = &quot;token&quot;)</span>String token)</span> &#123;<br>        <span class="hljs-type">JwtTokenVerifyRequest</span> <span class="hljs-variable">request</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JwtTokenVerifyRequest</span>();<br>        request.setToken(token);<br>        request.setSecret(jwtTokenProperty.getSecret());<br>        <span class="hljs-type">JwtTokenVerifyDTO</span> <span class="hljs-variable">verify</span> <span class="hljs-operator">=</span> jwtTokenService.verify(request);<br>        <span class="hljs-keyword">return</span> Response.success(verify);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3-5-测试"><a href="#3-5-测试" class="headerlink" title="3.5. 测试"></a>3.5. 测试</h4><p>首先调用登录接口，进行测试</p><img src="/2024/04/03/%E7%99%BB%E5%BD%95%E3%80%81%E6%B3%A8%E5%86%8C%E5%AD%A6%E4%B9%A0/10.png" class=""><p>将登录接口返回的token复制，调用verfiy接口，解析成功，说明JwtTokenService没问题</p><img src="/2024/04/03/%E7%99%BB%E5%BD%95%E3%80%81%E6%B3%A8%E5%86%8C%E5%AD%A6%E4%B9%A0/11.png" class=""><p>然后我们随意捏造一个token进行访问，结果如下：</p><img src="/2024/04/03/%E7%99%BB%E5%BD%95%E3%80%81%E6%B3%A8%E5%86%8C%E5%AD%A6%E4%B9%A0/12.png" class=""><h3 id="4-登录拦截"><a href="#4-登录拦截" class="headerlink" title="4. 登录拦截"></a>4. 登录拦截</h3><p>后端返回token 给前端后，前端保存这个token,在后续发送请求时，将这个token携带到请求头进行访问，后端解析请求头，解析该token，判断token是否生效，当token有效时，对请求进行放行。也就是说，我们在执行业务代码之前，都会先对请求进行拦截，并校验token的合法性。因此，就需要使用到拦截器。</p><h4 id="4-1-infrastructure层"><a href="#4-1-infrastructure层" class="headerlink" title="4.1. infrastructure层"></a>4.1. infrastructure层</h4><p>在基础设施层，添加和登录拦截有关的类，首先添加一个Spring上下文工具类，帮助获取容器中的bean</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.yang.infrastructure.utils;<br><br><span class="hljs-keyword">import</span> org.springframework.beans.BeansException;<br><span class="hljs-keyword">import</span> org.springframework.context.ApplicationContext;<br><span class="hljs-keyword">import</span> org.springframework.context.ApplicationContextAware;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringContextUtils</span>&lt;T&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ApplicationContextAware</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> ApplicationContext applicationContext;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setApplicationContext</span><span class="hljs-params">(ApplicationContext applicationContext)</span> <span class="hljs-keyword">throws</span> BeansException &#123;<br>        SpringContextUtils.applicationContext = applicationContext;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span>&lt;T&gt;  T <span class="hljs-title function_">getBeanOfType</span><span class="hljs-params">(Class&lt;T&gt; clazz)</span> &#123;<br>        <span class="hljs-keyword">return</span> applicationContext.getBean(clazz);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; T <span class="hljs-title function_">getBeanOfName</span><span class="hljs-params">(String name, Class&lt;T&gt; clazz)</span> &#123;<br>        <span class="hljs-keyword">return</span> applicationContext.getBean(name, clazz);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>然后添加一个JwtTokenVerifyInterceptor类，实现HandlerInterceptor，表示判断token是否有效的拦截器。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.yang.infrastructure.auth.interceptors;<br><br><span class="hljs-keyword">import</span> com.yang.infrastructure.auth.config.JwtTokenProperty;<br><span class="hljs-keyword">import</span> com.yang.infrastructure.auth.request.JwtTokenVerifyRequest;<br><span class="hljs-keyword">import</span> com.yang.infrastructure.auth.response.JwtTokenVerifyDTO;<br><span class="hljs-keyword">import</span> com.yang.infrastructure.auth.service.JwtTokenService;<br><span class="hljs-keyword">import</span> com.yang.infrastructure.common.ResultCode;<br><span class="hljs-keyword">import</span> com.yang.infrastructure.exception.BusinessException;<br><span class="hljs-keyword">import</span> com.yang.infrastructure.utils.SpringContextUtils;<br><span class="hljs-keyword">import</span> org.apache.commons.lang3.StringUtils;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.HandlerInterceptor;<br><br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JwtTokenVerifyInterceptor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">HandlerInterceptor</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">preHandle</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">token</span> <span class="hljs-operator">=</span> request.getHeader(<span class="hljs-string">&quot;token&quot;</span>);<br>        <span class="hljs-keyword">if</span> (StringUtils.isEmpty(token)) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BusinessException</span>(ResultCode.TOKEN_FAILED);<br>        &#125;<br>        <span class="hljs-type">JwtTokenService</span> <span class="hljs-variable">jwtTokenService</span> <span class="hljs-operator">=</span> SpringContextUtils.getBeanOfType(JwtTokenService.class);<br>        <span class="hljs-type">JwtTokenProperty</span> <span class="hljs-variable">jwtTokenProperty</span> <span class="hljs-operator">=</span> SpringContextUtils.getBeanOfType(JwtTokenProperty.class);<br><br>        <span class="hljs-type">JwtTokenVerifyRequest</span> <span class="hljs-variable">jwtTokenVerifyRequest</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JwtTokenVerifyRequest</span>();<br>        jwtTokenVerifyRequest.setToken(token);<br>        jwtTokenVerifyRequest.setSecret(jwtTokenProperty.getSecret());<br><br>        <span class="hljs-type">JwtTokenVerifyDTO</span> <span class="hljs-variable">verify</span> <span class="hljs-operator">=</span> jwtTokenService.verify(jwtTokenVerifyRequest);<br>        <span class="hljs-keyword">if</span> (verify == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BusinessException</span>(ResultCode.TOKEN_FAILED);<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>然后添加一个配置类，配置刚才的拦截器</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs haxe"><span class="hljs-keyword">package</span> com.yang.infrastructure.configuration;<br><br><span class="hljs-keyword">import</span> com.yang.infrastructure.auth.interceptors.JwtTokenVerifyInterceptor;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.config.annotation.InterceptorRegistry;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurer;<br><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-title class_"><span class="hljs-keyword">class</span> <span class="hljs-title">WebMvcConfiguration</span> <span class="hljs-keyword"><span class="hljs-keyword">implements</span> <span class="hljs-type">WebMvcConfigurer</span></span> </span>&#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> void addInterceptors(InterceptorRegistry registry) &#123;<br>        registry.addInterceptor(<span class="hljs-keyword">new</span> <span class="hljs-type">JwtTokenVerifyInterceptor</span>())<br>                .addPathPatterns(<span class="hljs-string">&quot;/**&quot;</span>) <span class="hljs-comment">// 拦截所有请求</span><br>                .excludePathPatterns(<span class="hljs-string">&quot;/user/login&quot;</span>, <span class="hljs-string">&quot;/user/register&quot;</span>); <span class="hljs-comment">// 排除登录、注册接口</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4-2-测试"><a href="#4-2-测试" class="headerlink" title="4.2. 测试"></a>4.2. 测试</h4><p>首先，我们在请求头，不添加token，访问测试接口，结果如下：</p><img src="/2024/04/03/%E7%99%BB%E5%BD%95%E3%80%81%E6%B3%A8%E5%86%8C%E5%AD%A6%E4%B9%A0/13.png" class=""><p>然后在请求头，添加无效的token，访问测试接口，结果如下：</p><img src="/2024/04/03/%E7%99%BB%E5%BD%95%E3%80%81%E6%B3%A8%E5%86%8C%E5%AD%A6%E4%B9%A0/14.png" class=""><p>携带登录返回的token，访问测试接口，结果如下：</p><img src="/2024/04/03/%E7%99%BB%E5%BD%95%E3%80%81%E6%B3%A8%E5%86%8C%E5%AD%A6%E4%B9%A0/15.png" class=""><h3 id="5-token存储"><a href="#5-token存储" class="headerlink" title="5. token存储"></a>5. token存储</h3><h4 id="5-1-准备工作"><a href="#5-1-准备工作" class="headerlink" title="5.1. 准备工作"></a>5.1. 准备工作</h4><p>上述实现，虽然能够完成登录拦截的需求，但是有一个问题，我们每次访问接口，都需要对token进行验证，判断这个token是否有效，为减少解析token的耗时，我们可以将token存起来并设置一个过期时间，这个时候，我们就可以使用reids了。此时，我们的调用流程，如下图所示：</p><img src="/2024/04/03/%E7%99%BB%E5%BD%95%E3%80%81%E6%B3%A8%E5%86%8C%E5%AD%A6%E4%B9%A0/16.png" class=""><p>因此，我们添加redis的相关依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="5-2-infrastructure层"><a href="#5-2-infrastructure层" class="headerlink" title="5.2. infrastructure层"></a>5.2. infrastructure层</h4><p>在基础设施层，添加上redis的配置类和相关的工具类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RedisConfiguration</span> &#123;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> RedisTemplate <span class="hljs-title function_">redisTemplate</span><span class="hljs-params">(RedisConnectionFactory redisConnectionFactory)</span> &#123;<br>        RedisTemplate&lt;String, Object&gt; redisTemplate = <span class="hljs-keyword">new</span> <span class="hljs-title class_">RedisTemplate</span>&lt;&gt;();<br>        redisTemplate.setConnectionFactory(redisConnectionFactory);<br><br>        <span class="hljs-type">StringRedisSerializer</span> <span class="hljs-variable">stringRedisSerializer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringRedisSerializer</span>();<br>        <span class="hljs-type">Jackson2JsonRedisSerializer</span> <span class="hljs-variable">jackson2JsonRedisSerializer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Jackson2JsonRedisSerializer</span>(Object.class);<br>        <span class="hljs-type">ObjectMapper</span> <span class="hljs-variable">objectMapper</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectMapper</span>().enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);<br>        jackson2JsonRedisSerializer.setObjectMapper(objectMapper);<br><br>        redisTemplate.setKeySerializer(stringRedisSerializer);<br>        redisTemplate.setHashKeySerializer(stringRedisSerializer);<br>        redisTemplate.setValueSerializer(jackson2JsonRedisSerializer);<br>        redisTemplate.setHashValueSerializer(jackson2JsonRedisSerializer);<br>        <span class="hljs-keyword">return</span> redisTemplate;<br>    &#125;<br>&#125;<br><br><br><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RedisUtils</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> RedisTemplate&lt;String, Object&gt; redisTemplate;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setKey</span><span class="hljs-params">(String key, Object value)</span> &#123;<br>        redisTemplate.opsForValue().set(key, value);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setKey</span><span class="hljs-params">(String key, Object value, Long expire)</span> &#123;<br>        setKey(key, value, expire, TimeUnit.SECONDS);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setKey</span><span class="hljs-params">(String key, Object value, Long expire, TimeUnit timeUnit)</span> &#123;<br>        redisTemplate.opsForValue().set(key, value, expire, timeUnit);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">getKey</span><span class="hljs-params">(String key)</span> &#123;<br>        <span class="hljs-keyword">return</span> redisTemplate.opsForValue().get(key);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>然后修改JwtTokenVerifyInterceptor拦截器，先查询redis上是否存在对应的token，有的话放行，否则使用JwtTokenService验证token是否有效</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">preHandle</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>      <span class="hljs-type">String</span> <span class="hljs-variable">token</span> <span class="hljs-operator">=</span> request.getHeader(<span class="hljs-string">&quot;token&quot;</span>);<br>      <span class="hljs-keyword">if</span> (StringUtils.isEmpty(token)) &#123;<br>          <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BusinessException</span>(ResultCode.TOKEN_FAILED);<br>      &#125;<br>      <span class="hljs-keyword">if</span>(verifyByRedis(token)) &#123; <span class="hljs-comment">// 判断该token在Redis是否存在</span><br>          System.out.println(<span class="hljs-string">&quot;Redis中存在这个token，放行&quot;</span>);<br>          <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>      &#125;<br>      System.out.println(<span class="hljs-string">&quot;Redis中不存在这个token，解析该token&quot;</span>);<br>      <span class="hljs-type">JwtTokenService</span> <span class="hljs-variable">jwtTokenService</span> <span class="hljs-operator">=</span> SpringContextUtils.getBeanOfType(JwtTokenService.class);<br>      <span class="hljs-type">JwtTokenProperty</span> <span class="hljs-variable">jwtTokenProperty</span> <span class="hljs-operator">=</span> SpringContextUtils.getBeanOfType(JwtTokenProperty.class);<br><br>      <span class="hljs-type">JwtTokenVerifyRequest</span> <span class="hljs-variable">jwtTokenVerifyRequest</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JwtTokenVerifyRequest</span>();<br>      jwtTokenVerifyRequest.setToken(token);<br>      jwtTokenVerifyRequest.setSecret(jwtTokenProperty.getSecret());<br><br>      <span class="hljs-type">JwtTokenVerifyDTO</span> <span class="hljs-variable">verify</span> <span class="hljs-operator">=</span> jwtTokenService.verify(jwtTokenVerifyRequest);<br>      <span class="hljs-keyword">if</span> (verify == <span class="hljs-literal">null</span>) &#123;<br>          <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BusinessException</span>(ResultCode.TOKEN_FAILED);<br>      &#125;<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>  &#125;<br><br>  <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">verifyByRedis</span><span class="hljs-params">(String token)</span> &#123;<br>      <span class="hljs-type">RedisUtils</span> <span class="hljs-variable">redisUtils</span> <span class="hljs-operator">=</span> SpringContextUtils.getBeanOfType(RedisUtils.class);<br>      <span class="hljs-type">Object</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> redisUtils.getKey(<span class="hljs-string">&quot;token:&quot;</span> + token);<br>      <span class="hljs-keyword">return</span> key != <span class="hljs-literal">null</span>;<br>  &#125;<br></code></pre></td></tr></table></figure><h4 id="5-3-application层"><a href="#5-3-application层" class="headerlink" title="5.3. application层"></a>5.3. application层</h4><p>修改登录逻辑中，在生成token后，将token存入redis</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> UserLoginDTO <span class="hljs-title function_">login</span><span class="hljs-params">(LoginUserRequest request)</span> &#123;<br>       <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> userService.login(request);<br>       <span class="hljs-keyword">if</span> (user == <span class="hljs-literal">null</span>) &#123;<br>           <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BusinessException</span>(ResultCode.LOGIN_FAILED);<br>       &#125;<br>       <span class="hljs-comment">// 生成token</span><br>       <span class="hljs-type">UserLoginDTO</span> <span class="hljs-variable">userLoginDTO</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UserLoginDTO</span>();<br>       userLoginDTO.setUser(user);<br><br>       <span class="hljs-type">JwtTokenGenerateRequest</span> <span class="hljs-variable">jwtGenerateRequest</span> <span class="hljs-operator">=</span> convert2JwtTokenGenerateRequest(user);<br>       <span class="hljs-type">String</span> <span class="hljs-variable">token</span> <span class="hljs-operator">=</span> jwtTokenService.generateJwtToken(jwtGenerateRequest);<br>       userLoginDTO.setToken(token);<br><br>       <span class="hljs-comment">// token存储到redis</span><br>       redisUtils.setKey(<span class="hljs-string">&quot;token:&quot;</span> + token, jwtGenerateRequest, jwtGenerateRequest.getExpireTime());<br>       <span class="hljs-keyword">return</span> userLoginDTO;<br>   &#125;<br></code></pre></td></tr></table></figure><h4 id="5-4-测试"><a href="#5-4-测试" class="headerlink" title="5.4. 测试"></a>5.4. 测试</h4><p>首先访问登录接口，登录成功后，查看redis中是否含有对应的token</p><img src="/2024/04/03/%E7%99%BB%E5%BD%95%E3%80%81%E6%B3%A8%E5%86%8C%E5%AD%A6%E4%B9%A0/17.png" class=""><p>redis中存在对应的token，然后我们访问测试接口，查看命令行,此时redis中存在该token，因此直接放行</p><img src="/2024/04/03/%E7%99%BB%E5%BD%95%E3%80%81%E6%B3%A8%E5%86%8C%E5%AD%A6%E4%B9%A0/18.png" class=""><p>然后我们删除redis中的这个key，再次访问测试接口，此时redis不存在这个key，因此就需要进行token的解析。</p><img src="/2024/04/03/%E7%99%BB%E5%BD%95%E3%80%81%E6%B3%A8%E5%86%8C%E5%AD%A6%E4%B9%A0/19.png" class=""><h3 id="6-用户信息更新"><a href="#6-用户信息更新" class="headerlink" title="6. 用户信息更新"></a>6. 用户信息更新</h3><p>用户信息，一般情况下更新的频率比较低，但也不是没有，常见的更新有：用户修改密码、用户修改昵称等。我们以用户修改密码为例，进行示例。<br>当用户修改密码时，我们只需要使用数据库中的salt，结合用户输入的新密码，生成新的哈希值，存入数据库，此外，因为用户信息更新了，我们最好将用户的token生效，存入redis的token，我们可以很容易地将其删除，但是，前端保存地token信息，我们修改不了，因此，最好是前端在更新操作成功后，主动删除请求头的token，从而时用户再次操作时，提示token失效，进行登录。</p><h4 id="6-1-infrastructure层"><a href="#6-1-infrastructure层" class="headerlink" title="6.1. infrastructure层"></a>6.1. infrastructure层</h4><p>首先，修改RedisUtils工具类，加上删除key的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">removeKey</span><span class="hljs-params">(String key)</span> &#123;<br>       <span class="hljs-keyword">return</span> redisTemplate.delete(key);<br>   &#125;<br></code></pre></td></tr></table></figure><h4 id="6-2-domain层"><a href="#6-2-domain层" class="headerlink" title="6.2. domain层"></a>6.2. domain层</h4><p>修改UserService，添加修改密码的相关操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">updatePassword</span><span class="hljs-params">(UpdatePasswordRequest request)</span> &#123;<br>       <span class="hljs-type">Integer</span> <span class="hljs-variable">userId</span> <span class="hljs-operator">=</span> request.getId();<br>       <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> userRepository.findById(userId);<br>        <span class="hljs-keyword">if</span> (user == <span class="hljs-literal">null</span>) &#123;<br>           <span class="hljs-keyword">return</span>;<br>       &#125;<br>       <span class="hljs-type">String</span> <span class="hljs-variable">password</span> <span class="hljs-operator">=</span> request.getPassword();<br>       <span class="hljs-type">String</span> <span class="hljs-variable">newPassword</span> <span class="hljs-operator">=</span> EncryptUtils.encrypt(password, user.getSalt());<br>       user.setPassword(newPassword);<br><br>       <span class="hljs-keyword">try</span> &#123;<br>           userRepository.updateUser(user);<br>       &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>           <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BusinessException</span>(ResultCode.SERVER_ERROR);<br>       &#125;<br>   &#125;<br></code></pre></td></tr></table></figure><h4 id="6-3-application层"><a href="#6-3-application层" class="headerlink" title="6.3. application层"></a>6.3. application层</h4><p>在UserApplicationService类，添加修改用户密码的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">updatePassword</span><span class="hljs-params">(UpdatePasswordRequest updatePasswordRequest, HttpServletRequest request)</span> &#123;<br>       userService.updatePassword(updatePasswordRequest);<br>       <br>       <span class="hljs-comment">// 删除token</span><br>       <span class="hljs-type">String</span> <span class="hljs-variable">token</span> <span class="hljs-operator">=</span> request.getHeader(<span class="hljs-string">&quot;token&quot;</span>);<br>       redisUtils.removeKey(<span class="hljs-string">&quot;token:&quot;</span> + token);<br>   &#125;<br></code></pre></td></tr></table></figure><h4 id="6-4-controller层"><a href="#6-4-controller层" class="headerlink" title="6.4. controller层"></a>6.4. controller层</h4><p>在UserController类，添加修改用户密码的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@PutMapping(value = &quot;/updatePassword&quot;)</span><br>   <span class="hljs-keyword">public</span> Response <span class="hljs-title function_">updatePassword</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> UpdatePasswordRequest request, HttpServletRequest httpServletRequest)</span> &#123;<br>       userApplicationService.updatePassword(request, httpServletRequest);<br>       <span class="hljs-keyword">return</span> Response.success();<br>   &#125;<br></code></pre></td></tr></table></figure><h4 id="6-5-测试"><a href="#6-5-测试" class="headerlink" title="6.5. 测试"></a>6.5. 测试</h4><p>首先进行登录，登录成功后，在redis中多了一个token</p><img src="/2024/04/03/%E7%99%BB%E5%BD%95%E3%80%81%E6%B3%A8%E5%86%8C%E5%AD%A6%E4%B9%A0/20.png" class=""><p>然后调用更新密码接口</p><img src="/2024/04/03/%E7%99%BB%E5%BD%95%E3%80%81%E6%B3%A8%E5%86%8C%E5%AD%A6%E4%B9%A0/21.png" class=""><p>再次查看redis，发现token被删除了，然后查看数据库，能看出我们的密码也改变了</p><img src="/2024/04/03/%E7%99%BB%E5%BD%95%E3%80%81%E6%B3%A8%E5%86%8C%E5%AD%A6%E4%B9%A0/22.png" class=""><img src="/2024/04/03/%E7%99%BB%E5%BD%95%E3%80%81%E6%B3%A8%E5%86%8C%E5%AD%A6%E4%B9%A0/23.png" class=""><h3 id="7-用户上下文"><a href="#7-用户上下文" class="headerlink" title="7. 用户上下文"></a>7. 用户上下文</h3><p>上面的代码，看似合理，但是有一个问题，更新密码的时候，传了两个值，一个是用户id，另一个才是用户输入的密码。在之前我们提到，我们通过登录拦截，规避了未登录用户操作系统资源的问题，但是对于我们刚才实现的修改密码接口，可能出现这种情况，用户A携带自己登录的token，请求体中id为用户B的id，调用修改密码的接口，这就导致，用户A修改了用户B的密码，这是不合理的，因此，这里将对代码进一步做修改，在进行拦截操作后，将用户信息，存储于用户上下文，然后在修改密码时，直接使用用户上下文中的用户id，而不是依靠前端传递的id。</p><h4 id="7-1-infrastructure层"><a href="#7-1-infrastructure层" class="headerlink" title="7.1. infrastructure层"></a>7.1. infrastructure层</h4><p>首先，我们定义一个用户上下文信息类，用于存储用户的主要信息，包括用户id，token，用户名等。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.yang.infrastructure.auth;<br><br><span class="hljs-keyword">import</span> lombok.Data;<br><br><span class="hljs-keyword">import</span> java.io.Serializable;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserContextDetails</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br>    <span class="hljs-keyword">private</span> Integer id;<br>    <br>    <span class="hljs-keyword">private</span> String token;<br>    <br>    <span class="hljs-keyword">private</span> String username;<br>    <br>    <span class="hljs-keyword">private</span> Map&lt;String, String&gt; extendMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>&#125;<br></code></pre></td></tr></table></figure><p>添加一个线程上下文类，用于存储用户上下文信息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.yang.infrastructure.auth;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserContextThreadLocal</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> ThreadLocal&lt;UserContextDetails&gt; userContextDetailsThreadLocal = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadLocal</span>&lt;&gt;();<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setUserContextDetails</span><span class="hljs-params">(UserContextDetails userContextDetails)</span> &#123;<br>        userContextDetailsThreadLocal.set(userContextDetails);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> UserContextDetails <span class="hljs-title function_">get</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> userContextDetailsThreadLocal.get();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">remove</span><span class="hljs-params">()</span> &#123;<br>        userContextDetailsThreadLocal.remove();<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Integer <span class="hljs-title function_">getUserId</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> userContextDetailsThreadLocal.get().getId();<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">getToken</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> userContextDetailsThreadLocal.get().getToken();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>然后，修改我们的JwtTokenVerifyInterceptor拦截器，这里我们实现了afterCompletion。在preHandler方法中，设置对应的线程上下文，在afterCompletion清除线程上下文，注意，设置线程上下文和清除线程上下文的操作，必须成对出现，否则会造成内存泄露。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.yang.infrastructure.auth.interceptors;<br><br><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSON;<br><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSONObject;<br><span class="hljs-keyword">import</span> com.yang.infrastructure.auth.UserContextDetails;<br><span class="hljs-keyword">import</span> com.yang.infrastructure.auth.UserContextThreadLocal;<br><span class="hljs-keyword">import</span> com.yang.infrastructure.auth.config.JwtTokenProperty;<br><span class="hljs-keyword">import</span> com.yang.infrastructure.auth.request.JwtTokenVerifyRequest;<br><span class="hljs-keyword">import</span> com.yang.infrastructure.auth.response.JwtTokenVerifyDTO;<br><span class="hljs-keyword">import</span> com.yang.infrastructure.auth.service.JwtTokenService;<br><span class="hljs-keyword">import</span> com.yang.infrastructure.common.ResultCode;<br><span class="hljs-keyword">import</span> com.yang.infrastructure.exception.BusinessException;<br><span class="hljs-keyword">import</span> com.yang.infrastructure.utils.RedisUtils;<br><span class="hljs-keyword">import</span> com.yang.infrastructure.utils.SpringContextUtils;<br><span class="hljs-keyword">import</span> org.apache.commons.lang3.StringUtils;<br><span class="hljs-keyword">import</span> org.springframework.lang.Nullable;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.HandlerInterceptor;<br><br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JwtTokenVerifyInterceptor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">HandlerInterceptor</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">preHandle</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">token</span> <span class="hljs-operator">=</span> request.getHeader(<span class="hljs-string">&quot;token&quot;</span>);<br>        <span class="hljs-keyword">if</span> (StringUtils.isEmpty(token)) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BusinessException</span>(ResultCode.TOKEN_FAILED);<br>        &#125;<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">userDetails</span> <span class="hljs-operator">=</span> getUserDetailsFromRedis(token);<br>        <span class="hljs-keyword">if</span> (userDetails != <span class="hljs-literal">null</span>) &#123; <span class="hljs-comment">// 判断该token在Redis是否存在</span><br>            <span class="hljs-comment">// 设置线程上下文</span><br>            System.out.println(<span class="hljs-string">&quot;设置线程上下文====================&quot;</span>);<br>            <span class="hljs-type">UserContextDetails</span> <span class="hljs-variable">userContextDetails</span> <span class="hljs-operator">=</span> (UserContextDetails) userDetails;<br>            userContextDetails.setToken(token);<br>            UserContextThreadLocal.setUserContextDetails(userContextDetails);<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br><br>        <span class="hljs-type">JwtTokenService</span> <span class="hljs-variable">jwtTokenService</span> <span class="hljs-operator">=</span> SpringContextUtils.getBeanOfType(JwtTokenService.class);<br>        <span class="hljs-type">JwtTokenProperty</span> <span class="hljs-variable">jwtTokenProperty</span> <span class="hljs-operator">=</span> SpringContextUtils.getBeanOfType(JwtTokenProperty.class);<br><br>        <span class="hljs-type">JwtTokenVerifyRequest</span> <span class="hljs-variable">jwtTokenVerifyRequest</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JwtTokenVerifyRequest</span>();<br>        jwtTokenVerifyRequest.setToken(token);<br>        jwtTokenVerifyRequest.setSecret(jwtTokenProperty.getSecret());<br><br>        <span class="hljs-type">JwtTokenVerifyDTO</span> <span class="hljs-variable">verify</span> <span class="hljs-operator">=</span> jwtTokenService.verify(jwtTokenVerifyRequest);<br>        <span class="hljs-keyword">if</span> (verify == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BusinessException</span>(ResultCode.TOKEN_FAILED);<br>        &#125;<br><br>        <span class="hljs-comment">// 设置线程上下文</span><br>        System.out.println(<span class="hljs-string">&quot;设置线程上下文====================&quot;</span>);<br>        <span class="hljs-type">UserContextDetails</span> <span class="hljs-variable">userContextDetails</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UserContextDetails</span>();<br>        userContextDetails.setId(Integer.valueOf(verify.getSubject()));<br>        userContextDetails.setToken(token);<br>        userContextDetails.setUsername(verify.getPayLoads().get(<span class="hljs-string">&quot;username&quot;</span>));<br>        userContextDetails.setExtendMap(verify.getPayLoads());<br>        UserContextThreadLocal.setUserContextDetails(userContextDetails);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> Object <span class="hljs-title function_">getUserDetailsFromRedis</span><span class="hljs-params">(String token)</span> &#123;<br>        <span class="hljs-type">RedisUtils</span> <span class="hljs-variable">redisUtils</span> <span class="hljs-operator">=</span> SpringContextUtils.getBeanOfType(RedisUtils.class);<br>        <span class="hljs-keyword">return</span> redisUtils.getKey(<span class="hljs-string">&quot;token:&quot;</span> + token);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterCompletion</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler, <span class="hljs-meta">@Nullable</span> Exception ex)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        System.out.println(<span class="hljs-string">&quot;清除线程上下文=======================&quot;</span>);<br>        <span class="hljs-comment">// 清除线程上下文</span><br>        UserContextThreadLocal.remove();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="7-2-domain层"><a href="#7-2-domain层" class="headerlink" title="7.2. domain层"></a>7.2. domain层</h4><p>修改UserService的updatePassword方法，userId从线程上下文获取</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">updatePassword</span><span class="hljs-params">(UpdatePasswordRequest request)</span> &#123;<br>       <span class="hljs-type">Integer</span> <span class="hljs-variable">userId</span> <span class="hljs-operator">=</span> UserContextThreadLocal.getUserId();<br>       <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> userRepository.findById(userId);<br>       <span class="hljs-keyword">if</span> (user == <span class="hljs-literal">null</span>) &#123;<br>           <span class="hljs-keyword">return</span>;<br>       &#125;<br>       <span class="hljs-type">String</span> <span class="hljs-variable">password</span> <span class="hljs-operator">=</span> request.getPassword();<br>       <span class="hljs-type">String</span> <span class="hljs-variable">newPassword</span> <span class="hljs-operator">=</span> EncryptUtils.encrypt(password, user.getSalt());<br>       user.setPassword(newPassword);<br><br>       <span class="hljs-keyword">try</span> &#123;<br>           userRepository.updateUser(user);<br>       &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>           <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BusinessException</span>(ResultCode.SERVER_ERROR);<br>       &#125;<br>   &#125;<br></code></pre></td></tr></table></figure><h4 id="7-3-application层"><a href="#7-3-application层" class="headerlink" title="7.3. application层"></a>7.3. application层</h4><p>修改application层updatePassword方法，token从线程上下文获取</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">updatePassword</span><span class="hljs-params">(UpdatePasswordRequest updatePasswordRequest)</span> &#123;<br>       userService.updatePassword(updatePasswordRequest);<br><br>       <span class="hljs-comment">// 删除token</span><br>       <span class="hljs-type">String</span> <span class="hljs-variable">token</span> <span class="hljs-operator">=</span> UserContextThreadLocal.getToken();<br>       redisUtils.removeKey(<span class="hljs-string">&quot;token:&quot;</span> + token);<br>   &#125;<br></code></pre></td></tr></table></figure><h4 id="7-4-controller层"><a href="#7-4-controller层" class="headerlink" title="7.4. controller层"></a>7.4. controller层</h4><p>修改controller层的updatePassword方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@PutMapping(value = &quot;/updatePassword&quot;)</span><br>   <span class="hljs-keyword">public</span> Response <span class="hljs-title function_">updatePassword</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> UpdatePasswordRequest request)</span> &#123;<br>       userApplicationService.updatePassword(request);<br>       <span class="hljs-keyword">return</span> Response.success();<br>   &#125;<br></code></pre></td></tr></table></figure><h4 id="7-5-测试"><a href="#7-5-测试" class="headerlink" title="7.5. 测试"></a>7.5. 测试</h4><p>调用用户登录接口，然后查看redis，可以看出，现在存储的value类型，是UserContextDetails类型</p><img src="/2024/04/03/%E7%99%BB%E5%BD%95%E3%80%81%E6%B3%A8%E5%86%8C%E5%AD%A6%E4%B9%A0/24.png" class=""><p>调用测试接口，然后查看控制台</p><img src="/2024/04/03/%E7%99%BB%E5%BD%95%E3%80%81%E6%B3%A8%E5%86%8C%E5%AD%A6%E4%B9%A0/25.png" class=""><p>然后查看控制台，从控制台中可以看出，设置线程上下文和清除线程上下文成对出现。</p><img src="/2024/04/03/%E7%99%BB%E5%BD%95%E3%80%81%E6%B3%A8%E5%86%8C%E5%AD%A6%E4%B9%A0/26.png" class=""><p>测试修改密码接口</p><img src="/2024/04/03/%E7%99%BB%E5%BD%95%E3%80%81%E6%B3%A8%E5%86%8C%E5%AD%A6%E4%B9%A0/27.png" class=""><p>修改成功，说明线程上下文的取值没有问题。</p><h3 id="8-参考文档"><a href="#8-参考文档" class="headerlink" title="8. 参考文档"></a>8. 参考文档</h3><p><a href="https://segmentfault.com/a/1190000040003653">https://segmentfault.com/a/1190000040003653</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>SpringBoot</tag>
      
      <tag>SpringSecurity</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MongoDB学习2—SpringBoot集成MongoDB</title>
    <link href="/2024/04/03/MongoDB%E5%AD%A6%E4%B9%A02%E2%80%94SpringBoot%E9%9B%86%E6%88%90MongoDB/"/>
    <url>/2024/04/03/MongoDB%E5%AD%A6%E4%B9%A02%E2%80%94SpringBoot%E9%9B%86%E6%88%90MongoDB/</url>
    
    <content type="html"><![CDATA[<h3 id="1-引言"><a href="#1-引言" class="headerlink" title="1. 引言"></a>1. 引言</h3><p>SpringBoot要集成MongoDB，可以直接使用spring-data-mongodb提供的MongoTemplate和MongoRepository这两种方式，前者操作比较灵活，后者比较简单。<br>引入依赖如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-data-mongodb<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>joda-time<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>joda-time<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.10.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">exclusions</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">exclusion</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.junit.vintage<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit-vintage-engine<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">exclusion</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">exclusions</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><p>application.yml配置信息如下：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">data:</span><br>    <span class="hljs-attr">mongodb:</span><br>      <span class="hljs-attr">uri:</span> <span class="hljs-string">mongodb://127.0.0.1:27017/test</span><br></code></pre></td></tr></table></figure><h3 id="2-代码示例"><a href="#2-代码示例" class="headerlink" title="2. 代码示例"></a>2. 代码示例</h3><p>首先，我们创建一个test数据库，在这个数据库中，创建一个user集合，用于演示：</p><img src="/2024/04/03/MongoDB%E5%AD%A6%E4%B9%A02%E2%80%94SpringBoot%E9%9B%86%E6%88%90MongoDB/1.png" class=""><h4 id="2-1-MongoTemplate使用"><a href="#2-1-MongoTemplate使用" class="headerlink" title="2.1. MongoTemplate使用"></a>2.1. MongoTemplate使用</h4><h5 id="2-1-1-插入和简单查询"><a href="#2-1-1-插入和简单查询" class="headerlink" title="2.1.1. 插入和简单查询"></a>2.1.1. 插入和简单查询</h5><p>我们添加测试方法，首先测试插入和一些简单查询：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testInsertAndSimpleFind</span><span class="hljs-params">()</span> &#123;<br>       <span class="hljs-comment">// 测试添加</span><br>       <span class="hljs-type">User</span> <span class="hljs-variable">createUser</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<br>       createUser.setAge(<span class="hljs-number">20</span>);<br>       createUser.setName(<span class="hljs-string">&quot;cxy&quot;</span>);<br>       createUser.setEmail(<span class="hljs-string">&quot;123@qq.com&quot;</span>);<br>       createUser.setCreateTime(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());<br>       createUser = mongoTemplate.insert(createUser);<br>       System.out.println(JSONObject.toJSONString(createUser));<br><br>       <span class="hljs-comment">// 根据id查询</span><br>       <span class="hljs-type">User</span> <span class="hljs-variable">userById</span> <span class="hljs-operator">=</span> mongoTemplate.findById(createUser.getId(), User.class);<br>       System.out.println(JSONObject.toJSONString(userById));<br><br>       <span class="hljs-comment">// 查询全部</span><br>       List&lt;User&gt; allUsers = mongoTemplate.findAll(User.class);<br>       System.out.println(JSONObject.toJSONString(allUsers));<br>   &#125;<br></code></pre></td></tr></table></figure><p>执行结果如下：</p><img src="/2024/04/03/MongoDB%E5%AD%A6%E4%B9%A02%E2%80%94SpringBoot%E9%9B%86%E6%88%90MongoDB/2.png" class=""><p>查看数据库，确实多了一条记录</p><img src="/2024/04/03/MongoDB%E5%AD%A6%E4%B9%A02%E2%80%94SpringBoot%E9%9B%86%E6%88%90MongoDB/3.png" class=""><h5 id="2-1-2-更新"><a href="#2-1-2-更新" class="headerlink" title="2.1.2. 更新"></a>2.1.2. 更新</h5><p>接着我们测试mongoTemplate的修改</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testUpdateMongoTemplate</span><span class="hljs-params">()</span> &#123;<br>      <span class="hljs-type">String</span> <span class="hljs-variable">id</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;65ea70bf090d176df859e5fa&quot;</span>;<br>      <span class="hljs-type">Query</span> <span class="hljs-variable">query</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Query</span>(Criteria.where(<span class="hljs-string">&quot;_id&quot;</span>).is(id));<br>      <span class="hljs-type">Update</span> <span class="hljs-variable">update</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Update</span>();<br>      update.set(<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;cxy123&quot;</span>);<br>      update.set(<span class="hljs-string">&quot;age&quot;</span>, <span class="hljs-number">20</span>);<br>      <span class="hljs-type">UpdateResult</span> <span class="hljs-variable">upsert</span> <span class="hljs-operator">=</span> mongoTemplate.upsert(query, update, User.class);<br>      <span class="hljs-type">long</span> <span class="hljs-variable">modifiedCount</span> <span class="hljs-operator">=</span> upsert.getModifiedCount();<br>      System.out.println(<span class="hljs-string">&quot;受影响的条数：&quot;</span> + modifiedCount);<br>  &#125;<br></code></pre></td></tr></table></figure><p>执行上述代码，查看数据库，数据库确实被修改了。</p><img src="/2024/04/03/MongoDB%E5%AD%A6%E4%B9%A02%E2%80%94SpringBoot%E9%9B%86%E6%88%90MongoDB/4.png" class=""><h5 id="2-1-3-删除"><a href="#2-1-3-删除" class="headerlink" title="2.1.3. 删除"></a>2.1.3. 删除</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testDeleteMongoTemplate</span><span class="hljs-params">()</span> &#123;<br>       <span class="hljs-type">String</span> <span class="hljs-variable">id</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;65ea70bf090d176df859e5fa&quot;</span>;<br>       <span class="hljs-type">Query</span> <span class="hljs-variable">query</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Query</span>(Criteria.where(<span class="hljs-string">&quot;_id&quot;</span>).is(id));<br>       <span class="hljs-type">DeleteResult</span> <span class="hljs-variable">deleteResult</span> <span class="hljs-operator">=</span> mongoTemplate.remove(query, User.class);<br>       System.out.println(<span class="hljs-string">&quot;删除个数：&quot;</span> + deleteResult.getDeletedCount());<br>   &#125;<br></code></pre></td></tr></table></figure><p>执行完毕后，查看数控库，相关的集合被成功删除。</p><img src="/2024/04/03/MongoDB%E5%AD%A6%E4%B9%A02%E2%80%94SpringBoot%E9%9B%86%E6%88%90MongoDB/5.png" class=""><h5 id="2-1-4-条件查询"><a href="#2-1-4-条件查询" class="headerlink" title="2.1.4. 条件查询"></a>2.1.4. 条件查询</h5><p>我们先插入一些测试数据，方便后续测试条件查询</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br> <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">insertTestUser</span><span class="hljs-params">()</span> &#123;<br>     <span class="hljs-type">User</span> <span class="hljs-variable">user1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<br>     user1.setName(<span class="hljs-string">&quot;张三&quot;</span>);<br>     user1.setAge(<span class="hljs-number">10</span>);<br>     user1.setEmail(<span class="hljs-string">&quot;zhangsna@qq.com&quot;</span>);<br>     user1.setCreateTime(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());<br>     <br>     <span class="hljs-type">User</span> <span class="hljs-variable">user2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<br>     user2.setName(<span class="hljs-string">&quot;李四&quot;</span>);<br>     user2.setAge(<span class="hljs-number">20</span>);<br>     user2.setEmail(<span class="hljs-string">&quot;lisi@163.com&quot;</span>);<br>     user2.setCreateTime(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());<br>     <br>     <span class="hljs-type">User</span> <span class="hljs-variable">user3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<br>     user3.setName(<span class="hljs-string">&quot;王五&quot;</span>);<br>     user3.setAge(<span class="hljs-number">30</span>);<br>     user3.setCreateTime(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());<br>     <br>     List&lt;User&gt; userList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>     userList.add(user1);<br>     userList.add(user2);<br>     userList.add(user3);<br>     <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>         <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<br>         user.setName(<span class="hljs-string">&quot;name:&quot;</span> + i);<br>         user.setAge(<span class="hljs-number">20</span> + i);<br>         user.setEmail(<span class="hljs-string">&quot;template&quot;</span> + i + <span class="hljs-string">&quot;@qq.com&quot;</span>);<br>         user.setCreateTime(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());<br>         userList.add(user);<br>     &#125;<br>     mongoTemplate.insert(userList, User.class);<br> &#125;<br></code></pre></td></tr></table></figure><p>假设我们现在查询姓名为张三的用户：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testFindByName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">Query</span> <span class="hljs-variable">query</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Query</span>();<br>        query.addCriteria(Criteria.where(<span class="hljs-string">&quot;name&quot;</span>).is(<span class="hljs-string">&quot;张三&quot;</span>));<br>        <span class="hljs-type">User</span> <span class="hljs-variable">zhangsan</span> <span class="hljs-operator">=</span> mongoTemplate.findOne(query, User.class);<br>        System.out.println(<span class="hljs-string">&quot;张三：&quot;</span> + JSONObject.toJSONString(zhangsan));<br>    &#125;<br></code></pre></td></tr></table></figure><p>执行结果如下：</p><img src="/2024/04/03/MongoDB%E5%AD%A6%E4%B9%A02%E2%80%94SpringBoot%E9%9B%86%E6%88%90MongoDB/6.png" class=""><p>查询年龄在20到30之间的用户：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testFindByAge</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">Query</span> <span class="hljs-variable">query</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Query</span>();<br>        query.addCriteria(Criteria.where(<span class="hljs-string">&quot;age&quot;</span>).gte(<span class="hljs-number">20</span>).lte(<span class="hljs-number">30</span>));<br>        List&lt;User&gt; users = mongoTemplate.find(query, User.class);<br>        <span class="hljs-keyword">for</span> (User user : users) &#123;<br>            System.out.println(<span class="hljs-string">&quot;age:&quot;</span> + user.getAge() + <span class="hljs-string">&quot;:&quot;</span> + JSONObject.toJSONString(user));<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><p>结果如下：</p><img src="/2024/04/03/MongoDB%E5%AD%A6%E4%B9%A02%E2%80%94SpringBoot%E9%9B%86%E6%88%90MongoDB/7.png" class=""><p>当我们要进行查询的时候，可以使用where来查询，上述演示的，只是对一个field进行条件查询，当我们需要对多个field进行条件查询时，可以使用and来连接，假设我们要查询姓名为王五并且年龄为30岁的人，测试方法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testFindByNameAndAge</span><span class="hljs-params">()</span> &#123;<br>      <span class="hljs-type">Query</span> <span class="hljs-variable">query</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Query</span>();<br>      query.addCriteria(Criteria.where(<span class="hljs-string">&quot;name&quot;</span>).is(<span class="hljs-string">&quot;王五&quot;</span>)<br>              .and(<span class="hljs-string">&quot;age&quot;</span>).is(<span class="hljs-number">30</span>));<br><br>      List&lt;User&gt; users = mongoTemplate.find(query, User.class);<br>      <span class="hljs-keyword">for</span> (User user : users) &#123;<br>          System.out.println(<span class="hljs-string">&quot;age:&quot;</span> + user.getAge() + <span class="hljs-string">&quot;:&quot;</span> + JSONObject.toJSONString(user));<br>      &#125;<br>  &#125;<br></code></pre></td></tr></table></figure><p>测试结果如下：</p><img src="/2024/04/03/MongoDB%E5%AD%A6%E4%B9%A02%E2%80%94SpringBoot%E9%9B%86%E6%88%90MongoDB/8.png" class=""><h5 id="2-1-5-分页查询"><a href="#2-1-5-分页查询" class="headerlink" title="2.1.5. 分页查询"></a>2.1.5. 分页查询</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testPage</span><span class="hljs-params">()</span> &#123;<br>       <span class="hljs-type">int</span> <span class="hljs-variable">pageNo</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br>       <span class="hljs-type">int</span> <span class="hljs-variable">pageSize</span> <span class="hljs-operator">=</span> <span class="hljs-number">3</span>;<br><br>       <span class="hljs-type">Query</span> <span class="hljs-variable">query</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Query</span>();<br>       query.skip((pageNo - <span class="hljs-number">1</span>) * pageSize).limit(pageSize);<br>       List&lt;User&gt; users = mongoTemplate.find(query, User.class);<br>       <span class="hljs-keyword">for</span> (User user : users) &#123;<br>           System.out.println(<span class="hljs-string">&quot;user:&quot;</span> + JSONObject.toJSONString(user));<br>       &#125;<br>   &#125;<br></code></pre></td></tr></table></figure><p>测试结果如下：</p><img src="/2024/04/03/MongoDB%E5%AD%A6%E4%B9%A02%E2%80%94SpringBoot%E9%9B%86%E6%88%90MongoDB/9.png" class=""><h4 id="2-2-MongoRepository"><a href="#2-2-MongoRepository" class="headerlink" title="2.2. MongoRepository"></a>2.2. MongoRepository</h4><p>Spring Data提供对mongodb数据访问的支持，我们只需要继承MongoRepository类，按照SpringData规范就可以了。<br>首先，我们添加UserRepository接口，继承MongoRepository&lt;User, String&gt;</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example.repository;<br><br><span class="hljs-keyword">import</span> org.example.pojo.User;<br><span class="hljs-keyword">import</span> org.springframework.data.mongodb.repository.MongoRepository;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Repository;<br><br><span class="hljs-meta">@Repository</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserRepository</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">MongoRepository</span>&lt;User, String&gt; &#123;<br>&#125;<br><br>然后创建UserService，用于对user进行增删改查<br><span class="hljs-keyword">package</span> org.example.service;<br><br><span class="hljs-keyword">import</span> org.example.pojo.User;<br><span class="hljs-keyword">import</span> org.example.repository.UserRepository;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.data.domain.*;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Service;<br><br><span class="hljs-keyword">import</span> java.util.Date;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserService</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> UserRepository userRepository;<br>    <br>    <span class="hljs-keyword">public</span> User <span class="hljs-title function_">saveUser</span><span class="hljs-params">(User user)</span> &#123;<br>        user.setCreateTime(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());<br>        <span class="hljs-keyword">return</span> userRepository.save(user);<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> User <span class="hljs-title function_">updateUser</span><span class="hljs-params">(User user)</span> &#123;<br>        <span class="hljs-comment">// 插入和更新都是使用save</span><br>        <span class="hljs-keyword">return</span> userRepository.save(user);<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">removeUserById</span><span class="hljs-params">(String id)</span> &#123;<br>        userRepository.deleteById(id);<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> User <span class="hljs-title function_">findById</span><span class="hljs-params">(String id)</span> &#123;<br>        <span class="hljs-keyword">return</span> userRepository.findById(id).get();<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> List&lt;User&gt; <span class="hljs-title function_">findAll</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> userRepository.findAll();<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> List&lt;User&gt; <span class="hljs-title function_">findByNameAndAge</span><span class="hljs-params">(String name, <span class="hljs-type">int</span> age)</span> &#123;<br>        <span class="hljs-type">User</span> <span class="hljs-variable">conditionUser</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<br>        conditionUser.setName(name);<br>        conditionUser.setAge(age);<br>        Example&lt;User&gt; example = Example.of(conditionUser);<br>        <span class="hljs-keyword">return</span> userRepository.findAll(example);<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> List&lt;User&gt; <span class="hljs-title function_">findPage</span><span class="hljs-params">(<span class="hljs-type">int</span> pageNo, <span class="hljs-type">int</span> pageSize)</span> &#123;<br>        <span class="hljs-type">Pageable</span> <span class="hljs-variable">pageable</span> <span class="hljs-operator">=</span> PageRequest.of(pageNo, pageSize);<br>        Page&lt;User&gt; page = userRepository.findAll(pageable);<br>        <span class="hljs-keyword">return</span> page.getContent();<br>    &#125;<br>    <br>   <br>&#125;<br></code></pre></td></tr></table></figure><p>添加测试方法，测试查询是否生效：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Autowired</span><br>   <span class="hljs-keyword">private</span> UserService userService;<br><br>   <span class="hljs-meta">@Test</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testFind</span><span class="hljs-params">()</span> &#123;<br>       <span class="hljs-comment">// 根据id查询</span><br>       <span class="hljs-type">User</span> <span class="hljs-variable">findById</span> <span class="hljs-operator">=</span> userService.findById(<span class="hljs-string">&quot;65ea7586b4c1f3160f791b06&quot;</span>);<br>       System.out.println(JSONObject.toJSONString(findById));<br><br>       <span class="hljs-comment">// 根据姓名和年龄查询</span><br>       List&lt;User&gt; zhangsan = userService.findByNameAndAge(<span class="hljs-string">&quot;张三&quot;</span>, <span class="hljs-number">10</span>);<br>       System.out.println(JSONObject.toJSONString(zhangsan));<br><br>       <span class="hljs-comment">// 分页查询</span><br>       List&lt;User&gt; page = userService.findPage(<span class="hljs-number">1</span>, <span class="hljs-number">3</span>);<br>       System.out.println(JSONObject.toJSONString(page));<br><br>       <span class="hljs-comment">// 查询全部</span><br>       List&lt;User&gt; all = userService.findAll();<br>       System.out.println(JSONObject.toJSONString(all));<br><br>   &#125;<br></code></pre></td></tr></table></figure><p>查询结果如下：</p><img src="/2024/04/03/MongoDB%E5%AD%A6%E4%B9%A02%E2%80%94SpringBoot%E9%9B%86%E6%88%90MongoDB/10.png" class="">]]></content>
    
    
    
    <tags>
      
      <tag>中间件</tag>
      
      <tag>MongoDB</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MongoDB学习1—MongoDB简介</title>
    <link href="/2024/04/03/MongoDB%E5%AD%A6%E4%B9%A01%E2%80%94MongoDB%E7%AE%80%E4%BB%8B/"/>
    <url>/2024/04/03/MongoDB%E5%AD%A6%E4%B9%A01%E2%80%94MongoDB%E7%AE%80%E4%BB%8B/</url>
    
    <content type="html"><![CDATA[<h3 id="1-MongoDB介绍"><a href="#1-MongoDB介绍" class="headerlink" title="1. MongoDB介绍"></a>1. MongoDB介绍</h3><h4 id="1-1-什么是MongoDB"><a href="#1-1-什么是MongoDB" class="headerlink" title="1.1. 什么是MongoDB"></a>1.1. 什么是MongoDB</h4><p>MongoDB是由C++语言编写的，是一个基于分布式文件存储的开源数据库系统，旨在为WEB应用提供可扩展的高性能数据存储解决方案。它将数据存储为一个文档，数据结构由键值(key&#x3D;&gt;value）对组成，MongoDB文档类似于JSON对象，字段值可以包含其他文档，数组即文档数组。</p><img src="/2024/04/03/MongoDB%E5%AD%A6%E4%B9%A01%E2%80%94MongoDB%E7%AE%80%E4%BB%8B/1.png" class=""><h4 id="1-2-特点"><a href="#1-2-特点" class="headerlink" title="1.2. 特点"></a>1.2. 特点</h4><p>MongoDB具有以下特点：</p><ol><li>文档导向： MongoDB使用文档导向的数据模型，数据以文档的形式存储，类似于JSON对象。文档是一个键值对的集合，支持嵌套结构和动态模式。</li><li>灵活的模式： MongoDB是一个无模式（Schemaless）数据库，意味着不需要预定义模式和表结构。每个文档可以具有不同的字段和结构，这使得数据模型更加灵活，适用于各种类型的数据。</li><li>分布式存储： MongoDB可以在多个服务器上进行部署，实现数据的分布式存储和横向扩展。它支持副本集（Replica Set）和分片集群（Sharded Cluster），提供高可用性和可伸缩性。</li><li>丰富的查询语言： MongoDB提供了丰富的查询功能，支持灵活的条件查询、范围查询、正则表达式、聚合管道等。它还支持地理空间查询和文本搜索等特殊类型的查询。</li><li>支持事务： MongoDB从版本4.0开始支持事务，可以在单个文档或多个文档上执行原子性的读写操作。事务能够确保数据的一致性和完整性，适用于复杂的数据操作场景。</li></ol><h4 id="1-3-MongoDB的应用"><a href="#1-3-MongoDB的应用" class="headerlink" title="1.3. MongoDB的应用"></a>1.3. MongoDB的应用</h4><p>MongoDB在许多应用场景中具有广泛的应用，以下是一些常见的MongoDB应用场景：</p><ol><li>实时分析和大数据处理： MongoDB适用于实时数据分析和大数据处理场景。它可以存储和处理大量的非结构化或半结构化数据，支持高并发读写操作和复杂的聚合查询。这使得它成为处理实时数据、日志分析和数据挖掘等任务的理想选择。</li><li>内容管理系统（CMS）： MongoDB可以用作内容管理系统的后端数据库。它的灵活的数据模型和无模式特性使得存储和管理各种类型的内容（如文章、页面、多媒体文件等）变得简单。此外，MongoDB的高性能和可扩展性能够满足CMS的需求。</li><li>物联网（IoT）应用： MongoDB适用于物联网应用，用于存储和处理大量的传感器数据和设备数据。它可以轻松地处理大规模的时间序列数据，支持地理空间查询和实时数据分析，使得物联网应用的数据管理和分析更加便捷。</li><li>实时应用和实时通信： MongoDB的低延迟和高吞吐量使其适用于实时应用和实时通信场景。它可以存储和处理实时产生的数据，如聊天消息、实时推送、实时游戏数据等。MongoDB的副本集和分片集群提供了高可用性和可伸缩性，确保实时应用的稳定性和性能。</li><li>目录和目标存储： MongoDB可以用作目录和目标存储，用于存储和管理大量的结构化和非结构化数据。它的灵活的数据模型和强大的查询功能使得存储和检索数据变得更高效和便捷。</li><li>用户数据和个性化推荐： MongoDB可以存储和管理用户数据，如用户配置、偏好设置、历史记录等。它可以用于个性化推荐系统，根据用户的行为和偏好提供个性化的推荐内容。</li></ol><h3 id="2-MongoDB安装和启动"><a href="#2-MongoDB安装和启动" class="headerlink" title="2. MongoDB安装和启动"></a>2. MongoDB安装和启动</h3><p>windows下载地址：<a href="https://www.mongodb.com/try/download/community">https://www.mongodb.com/try/download/community</a><br>下载完毕后，安装过程中，一路next就可以，如果不想放到C盘，在下面这一步选择想要存放的位置，其余的next就可以了。</p><img src="/2024/04/03/MongoDB%E5%AD%A6%E4%B9%A01%E2%80%94MongoDB%E7%AE%80%E4%BB%8B/2.png" class=""><p>安装完毕后，在MongoDB目录的bin目录下，执行mongod.exe文件，启动mongodb。<br>启动完毕后，可以访问<a href="http://localhost:27017，出现下面内容，说明启动成功">http://localhost:27017，出现下面内容，说明启动成功</a></p><img src="/2024/04/03/MongoDB%E5%AD%A6%E4%B9%A01%E2%80%94MongoDB%E7%AE%80%E4%BB%8B/3.png" class=""><h3 id="3-MongoDB概念"><a href="#3-MongoDB概念" class="headerlink" title="3. MongoDB概念"></a>3. MongoDB概念</h3><p>在MongoDB中，基本的概念是文档、集合、数据库，如下表所示：</p><table><thead><tr><th>SQL术语概念</th><th>MongoDB术语概念</th><th>解释</th></tr></thead><tbody><tr><td>database</td><td>database</td><td>数据库</td></tr><tr><td>table</td><td>collection</td><td>数据库表&#x2F;集合</td></tr><tr><td>row</td><td>document</td><td>数据库行&#x2F;文档</td></tr><tr><td>column</td><td>field</td><td>数据库字段&#x2F;域</td></tr><tr><td>index</td><td>index</td><td>索引</td></tr><tr><td>table joins</td><td></td><td>表连接,MongoDB不支持</td></tr><tr><td>primary key</td><td>primary key</td><td>主键，MongoDB自动将_id字段设置为主键</td></tr></tbody></table><h4 id="3-1-数据库"><a href="#3-1-数据库" class="headerlink" title="3.1. 数据库"></a>3.1. 数据库</h4><p>一个mongodb中可以创建多个数据库，默认数据库为”db”，数据库的命名有以下要求：<br>1）不能是空字符串(“”)<br>2）不得含有’’(空格)、.、$、&#x2F;、和\0（空字符）<br>3）应全部小写<br>4）最多64字节<br>有一些数据库名是保留的，可以直接访问这些有特殊作用的数据库：<br>1）admin：从权限的角度来看，这生”root”数据库，要是将一个用户添加到这个数据库，这个用户自动继承所有数据库的权限，一些特定的服务器端命令也智能从这个数据库运行，比如列出所有的数据库或者关闭服务器。<br>2）local：这个数据永远不会被复制，可以用来存储于本地单台服务器的任何集合<br>3）config：当Mongo用于分片设置时，config数据库在内部使用，用于保存分片的相关信息。</p><h4 id="3-2-文档（Document）"><a href="#3-2-文档（Document）" class="headerlink" title="3.2. 文档（Document）"></a>3.2. 文档（Document）</h4><p>文档是一组键值(key-value)对，但MongoDB的文档不需要设置相同的字段，并且相同字段不需要相同的数据类型，这与关系型数据库有很大区别，也是MongoDB非常突出的特点。<br>需要注意的是：</p><ol><li>文档中的键&#x2F;值对是有序的。</li><li>文档中的值不仅可以是在双引号里面的字符串，还可以是其他几种数据类型（甚至可以是整个嵌入的文档)。</li><li>MongoDB区分类型和大小写。</li><li>MongoDB的文档不能有重复的键。</li><li>文档的键是字符串。除了少数例外情况，键可以使用任意UTF-8字符。</li></ol><h4 id="3-3-集合"><a href="#3-3-集合" class="headerlink" title="3.3. 集合"></a>3.3. 集合</h4><p>集合就是MongoDB文档组，类似于RDBMS（关系数据库管理系统:Relational Database Management System)中的表格。<br>集合存在于数据库中，集合没有固定的结构，这意味着你在对集合可以插入不同格式和类型的数据，但通常情况下我们插入集合的数据库都会有一定的关联性。</p><h4 id="3-4-MongoDB数据类型："><a href="#3-4-MongoDB数据类型：" class="headerlink" title="3.4. MongoDB数据类型："></a>3.4. MongoDB数据类型：</h4><p>下表是MongoDB中常用的数据类型：</p><table><thead><tr><th>数据类型</th><th>描述</th></tr></thead><tbody><tr><td>String</td><td>字符串。 存储数据常用的数据类型。在 MongoDB 中，UTF-8 编码的字符串才是合法的。</td></tr><tr><td>Integer</td><td>整型数值。用于存储数值。根据你所采用的服务器，可分为 32 位或 64 位。</td></tr><tr><td>Boolean</td><td>布尔值。用于存储布尔值（真&#x2F;假）。</td></tr><tr><td>Double</td><td>双精度浮点值。用于存储浮点值。</td></tr><tr><td>Min&#x2F;Max keys</td><td>将一个值与 BSON（二进制的 JSON）元素的最低值和最高值相对比。 Array 用于将数组或列表或多个值存储为一个键。</td></tr><tr><td>Timestamp</td><td>时间戳。记录文档修改或添加的具体时间。</td></tr><tr><td>Object</td><td>用于内嵌文档。</td></tr><tr><td>Null</td><td>用于创建空值。</td></tr><tr><td>Symbol</td><td>符号。该数据类型基本上等同于字符串类型，但不同的是，它一般用于采用特殊符号类型的语言。</td></tr><tr><td>Date</td><td>日期时间。用 UNIX 时间格式来存储当前日期或时间。你可以指定自己的日期时间：创建 Date 对象，传入年月日信息。</td></tr><tr><td>Object ID</td><td>对象 ID。用于创建文档的 ID。</td></tr><tr><td>Binary Data</td><td>二进制数据。 用于存储二进制数据。</td></tr><tr><td>Code</td><td>代码类型。用于在文档中存储 JavaScript 代码。</td></tr><tr><td>Regular expression</td><td>正则表达式类型。用于存储正则表达式。</td></tr></tbody></table>]]></content>
    
    
    
    <tags>
      
      <tag>中间件</tag>
      
      <tag>MongoDB</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Redis学习6—Redis分布式锁</title>
    <link href="/2024/04/02/Redis%E5%AD%A6%E4%B9%A06%E2%80%94Redis%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/"/>
    <url>/2024/04/02/Redis%E5%AD%A6%E4%B9%A06%E2%80%94Redis%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/</url>
    
    <content type="html"><![CDATA[<h3 id="1-引言"><a href="#1-引言" class="headerlink" title="1. 引言"></a>1. 引言</h3><h4 id="1-1-分布式锁"><a href="#1-1-分布式锁" class="headerlink" title="1.1. 分布式锁"></a>1.1. 分布式锁</h4><p>分布式锁（Distributed Lock）是一种用于分布式系统中实现互斥访问的机制，在分布式系统中，多个节点同时访问共享资源可能导致数据不一致或竞态条件的问题，分布式锁通过协调多个节点之间的访问，确保在同一时间只有一个节点能获得对共享资源的独占访问权限，从而解决并发访问问题。</p><h4 id="1-2-分布式锁实现方式"><a href="#1-2-分布式锁实现方式" class="headerlink" title="1.2. 分布式锁实现方式"></a>1.2. 分布式锁实现方式</h4><p>常用的分布式锁实现方式有：<br>1）基于数据库的分布式锁（乐观锁)：使用数据库的事务特性和唯一约束来实现分布式锁。通过在数据库中创建一个特定的表或记录来表示锁的状态，节点可以通过获取或释放该记录来获取或释放锁。<br>2）基于缓存的分布式锁：使用分布式缓存系统（如Redis）的原子操作来实现分布式锁，节点可以通过在缓存中设置一个特定的键值对来获取锁，并利用缓存的原子性操作来保证锁的互斥性。<br>3）基于zookeeper的分布式锁：zookeeper是一个分布式协调服务，可以用于实现分布式锁，节点可以通过在zookeeper中创建一个临时有序节点来表示锁的占用状态，通过比较节点 的序号来确定锁的拥有权。</p><h3 id="2-基于数据库的分布式锁（乐观锁）"><a href="#2-基于数据库的分布式锁（乐观锁）" class="headerlink" title="2. 基于数据库的分布式锁（乐观锁）"></a>2. 基于数据库的分布式锁（乐观锁）</h3><p>基于数据库的分布式锁实现方案，一般是在表中加一个字段，用于表示版本号，当读取数据时，会读取对应的版本号，在更新数据的时候，也会相应的更新版本号（比如版本号递增），且在更新数据的时候，会判断当前版本号是否正确，以账户余额修改为例，具体流程如下：<br>1）查询账户信息（此时从数据库中查出的版本号为version1)<br>2）根据请求对账户对象进行操作<br>3）更新数据库(update t_account set 字段&#x3D;新值, version &#x3D; version + 1 where id &#x3D; #{accountId} and version &#x3D; version1的值)<br>在这个过程中，最重要的就是更新sql的语句，也就是在更新的时候，判断版本号是否被修改过，只有没有被修改过，我们才能更新成功。<br>示例如下：<br>首先，我们创建一个账户表：</p><img src="/2024/04/02/Redis%E5%AD%A6%E4%B9%A06%E2%80%94Redis%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/1.png" class=""><p>然后在账户表上插入一条数据，假设账户中有1000元</p><img src="/2024/04/02/Redis%E5%AD%A6%E4%B9%A06%E2%80%94Redis%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/2.png" class=""><p>对应的实体类和mapper：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@TableName(value = &quot;t_account&quot;)</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Account</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br>    <span class="hljs-meta">@TableId(type = IdType.AUTO)</span><br>    <span class="hljs-keyword">private</span> Integer id;<br><br>    <span class="hljs-keyword">private</span> Integer userId;<br><br>    <span class="hljs-keyword">private</span> Integer balance;<br><br>    <span class="hljs-keyword">private</span> Date createTime;<br><br>    <span class="hljs-keyword">private</span> Date updateTime;<br><br>    <span class="hljs-keyword">private</span> Integer version;<br>&#125;<br><br><br><br><span class="hljs-meta">@Mapper</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">AccountMapper</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BaseMapper</span>&lt;Account&gt; &#123;<br>&#125;<br></code></pre></td></tr></table></figure><p>然后我们创建一个AccountService，先演示没有乐观锁时，会造成的问题</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example.service;<br><br><span class="hljs-keyword">import</span> org.example.mapper.AccountMapper;<br><span class="hljs-keyword">import</span> org.example.pojo.Account;<br><span class="hljs-keyword">import</span> org.example.request.account.TakeOutMoneyRequest;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Service;<br><br><span class="hljs-keyword">import</span> java.util.Date;<br><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AccountService</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> AccountMapper accountMapper;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">takeOutMoneyWithoutOpLock</span><span class="hljs-params">(TakeOutMoneyRequest request)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">accountId</span> <span class="hljs-operator">=</span> request.getAccountId();<br>        <span class="hljs-type">Account</span> <span class="hljs-variable">account</span> <span class="hljs-operator">=</span> accountMapper.selectById(accountId);<br>        <span class="hljs-keyword">if</span> (account.getBalance() - request.getMoney() &lt; <span class="hljs-number">0</span>) &#123;<br>            System.out.println(<span class="hljs-string">&quot;余额不足==============&quot;</span>);<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>        Thread.sleep(<span class="hljs-number">1000</span>);<br><br>        account.setBalance(account.getBalance() - request.getMoney());<br>        account.setUpdateTime(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());<br>        <span class="hljs-keyword">return</span> accountMapper.updateById(account) &gt; <span class="hljs-number">0</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>添加一个测试类，用于演示并发情况下，账户余额的减少</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example.service;<br><br><span class="hljs-keyword">import</span> org.example.mapper.AccountMapper;<br><span class="hljs-keyword">import</span> org.example.pojo.Account;<br><span class="hljs-keyword">import</span> org.example.request.account.TakeOutMoneyRequest;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Service;<br><br><span class="hljs-keyword">import</span> java.util.Date;<br><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AccountService</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> AccountMapper accountMapper;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">takeOutMoneyWithoutOpLock</span><span class="hljs-params">(TakeOutMoneyRequest request)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">accountId</span> <span class="hljs-operator">=</span> request.getAccountId();<br>        <span class="hljs-type">Account</span> <span class="hljs-variable">account</span> <span class="hljs-operator">=</span> accountMapper.selectById(accountId);<br>        <span class="hljs-keyword">if</span> (account.getBalance() - request.getMoney() &lt; <span class="hljs-number">0</span>) &#123;<br>            System.out.println(<span class="hljs-string">&quot;余额不足==============&quot;</span>);<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>        Thread.sleep(<span class="hljs-number">1000</span>);<br><br>        account.setBalance(account.getBalance() - request.getMoney());<br>        account.setUpdateTime(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());<br>        <span class="hljs-keyword">return</span> accountMapper.updateById(account) &gt; <span class="hljs-number">0</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行测试方法，结果如下图所示，说明都更新成功了</p><img src="/2024/04/02/Redis%E5%AD%A6%E4%B9%A06%E2%80%94Redis%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/3.png" class=""><p>然后查看数据库：</p><img src="/2024/04/02/Redis%E5%AD%A6%E4%B9%A06%E2%80%94Redis%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/4.png" class=""><p>如上图所示，原先我们的账户余额是1000元，每次扣除100元，经过10次扣减后，账户余额应该为0，但是因为并发问题，导致查询的时候，有多个请求查询到同一个值，最后导致数据不一致。<br>我们修改Account，添加使用乐观锁进行扣减余额的方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">takeOutMoneyWithOpLock</span><span class="hljs-params">(TakeOutMoneyRequest request)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>     <span class="hljs-type">Integer</span> <span class="hljs-variable">accountId</span> <span class="hljs-operator">=</span> request.getAccountId();<br>     <span class="hljs-type">Account</span> <span class="hljs-variable">account</span> <span class="hljs-operator">=</span> accountMapper.selectById(accountId);<br>     <span class="hljs-keyword">if</span> (account.getBalance() - request.getMoney() &lt; <span class="hljs-number">0</span>) &#123;<br>         System.out.println(<span class="hljs-string">&quot;余额不足==============&quot;</span>);<br>         <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>     &#125;<br>     Thread.sleep(<span class="hljs-number">1000</span>);<br><br>     LambdaUpdateWrapper&lt;Account&gt; lambdaUpdateWrapper = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LambdaUpdateWrapper</span>&lt;&gt;();<br>     lambdaUpdateWrapper.set(Account::getVersion, account.getVersion() + <span class="hljs-number">1</span>)<br>             .set(Account::getUpdateTime, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>())<br>                     .set(Account::getBalance, account.getBalance() - request.getMoney())<br>                             .eq(Account::getVersion, account.getVersion())<br>                                     .eq(Account::getId, request.getAccountId());<br>     <span class="hljs-keyword">return</span> accountMapper.update(account, lambdaUpdateWrapper) &gt; <span class="hljs-number">0</span>;<br> &#125;<br></code></pre></td></tr></table></figure><p>我们把金额修改回1000，然后添加测试方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testTakeoutMoneyWithOpLock</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> ExecutionException, InterruptedException &#123;<br>       <span class="hljs-type">ExecutorService</span> <span class="hljs-variable">executorService</span> <span class="hljs-operator">=</span> Executors.newFixedThreadPool(<span class="hljs-number">5</span>);<br>       Callable&lt;Boolean&gt; takeoutTask = () -&gt; &#123;<br>           <span class="hljs-type">TakeOutMoneyRequest</span> <span class="hljs-variable">request</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TakeOutMoneyRequest</span>();<br>           request.setAccountId(<span class="hljs-number">1</span>);<br>           request.setMoney(<span class="hljs-number">100</span>);<br>           <span class="hljs-keyword">try</span> &#123;<br>               <span class="hljs-keyword">return</span> accountService.takeOutMoneyWithOpLock(request);<br>           &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>               <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>           &#125;<br>       &#125;;<br>       List&lt;Future&lt;Boolean&gt;&gt; futureList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>       <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>           Future&lt;Boolean&gt; future = executorService.submit(takeoutTask);<br>           futureList.add(future);<br>       &#125;<br><br>       <span class="hljs-keyword">for</span> (Future&lt;Boolean&gt; future : futureList) &#123;<br>           System.out.println(future.get());<br>       &#125;<br>   &#125;<br></code></pre></td></tr></table></figure><p>运行测试方法，结果如下，说明只有两次更新成功了，其余的更新，都以为乐观锁被修改了，导致更新失败</p><img src="/2024/04/02/Redis%E5%AD%A6%E4%B9%A06%E2%80%94Redis%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/5.png" class=""><p>然后我们查看数据库，结果如下，因为扣减了两次，所有余额为800，这个数据对的上。</p><img src="/2024/04/02/Redis%E5%AD%A6%E4%B9%A06%E2%80%94Redis%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/6.png" class=""><p>乐观锁的实现思路，是基于对并发更新的乐观假设，也就是认为冲突的概率较低，因此在读取和提交数据时进行版本号或时间戳的比较，而不是在数据访问阶段进行加锁操作，避免了显示的锁竞争，提高了并发性能。但乐观锁并不能完全消除并发冲突，只是在提交数据时进行冲突检测和处理，如果系统中的并发冲突非常频繁，乐观锁的效率可能会下降。</p><h3 id="3-基于Redis的分布式锁"><a href="#3-基于Redis的分布式锁" class="headerlink" title="3. 基于Redis的分布式锁"></a>3. 基于Redis的分布式锁</h3><h4 id="3-1-基于Redis的SETNX实现分布式锁"><a href="#3-1-基于Redis的SETNX实现分布式锁" class="headerlink" title="3.1. 基于Redis的SETNX实现分布式锁"></a>3.1. 基于Redis的SETNX实现分布式锁</h4><p>SETNX指的是set if not exist，也就是当key不存在的时候，设置key的值，存在的话，什么都不做, 其语法为:</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gams"><span class="hljs-keyword">set</span> key <span class="hljs-comment">value nx</span><br></code></pre></td></tr></table></figure><p>如果我们要设置过期时间的话，可以使用</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gams"><span class="hljs-keyword">set</span> key <span class="hljs-comment">value ex</span> 时间 <span class="hljs-comment">nx</span><br></code></pre></td></tr></table></figure><p>如下图所示，在使用nx指令的时候，只有在该key不存在的时候，才能设置成功</p><img src="/2024/04/02/Redis%E5%AD%A6%E4%B9%A06%E2%80%94Redis%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/7.png" class=""><p>我们修改之前的RedisUtils工具类，添加上和这两条指令相关的方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">setIfAbsent</span><span class="hljs-params">(String key, Object value)</span> &#123;<br>       <span class="hljs-keyword">return</span> redisTemplate.opsForValue().setIfAbsent(key, value);<br>   &#125;<br><br>   <span class="hljs-comment">/**</span><br><span class="hljs-comment">    * 不存在时设置值，适用与分布式锁的场景</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@param</span> key</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@param</span> value</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@param</span> time</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">    */</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">setIfAbsent</span><span class="hljs-params">(String key, Object value, <span class="hljs-type">long</span> time)</span> &#123;<br>       <span class="hljs-keyword">return</span> setIfAbsent(key, value, time, TimeUnit.SECONDS);<br>   &#125;<br><br>   <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">setIfAbsent</span><span class="hljs-params">(String key, Object value, <span class="hljs-type">long</span> time, TimeUnit timeUnit)</span> &#123;<br>       <span class="hljs-keyword">return</span> redisTemplate.opsForValue().setIfAbsent(key, value, time, timeUnit);<br>   &#125;<br></code></pre></td></tr></table></figure><h5 id="3-1-1-通过setnx实现分布式锁"><a href="#3-1-1-通过setnx实现分布式锁" class="headerlink" title="3.1.1. 通过setnx实现分布式锁"></a>3.1.1. 通过setnx实现分布式锁</h5><p>具体流程如下：</p><img src="/2024/04/02/Redis%E5%AD%A6%E4%B9%A06%E2%80%94Redis%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/24.png" class=""><p>我们修改AccountService，添加和该指令相关的方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Autowired</span><br>  <span class="hljs-keyword">private</span> RedisUtils redisUtils;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">takeOutMoneyWithSetnx</span><span class="hljs-params">(TakeOutMoneyRequest request)</span> &#123;<br>      <span class="hljs-type">Integer</span> <span class="hljs-variable">accountId</span> <span class="hljs-operator">=</span> request.getAccountId();<br>      <span class="hljs-type">String</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;lock::&quot;</span> + accountId;<br><br>      <span class="hljs-type">boolean</span> <span class="hljs-variable">lock</span> <span class="hljs-operator">=</span> redisUtils.setIfAbsent(key, request.getAccountId());<br>      <span class="hljs-keyword">if</span> (!lock) &#123;<br>          <span class="hljs-comment">// 加锁失败，返回</span><br>          <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>      &#125;<br>      <span class="hljs-comment">// 加锁成功</span><br>      <span class="hljs-keyword">try</span> &#123;<br>          <span class="hljs-type">Account</span> <span class="hljs-variable">account</span> <span class="hljs-operator">=</span> accountMapper.selectById(accountId);<br>          account.setBalance(account.getBalance() - request.getMoney());<br>          account.setUpdateTime(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());<br>          <span class="hljs-keyword">return</span> accountMapper.updateById(account) &gt; <span class="hljs-number">0</span>;<br>      &#125; <span class="hljs-keyword">finally</span> &#123;<br>          <span class="hljs-comment">// 释放锁</span><br>          redisUtils.removeKey(key);<br>      &#125;<br>  &#125;<br></code></pre></td></tr></table></figure><p>添加测试方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testTakeoutMoneyWithSetnx</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> ExecutionException, InterruptedException &#123;<br>        <span class="hljs-type">ExecutorService</span> <span class="hljs-variable">executorService</span> <span class="hljs-operator">=</span> Executors.newFixedThreadPool(<span class="hljs-number">5</span>);<br>        Callable&lt;Boolean&gt; takeoutTask = () -&gt; &#123;<br>            <span class="hljs-type">TakeOutMoneyRequest</span> <span class="hljs-variable">request</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TakeOutMoneyRequest</span>();<br>            request.setAccountId(<span class="hljs-number">1</span>);<br>            request.setMoney(<span class="hljs-number">100</span>);<br>            <span class="hljs-keyword">return</span> accountService.takeOutMoneyWithSetnx(request);<br>        &#125;;<br>        List&lt;Future&lt;Boolean&gt;&gt; futureList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>            Future&lt;Boolean&gt; future = executorService.submit(takeoutTask);<br>            futureList.add(future);<br>        &#125;<br><br>        <span class="hljs-keyword">for</span> (Future&lt;Boolean&gt; future : futureList) &#123;<br>            System.out.println(future.get());<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><p>测试结果如下：</p><img src="/2024/04/02/Redis%E5%AD%A6%E4%B9%A06%E2%80%94Redis%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/8.png" class=""><p>我们查看数据库，确实只扣减了100</p><img src="/2024/04/02/Redis%E5%AD%A6%E4%B9%A06%E2%80%94Redis%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/9.png" class=""><p>这里冲突次数比较多，因此更新的效率有点低，我们可以将对应的方法修改一下，加上重试，修改代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Autowired</span><br>  <span class="hljs-keyword">private</span> RedisUtils redisUtils;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">takeOutMoneyWithSetnx</span><span class="hljs-params">(TakeOutMoneyRequest request)</span> &#123;<br>      <span class="hljs-type">Integer</span> <span class="hljs-variable">accountId</span> <span class="hljs-operator">=</span> request.getAccountId();<br>      <span class="hljs-type">String</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;lock::&quot;</span> + accountId;<br><br>      <span class="hljs-type">boolean</span> <span class="hljs-variable">lock</span> <span class="hljs-operator">=</span> redisUtils.setIfAbsent(key, request.getAccountId());<br>      <span class="hljs-keyword">if</span> (lock) &#123;<br>          <span class="hljs-comment">// 加锁成功</span><br>          <span class="hljs-keyword">try</span> &#123;<br>              <span class="hljs-type">Account</span> <span class="hljs-variable">account</span> <span class="hljs-operator">=</span> accountMapper.selectById(accountId);<br>              account.setBalance(account.getBalance() - request.getMoney());<br>              account.setUpdateTime(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());<br>              <span class="hljs-keyword">return</span> accountMapper.updateById(account) &gt; <span class="hljs-number">0</span>;<br>          &#125; <span class="hljs-keyword">finally</span> &#123;<br>              <span class="hljs-comment">// 释放锁</span><br>              redisUtils.removeKey(key);<br>          &#125;<br>      &#125;<br>      <span class="hljs-comment">// 加锁失败，进行重试</span><br>      <span class="hljs-keyword">try</span> &#123;<br>          Thread.sleep(<span class="hljs-number">100</span>);<br>      &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>          e.printStackTrace();<br>      &#125;<br>      <span class="hljs-keyword">return</span> takeOutMoneyWithSetnx(request);<br>  &#125;<br></code></pre></td></tr></table></figure><p>这里休眠了一段时间，是因为要涉及到递归调用，可能会导致栈空间溢出，我们再次执行测试代码，结果如下，经过重试后，执行成功率变高。</p><img src="/2024/04/02/Redis%E5%AD%A6%E4%B9%A06%E2%80%94Redis%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/10.png" class=""><p>查看数据库，确实扣减了10次。</p><img src="/2024/04/02/Redis%E5%AD%A6%E4%B9%A06%E2%80%94Redis%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/11.png" class=""><p>但是，使用set key value nx存在一个问题，如果setnx占锁成功，但是服务器宕机了，没有执行删除锁的逻辑，那么就会造成这个锁一直没有被释放，最终导致死锁。</p><h5 id="3-1-2-setnx-with-expire"><a href="#3-1-2-setnx-with-expire" class="headerlink" title="3.1.2. setnx with expire"></a>3.1.2. setnx with expire</h5><p>为解决setnx造成的死锁问题，我们在setnx的基础上，加上过期时间，来解决上述问题。我们给AccountService添加上对应的方法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">takeOutMoneyWithSetnxExpire</span><span class="hljs-params">(TakeOutMoneyRequest request)</span> &#123;<br>       <span class="hljs-type">Integer</span> <span class="hljs-variable">accountId</span> <span class="hljs-operator">=</span> request.getAccountId();<br>       <span class="hljs-type">String</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;lock::&quot;</span> + accountId;<br>       <br>       <span class="hljs-comment">// 占有锁并设置过期时间</span><br>       <span class="hljs-type">boolean</span> <span class="hljs-variable">lock</span> <span class="hljs-operator">=</span> redisUtils.setIfAbsent(key, request.getAccountId(), TTL);<br>       <span class="hljs-keyword">if</span> (lock) &#123;<br>           <span class="hljs-comment">// 加锁成功</span><br>           <span class="hljs-keyword">try</span> &#123;<br>               <span class="hljs-type">Account</span> <span class="hljs-variable">account</span> <span class="hljs-operator">=</span> accountMapper.selectById(accountId);<br>               account.setBalance(account.getBalance() - request.getMoney());<br>               account.setUpdateTime(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());<br>               <span class="hljs-keyword">return</span> accountMapper.updateById(account) &gt; <span class="hljs-number">0</span>;<br>           &#125; <span class="hljs-keyword">finally</span> &#123;<br>               <span class="hljs-comment">// 释放锁</span><br>               redisUtils.removeKey(key);<br>           &#125;<br>       &#125;<br>       <span class="hljs-comment">// 加锁失败，进行重试</span><br>       <span class="hljs-keyword">try</span> &#123;<br>           Thread.sleep(<span class="hljs-number">100</span>);<br>       &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>           e.printStackTrace();<br>       &#125;<br>       <span class="hljs-keyword">return</span> takeOutMoneyWithSetnx(request);<br>   &#125;<br></code></pre></td></tr></table></figure><p>添加上对应的测试方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testTakeoutMoneyWithSetnxExpire</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> ExecutionException, InterruptedException &#123;<br>        <span class="hljs-type">ExecutorService</span> <span class="hljs-variable">executorService</span> <span class="hljs-operator">=</span> Executors.newFixedThreadPool(<span class="hljs-number">5</span>);<br>        Callable&lt;Boolean&gt; takeoutTask = () -&gt; &#123;<br>            <span class="hljs-type">TakeOutMoneyRequest</span> <span class="hljs-variable">request</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TakeOutMoneyRequest</span>();<br>            request.setAccountId(<span class="hljs-number">1</span>);<br>            request.setMoney(<span class="hljs-number">100</span>);<br>            <span class="hljs-keyword">return</span> accountService.takeOutMoneyWithSetnxExpire(request);<br>        &#125;;<br>        List&lt;Future&lt;Boolean&gt;&gt; futureList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>            Future&lt;Boolean&gt; future = executorService.submit(takeoutTask);<br>            futureList.add(future);<br>        &#125;<br><br>        <span class="hljs-keyword">for</span> (Future&lt;Boolean&gt; future : futureList) &#123;<br>            System.out.println(future.get());<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><p>测试结果如下：</p><img src="/2024/04/02/Redis%E5%AD%A6%E4%B9%A06%E2%80%94Redis%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/12.png" class=""><p>我们 查看数据库，数据库也确实扣减了10次</p><img src="/2024/04/02/Redis%E5%AD%A6%E4%B9%A06%E2%80%94Redis%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/13.png" class=""><p>但是，这个方案还是有一定缺陷，因为我们设置的这个过期时间，是根据我们的经验设置的，而业务代码的执行时长，是不确定的，那么可能存在这种情况，假设我们现在有三个请求过来，我们设置的过期时间是100ms<br>1）请求A占锁成功，执行业务代码<br>2）请求A执行100ms后，锁过期，但此时请求A的业务代码还未执行完毕<br>3）请求B占锁成功，执行业务代码<br>4）请求A执行完毕，执行释放锁的逻辑，导致把B占有的锁打开了<br>5）请求C占锁成功，执行业务代码<br>6）请求B执行完毕，执行释放锁的逻辑，导致把C占有的锁打开了<br>这里是因为，这三个请求占有的锁的key都是相同的，而我们在释放锁的时候，只是执行删除key的命令，并不在意这个锁是谁占有的。<br>这种情况，我们可以通过lua脚本来解决，思路如下：<br>1）占锁的时候，设置value值为用户标识<br>2）释放锁的时候，通过lua脚本，判断此时key对应的value值，与传入值是否相同，只有相同的时候，我们才执行删除key的逻辑。<br>我们修改刚才的方法，如下，在占锁的时候，我们设置value值为当前的线程id（这里是为了演示，实际业务场景中，应该是多个用户抢占同一个资源，因此可以将vlaue值设置为用户的标识，比如用户id），然后在释放资源的时候，执行lua脚本，判断value值是否相同，相同则执行删除操作。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Autowired</span><br>  <span class="hljs-keyword">private</span> RedisTemplate&lt;String, Object&gt; redisTemplate;<br>  <br> <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">takeOutMoneyWithSetnxExpire</span><span class="hljs-params">(TakeOutMoneyRequest request)</span> &#123;<br>      <span class="hljs-type">Integer</span> <span class="hljs-variable">accountId</span> <span class="hljs-operator">=</span> request.getAccountId();<br>      <span class="hljs-type">String</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;lock::&quot;</span> + accountId;<br><br>      <span class="hljs-type">long</span> <span class="hljs-variable">threadId</span> <span class="hljs-operator">=</span> Thread.currentThread().getId();<br>      <span class="hljs-comment">// 占有锁并设置过期时间</span><br>      <span class="hljs-type">boolean</span> <span class="hljs-variable">lock</span> <span class="hljs-operator">=</span> redisUtils.setIfAbsent(key, threadId, TTL);<br>      <span class="hljs-keyword">if</span> (lock) &#123;<br>          <span class="hljs-comment">// 加锁成功</span><br>          <span class="hljs-keyword">try</span> &#123;<br>              <span class="hljs-type">Account</span> <span class="hljs-variable">account</span> <span class="hljs-operator">=</span> accountMapper.selectById(accountId);<br>              account.setBalance(account.getBalance() - request.getMoney());<br>              account.setUpdateTime(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());<br>              <span class="hljs-keyword">return</span> accountMapper.updateById(account) &gt; <span class="hljs-number">0</span>;<br>          &#125; <span class="hljs-keyword">finally</span> &#123;<br>              <span class="hljs-comment">// 释放锁</span><br>              <span class="hljs-comment">// lua脚本</span><br>              <span class="hljs-type">String</span> <span class="hljs-variable">script</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;if redis.call(&#x27;get&#x27;, KEYS[1]) == ARGV[1] then return redis.call(&#x27;del&#x27;, KEYS[1]) else return 0 end&quot;</span>;<br>              redisTemplate.execute(<span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultRedisScript</span>&lt;Long&gt;(script, Long.class), Arrays.asList(key), threadId);<br>          &#125;<br>      &#125;<br>      <span class="hljs-comment">// 加锁失败，进行重试</span><br>      <span class="hljs-keyword">try</span> &#123;<br>          Thread.sleep(<span class="hljs-number">100</span>);<br>      &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>          e.printStackTrace();<br>      &#125;<br>      <span class="hljs-keyword">return</span> takeOutMoneyWithSetnx(request);<br>  &#125;<br></code></pre></td></tr></table></figure><p>再次执行测试代码：</p><img src="/2024/04/02/Redis%E5%AD%A6%E4%B9%A06%E2%80%94Redis%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/14.png" class=""><p>查看数据库，确实减少10次</p><img src="/2024/04/02/Redis%E5%AD%A6%E4%B9%A06%E2%80%94Redis%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/15.png" class=""><p>但这里还有一个问题没有解决，因为我们设置的TTL，是我们的经验值，不准确，所以还是会存在，某个请求占有锁后，还没执行完毕，锁过期了，被另外一个请求占有，此时会出现两个请求都认为自己占有锁的情况。</p><h4 id="3-2-Redisson"><a href="#3-2-Redisson" class="headerlink" title="3.2. Redisson"></a>3.2. Redisson</h4><h5 id="3-2-1-简介"><a href="#3-2-1-简介" class="headerlink" title="3.2.1. 简介"></a>3.2.1. 简介</h5><p>Redisson是一个在Redis基础上实现的Java驻内存数据网络，它不仅提供一系列的分布式java常用对象，还提供许多分布式服务，其宗旨是促进使用者对Redis的关注分离（Separation of Concern），从而让使用者能将精力更多集中在处理业务逻辑上。</p><img src="/2024/04/02/Redis%E5%AD%A6%E4%B9%A06%E2%80%94Redis%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/16.png" class=""><h5 id="3-2-2-SpringBoot-整合Redisson"><a href="#3-2-2-SpringBoot-整合Redisson" class="headerlink" title="3.2.2. SpringBoot 整合Redisson"></a>3.2.2. SpringBoot 整合Redisson</h5><p>引入redisson的maven依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.redisson<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>redisson<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.15.5<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>然后自定义配置类（这里使用的是单节点Redis配置）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example.config;<br><br><span class="hljs-keyword">import</span> org.redisson.Redisson;<br><span class="hljs-keyword">import</span> org.redisson.api.RedissonClient;<br><span class="hljs-keyword">import</span> org.redisson.config.Config;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RedissonConfiguration</span> &#123;<br>    <br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> RedissonClient <span class="hljs-title function_">redisson</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 1. 创建配置</span><br>        <span class="hljs-type">Config</span> <span class="hljs-variable">config</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Config</span>();<br>        <span class="hljs-comment">// 集群模式</span><br><span class="hljs-comment">//        config.useClusterServers().addNodeAddress(&quot;集群ip1&quot;, &quot;集群id2&quot;);</span><br>        <span class="hljs-comment">// 2. 根据Config创建出RedissonClient示例</span><br>        config.useSingleServer().setAddress(<span class="hljs-string">&quot;redis://127.0.0.1:6379&quot;</span>);<br>        <span class="hljs-keyword">return</span> Redisson.create(config);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>我们添加测试方法，来测试redisson的一些基本操作：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example;<br><br><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSONObject;<br><span class="hljs-keyword">import</span> org.junit.jupiter.api.Test;<br><span class="hljs-keyword">import</span> org.redisson.api.*;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.boot.test.context.SpringBootTest;<br><br><span class="hljs-keyword">import</span> java.util.concurrent.TimeUnit;<br><br><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RedissonTest</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> RedissonClient redissonClient;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testRedisson</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 字符串操作</span><br>        RBucket&lt;Object&gt; rBuck = redissonClient.getBucket(<span class="hljs-string">&quot;name&quot;</span>);<br>        rBuck.set(<span class="hljs-string">&quot;cxy&quot;</span>, <span class="hljs-number">30</span>, TimeUnit.SECONDS);<br>        System.out.println(redissonClient.getBucket(<span class="hljs-string">&quot;name&quot;</span>).get());<br><br>        <span class="hljs-comment">// 哈希操作</span><br>        RMap&lt;Object, Object&gt; student = redissonClient.getMap(<span class="hljs-string">&quot;student&quot;</span>);<br>        student.put(<span class="hljs-string">&quot;id&quot;</span>, <span class="hljs-number">1</span>);<br>        student.put(<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;cxy&quot;</span>);<br>        student.put(<span class="hljs-string">&quot;age&quot;</span>, <span class="hljs-number">20</span>);<br>        student.expire(<span class="hljs-number">30</span>, TimeUnit.SECONDS);<br><br>        System.out.println(redissonClient.getMap(<span class="hljs-string">&quot;student&quot;</span>).get(<span class="hljs-string">&quot;name&quot;</span>));<br><br>        <span class="hljs-comment">// 列表操作</span><br>        RList&lt;Object&gt; schools = redissonClient.getList(<span class="hljs-string">&quot;schools&quot;</span>);<br>        schools.add(<span class="hljs-string">&quot;华南理工大学&quot;</span>);<br>        schools.add(<span class="hljs-string">&quot;中山大学&quot;</span>);<br>        schools.add(<span class="hljs-string">&quot;暨南大学&quot;</span>);<br>        System.out.println(JSONObject.toJSONString(redissonClient.getList(<span class="hljs-string">&quot;schools&quot;</span>)));<br><br>        <span class="hljs-comment">// 集合操作</span><br>        RSet&lt;Object&gt; schoolSet = redissonClient.getSet(<span class="hljs-string">&quot;schoolSet&quot;</span>);<br>        schoolSet.add(<span class="hljs-string">&quot;华南理工大学&quot;</span>);<br>        schoolSet.add(<span class="hljs-string">&quot;中山大学&quot;</span>);<br>        schoolSet.add(<span class="hljs-string">&quot;暨南大学&quot;</span>);<br>        System.out.println(JSONObject.toJSONString(redissonClient.getSet(<span class="hljs-string">&quot;schoolSet&quot;</span>)));<br><br>        <span class="hljs-comment">// ZSet操作</span><br>        RScoredSortedSet&lt;Object&gt; schoolScoreSet = redissonClient.getScoredSortedSet(<span class="hljs-string">&quot;schoolScoreSet&quot;</span>);<br>        schoolScoreSet.add(<span class="hljs-number">100d</span>, <span class="hljs-string">&quot;华南理工大学&quot;</span>);<br>        schoolScoreSet.add(<span class="hljs-number">90d</span>, <span class="hljs-string">&quot;中山大学&quot;</span>);<br>        schoolScoreSet.add(<span class="hljs-number">80d</span>, <span class="hljs-string">&quot;暨南大学&quot;</span>);<br>        System.out.println(JSONObject.toJSONString(redissonClient.getScoredSortedSet(<span class="hljs-string">&quot;schoolScoreSet&quot;</span>)));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>结果如下：</p><img src="/2024/04/02/Redis%E5%AD%A6%E4%B9%A06%E2%80%94Redis%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/17.png" class=""><h5 id="3-2-3-Redisson分布式锁"><a href="#3-2-3-Redisson分布式锁" class="headerlink" title="3.2.3. Redisson分布式锁"></a>3.2.3. Redisson分布式锁</h5><p>redisson加锁，可以使用lock方法，注意，在加锁的时候，处理完业务逻辑后要记得释放锁，测试代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testLock</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> ExecutionException, InterruptedException &#123;<br>      <span class="hljs-type">ExecutorService</span> <span class="hljs-variable">executorService</span> <span class="hljs-operator">=</span> Executors.newFixedThreadPool(<span class="hljs-number">2</span>);<br>      <span class="hljs-type">Runnable</span> <span class="hljs-variable">lockTask</span> <span class="hljs-operator">=</span> () -&gt; &#123;<br>          <span class="hljs-keyword">try</span> &#123;<br>              lock();<br>          &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>              e.printStackTrace();<br>          &#125;<br>      &#125;;<br>      List&lt; Future&gt; futureList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>      <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">2</span>; i++) &#123;<br>          futureList.add(executorService.submit(lockTask));<br>      &#125;<br>      <span class="hljs-keyword">for</span> (Future future : futureList) &#123;<br>          future.get();<br>      &#125;<br>  &#125;<br><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">lock</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>      <span class="hljs-type">RLock</span> <span class="hljs-variable">myLock</span> <span class="hljs-operator">=</span> redissonClient.getLock(<span class="hljs-string">&quot;myLock&quot;</span>);<br>      myLock.lock();<br>      <span class="hljs-keyword">try</span> &#123;<br>          System.out.println(<span class="hljs-string">&quot;currentTime:&quot;</span> + System.currentTimeMillis());<br>          Thread.sleep(<span class="hljs-number">2000</span>);<br>          System.out.println(<span class="hljs-string">&quot;执行业务代码&quot;</span>);<br>      &#125; <span class="hljs-keyword">finally</span> &#123;<br>          myLock.unlock();<br>      &#125;<br>  &#125;<br></code></pre></td></tr></table></figure><p>测试结果如下，从执行结果可以看出，当多个线程抢占锁时，后面的锁，需要等待，即这个锁是阻塞的。</p><img src="/2024/04/02/Redis%E5%AD%A6%E4%B9%A06%E2%80%94Redis%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/18.png" class=""><p>如果不想阻塞的话，我们可以使用tryLock来上锁，结合刚才的accountService，我们先修改accountService，加上对应的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Autowired</span><br>   <span class="hljs-keyword">private</span> RedissonClient redissonClient;<br><br>   <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">takeoutMoneyWithRedissonTryLock</span><span class="hljs-params">(TakeOutMoneyRequest request)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>       <span class="hljs-type">Integer</span> <span class="hljs-variable">accountId</span> <span class="hljs-operator">=</span> request.getAccountId();<br>       <span class="hljs-type">String</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;lock::&quot;</span> + accountId;<br><br>       <span class="hljs-type">RLock</span> <span class="hljs-variable">lock</span> <span class="hljs-operator">=</span> redissonClient.getLock(key);<br>       <span class="hljs-keyword">if</span> (lock.tryLock(<span class="hljs-number">2</span>, <span class="hljs-number">4</span>, TimeUnit.SECONDS)) &#123; <span class="hljs-comment">// 过期时间为2秒，最长存活时间为4秒</span><br>           <span class="hljs-comment">// 上锁成功</span><br>           <span class="hljs-keyword">try</span> &#123;<br>               Thread.sleep(<span class="hljs-number">1000</span>);<br>               <span class="hljs-type">Account</span> <span class="hljs-variable">account</span> <span class="hljs-operator">=</span> accountMapper.selectById(accountId);<br>               account.setBalance(account.getBalance() - request.getMoney());<br>               account.setUpdateTime(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());<br>               <span class="hljs-keyword">return</span> accountMapper.updateById(account) &gt; <span class="hljs-number">0</span>;<br>           &#125; <span class="hljs-keyword">finally</span> &#123;<br>               <span class="hljs-comment">// 释放锁</span><br>               lock.unlock();<br>           &#125;<br>       &#125;<br>       <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>   &#125;<br></code></pre></td></tr></table></figure><p>添加测试方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br> <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testTakeoutMoneyWithRedissonTryLock</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> ExecutionException, InterruptedException &#123;<br>     <span class="hljs-type">ExecutorService</span> <span class="hljs-variable">executorService</span> <span class="hljs-operator">=</span> Executors.newFixedThreadPool(<span class="hljs-number">5</span>);<br>     Callable&lt;Boolean&gt; takeoutTask = () -&gt; &#123;<br>         <span class="hljs-type">TakeOutMoneyRequest</span> <span class="hljs-variable">request</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TakeOutMoneyRequest</span>();<br>         request.setAccountId(<span class="hljs-number">1</span>);<br>         request.setMoney(<span class="hljs-number">100</span>);<br>         <span class="hljs-keyword">return</span> accountService.takeoutMoneyWithRedissonTryLock(request);<br>     &#125;;<br>     List&lt;Future&lt;Boolean&gt;&gt; futureList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>     <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>         Future&lt;Boolean&gt; future = executorService.submit(takeoutTask);<br>         futureList.add(future);<br>     &#125;<br><br>     <span class="hljs-keyword">for</span> (Future&lt;Boolean&gt; future : futureList) &#123;<br>         System.out.println(future.get());<br>     &#125;<br> &#125;<br></code></pre></td></tr></table></figure><p>测试结果如下:</p><img src="/2024/04/02/Redis%E5%AD%A6%E4%B9%A06%E2%80%94Redis%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/19.png" class=""><p>查看数据库，减少的次数与上面的次数一致</p><img src="/2024/04/02/Redis%E5%AD%A6%E4%B9%A06%E2%80%94Redis%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/20.png" class=""><p>不过上面这种，成功率比较低，因此我们可以将tryLock改为lock方法，来上锁，我们修改accountService，添加相关方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">takeoutMoneyWithRedissonLock</span><span class="hljs-params">(TakeOutMoneyRequest request)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>      <span class="hljs-type">Integer</span> <span class="hljs-variable">accountId</span> <span class="hljs-operator">=</span> request.getAccountId();<br>      <span class="hljs-type">String</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;lock::&quot;</span> + accountId;<br><br>      <span class="hljs-type">RLock</span> <span class="hljs-variable">lock</span> <span class="hljs-operator">=</span> redissonClient.getLock(key);<br>      lock.lock(<span class="hljs-number">2</span>, TimeUnit.SECONDS);<br>      <span class="hljs-comment">// 上锁成功</span><br>      <span class="hljs-keyword">try</span> &#123;<br>          Thread.sleep(<span class="hljs-number">1000</span>);<br>          <span class="hljs-type">Account</span> <span class="hljs-variable">account</span> <span class="hljs-operator">=</span> accountMapper.selectById(accountId);<br>          account.setBalance(account.getBalance() - request.getMoney());<br>          account.setUpdateTime(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());<br>          <span class="hljs-keyword">return</span> accountMapper.updateById(account) &gt; <span class="hljs-number">0</span>;<br>      &#125; <span class="hljs-keyword">finally</span> &#123;<br>          <span class="hljs-comment">// 释放锁</span><br>          lock.unlock();<br>      &#125;<br>  &#125;<br></code></pre></td></tr></table></figure><p>添加测试方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testTakeoutMoneyWithRedissonLock</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> ExecutionException, InterruptedException &#123;<br>       <span class="hljs-type">ExecutorService</span> <span class="hljs-variable">executorService</span> <span class="hljs-operator">=</span> Executors.newFixedThreadPool(<span class="hljs-number">5</span>);<br>       Callable&lt;Boolean&gt; takeoutTask = () -&gt; &#123;<br>           <span class="hljs-type">TakeOutMoneyRequest</span> <span class="hljs-variable">request</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TakeOutMoneyRequest</span>();<br>           request.setAccountId(<span class="hljs-number">1</span>);<br>           request.setMoney(<span class="hljs-number">100</span>);<br>           <span class="hljs-keyword">return</span> accountService.takeoutMoneyWithRedissonLock(request);<br>       &#125;;<br>       List&lt;Future&lt;Boolean&gt;&gt; futureList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>       <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>           Future&lt;Boolean&gt; future = executorService.submit(takeoutTask);<br>           futureList.add(future);<br>       &#125;<br><br>       <span class="hljs-keyword">for</span> (Future&lt;Boolean&gt; future : futureList) &#123;<br>           System.out.println(future.get());<br>       &#125;<br>   &#125;<br></code></pre></td></tr></table></figure><p>测试结果如下：</p><img src="/2024/04/02/Redis%E5%AD%A6%E4%B9%A06%E2%80%94Redis%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/21.png" class=""><p>查看数据库，扣减次数确实为10次。</p><img src="/2024/04/02/Redis%E5%AD%A6%E4%B9%A06%E2%80%94Redis%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/22.png" class=""><h5 id="3-2-4-watch-dog-看门狗机制"><a href="#3-2-4-watch-dog-看门狗机制" class="headerlink" title="3.2.4. watch dog 看门狗机制"></a>3.2.4. watch dog 看门狗机制</h5><img src="/2024/04/02/Redis%E5%AD%A6%E4%B9%A06%E2%80%94Redis%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/23.png" class=""><p>Redisson中的分布式锁自带自动续期机制，其提供了一个专门用来监控和续期锁的Watch Dog（看门狗），如果操作共享资源的线程还没有执行完成的话，Watch Dog会不断延长锁的过期时间，从而保证锁不会因为超时而被释放。</p><h3 id="4-参考文章"><a href="#4-参考文章" class="headerlink" title="4. 参考文章"></a>4. 参考文章</h3><p><a href="https://zhuanlan.zhihu.com/p/374306005">https://zhuanlan.zhihu.com/p/374306005</a><br><a href="https://my.oschina.net/u/4499317/blog/5039486">https://my.oschina.net/u/4499317/blog/5039486</a><br><a href="https://blog.csdn.net/qq_15071263/article/details/101277474">https://blog.csdn.net/qq_15071263/article/details/101277474</a><br><a href="https://www.cnblogs.com/jelly12345/p/14699492.html">https://www.cnblogs.com/jelly12345/p/14699492.html</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>中间件</tag>
      
      <tag>Redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Redis学习5-Redis应用之签到</title>
    <link href="/2024/04/02/Redis%E5%AD%A6%E4%B9%A05-Redis%E5%BA%94%E7%94%A8%E4%B9%8B%E7%AD%BE%E5%88%B0/"/>
    <url>/2024/04/02/Redis%E5%AD%A6%E4%B9%A05-Redis%E5%BA%94%E7%94%A8%E4%B9%8B%E7%AD%BE%E5%88%B0/</url>
    
    <content type="html"><![CDATA[<h3 id="1-Redis位图bitMap"><a href="#1-Redis位图bitMap" class="headerlink" title="1. Redis位图bitMap"></a>1. Redis位图bitMap</h3><p>位图由一系列二进制位组成，每个位可以被设置为1或0，当我们在处理需要高效存储和操作大量二进制位数据的适合，位图是一个非常有用的工具。<br>位图操作命令有：</p><ol><li>SETBIT：设置位图中指定位置的位的值。可以将位设置为 0 或 1。</li><li>GETBIT：获取位图中指定位置的位的值。</li><li>BITCOUNT：计算位图中置为 1 的位的数量。</li><li>BITOP：对多个位图执行逻辑运算（AND、OR、XOR、NOT）。</li><li>BITFIELD：执行复杂的位字段操作，允许你在位图上进行位级别的读写操作。<br>其中，用的最多的是前三个操作，示例如下：<img src="/2024/04/02/Redis%E5%AD%A6%E4%B9%A05-Redis%E5%BA%94%E7%94%A8%E4%B9%8B%E7%AD%BE%E5%88%B0/1.png" class="">位图的应用十分广泛，包括但不限于以下几方面：<br>● 统计用户活跃度：可以使用位图追踪用户的登录活动，每个用户对应一个位图，每天的登录状态可以用一个二进制位表示，通过 BITOP 命令可以计算多个用户的交集，从而得到活跃用户的统计信息。<br>● 数据压缩：位图可以高效地存储大量的二进制数据，比如布隆过滤器（Bloom Filter）就是基于位图实现的一种数据结构，用于快速判断元素是否存在。<br>● 事件计数：可以使用位图记录每天不同时间段的事件发生情况，比如网站的访问量，每个时间段对应一个位图，每次事件发生时将对应的位设置为 1，通过 BITCOUNT 命令可以计算出每个时间段的事件数量。<br>● 权限管理：可以使用位图来管理用户的权限，每个用户对应一个位图，每个权限对应一个二进制位，通过 BITOP 命令可以进行权限的并集、交集等操作。</li></ol><h3 id="2-RedisTemplate操作位图"><a href="#2-RedisTemplate操作位图" class="headerlink" title="2. RedisTemplate操作位图"></a>2. RedisTemplate操作位图</h3><p>在之前的几篇文章中，我们总结了一个Redis工具类，但是那个工具类中，并没有和位图相关的操作，这里添加和位图操作相关的方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// value: true为1， false为0</span><br> <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">setBit</span><span class="hljs-params">(String key, <span class="hljs-type">int</span> offset, <span class="hljs-type">boolean</span> value)</span> &#123;<br>     <span class="hljs-keyword">return</span> redisTemplate.opsForValue().setBit(key, offset, value);<br> &#125;<br><br> <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">getBit</span><span class="hljs-params">(String key, <span class="hljs-type">int</span> offset)</span> &#123;<br>     <span class="hljs-keyword">return</span> redisTemplate.opsForValue().getBit(key, offset);<br> &#125;<br><br> <span class="hljs-comment">/**</span><br><span class="hljs-comment">  * 统计对应值为1 的数量</span><br><span class="hljs-comment">  * <span class="hljs-doctag">@param</span> key</span><br><span class="hljs-comment">  * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">  */</span><br> <span class="hljs-keyword">public</span> <span class="hljs-type">long</span> <span class="hljs-title function_">bitCount</span><span class="hljs-params">(String key)</span> &#123;<br>     <span class="hljs-keyword">if</span> (StringUtils.isEmpty(key)) &#123;<br>         <span class="hljs-keyword">return</span> <span class="hljs-number">0L</span>;<br>     &#125;<br>     <span class="hljs-keyword">return</span> redisTemplate.execute((RedisCallback&lt;Long&gt;) con -&gt; con.bitCount(key.getBytes()));<br> &#125;<br><br> <span class="hljs-comment">/**</span><br><span class="hljs-comment">  * 统计在字节范围内，对应值为1的数量</span><br><span class="hljs-comment">  * <span class="hljs-doctag">@param</span> key</span><br><span class="hljs-comment">  * <span class="hljs-doctag">@param</span> start</span><br><span class="hljs-comment">  * <span class="hljs-doctag">@param</span> end</span><br><span class="hljs-comment">  * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">  */</span><br> <span class="hljs-keyword">public</span> Long <span class="hljs-title function_">bitCount</span><span class="hljs-params">(String key, <span class="hljs-type">long</span> start, <span class="hljs-type">long</span> end)</span> &#123;<br>     <span class="hljs-keyword">return</span> redisTemplate.execute((RedisCallback&lt;Long&gt;) con -&gt; con.bitCount(key.getBytes(), start, end));<br> &#125;<br></code></pre></td></tr></table></figure><p>添加测试类，用于测试位图操作：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example;<br><br><span class="hljs-keyword">import</span> org.example.util.RedisUtils;<br><span class="hljs-keyword">import</span> org.junit.jupiter.api.Test;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.boot.test.context.SpringBootTest;<br><br><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RedisBitMapTest</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> RedisUtils redisUtils;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testBitMap</span><span class="hljs-params">()</span> &#123;<br>        redisUtils.setBit(<span class="hljs-string">&quot;bit&quot;</span>, <span class="hljs-number">0</span>, <span class="hljs-literal">true</span>);<br>        redisUtils.setBit(<span class="hljs-string">&quot;bit&quot;</span>, <span class="hljs-number">1</span>, <span class="hljs-literal">true</span>);<br>        redisUtils.setBit(<span class="hljs-string">&quot;bit&quot;</span>, <span class="hljs-number">3</span>, <span class="hljs-literal">true</span>);<br>        redisUtils.setBit(<span class="hljs-string">&quot;bit&quot;</span>, <span class="hljs-number">7</span>, <span class="hljs-literal">true</span>);<br>        System.out.println(redisUtils.bitCount(<span class="hljs-string">&quot;bit&quot;</span>));<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>执行结果如下：</p><img src="/2024/04/02/Redis%E5%AD%A6%E4%B9%A05-Redis%E5%BA%94%E7%94%A8%E4%B9%8B%E7%AD%BE%E5%88%B0/2.png" class=""><p>我们通过Redis可视化工具，查看bit的值，可以看出其二进制值与我们操作的一致</p><img src="/2024/04/02/Redis%E5%AD%A6%E4%B9%A05-Redis%E5%BA%94%E7%94%A8%E4%B9%8B%E7%AD%BE%E5%88%B0/3.png" class=""><h3 id="3-位图应用之签到"><a href="#3-位图应用之签到" class="headerlink" title="3. 位图应用之签到"></a>3. 位图应用之签到</h3><p>在很多时候，我们遇到用户签到的场景，用户进入应用时，获取用户当天的签到情况，如果没有签到，用户可以签到，一般这种功能，可以通过set数据结构或bitMap来实现，但bitMap和set相比，其占用的空间更小，因此我们选择使用bitMap来实现签到的功能。<br>SignService：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example.util;<br><br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.data.redis.connection.BitFieldSubCommands;<br><span class="hljs-keyword">import</span> org.springframework.data.redis.core.RedisTemplate;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Service;<br><br><span class="hljs-keyword">import</span> java.time.LocalDate;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SignService</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> RedisUtils redisUtils;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> RedisTemplate&lt;String, Object&gt; redisTemplate;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 签到</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> id</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sign</span><span class="hljs-params">(Integer id)</span> &#123;<br>        <span class="hljs-type">LocalDate</span> <span class="hljs-variable">now</span> <span class="hljs-operator">=</span> LocalDate.now();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> buildCacheKey(id, now);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">dayOfMonth</span> <span class="hljs-operator">=</span> now.getDayOfMonth();<br><br>        <span class="hljs-comment">// 签到</span><br>        redisUtils.setBit(key, dayOfMonth, <span class="hljs-literal">true</span>);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 判断是否签到</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isSign</span><span class="hljs-params">(Integer id)</span> &#123;<br>        <span class="hljs-type">LocalDate</span> <span class="hljs-variable">now</span> <span class="hljs-operator">=</span> LocalDate.now();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> buildCacheKey(id, now);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">dayOfMonth</span> <span class="hljs-operator">=</span> now.getDayOfMonth();<br>        <span class="hljs-keyword">return</span> redisUtils.getBit(key, dayOfMonth);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取当月的签到次数</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> id</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> Long <span class="hljs-title function_">getSignCountOfThisMonth</span><span class="hljs-params">(Integer id)</span> &#123;<br>        <span class="hljs-type">LocalDate</span> <span class="hljs-variable">now</span> <span class="hljs-operator">=</span> LocalDate.now();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> buildCacheKey(id, now);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">dayOfMonth</span> <span class="hljs-operator">=</span> now.getDayOfMonth();<br>        List&lt;Long&gt; result = redisTemplate.opsForValue().bitField(key,<br>                BitFieldSubCommands.create()<br>                        .get(BitFieldSubCommands.BitFieldType.unsigned(dayOfMonth)).valueAt(<span class="hljs-number">1</span>));<br>        <span class="hljs-keyword">if</span> (result == <span class="hljs-literal">null</span> || result.isEmpty()) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0L</span>;<br>        &#125;<br>        <span class="hljs-type">Long</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> result.get(<span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">if</span> (num == <span class="hljs-literal">null</span> || num == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0L</span>;<br>        &#125;<br><br>        <span class="hljs-type">String</span> <span class="hljs-variable">binaryStr</span> <span class="hljs-operator">=</span> Long.toString(num, <span class="hljs-number">2</span>);<br><br>        <span class="hljs-type">long</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; binaryStr.length(); i++) &#123;<br>            <span class="hljs-type">char</span> <span class="hljs-variable">ch</span> <span class="hljs-operator">=</span> binaryStr.charAt(i);<br>            <span class="hljs-keyword">if</span> (ch == <span class="hljs-string">&#x27;1&#x27;</span>) &#123;<br>                count ++;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> count;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取本月连续签到次数</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> id</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> Long <span class="hljs-title function_">getContinuousSignCountOfThisMonth</span><span class="hljs-params">(Integer id)</span> &#123;<br>        <span class="hljs-type">LocalDate</span> <span class="hljs-variable">now</span> <span class="hljs-operator">=</span> LocalDate.now();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> buildCacheKey(id, now);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">dayOfMonth</span> <span class="hljs-operator">=</span> now.getDayOfMonth();<br>        List&lt;Long&gt; result = redisTemplate.opsForValue().bitField(key,<br>                BitFieldSubCommands.create()<br>                        .get(BitFieldSubCommands.BitFieldType.unsigned(dayOfMonth)).valueAt(<span class="hljs-number">1</span>));<br>        <span class="hljs-keyword">if</span> (result == <span class="hljs-literal">null</span> || result.isEmpty()) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0L</span>;<br>        &#125;<br>        <span class="hljs-type">Long</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> result.get(<span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">if</span> (num == <span class="hljs-literal">null</span> || num == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0L</span>;<br>        &#125;<br><br>        <span class="hljs-type">long</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>            <span class="hljs-keyword">if</span> ((num &amp; <span class="hljs-number">1</span>) == <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                count ++;<br>            &#125;<br>            num &gt;&gt;&gt;= <span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> count;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> String <span class="hljs-title function_">buildCacheKey</span><span class="hljs-params">(Integer id, LocalDate localDate)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">year</span> <span class="hljs-operator">=</span> localDate.getYear();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">monthValue</span> <span class="hljs-operator">=</span> localDate.getMonthValue();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;sign:&quot;</span> + year + <span class="hljs-string">&quot;:&quot;</span> + monthValue + <span class="hljs-string">&quot;:&quot;</span> + id;<br>        <span class="hljs-keyword">return</span> key;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>测试代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> SignService signService;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testSign</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 签到</span><br>        signService.sign(<span class="hljs-number">1</span>);<br><br>        <span class="hljs-comment">// 判断是否签到</span><br>        System.out.println(<span class="hljs-string">&quot;是否签到：&quot;</span> + signService.isSign(<span class="hljs-number">1</span>));<br><br>        <span class="hljs-comment">// 获取当月的签到次数</span><br>        System.out.println(<span class="hljs-string">&quot;当月的签到次数：&quot;</span> + signService.getSignCountOfThisMonth(<span class="hljs-number">1</span>));<br><br>        <span class="hljs-comment">// 获取当月的连续签到次数</span><br>        System.out.println(<span class="hljs-string">&quot;当月连续签到次数：&quot;</span> + signService.getContinuousSignCountOfThisMonth(<span class="hljs-number">1</span>));<br>    &#125;<br></code></pre></td></tr></table></figure><p>运行结果如下：</p><img src="/2024/04/02/Redis%E5%AD%A6%E4%B9%A05-Redis%E5%BA%94%E7%94%A8%E4%B9%8B%E7%AD%BE%E5%88%B0/4.png" class="">]]></content>
    
    
    
    <tags>
      
      <tag>中间件</tag>
      
      <tag>Redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Redis学习4—Redis应用之限流</title>
    <link href="/2024/04/02/Redis%E5%AD%A6%E4%B9%A04%E2%80%94Redis%E5%BA%94%E7%94%A8%E4%B9%8B%E9%99%90%E6%B5%81/"/>
    <url>/2024/04/02/Redis%E5%AD%A6%E4%B9%A04%E2%80%94Redis%E5%BA%94%E7%94%A8%E4%B9%8B%E9%99%90%E6%B5%81/</url>
    
    <content type="html"><![CDATA[<h3 id="1-引言"><a href="#1-引言" class="headerlink" title="1. 引言"></a>1. 引言</h3><p>Redis作为一个内存数据库其读写速度非常快，并且支持原子操作，这使得它非常适合处理频繁的请求，一般情况下，我们会使用Redis作为缓存数据库，但处理做缓存数据库之外，Redis的应用还十分广泛，比如这一节，我们将讲解Redis在限流方面的应用。</p><h3 id="2-通过setnx实现限流"><a href="#2-通过setnx实现限流" class="headerlink" title="2. 通过setnx实现限流"></a>2. 通过setnx实现限流</h3><p>我们通过切面，来获取某给接口在一段时间内的请求次数，当请求次数超过某个值时，抛出限流异常，直接返回，不执行业务逻辑。思路大致如下：</p><img src="/2024/04/02/Redis%E5%AD%A6%E4%B9%A04%E2%80%94Redis%E5%BA%94%E7%94%A8%E4%B9%8B%E9%99%90%E6%B5%81/1.png" class=""><h4 id="2-1-初步实现"><a href="#2-1-初步实现" class="headerlink" title="2.1. 初步实现"></a>2.1. 初步实现</h4><p>我们参照上面的流程，对Redis限流进行实现。首先引入aop切面相关的依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-aop<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>然后添加一个限流注解类，这个注解有三个属性，maxTimes表示最大访问次数，interval表示限流间隙，unit表示时间的单位，假设配置的值为maxTimes&#x3D;10, interval&#x3D;1, unit&#x3D; TimeUnit.SECONDS，那么表示在1秒内，限制访问次数为10次。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example.annotations;<br><br><span class="hljs-keyword">import</span> java.lang.annotation.ElementType;<br><span class="hljs-keyword">import</span> java.lang.annotation.Retention;<br><span class="hljs-keyword">import</span> java.lang.annotation.RetentionPolicy;<br><span class="hljs-keyword">import</span> java.lang.annotation.Target;<br><span class="hljs-keyword">import</span> java.util.concurrent.TimeUnit;<br><br><span class="hljs-meta">@Target(value = ElementType.METHOD)</span><br><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> Limit &#123;<br>    <span class="hljs-comment">// 访问次数</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">maxTimes</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> <span class="hljs-number">1</span>;<br><br>    <span class="hljs-comment">// 间隔时间</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">interval</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> <span class="hljs-number">1</span>;<br><br>    <span class="hljs-comment">// 时间单位</span><br>    <span class="hljs-keyword">public</span> TimeUnit <span class="hljs-title function_">unit</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> TimeUnit.SECONDS;<br>&#125;<br></code></pre></td></tr></table></figure><p>返回结果类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example.common;<br><br><span class="hljs-keyword">import</span> lombok.Getter;<br><br><span class="hljs-keyword">import</span> java.io.Serializable;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Response</span> &lt;T&gt;  <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br>    <span class="hljs-meta">@Getter</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> code;<br><br>    <span class="hljs-meta">@Getter</span><br>    <span class="hljs-keyword">private</span> String msg;<br><br>    <span class="hljs-meta">@Getter</span><br>    <span class="hljs-keyword">private</span> T data;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">Response</span><span class="hljs-params">(<span class="hljs-type">int</span> code, String msg)</span> &#123;<br>        <span class="hljs-built_in">this</span>.code = code;<br>        <span class="hljs-built_in">this</span>.msg = msg;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">Response</span><span class="hljs-params">(<span class="hljs-type">int</span> code, String msg, T data)</span> &#123;<br>        <span class="hljs-built_in">this</span>.code = code;<br>        <span class="hljs-built_in">this</span>.msg = msg;<br>        <span class="hljs-built_in">this</span>.data = data;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">Response</span><span class="hljs-params">(ResultCode resultCode)</span> &#123;<br>        <span class="hljs-built_in">this</span>.code = resultCode.getCode();<br>        <span class="hljs-built_in">this</span>.msg = resultCode.getMsg();<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">Response</span><span class="hljs-params">(ResultCode resultCode, T data)</span> &#123;<br>        <span class="hljs-built_in">this</span>.code = resultCode.getCode();<br>        <span class="hljs-built_in">this</span>.msg = resultCode.getMsg();<br>        <span class="hljs-built_in">this</span>.data = data;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; Response <span class="hljs-title function_">success</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Response</span>(ResultCode.SUCCESS);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; Response <span class="hljs-title function_">success</span><span class="hljs-params">(T data)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Response</span>(ResultCode.SUCCESS, data);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; Response <span class="hljs-title function_">fail</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Response</span>(ResultCode.FAIL);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; Response <span class="hljs-title function_">fail</span><span class="hljs-params">(ResultCode resultCode)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Response</span>(resultCode);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; Response <span class="hljs-title function_">error</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Response</span>(ResultCode.SERVER_ERROR);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; Response <span class="hljs-title function_">error</span><span class="hljs-params">(String msg)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Response</span>(ResultCode.SERVER_ERROR.getCode(), msg);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>错误码类，在错误码中，我们添加一个LIMIT_ERROR，表示该接口被限流。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example.common;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">enum</span> <span class="hljs-title class_">ResultCode</span> &#123;<br>    SUCCESS(<span class="hljs-number">200</span>, <span class="hljs-string">&quot;操作成功&quot;</span>),<br><br>    FAIL(<span class="hljs-number">400</span>, <span class="hljs-string">&quot;操作失败&quot;</span>),<br><br>    SERVER_ERROR(<span class="hljs-number">500</span>, <span class="hljs-string">&quot;服务器错误&quot;</span>),<br><br>    LIMIT_ERROR(<span class="hljs-number">400</span>, <span class="hljs-string">&quot;限流&quot;</span>);<br><br>    <span class="hljs-type">int</span> code;<br><br>    String msg;<br><br>    ResultCode(<span class="hljs-type">int</span> code, String msg) &#123;<br>        <span class="hljs-built_in">this</span>.code = code;<br>        <span class="hljs-built_in">this</span>.msg = msg;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getCode</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.code;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getMsg</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.msg;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>业务异常类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BusinessException</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">RuntimeException</span> &#123;<br>    <span class="hljs-keyword">private</span> ResultCode resultCode;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">BusinessException</span><span class="hljs-params">(ResultCode resultCode)</span> &#123;<br>        <span class="hljs-built_in">super</span>(resultCode.getMsg());<br>        <span class="hljs-built_in">this</span>.resultCode = resultCode;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> ResultCode <span class="hljs-title function_">getResultCode</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.resultCode;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>全局异常处理类，在我们的切面中，如果发现访问次数大于最大访问次数，那么抛出限流异常，由全局异常处理类进行处理，返回对应的结果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example.exception;<br><br><span class="hljs-keyword">import</span> org.example.common.Response;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.ExceptionHandler;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestControllerAdvice;<br><br><span class="hljs-meta">@RestControllerAdvice</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">GlobalExceptionHandler</span> &#123;<br>    <span class="hljs-meta">@ExceptionHandler(value = BusinessException.class)</span><br>    <span class="hljs-keyword">public</span> Response <span class="hljs-title function_">handleBusinessException</span><span class="hljs-params">(BusinessException e)</span> &#123;<br>        <span class="hljs-keyword">return</span> Response.fail(e.getResultCode());<br>    &#125;<br><br>    <span class="hljs-meta">@ExceptionHandler(value = Exception.class)</span><br>    <span class="hljs-keyword">public</span> Response <span class="hljs-title function_">handleException</span><span class="hljs-params">(Exception e)</span> &#123;<br>        <span class="hljs-keyword">return</span> Response.error(e.getMessage());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>限流切面类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example.aspect;<br><br><span class="hljs-keyword">import</span> org.aspectj.lang.JoinPoint;<br><span class="hljs-keyword">import</span> org.aspectj.lang.annotation.Aspect;<br><span class="hljs-keyword">import</span> org.aspectj.lang.annotation.Before;<br><span class="hljs-keyword">import</span> org.aspectj.lang.annotation.Pointcut;<br><span class="hljs-keyword">import</span> org.aspectj.lang.reflect.MethodSignature;<br><span class="hljs-keyword">import</span> org.example.annotations.Limit;<br><span class="hljs-keyword">import</span> org.example.common.ResultCode;<br><span class="hljs-keyword">import</span> org.example.exception.BusinessException;<br><span class="hljs-keyword">import</span> org.example.util.RedisUtils;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@Aspect</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LimitAspect</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> RedisUtils redisUtils;<br><br>    <span class="hljs-meta">@Pointcut(&quot;@annotation(org.example.annotations.Limit)&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">pointCut</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-meta">@Before(&quot;pointCut()&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">beforeAdvice</span><span class="hljs-params">(JoinPoint joinPoint)</span> &#123;<br>        <span class="hljs-comment">// 获取方法名</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">methodName</span> <span class="hljs-operator">=</span> joinPoint.getSignature().getName();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">prefixMethod</span> <span class="hljs-operator">=</span> joinPoint.getSignature().getDeclaringTypeName();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">fullMethodName</span> <span class="hljs-operator">=</span> prefixMethod + <span class="hljs-string">&quot;.&quot;</span> + methodName;<br>        System.out.println(<span class="hljs-string">&quot;methodName:&quot;</span> + fullMethodName);<br><br>        Object[] args = joinPoint.getArgs();<br>        <span class="hljs-keyword">for</span> (Object arg : args) &#123;<br>            System.out.println(<span class="hljs-string">&quot;method argument:&quot;</span> + arg);<br>        &#125;<br><br>        <span class="hljs-comment">// 获取注解参数</span><br>        <span class="hljs-type">MethodSignature</span> <span class="hljs-variable">methodSignature</span> <span class="hljs-operator">=</span> (MethodSignature) joinPoint.getSignature();<br>        <span class="hljs-type">Limit</span> <span class="hljs-variable">annotation</span> <span class="hljs-operator">=</span> methodSignature.getMethod().getAnnotation(Limit.class);<br>        System.out.println(annotation.unit());<br>        System.out.println(annotation.maxTimes());<br>        System.out.println(annotation.interval());<br><br>        <span class="hljs-comment">// 获取redis值</span><br>        <span class="hljs-type">Object</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> redisUtils.getKey(fullMethodName);<br>        <span class="hljs-keyword">if</span> (key != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-type">Integer</span> <span class="hljs-variable">redisValue</span> <span class="hljs-operator">=</span> (Integer) key;<br>            <span class="hljs-comment">// 小于限流值</span><br>            <span class="hljs-keyword">if</span> (redisValue.compareTo(annotation.maxTimes()) &lt; <span class="hljs-number">0</span>) &#123;<br>                redisUtils.increment(fullMethodName);<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br>            <span class="hljs-comment">// 大于限流值</span><br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BusinessException</span>(ResultCode.LIMIT_ERROR);<br>        &#125;<br><br>        <span class="hljs-comment">// 获取的值为null, 设置数据到redis中</span><br>        redisUtils.addKey(fullMethodName, <span class="hljs-number">1</span>, annotation.interval(), annotation.unit());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>最后添加一个TestController类，用于进行接口的测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example.controller;<br><br><span class="hljs-keyword">import</span> org.example.annotations.Limit;<br><span class="hljs-keyword">import</span> org.example.common.Response;<br><span class="hljs-keyword">import</span> org.example.common.ResultCode;<br><span class="hljs-keyword">import</span> org.example.exception.BusinessException;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.GetMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestParam;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<br><br><span class="hljs-keyword">import</span> java.util.concurrent.TimeUnit;<br><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(value = &quot;/test&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestController</span> &#123;<br><br>    <span class="hljs-meta">@GetMapping(value = &quot;/hello1&quot;)</span><br>    <span class="hljs-meta">@Limit(maxTimes = 10, interval = 100, unit = TimeUnit.SECONDS)</span><br>    <span class="hljs-keyword">public</span> Response <span class="hljs-title function_">hello1</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(name = &quot;name&quot;, defaultValue = &quot;cxy&quot;)</span> String name)</span> &#123;<br>        <span class="hljs-keyword">return</span> Response.success(<span class="hljs-string">&quot;hello1 success &quot;</span> + name);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>从上面的接口注解配置中，可以看出，这个接口在100秒内最多访问10次，我们启动项目，访问&#x2F;test&#x2F;hello1，前10次的访问结果为：</p><img src="/2024/04/02/Redis%E5%AD%A6%E4%B9%A04%E2%80%94Redis%E5%BA%94%E7%94%A8%E4%B9%8B%E9%99%90%E6%B5%81/2.png" class=""><p>第11次时，开始限流了</p><img src="/2024/04/02/Redis%E5%AD%A6%E4%B9%A04%E2%80%94Redis%E5%BA%94%E7%94%A8%E4%B9%8B%E9%99%90%E6%B5%81/3.png" class=""><p>这里看起来不是很直观，我们将时间间隙改为2，表示2秒最多由10个请求能执行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(value = &quot;/hello1&quot;)</span><br>    <span class="hljs-meta">@Limit(maxTimes = 10, interval = 2, unit = TimeUnit.SECONDS)</span><br>    <span class="hljs-keyword">public</span> Response <span class="hljs-title function_">hello1</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(name = &quot;name&quot;, defaultValue = &quot;cxy&quot;)</span> String name)</span> &#123;<br>        <span class="hljs-keyword">return</span> Response.success(<span class="hljs-string">&quot;hello1 success &quot;</span> + name);<br>    &#125;<br></code></pre></td></tr></table></figure><p>使用postman进行并发请求，下面的redis限流测试，就是刚才提到的<a href="http://localhost:8080/test/hello1?name=cxy%E8%BF%99%E4%B8%AA%E8%AF%B7%E6%B1%82">http://localhost:8080/test/hello1?name=cxy这个请求</a></p><img src="/2024/04/02/Redis%E5%AD%A6%E4%B9%A04%E2%80%94Redis%E5%BA%94%E7%94%A8%E4%B9%8B%E9%99%90%E6%B5%81/4.png" class=""><p>执行该并发测试，结果如下：</p><img src="/2024/04/02/Redis%E5%AD%A6%E4%B9%A04%E2%80%94Redis%E5%BA%94%E7%94%A8%E4%B9%8B%E9%99%90%E6%B5%81/5.png" class=""><p>这里20个请求中，有10个成功，10个被限流。不过这个postman结果展示不太好，只能一个一个查看结果，这里就不一一展示了。</p><h4 id="2-2-职责分离"><a href="#2-2-职责分离" class="headerlink" title="2.2. 职责分离"></a>2.2. 职责分离</h4><p>上面的代码，虽然能成功限流，但是有一个问题，就是切面类的beforeAdvice方法中，做的事情太多了，又是解析请求参数、解析注解参数，又是使用查询Redis，进行限流判断，我们应该将限流逻辑的判断，此外，这里使用的是Redis，如果后续我们不使用Redis，换成其他方式进行限流判断的话，需要改很多处代码，因此，这里要做一些优化，包括：<br>1）定义限流请求类，用于封装访问的方法名、注解信息等内容<br>2）定义限流处理接口<br>3）定义Redis限流处理类，通过Redis实现限流处理接口<br>我们首先定义一个限流请求类，封装限流处理所需要的参数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example.request;<br><br><span class="hljs-keyword">import</span> lombok.Data;<br><br><span class="hljs-keyword">import</span> java.io.Serializable;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><span class="hljs-keyword">import</span> java.util.concurrent.TimeUnit;<br><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LimitRequest</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br>    <span class="hljs-keyword">private</span> String methodName;<br><br>    <span class="hljs-keyword">private</span> Integer interval;<br><br>    <span class="hljs-keyword">private</span> Integer maxTimes;<br><br>    <span class="hljs-keyword">private</span> TimeUnit timeUnit;<br><br>    <span class="hljs-keyword">private</span> Map&lt;String, Object&gt; extendMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>&#125;<br></code></pre></td></tr></table></figure><p>定义限流处理接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example.limit;<br><br><span class="hljs-keyword">import</span> org.example.request.limit.LimitRequest;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">LimitHandler</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">handleLimit</span><span class="hljs-params">(LimitRequest limitRequest)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>定义Redis的限流处理类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example.limit;<br><br><span class="hljs-keyword">import</span> org.example.common.ResultCode;<br><span class="hljs-keyword">import</span> org.example.exception.BusinessException;<br><span class="hljs-keyword">import</span> org.example.request.limit.LimitRequest;<br><span class="hljs-keyword">import</span> org.example.util.RedisUtils;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RedisLimitHandler</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">LimitHandler</span>&#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> RedisUtils redisUtils;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handleLimit</span><span class="hljs-params">(LimitRequest limitRequest)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">methodName</span> <span class="hljs-operator">=</span> limitRequest.getMethodName();<br>        <span class="hljs-comment">// 获取redis值</span><br>        <span class="hljs-type">Object</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> redisUtils.getKey(methodName);<br>        <span class="hljs-keyword">if</span> (key != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-type">Integer</span> <span class="hljs-variable">redisValue</span> <span class="hljs-operator">=</span> (Integer) key;<br>            <span class="hljs-comment">// 小于限流值</span><br>            <span class="hljs-keyword">if</span> (redisValue.compareTo(limitRequest.getMaxTimes()) &lt;= <span class="hljs-number">0</span>) &#123;<br>                redisUtils.increment(methodName);<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br>            <span class="hljs-comment">// 大于限流值</span><br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BusinessException</span>(ResultCode.LIMIT_ERROR);<br>        &#125;<br><br>        <span class="hljs-comment">// 获取的值为null, 设置数据到redis中</span><br>        redisUtils.addKey(methodName, <span class="hljs-number">1</span>, limitRequest.getInterval(), limitRequest.getTimeUnit());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>修改LimitAspect代码，但后续更换限流策略是，只需要修改LimitHandler的bean即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example.aspect;<br><br><span class="hljs-keyword">import</span> org.aspectj.lang.JoinPoint;<br><span class="hljs-keyword">import</span> org.aspectj.lang.annotation.Aspect;<br><span class="hljs-keyword">import</span> org.aspectj.lang.annotation.Before;<br><span class="hljs-keyword">import</span> org.aspectj.lang.annotation.Pointcut;<br><span class="hljs-keyword">import</span> org.aspectj.lang.reflect.MethodSignature;<br><span class="hljs-keyword">import</span> org.example.annotations.Limit;<br><span class="hljs-keyword">import</span> org.example.limit.LimitHandler;<br><span class="hljs-keyword">import</span> org.example.request.limit.LimitRequest;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-keyword">import</span> javax.annotation.Resource;<br><br><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@Aspect</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LimitAspect</span> &#123;<br><br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> LimitHandler redisLimitHandler;<br><br>    <span class="hljs-meta">@Pointcut(&quot;@annotation(org.example.annotations.Limit)&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">pointCut</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-meta">@Before(&quot;pointCut()&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">beforeAdvice</span><span class="hljs-params">(JoinPoint joinPoint)</span> &#123;<br>        <span class="hljs-type">LimitRequest</span> <span class="hljs-variable">limitRequest</span> <span class="hljs-operator">=</span> convert2LimitRequest(joinPoint);<br><br>        redisLimitHandler.handleLimit(limitRequest);<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> LimitRequest <span class="hljs-title function_">convert2LimitRequest</span><span class="hljs-params">(JoinPoint joinPoint)</span> &#123;<br>        <span class="hljs-type">LimitRequest</span> <span class="hljs-variable">limitRequest</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">LimitRequest</span>();<br><br>        <span class="hljs-type">String</span> <span class="hljs-variable">methodName</span> <span class="hljs-operator">=</span> joinPoint.getSignature().getName();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">prefixMethod</span> <span class="hljs-operator">=</span> joinPoint.getSignature().getDeclaringTypeName();<br>        limitRequest.setMethodName(prefixMethod + <span class="hljs-string">&quot;.&quot;</span> + methodName);<br><br>        Object[] args = joinPoint.getArgs();<br>        limitRequest.getExtendMap().put(<span class="hljs-string">&quot;args&quot;</span>, args);<br><br>        <span class="hljs-type">MethodSignature</span> <span class="hljs-variable">methodSignature</span> <span class="hljs-operator">=</span> (MethodSignature) joinPoint.getSignature();<br>        <span class="hljs-type">Limit</span> <span class="hljs-variable">annotation</span> <span class="hljs-operator">=</span> methodSignature.getMethod().getAnnotation(Limit.class);<br>        limitRequest.setInterval(annotation.interval());<br>        limitRequest.setMaxTimes(annotation.maxTimes());<br>        limitRequest.setTimeUnit(annotation.unit());<br>        <span class="hljs-keyword">return</span> limitRequest;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-通过Zset实现限流"><a href="#3-通过Zset实现限流" class="headerlink" title="3. 通过Zset实现限流"></a>3. 通过Zset实现限流</h3><p>我们可以将请求打造成一个zset数组，每一次请求进来时，value保持一致，可以用UUID生成，然后score用当前时间戳表示，通过range方法，来获取某个时间范围内，请求的个数，然后根据这个个数与限流值对比，当大于限流值时，进行限流操作。<br>我们修改RedisLimitHandler代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handleLimit</span><span class="hljs-params">(LimitRequest limitRequest)</span> &#123;<br>      handleLimitByZSet(limitRequest);<br>   &#125;<br><br>   <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handleLimitByZSet</span><span class="hljs-params">(LimitRequest limitRequest)</span> &#123;<br>       <span class="hljs-type">String</span> <span class="hljs-variable">methodName</span> <span class="hljs-operator">=</span> limitRequest.getMethodName();<br><br>       <span class="hljs-type">long</span> <span class="hljs-variable">currentTime</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>       <span class="hljs-type">long</span> <span class="hljs-variable">interval</span> <span class="hljs-operator">=</span> TimeUnit.MILLISECONDS.convert(limitRequest.getInterval(), limitRequest.getTimeUnit());<br><br>       <span class="hljs-keyword">if</span> (redisUtils.hasKey(methodName)) &#123;<br>           <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> redisUtils.rangeByScore(methodName, Double.valueOf(currentTime - interval), Double.valueOf(currentTime)).size();<br>           <span class="hljs-keyword">if</span> (count &gt; limitRequest.getMaxTimes()) &#123;<br>               <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BusinessException</span>(ResultCode.LIMIT_ERROR);<br>           &#125;<br>       &#125;<br>       redisUtils.addZSet(methodName, UUID.randomUUID().toString(), Double.valueOf(currentTime));<br>   &#125;<br></code></pre></td></tr></table></figure><p>然后添加一个测试类，用于模拟并发场景下的多个请求</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example;<br><br><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSONObject;<br><span class="hljs-keyword">import</span> org.example.common.Response;<br><span class="hljs-keyword">import</span> org.example.common.ResultCode;<br><span class="hljs-keyword">import</span> org.example.controller.TestController;<br><span class="hljs-keyword">import</span> org.example.exception.BusinessException;<br><span class="hljs-keyword">import</span> org.junit.jupiter.api.Test;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.boot.test.context.SpringBootTest;<br><br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">import</span> java.util.concurrent.*;<br><br><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RedisLimitTest</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> TestController testController;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testLimit</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> ExecutionException, InterruptedException &#123;<br>        <span class="hljs-type">ExecutorService</span> <span class="hljs-variable">executorService</span> <span class="hljs-operator">=</span> Executors.newFixedThreadPool(<span class="hljs-number">5</span>);<br>        Callable&lt;Response&gt; callable = () -&gt; &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;cxy&quot;</span>;<br>                <span class="hljs-keyword">return</span> testController.hello1(name);<br>            &#125; <span class="hljs-keyword">catch</span> (BusinessException e) &#123;<br>                <span class="hljs-keyword">return</span> Response.fail(e.getResultCode());<br>            &#125;<br>        &#125;;<br>        List&lt;Future&lt;Response&gt;&gt; futureList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">20</span>; i++) &#123;<br>            Future&lt;Response&gt; submit = executorService.submit(callable);<br>            futureList.add(submit);<br>        &#125;<br><br>        <span class="hljs-keyword">for</span> (Future&lt;Response&gt; future : futureList) &#123;<br>            System.out.println(JSONObject.toJSONString(future.get()));<br>        &#125;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果如下：</p><img src="/2024/04/02/Redis%E5%AD%A6%E4%B9%A04%E2%80%94Redis%E5%BA%94%E7%94%A8%E4%B9%8B%E9%99%90%E6%B5%81/6.png" class=""><p>我们可以看到，这里确实进行限流了，但是，这个限流个数不太对，这是因为可能多个请求都执行到这条代码，获取到同一个值，然后才进行更新。<br> int count &#x3D; redisUtils.rangeByScore(methodName, Double.valueOf(currentTime - interval), Double.valueOf(currentTime)).size();<br>比如有5个请求同时打过来，此时的执行到上面这条代码时，redis中符合范围的刚好有9条，那么这5个请求在进行判断时，都小于限流值，因此都会执行，然后才是更新zset，这个就是并发场景下的问题了。<br>另外，使用zset还有一个问题，它虽然能达到滑动窗口的效果，但是zset的数据结构会越来越大。</p>]]></content>
    
    
    
    <tags>
      
      <tag>中间件</tag>
      
      <tag>Redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Redis学习3—Redis应用之缓存</title>
    <link href="/2024/04/02/Redis%E5%AD%A6%E4%B9%A03%E2%80%94Redis%E5%BA%94%E7%94%A8%E4%B9%8B%E7%BC%93%E5%AD%98/"/>
    <url>/2024/04/02/Redis%E5%AD%A6%E4%B9%A03%E2%80%94Redis%E5%BA%94%E7%94%A8%E4%B9%8B%E7%BC%93%E5%AD%98/</url>
    
    <content type="html"><![CDATA[<h3 id="1-引言"><a href="#1-引言" class="headerlink" title="1. 引言"></a>1. 引言</h3><h4 id="1-1-缓存的意义"><a href="#1-1-缓存的意义" class="headerlink" title="1.1. 缓存的意义"></a>1.1. 缓存的意义</h4><p>Redis作为一个NoSql数据库，被广泛的当作缓存数据库使用，所谓缓存，就是数据交换的缓冲区。使用缓存的具体原因有：</p><ol><li>缓存数据存储于代码中，而代码运行在内存中，内存的读写性能远高于磁盘，通过缓存，可以大大降低用户访问并发量带来的服务器读写压力。</li><li>实际开发过程中，企业的数据量，少则几十万，多则上千万，如此大的数据量，如果没有缓存来作为“避震器”，系统是几乎撑不住的，所以企业会大量运用缓存技术。<img src="/2024/04/02/Redis%E5%AD%A6%E4%B9%A03%E2%80%94Redis%E5%BA%94%E7%94%A8%E4%B9%8B%E7%BC%93%E5%AD%98/1.png" class=""></li></ol><h4 id="1-2-缓存的分类"><a href="#1-2-缓存的分类" class="headerlink" title="1.2. 缓存的分类"></a>1.2. 缓存的分类</h4><p>对于缓存，我们可以分为以下几类：</p><ol><li>浏览器缓存：主要存在于浏览器端的缓存</li><li>应用层缓存：本地缓存（比如tomcat本地缓存）或缓存数据库（比如redis）</li><li>数据库缓存：在数据库中有一片空间是buffer pool，增删改查数据都会先加载到mysql的缓存中</li><li>CPU缓存：当代计算机最大的问题是 cpu性能提升了，但内存读写速度没有跟上，所以为了适应当下的情况，增加了cpu的L1，L2，L3级的缓存<img src="/2024/04/02/Redis%E5%AD%A6%E4%B9%A03%E2%80%94Redis%E5%BA%94%E7%94%A8%E4%B9%8B%E7%BC%93%E5%AD%98/2.png" class=""></li></ol><h3 id="2-缓存模型"><a href="#2-缓存模型" class="headerlink" title="2. 缓存模型"></a>2. 缓存模型</h3><h4 id="2-1-查询、添加缓存"><a href="#2-1-查询、添加缓存" class="headerlink" title="2.1. 查询、添加缓存"></a>2.1. 查询、添加缓存</h4><p>一般情况下，在查询数据库之前，先查询缓存，如果缓存数据存在，就直接返回缓存数据，如果不存在，查询数据库，并将数据存入redis，具体的模型如下：</p><img src="/2024/04/02/Redis%E5%AD%A6%E4%B9%A03%E2%80%94Redis%E5%BA%94%E7%94%A8%E4%B9%8B%E7%BC%93%E5%AD%98/3.png" class=""><h4 id="2-2-缓存淘汰"><a href="#2-2-缓存淘汰" class="headerlink" title="2.2. 缓存淘汰"></a>2.2. 缓存淘汰</h4><p>内存的空间是有限的，当我们向redis存储太多数据时，redis会对部分数据进行淘汰，淘汰数据的场景有：</p><ol><li>内存淘汰：Redis自动进行，当redis内存达到设定的max-memery时，会自动触发淘汰机制，淘汰掉一些不重要的数据。</li><li>超时剔除：当对redis设置了过期时间TTL时，Redis会将超时的数据进行删除。</li><li>主动更新：通过手动调用方法把缓存删除掉，常用于解决缓存与数据库不一致的问题。<br>Redis自动进行内存淘汰时，主要有6+2种数据淘汰机制，可以分为以下三大类：</li><li>不淘汰数据<br>● noeviction ，不进行数据淘汰，当缓存被写满后，Redis不提供服务直接返回错误。</li><li>在设置过期时间的键值对中，<br>● volatile-random ，在设置过期时间的键值对中随机删除<br>● volatile-ttl ，在设置过期时间的键值对，基于过期时间的先后进行删除，越早过期的越先被删除。<br>● volatile-lru ， 基于LRU(Least Recently Used) 算法筛选设置了过期时间的键值对， 最近最少使用的原则来筛选数据<br>● volatile-lfu ，使用 LFU( Least Frequently Used ) 算法选择设置了过期时间的键值对, 使用频率最少的键值对,来筛选数据。</li><li>在所有键值对中<br>● allkeys-random， 从所有键值对中随机选择并删除数据<br>● allkeys-lru， 使用 LRU 算法在所有数据中进行筛选<br>● allkeys-lfu， 使用 LFU 算法在所有数据中进行筛选<img src="/2024/04/02/Redis%E5%AD%A6%E4%B9%A03%E2%80%94Redis%E5%BA%94%E7%94%A8%E4%B9%8B%E7%BC%93%E5%AD%98/4.png" class=""></li></ol><h4 id="2-3-数据库缓存不一致解决方案"><a href="#2-3-数据库缓存不一致解决方案" class="headerlink" title="2.3. 数据库缓存不一致解决方案"></a>2.3. 数据库缓存不一致解决方案</h4><p>因为我们的缓存数据来自于数据库，而数据库的数据会随业务的需要而发生变化，当数据库中的数据变化，而缓存没有同步该数据，此时便会产生一致性问题。具体的解决策略有：</p><ol><li>Cache Aside Pattern（旁路缓存）</li><li>Read&#x2F;Write-Through Pattern（读写穿透）</li><li>Write Behind Pattern（异步缓存写入）</li></ol><h5 id="2-3-1-Cache-Aside-Pattern（旁路缓存模式）"><a href="#2-3-1-Cache-Aside-Pattern（旁路缓存模式）" class="headerlink" title="2.3.1. Cache Aside Pattern（旁路缓存模式）"></a>2.3.1. Cache Aside Pattern（旁路缓存模式）</h5><p>该模式是平时使用比较多的一个缓存读写模式，比较适合读请求比较多的场景，在该模式中，需要同时维系db和cache，并且以db的结果为准。</p><h6 id="2-3-1-1-写"><a href="#2-3-1-1-写" class="headerlink" title="2.3.1.1. 写"></a>2.3.1.1. 写</h6><p>先更新db，然后再直接删除cache</p><img src="/2024/04/02/Redis%E5%AD%A6%E4%B9%A03%E2%80%94Redis%E5%BA%94%E7%94%A8%E4%B9%8B%E7%BC%93%E5%AD%98/5.png" class=""><p>注意，不能先删除cache，在写db，因为在并发的情况下，可能存在，请求1删除缓存，然后写db，并且写db操作还没结束，这时请求2获取缓存，此时因为缓存被删除了，因此会从数据库读数据， 并存入缓存，这个时候的数据是未更新的，当请求2结束后，请求1写db结束，此时就会造成数据库和缓存中的数据不一致。</p><img src="/2024/04/02/Redis%E5%AD%A6%E4%B9%A03%E2%80%94Redis%E5%BA%94%E7%94%A8%E4%B9%8B%E7%BC%93%E5%AD%98/6.png" class=""><p>旁路缓存理论上来说，也会造成数据库和缓存不一致的问题，比如：请求 1 先写数据 A，请求 2 随后读数据 A 的话，就很有可能产生数据不一致性的问题。<br>这个过程可以简单描述为：</p><img src="/2024/04/02/Redis%E5%AD%A6%E4%B9%A03%E2%80%94Redis%E5%BA%94%E7%94%A8%E4%B9%8B%E7%BC%93%E5%AD%98/7.png" class=""><p>但这种概率很小，因为缓存的写入速度比数据库的写入速度快很多。</p><h6 id="2-3-1-2-读"><a href="#2-3-1-2-读" class="headerlink" title="2.3.1.2. 读"></a>2.3.1.2. 读</h6><p>从cache中读取数据，读取到就直接返回。如果读取不到，从db中读取数据返回，然后再把数据放到cache中。</p><img src="/2024/04/02/Redis%E5%AD%A6%E4%B9%A03%E2%80%94Redis%E5%BA%94%E7%94%A8%E4%B9%8B%E7%BC%93%E5%AD%98/8.png" class=""><h6 id="2-3-1-3-Cache-Aside-Pattern的缺陷"><a href="#2-3-1-3-Cache-Aside-Pattern的缺陷" class="headerlink" title="2.3.1.3. Cache Aside Pattern的缺陷"></a>2.3.1.3. Cache Aside Pattern的缺陷</h6><ol><li>首次请求数据一定不在cache：这种情况可以先将热点数据提前放入cache中。</li><li>写操作比较频繁，会导致cache的数据被频繁删除，影响缓存命中率：更新db的时候同时更新cache，但是给缓存设置一个比较短的过期时间，保证即使数据不一致的话，影响也比较小。</li></ol><h5 id="2-3-2-Read-Write-Through-Pattern（读写穿透）"><a href="#2-3-2-Read-Write-Through-Pattern（读写穿透）" class="headerlink" title="2.3.2. Read&#x2F;Write Through Pattern（读写穿透）"></a>2.3.2. Read&#x2F;Write Through Pattern（读写穿透）</h5><p>服务端把 cache 视为主要数据存储，从中读取数据并将数据写入其中。cache 服务负责将此数据读取和写入 db，从而减轻了应用程序的职责。这种策略比较少使用，因为Redis并没有提供cache将数据写入db的功能。</p><h6 id="2-3-2-1-写（Write-Through）"><a href="#2-3-2-1-写（Write-Through）" class="headerlink" title="2.3.2.1. 写（Write Through）"></a>2.3.2.1. 写（Write Through）</h6><p>● 先查 cache，cache 中不存在，直接更新 db。<br>● cache 中存在，则先更新 cache，然后 cache 服务自己更新 db（同步更新 cache 和 db）。</p><img src="/2024/04/02/Redis%E5%AD%A6%E4%B9%A03%E2%80%94Redis%E5%BA%94%E7%94%A8%E4%B9%8B%E7%BC%93%E5%AD%98/9.png" class=""><h6 id="2-3-2-2-读（Read-Through）"><a href="#2-3-2-2-读（Read-Through）" class="headerlink" title="2.3.2.2. 读（Read Through）"></a>2.3.2.2. 读（Read Through）</h6><p>● 从 cache 中读取数据，读取到就直接返回 。<br>● 读取不到的话，先从 db 加载，写入到 cache 后返回响应。</p><img src="/2024/04/02/Redis%E5%AD%A6%E4%B9%A03%E2%80%94Redis%E5%BA%94%E7%94%A8%E4%B9%8B%E7%BC%93%E5%AD%98/10.png" class=""><h6 id="2-3-2-3-缺陷"><a href="#2-3-2-3-缺陷" class="headerlink" title="2.3.2.3. 缺陷"></a>2.3.2.3. 缺陷</h6><ol><li>实现困难，如Redis并没有提供cache将数据写入db的功能</li><li>和Cache Aside Pattern一样，首次请求数据一定不在cache中</li></ol><h5 id="2-3-3-Write-Behind-Pattern（异步缓存写入）"><a href="#2-3-3-Write-Behind-Pattern（异步缓存写入）" class="headerlink" title="2.3.3. Write Behind Pattern（异步缓存写入）"></a>2.3.3. Write Behind Pattern（异步缓存写入）</h5><p>与Read&#x2F;Write Through Pattern相似，都是由cache服务来负责cache和db的读写，但是，Read&#x2F;Write Through是同步更新cache和db，而Write Behind是只更新缓存，不直接更新db，改为异步批量的方式，更新db。<br>这种方式对数据一致性带来了更大的挑战，比如 cache 数据可能还没异步更新 db 的话，cache 服务可能就就挂掉了。这种策略在我们平时开发过程中也非常非常少见，但是不代表它的应用场景少，比如消息队列中消息的异步写入磁盘、MySQL 的 Innodb Buffer Pool 机制都用到了这种策略。<br>Write Behind Pattern 下 db 的写性能非常高，非常适合一些数据经常变化又对数据一致性要求没那么高的场景，比如浏览量、点赞量。</p><h3 id="3-缓存常见的问题"><a href="#3-缓存常见的问题" class="headerlink" title="3. 缓存常见的问题"></a>3. 缓存常见的问题</h3><h4 id="3-1-缓存雪崩"><a href="#3-1-缓存雪崩" class="headerlink" title="3.1. 缓存雪崩"></a>3.1. 缓存雪崩</h4><p>缓存雪崩，指缓存在同一时间大面积的生效（比如缓存数据过期），导致大量的请求都直接落到数据库上，给数据库造成了巨大的压力。此外，如果缓存服务器宕机也会导致缓存雪崩现象，导致所有的请求都落到了数据库上。</p><img src="/2024/04/02/Redis%E5%AD%A6%E4%B9%A03%E2%80%94Redis%E5%BA%94%E7%94%A8%E4%B9%8B%E7%BC%93%E5%AD%98/11.png" class=""><p>解决方法有：</p><ol><li>采用Redis集群，避免单机出现问题导致整个缓存服务器无法使用。</li><li>限流，避免同时处理大量请求。</li><li>多级缓存，比如本地缓存+Redis缓存的组合，当Redis缓存出现问题时，可以从本地缓存中获取部分数据。</li><li>设置不同的生效时间比如随机设置缓存的失效时间。</li><li>缓存永不生效。</li><li>缓存预热，在程序启动后或运行过程中，主动将热点数据加载到缓存中。</li></ol><h4 id="3-2-缓存穿透"><a href="#3-2-缓存穿透" class="headerlink" title="3.2. 缓存穿透"></a>3.2. 缓存穿透</h4><p>缓存穿透指大量请求的key是不合理的，根本不存在与缓存和数据库中，这就导致这些请求直接到了数据库，给数据库造成巨大压力。比如黑客故意制造一些非法的key发起大量请求，导致大量请求落到数据库，结果数据库上也没有查到对应的数据。</p><img src="/2024/04/02/Redis%E5%AD%A6%E4%B9%A03%E2%80%94Redis%E5%BA%94%E7%94%A8%E4%B9%8B%E7%BC%93%E5%AD%98/12.png" class=""><p>解决方法：</p><ol><li>参数校验：对不合法的参数请求，直接抛出异常信息给客户端，比如查询的数据库id不能为0，手机格式不正确等。</li><li>缓存无效key：将这些无效的key设置到缓存中，并设置一个较短的过期时间。这种方法可以解决请求的key变化不频繁的情况。</li><li>接口限流。</li><li>布隆过滤器：通过布隆过滤器判断一个给定数据是否存在于海量数据中。具体做法是：把所有可能存在的请求的值都存放在布隆过滤器中，当用户请求过来，先判断用户发来的请求的值是否存在于布隆过滤器中。不存在的话，直接返回请求参数错误信息给客户端，存在的话才会走下面的流程。<img src="/2024/04/02/Redis%E5%AD%A6%E4%B9%A03%E2%80%94Redis%E5%BA%94%E7%94%A8%E4%B9%8B%E7%BC%93%E5%AD%98/13.png" class=""></li></ol><h4 id="3-3-缓存击穿"><a href="#3-3-缓存击穿" class="headerlink" title="3.3. 缓存击穿"></a>3.3. 缓存击穿</h4><p>缓存击穿，指请求的key对应的是热点数据，该数据存在于数据库中，但是不存在于缓存中（通常是因为缓存中的数据已经过期），这就会导致瞬时大量请求直接打到了数据库上，对数据库造成巨大压力。比如秒杀进行过程中，缓存中的某个秒杀商品数据过期，导致瞬时大量对该商品的请求直接落到数据库上，对数据库造成巨大压力。</p><img src="/2024/04/02/Redis%E5%AD%A6%E4%B9%A03%E2%80%94Redis%E5%BA%94%E7%94%A8%E4%B9%8B%E7%BC%93%E5%AD%98/14.png" class=""><p>解决方法：</p><ol><li>设置热点数据永不过期或过期时间较长。</li><li>针对热点数据提取预热，将其存入缓存中并设置合理的过期时间。</li><li>请求数据库写数据到缓存之前，先获取互斥锁，保证只有一个请求会落到数据库上，减少数据库的压力。</li></ol><h3 id="4-SpringBoot整合Redis实现缓存"><a href="#4-SpringBoot整合Redis实现缓存" class="headerlink" title="4. SpringBoot整合Redis实现缓存"></a>4. SpringBoot整合Redis实现缓存</h3><h4 id="4-1-准备数据库数据"><a href="#4-1-准备数据库数据" class="headerlink" title="4.1. 准备数据库数据"></a>4.1. 准备数据库数据</h4><p>首先我们创建一个t_user表，并插入几条数据，用于后续的查询：</p><img src="/2024/04/02/Redis%E5%AD%A6%E4%B9%A03%E2%80%94Redis%E5%BA%94%E7%94%A8%E4%B9%8B%E7%BC%93%E5%AD%98/15.png" class=""><h4 id="4-2-读缓存"><a href="#4-2-读缓存" class="headerlink" title="4.2. 读缓存"></a>4.2. 读缓存</h4><p>创建User类和对应的UserMapper</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@TableName(value = &quot;t_user&quot;)</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br>    <span class="hljs-meta">@TableId(type = IdType.AUTO)</span><br>    <span class="hljs-keyword">private</span> Integer id;<br><br>    <span class="hljs-keyword">private</span> String username;<br><br>    <span class="hljs-keyword">private</span> String password;<br>&#125;<br><br><span class="hljs-meta">@Mapper</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserMapper</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BaseMapper</span>&lt;User&gt; &#123;<br>&#125;<br></code></pre></td></tr></table></figure><p>UserService</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserService</span> &#123;<br>    <span class="hljs-comment">// 过期时间</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">long</span> <span class="hljs-variable">ttl</span> <span class="hljs-operator">=</span> <span class="hljs-number">100L</span>;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> UserMapper userMapper;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> RedisUtils redisUtils;<br><br>    <span class="hljs-keyword">public</span> User <span class="hljs-title function_">getUserById</span><span class="hljs-params">(Integer id)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;user:&quot;</span> + id;<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> redisUtils.getKey(key);<br>        <span class="hljs-keyword">if</span> (value != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-comment">// 缓存中存在该数据</span><br>            <span class="hljs-keyword">return</span> (User) value;<br>        &#125;<br><br>        <span class="hljs-comment">// 缓存中不存在该数据, 从数据库中查询</span><br>        <span class="hljs-type">User</span> <span class="hljs-variable">userFromDB</span> <span class="hljs-operator">=</span> getUserFromDB(id);<br>        <span class="hljs-keyword">if</span> (userFromDB == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br>        redisUtils.addKey(key, userFromDB, ttl);<br>        <span class="hljs-keyword">return</span> userFromDB;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> User <span class="hljs-title function_">getUserFromDB</span><span class="hljs-params">(Integer id)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;从数据库中查询====================&quot;</span>);<br>        <span class="hljs-keyword">return</span> userMapper.selectById(id);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>添加一个测试方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example;<br><br><span class="hljs-keyword">import</span> org.example.pojo.User;<br><span class="hljs-keyword">import</span> org.example.service.UserService;<br><span class="hljs-keyword">import</span> org.junit.jupiter.api.Test;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.boot.test.context.SpringBootTest;<br><br><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RedisCacheTest</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> UserService userService;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testGetUserById</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">User</span> <span class="hljs-variable">userById</span> <span class="hljs-operator">=</span> userService.getUserById(<span class="hljs-number">1</span>);<br>        System.out.println(userById);<br><br>        userById = userService.getUserById(<span class="hljs-number">1</span>);<br>        System.out.println(userById);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>执行测试方法，结果如下：</p><img src="/2024/04/02/Redis%E5%AD%A6%E4%B9%A03%E2%80%94Redis%E5%BA%94%E7%94%A8%E4%B9%8B%E7%BC%93%E5%AD%98/16.png" class=""><p>从上述内容中，可以看出，第一次查询时，因为数据不存在于缓存中，所以会查询数据库，第二次查询时，从缓存中查询到数据，直接返回。<br>但是这里涉及到一个序列化的问题，我们通过下载一些redis桌面可视化工具，查看这些数据，发现这些key和value都有一些奇怪的编码，如下图所示：</p><img src="/2024/04/02/Redis%E5%AD%A6%E4%B9%A03%E2%80%94Redis%E5%BA%94%E7%94%A8%E4%B9%8B%E7%BC%93%E5%AD%98/17.png" class=""><p>这是因为，默认情况下，redisTemplate使用JDK的序列化器(JdkSerializationRedisSerializer)对存储的对象进行序列哈和反序列化操作，这可能导致序列化结果不可读或占用较多的存储空间。因此，我们需要在配置redisTemplate的时候，设置对应的序列化器，我们修改上一章的RedisConfiguration类，修改结果如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example.config;<br><br><span class="hljs-keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><span class="hljs-keyword">import</span> org.springframework.data.redis.connection.RedisConnectionFactory;<br><span class="hljs-keyword">import</span> org.springframework.data.redis.core.RedisTemplate;<br><span class="hljs-keyword">import</span> org.springframework.data.redis.serializer.Jackson2JsonRedisSerializer;<br><span class="hljs-keyword">import</span> org.springframework.data.redis.serializer.StringRedisSerializer;<br><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RedisConfiguration</span> &#123;<br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> RedisTemplate&lt;String, Object&gt; <span class="hljs-title function_">redisTemplate</span><span class="hljs-params">(RedisConnectionFactory redisConnectionFactory)</span> &#123;<br>        RedisTemplate&lt;String, Object&gt; redisTemplate = <span class="hljs-keyword">new</span> <span class="hljs-title class_">RedisTemplate</span>&lt;&gt;();<br>        redisTemplate.setConnectionFactory(redisConnectionFactory);<br><br>        <span class="hljs-type">StringRedisSerializer</span> <span class="hljs-variable">stringRedisSerializer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringRedisSerializer</span>();<br>        <span class="hljs-type">Jackson2JsonRedisSerializer</span> <span class="hljs-variable">jackson2JsonRedisSerializer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Jackson2JsonRedisSerializer</span>(Object.class);<br>        <span class="hljs-type">ObjectMapper</span> <span class="hljs-variable">objectMapper</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectMapper</span>().enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);<br>        jackson2JsonRedisSerializer.setObjectMapper(objectMapper);<br><br>        <span class="hljs-comment">// 设置key的序列化器为StringRedisSerializer</span><br>        redisTemplate.setKeySerializer(stringRedisSerializer);<br>        <span class="hljs-comment">// 设置value的序列化器为Jackson2JsonRedisSerializer</span><br>        redisTemplate.setValueSerializer(jackson2JsonRedisSerializer);<br><br>        <span class="hljs-comment">// 设置hash key的序列化器为StringRedisSerializer</span><br>        redisTemplate.setHashKeySerializer(stringRedisSerializer);<br>        <span class="hljs-comment">// 设置hash value的序列化器为Jackson2JsonRedisSerializer</span><br>        redisTemplate.setHashValueSerializer(jackson2JsonRedisSerializer);<br><br>        <span class="hljs-comment">// 完成其他配置后，初始化RedisTemplate</span><br>        redisTemplate.afterPropertiesSet();<br>        <span class="hljs-keyword">return</span> redisTemplate;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>我们将之前那些key全部删除掉，然后重新运行测试代码，结果如下：</p><img src="/2024/04/02/Redis%E5%AD%A6%E4%B9%A03%E2%80%94Redis%E5%BA%94%E7%94%A8%E4%B9%8B%E7%BC%93%E5%AD%98/18.png" class=""><p>通过redis可视化工具，也能清楚地看到每个key和value的结构和信息。</p><img src="/2024/04/02/Redis%E5%AD%A6%E4%B9%A03%E2%80%94Redis%E5%BA%94%E7%94%A8%E4%B9%8B%E7%BC%93%E5%AD%98/19.png" class=""><p>上面的代码，存在一些问题，当请求1查询id&#x3D;1的用户，从缓存中查询不到时，会查询数据库，然后将数据更新到数据库，然后请求2查询id&#x3D;1的用户，从缓存中查询到，便直接返回，这是理想的情况。但是，可能请求1查询数据库还没执行完，请求2过来了，此时缓存中没有id&#x3D;1的用户，因此请求2也会去查询数据库。<br>比如我们修改getUserFromDB，加上Thread.sleep(2000)，模拟数据库的查询较慢，然后修改测试代码，模拟多个请求同时查询id&#x3D;1的用户的情况：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br> <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testGetUserById</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> ExecutionException, InterruptedException &#123;<br>     <span class="hljs-type">ExecutorService</span> <span class="hljs-variable">executorService</span> <span class="hljs-operator">=</span> Executors.newFixedThreadPool(<span class="hljs-number">2</span>);<br>     Callable&lt;User&gt; getUserTask = () -&gt; userService.getUserById(<span class="hljs-number">1</span>);<br><br>     Future&lt;User&gt; submit1 = executorService.submit(getUserTask);<br>     Future&lt;User&gt; submit2 = executorService.submit(getUserTask);<br>     System.out.println(submit1.get());<br>     System.out.println(submit2.get());<br> &#125;<br></code></pre></td></tr></table></figure><p>此时再次执行测试代码，结果如下：</p><img src="/2024/04/02/Redis%E5%AD%A6%E4%B9%A03%E2%80%94Redis%E5%BA%94%E7%94%A8%E4%B9%8B%E7%BC%93%E5%AD%98/20.png" class=""><p>解决上面的情况，方式就是加锁，我们修改UserService的代码如下,这里通过synchronized加锁，然后锁的对象使用key，这样可以将锁的粒度缩小一点。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> User <span class="hljs-title function_">getUserById</span><span class="hljs-params">(Integer id)</span> &#123;<br>       <span class="hljs-type">String</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;user:&quot;</span> + id;<br>       <span class="hljs-type">Object</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> redisUtils.getKey(key);<br>       <span class="hljs-keyword">if</span> (value != <span class="hljs-literal">null</span>) &#123;<br>           <span class="hljs-comment">// 缓存中存在该数据</span><br>           <span class="hljs-keyword">return</span> (User) value;<br>       &#125;<br><br>       <span class="hljs-type">User</span> <span class="hljs-variable">userFromDB</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>       <span class="hljs-keyword">synchronized</span> (key.intern()) &#123;<br>           <span class="hljs-comment">// 再次查询缓存</span><br>           value = redisUtils.getKey(key);<br>           <span class="hljs-keyword">if</span> (value != <span class="hljs-literal">null</span>) &#123;<br>               <span class="hljs-keyword">return</span> (User) value;<br>           &#125;<br><br>           <span class="hljs-comment">// 缓存中不存在该数据, 从数据库中查询</span><br>           userFromDB = getUserFromDB(id);<br>           <span class="hljs-keyword">if</span> (userFromDB == <span class="hljs-literal">null</span>) &#123;<br>               <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>           &#125;<br>           redisUtils.addKey(key, userFromDB, ttl);<br>       &#125;<br>       <span class="hljs-keyword">return</span> userFromDB;<br>   &#125;<br><br>   <span class="hljs-keyword">private</span> User <span class="hljs-title function_">getUserFromDB</span><span class="hljs-params">(Integer id)</span> &#123;<br>       <span class="hljs-keyword">try</span> &#123;<br>           Thread.sleep(<span class="hljs-number">2000</span>);<br>       &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>           e.printStackTrace();<br>       &#125;<br>       System.out.println(<span class="hljs-string">&quot;从数据库中查询====================&quot;</span>);<br>       <span class="hljs-keyword">return</span> userMapper.selectById(id);<br>   &#125;<br></code></pre></td></tr></table></figure><p>重新运行测试方法，结果如下：</p><img src="/2024/04/02/Redis%E5%AD%A6%E4%B9%A03%E2%80%94Redis%E5%BA%94%E7%94%A8%E4%B9%8B%E7%BC%93%E5%AD%98/21.png" class=""><p>通过加锁，可以解决被访问多次的情况，但是这样的锁有一个问题，这个锁，只适用于单机的情况，当我们的服务部署在多台服务器上时，这些服务器上的应用，对应的JVM都不同，因此锁住的，不是同一个对象，后续会单独对分布式锁进行讲解，这里先不予讨论。</p><h4 id="4-3-更新缓存"><a href="#4-3-更新缓存" class="headerlink" title="4.3. 更新缓存"></a>4.3. 更新缓存</h4><p>修改userService，添加修改用户的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">updateUser</span><span class="hljs-params">(UpdateUserRequest updateUserRequest)</span> &#123;<br>       <span class="hljs-keyword">if</span> (updateUserRequest.getId() == <span class="hljs-literal">null</span>) &#123;<br>           <span class="hljs-keyword">return</span>;<br>       &#125;<br>       <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> getUserById(updateUserRequest.getId());<br>       <span class="hljs-keyword">if</span> (user == <span class="hljs-literal">null</span>) &#123;<br>           <span class="hljs-keyword">return</span>;<br>       &#125;<br>       <span class="hljs-keyword">if</span> (StringUtils.isNotEmpty(updateUserRequest.getUsername())) &#123;<br>           user.setUsername(updateUserRequest.getUsername());<br>       &#125;<br>       <span class="hljs-keyword">if</span> (StringUtils.isNotEmpty(updateUserRequest.getPassword())) &#123;<br>           user.setPassword(updateUserRequest.getPassword());<br>       &#125;<br>       <span class="hljs-comment">// 先更新数据库</span><br>       <span class="hljs-type">int</span> <span class="hljs-variable">updateResult</span> <span class="hljs-operator">=</span> userMapper.updateById(user);<br>       <span class="hljs-keyword">if</span> (updateResult == <span class="hljs-number">1</span>) &#123;<br>           <span class="hljs-comment">// 更新成功，删除缓存</span><br>           redisUtils.removeKey(<span class="hljs-string">&quot;user:&quot;</span> + updateUserRequest.getId());<br>       &#125;<br>   &#125;<br></code></pre></td></tr></table></figure><p>添加测试方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testUpdateUser</span><span class="hljs-params">()</span> &#123;<br>       <span class="hljs-type">UpdateUserRequest</span> <span class="hljs-variable">updateUserRequest</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UpdateUserRequest</span>();<br>       updateUserRequest.setId(<span class="hljs-number">1</span>);<br>       updateUserRequest.setPassword(<span class="hljs-string">&quot;12345&quot;</span>);<br>       userService.updateUser(updateUserRequest);<br><br>       <span class="hljs-type">User</span> <span class="hljs-variable">userById</span> <span class="hljs-operator">=</span> userService.getUserById(<span class="hljs-number">1</span>);<br>       System.out.println(userById);<br>   &#125;<br></code></pre></td></tr></table></figure><p>测试结果如下</p><img src="/2024/04/02/Redis%E5%AD%A6%E4%B9%A03%E2%80%94Redis%E5%BA%94%E7%94%A8%E4%B9%8B%E7%BC%93%E5%AD%98/22.png" class=""><h3 id="5-SpringBoot整合SpringCache-Redis"><a href="#5-SpringBoot整合SpringCache-Redis" class="headerlink" title="5. SpringBoot整合SpringCache+Redis"></a>5. SpringBoot整合SpringCache+Redis</h3><p>在上面的代码中，我们发现，和Redis查询的操作，和我们的业务代码糅合在一起， 不方便进行处理，如果后续我们缓存服务器从Redis改为其他缓存服务器，需要修改多处代码，不利于项目的扩展和维护。<br>SpringCache框架是Spring框架提供的一套基于注解的缓存解决方案，在应用程序中简化了缓存操作的管理和使用。它通过在方法上添加缓存注解，来实现自动缓存的功能，其常用注解有：<br>1）@Cacheable: 表示该方法返回结果可以被缓存，当方法被调用时，先检查缓存，如果缓存命中，直接返回缓存中的结果，不再执行方法体中的逻辑。<br>2） @CachePut：表示该方法的返回结果需要更新缓存，每次方法被调用后，都会将返回结果更新到缓存中。<br>3）@CacheEvit：表示该方法会清除缓存中的数据，可以用于在更新或删除数据时清除相应的缓存。</p><h4 id="5-1-整合SpringCache"><a href="#5-1-整合SpringCache" class="headerlink" title="5.1. 整合SpringCache"></a>5.1. 整合SpringCache</h4><p>添加Spring Cache的依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-cache<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>在启动类上加上注解开启缓存</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-meta">@EnableCaching</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RedisApp</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        SpringApplication.run(RedisApp.class, args);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="5-2-测试Cacheable和CacheEvict"><a href="#5-2-测试Cacheable和CacheEvict" class="headerlink" title="5.2. 测试Cacheable和CacheEvict"></a>5.2. 测试Cacheable和CacheEvict</h4><p>我们在userService类上，加上两个方法，用于测试Cacheable和CacheEvit注解。<br>添加getUserById2方法，该方法中的逻辑为查询数据库操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Cacheable(value = &quot;user&quot;, key = &quot;#id&quot;)</span><br>  <span class="hljs-keyword">public</span> User <span class="hljs-title function_">getUserById2</span><span class="hljs-params">(Integer id)</span> &#123;<br>      System.out.println(<span class="hljs-string">&quot;从数据库中查询==============&quot;</span>);<br>      <span class="hljs-keyword">return</span> userMapper.selectById(id);<br>  &#125;<br></code></pre></td></tr></table></figure><p>然后添加一个测试方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Autowired</span><br>   <span class="hljs-keyword">private</span> UserService userService;<br><br>   <span class="hljs-meta">@Test</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testGetUserById</span><span class="hljs-params">()</span> &#123;<br>       System.out.println(userService.getUserById2(<span class="hljs-number">1</span>));<br>       System.out.println(userService.getUserById2(<span class="hljs-number">1</span>));<br>   &#125;<br></code></pre></td></tr></table></figure><p>测试结果如下，第一次查询时，查询数据库，第二次直接查询缓存。</p><img src="/2024/04/02/Redis%E5%AD%A6%E4%B9%A03%E2%80%94Redis%E5%BA%94%E7%94%A8%E4%B9%8B%E7%BC%93%E5%AD%98/23.png" class=""><p>然后我们查看reids缓存，发现这个key的值是user::1，这个和我们之前定义的不太相同，而且没有过期时间，除此之外，这个value的值，序列化有问题</p><img src="/2024/04/02/Redis%E5%AD%A6%E4%B9%A03%E2%80%94Redis%E5%BA%94%E7%94%A8%E4%B9%8B%E7%BC%93%E5%AD%98/24.png" class=""><p>我们修改RedisConfiguration，添加RedisCacheConfiguration的相关配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example.config;<br><br><span class="hljs-keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><span class="hljs-keyword">import</span> org.springframework.data.redis.cache.RedisCacheConfiguration;<br><span class="hljs-keyword">import</span> org.springframework.data.redis.connection.RedisConnectionFactory;<br><span class="hljs-keyword">import</span> org.springframework.data.redis.core.RedisTemplate;<br><span class="hljs-keyword">import</span> org.springframework.data.redis.serializer.Jackson2JsonRedisSerializer;<br><span class="hljs-keyword">import</span> org.springframework.data.redis.serializer.RedisSerializationContext;<br><span class="hljs-keyword">import</span> org.springframework.data.redis.serializer.StringRedisSerializer;<br><br><span class="hljs-keyword">import</span> java.time.Duration;<br><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RedisConfiguration</span> &#123;<br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> RedisTemplate&lt;String, Object&gt; <span class="hljs-title function_">redisTemplate</span><span class="hljs-params">(RedisConnectionFactory redisConnectionFactory)</span> &#123;<br>        RedisTemplate&lt;String, Object&gt; redisTemplate = <span class="hljs-keyword">new</span> <span class="hljs-title class_">RedisTemplate</span>&lt;&gt;();<br>        redisTemplate.setConnectionFactory(redisConnectionFactory);<br><br>        <span class="hljs-type">StringRedisSerializer</span> <span class="hljs-variable">stringRedisSerializer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringRedisSerializer</span>();<br>        <span class="hljs-type">Jackson2JsonRedisSerializer</span> <span class="hljs-variable">jackson2JsonRedisSerializer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Jackson2JsonRedisSerializer</span>(Object.class);<br>        <span class="hljs-type">ObjectMapper</span> <span class="hljs-variable">objectMapper</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectMapper</span>().enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);<br>        jackson2JsonRedisSerializer.setObjectMapper(objectMapper);<br><br>        <span class="hljs-comment">// 设置key的序列化器为StringRedisSerializer</span><br>        redisTemplate.setKeySerializer(stringRedisSerializer);<br>        <span class="hljs-comment">// 设置value的序列化器为Jackson2JsonRedisSerializer</span><br>        redisTemplate.setValueSerializer(jackson2JsonRedisSerializer);<br><br>        <span class="hljs-comment">// 设置hash key的序列化器为StringRedisSerializer</span><br>        redisTemplate.setHashKeySerializer(stringRedisSerializer);<br>        <span class="hljs-comment">// 设置hash value的序列化器为Jackson2JsonRedisSerializer</span><br>        redisTemplate.setHashValueSerializer(jackson2JsonRedisSerializer);<br><br>        <span class="hljs-comment">// 完成其他配置后，初始化RedisTemplate</span><br>        redisTemplate.afterPropertiesSet();<br>        <span class="hljs-keyword">return</span> redisTemplate;<br>    &#125;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> RedisCacheConfiguration <span class="hljs-title function_">redisCacheConfiguration</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">Jackson2JsonRedisSerializer</span> <span class="hljs-variable">jackson2JsonRedisSerializer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Jackson2JsonRedisSerializer</span>(Object.class);<br>        <span class="hljs-type">ObjectMapper</span> <span class="hljs-variable">objectMapper</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectMapper</span>().enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);<br>        jackson2JsonRedisSerializer.setObjectMapper(objectMapper);<br><br>        <span class="hljs-comment">//相当于new了一个RedisCacheConfiguration</span><br>        <span class="hljs-type">RedisCacheConfiguration</span>  <span class="hljs-variable">configuration</span> <span class="hljs-operator">=</span> RedisCacheConfiguration.defaultCacheConfig();<br>        configuration = configuration.serializeValuesWith<br>                <span class="hljs-comment">// 指定value序列化器</span><br>                        (RedisSerializationContext.SerializationPair.fromSerializer(jackson2JsonRedisSerializer))<br>                <span class="hljs-comment">// 指定 key的TTL</span><br>                .entryTtl(Duration.ofSeconds(<span class="hljs-number">100</span>))<br>                <span class="hljs-comment">// 指定前缀</span><br>                .prefixCacheNameWith(<span class="hljs-string">&quot;user::&quot;</span>);<br>        <span class="hljs-keyword">return</span> configuration;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>删除原先的缓存，然后重新运行测试代码，然后查看缓存信息，结果如下：</p><img src="/2024/04/02/Redis%E5%AD%A6%E4%B9%A03%E2%80%94Redis%E5%BA%94%E7%94%A8%E4%B9%8B%E7%BC%93%E5%AD%98/25.png" class=""><p>此时过期时间和序列化均设置成功。但这样配置还有一些问题，通过这种全局配置，所有cache key的TTL都一样，实际开发中，不同的cache key可能需要的TTL都不同，我们修改RedisConfiguration，为不同的key配置上不同的过期时间</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example.config;<br><br><span class="hljs-keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;<br><span class="hljs-keyword">import</span> org.springframework.boot.autoconfigure.cache.RedisCacheManagerBuilderCustomizer;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><span class="hljs-keyword">import</span> org.springframework.data.redis.cache.RedisCacheConfiguration;<br><span class="hljs-keyword">import</span> org.springframework.data.redis.connection.RedisConnectionFactory;<br><span class="hljs-keyword">import</span> org.springframework.data.redis.core.RedisTemplate;<br><span class="hljs-keyword">import</span> org.springframework.data.redis.serializer.Jackson2JsonRedisSerializer;<br><span class="hljs-keyword">import</span> org.springframework.data.redis.serializer.RedisSerializationContext;<br><span class="hljs-keyword">import</span> org.springframework.data.redis.serializer.StringRedisSerializer;<br><br><span class="hljs-keyword">import</span> java.time.Duration;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RedisConfiguration</span> &#123;<br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> RedisTemplate&lt;String, Object&gt; <span class="hljs-title function_">redisTemplate</span><span class="hljs-params">(RedisConnectionFactory redisConnectionFactory)</span> &#123;<br>        RedisTemplate&lt;String, Object&gt; redisTemplate = <span class="hljs-keyword">new</span> <span class="hljs-title class_">RedisTemplate</span>&lt;&gt;();<br>        redisTemplate.setConnectionFactory(redisConnectionFactory);<br><br>        <span class="hljs-type">StringRedisSerializer</span> <span class="hljs-variable">stringRedisSerializer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringRedisSerializer</span>();<br>        <span class="hljs-type">Jackson2JsonRedisSerializer</span> <span class="hljs-variable">jackson2JsonRedisSerializer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Jackson2JsonRedisSerializer</span>(Object.class);<br>        <span class="hljs-type">ObjectMapper</span> <span class="hljs-variable">objectMapper</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectMapper</span>().enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);<br>        jackson2JsonRedisSerializer.setObjectMapper(objectMapper);<br><br>        <span class="hljs-comment">// 设置key的序列化器为StringRedisSerializer</span><br>        redisTemplate.setKeySerializer(stringRedisSerializer);<br>        <span class="hljs-comment">// 设置value的序列化器为Jackson2JsonRedisSerializer</span><br>        redisTemplate.setValueSerializer(jackson2JsonRedisSerializer);<br><br>        <span class="hljs-comment">// 设置hash key的序列化器为StringRedisSerializer</span><br>        redisTemplate.setHashKeySerializer(stringRedisSerializer);<br>        <span class="hljs-comment">// 设置hash value的序列化器为Jackson2JsonRedisSerializer</span><br>        redisTemplate.setHashValueSerializer(jackson2JsonRedisSerializer);<br><br>        <span class="hljs-comment">// 完成其他配置后，初始化RedisTemplate</span><br>        redisTemplate.afterPropertiesSet();<br>        <span class="hljs-keyword">return</span> redisTemplate;<br>    &#125;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> RedisCacheManagerBuilderCustomizer <span class="hljs-title function_">redisCacheManagerBuilderCustomizer</span><span class="hljs-params">()</span> &#123;<br>        Jackson2JsonRedisSerializer&lt;Object&gt; jackson2JsonRedisSerializer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Jackson2JsonRedisSerializer</span>&lt;&gt;(Object.class);<br>        <span class="hljs-type">ObjectMapper</span> <span class="hljs-variable">objectMapper</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectMapper</span>().enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);<br>        jackson2JsonRedisSerializer.setObjectMapper(objectMapper);<br><br>        <span class="hljs-keyword">return</span> (builder) -&gt; &#123;<br>            Map&lt;String, RedisCacheConfiguration&gt; cacheConfigurations = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br><br>            cacheConfigurations.put(<span class="hljs-string">&quot;user&quot;</span>,<br>                    RedisCacheConfiguration.defaultCacheConfig()<br>                            .entryTtl(Duration.ofSeconds(<span class="hljs-number">60</span>))<br>                            .serializeValuesWith(RedisSerializationContext.SerializationPair.fromSerializer(jackson2JsonRedisSerializer)));<br><br>            cacheConfigurations.put(<span class="hljs-string">&quot;product&quot;</span>,<br>                    RedisCacheConfiguration.defaultCacheConfig()<br>                            .entryTtl(Duration.ofSeconds(<span class="hljs-number">120</span>))<br>                            .serializeValuesWith(RedisSerializationContext.SerializationPair.fromSerializer(jackson2JsonRedisSerializer)));<br><br>            builder.withInitialCacheConfigurations(cacheConfigurations);<br>        &#125;;<br>    &#125;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果如下：</p><img src="/2024/04/02/Redis%E5%AD%A6%E4%B9%A03%E2%80%94Redis%E5%BA%94%E7%94%A8%E4%B9%8B%E7%BC%93%E5%AD%98/26.png" class=""><p>接着，我们测试CacheEvict，首先在userService中添加一个更新方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@CacheEvict(value = &quot;user&quot;, key = &quot;#updateUserRequest.id&quot;)</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">updateUser2</span><span class="hljs-params">(UpdateUserRequest updateUserRequest)</span> &#123;<br>      <span class="hljs-keyword">if</span> (updateUserRequest.getId() == <span class="hljs-literal">null</span>) &#123;<br>          <span class="hljs-keyword">return</span>;<br>      &#125;<br>      <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> getUserById2(updateUserRequest.getId());<br>      <span class="hljs-keyword">if</span> (user == <span class="hljs-literal">null</span>) &#123;<br>          <span class="hljs-keyword">return</span>;<br>      &#125;<br>      <span class="hljs-keyword">if</span> (StringUtils.isNotEmpty(updateUserRequest.getUsername())) &#123;<br>          user.setUsername(updateUserRequest.getUsername());<br>      &#125;<br>      <span class="hljs-keyword">if</span> (StringUtils.isNotEmpty(updateUserRequest.getPassword())) &#123;<br>          user.setPassword(updateUserRequest.getPassword());<br>      &#125;<br>      <span class="hljs-comment">// 先更新数据库</span><br>      userMapper.updateById(user);<br>  &#125;<br></code></pre></td></tr></table></figure><p>然后添加测试方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testUpdateUser</span><span class="hljs-params">()</span> &#123;<br>       <span class="hljs-type">UpdateUserRequest</span> <span class="hljs-variable">updateUserRequest</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UpdateUserRequest</span>();<br>       updateUserRequest.setId(<span class="hljs-number">1</span>);<br>       updateUserRequest.setPassword(<span class="hljs-string">&quot;123456&quot;</span>);<br>       userService.updateUser2(updateUserRequest);<br>   &#125;<br></code></pre></td></tr></table></figure><p>运行该测试方法，然后去看对应的redis缓存，发现更新成功后，该缓存被删除掉，说明CacheEvict生效</p><img src="/2024/04/02/Redis%E5%AD%A6%E4%B9%A03%E2%80%94Redis%E5%BA%94%E7%94%A8%E4%B9%8B%E7%BC%93%E5%AD%98/27.png" class="">]]></content>
    
    
    
    <tags>
      
      <tag>中间件</tag>
      
      <tag>Redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Redis学习2—SpringBoot整合Redis、Redis工具类</title>
    <link href="/2024/04/02/Redis%E5%AD%A6%E4%B9%A02%E2%80%94SpringBoot%E6%95%B4%E5%90%88Redis%E3%80%81Redis%E5%B7%A5%E5%85%B7%E7%B1%BB/"/>
    <url>/2024/04/02/Redis%E5%AD%A6%E4%B9%A02%E2%80%94SpringBoot%E6%95%B4%E5%90%88Redis%E3%80%81Redis%E5%B7%A5%E5%85%B7%E7%B1%BB/</url>
    
    <content type="html"><![CDATA[<h3 id="1-依赖和配置"><a href="#1-依赖和配置" class="headerlink" title="1. 依赖和配置"></a>1. 依赖和配置</h3><h4 id="1-1-pom-xml"><a href="#1-1-pom-xml" class="headerlink" title="1.1. pom.xml"></a>1.1. pom.xml</h4><p>SpringBoot整合Redis，需要引入spring-boot-starter-data-redis依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>当我们需要配置redis的连接池时，还需要引入commons-pool2依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.commons<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>commons-pool2<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>application.yml配置</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">redis:</span><br>    <span class="hljs-attr">host:</span> <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-number">6379</span><br>    <span class="hljs-attr">database:</span> <span class="hljs-number">0</span><br>    <span class="hljs-attr">jedis:</span><br>      <span class="hljs-attr">pool:</span><br>        <span class="hljs-attr">max-idle:</span> <span class="hljs-number">8</span><br>        <span class="hljs-attr">max-active:</span> <span class="hljs-number">8</span><br>        <span class="hljs-attr">min-idle:</span> <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><p>这里的jedis指的是使用jedis客户端，这里也可以将jedis改为lettuce，表示使用lettuce客户端，客户端下面的pool表示的是连接池的相关配置。<br>上述的配置针对的是单机redis配置，如果使用的是集群，配置如下：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">redis:</span><br>    <span class="hljs-attr">password:</span> <span class="hljs-number">123456</span><br>    <span class="hljs-attr">cluster:</span><br>      <span class="hljs-attr">nodes:</span> <span class="hljs-number">10.255</span><span class="hljs-number">.144</span><span class="hljs-number">.115</span><span class="hljs-string">:7001,10.255.144.115:7002,10.255.144.115:7003,10.255.144.115:7004,10.255.144.115:7005,10.255.144.115:7006</span><br>      <span class="hljs-attr">max-redirects:</span> <span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><h3 id="2-RedisTemplate"><a href="#2-RedisTemplate" class="headerlink" title="2. RedisTemplate"></a>2. RedisTemplate</h3><p>上述的配置完毕后，我们就可以在项目中操作redis了，操作的时候，可以直接使用spring-boot-starter-data-redis为我们提供的RedisTemplate这个类，也可以使用StringRedisTemplate，两者的方法基本一致，后者可以看作RedisTemplate&lt;String, String&gt; 。<br>在上一节中，提到，Redis有多种数据类型，比如string、list、hash、set、zset等，这些类型的操作在RedisTemplate分别对应opsForValue(), opsForList(), opsForHash(), opsForSet(), opsForZSet()。<br>具体的操作演示如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RedisAppTest</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> RedisTemplate&lt;String, String&gt; redisTemplate;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testGet</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;字符串操作=================&quot;</span>);<br>        redisTemplate.opsForValue().set(<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;cxy&quot;</span>);<br>        System.out.println(redisTemplate.opsForValue().get(<span class="hljs-string">&quot;name&quot;</span>));<br><br>        System.out.println(<span class="hljs-string">&quot;列表操作&quot;</span>);<br>        redisTemplate.opsForList().leftPush(<span class="hljs-string">&quot;school&quot;</span>, <span class="hljs-string">&quot;华南理工大学&quot;</span>);<br>        redisTemplate.opsForList().leftPush(<span class="hljs-string">&quot;school&quot;</span>, <span class="hljs-string">&quot;中山大学&quot;</span>);<br>        redisTemplate.opsForList().leftPush(<span class="hljs-string">&quot;school&quot;</span>, <span class="hljs-string">&quot;华南农业大学&quot;</span>);<br>        List&lt;String&gt; school = redisTemplate.opsForList().range(<span class="hljs-string">&quot;school&quot;</span>, <span class="hljs-number">0</span>, <span class="hljs-number">5</span>);<br>        <span class="hljs-keyword">for</span> (String s : school) &#123;<br>            System.out.print(s + <span class="hljs-string">&quot; &quot;</span>);<br>        &#125;<br>        System.out.println();<br><br>        System.out.println(<span class="hljs-string">&quot;hash操作&quot;</span>);<br>        redisTemplate.opsForHash().put(<span class="hljs-string">&quot;student&quot;</span>, <span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;cxy&quot;</span>);<br>        redisTemplate.opsForHash().put(<span class="hljs-string">&quot;student&quot;</span>, <span class="hljs-string">&quot;age&quot;</span>, <span class="hljs-string">&quot;21&quot;</span>);<br>        redisTemplate.opsForHash().put(<span class="hljs-string">&quot;student&quot;</span>, <span class="hljs-string">&quot;sex&quot;</span>, <span class="hljs-string">&quot;male&quot;</span>);<br>        System.out.println(redisTemplate.opsForHash().get(<span class="hljs-string">&quot;student&quot;</span>, <span class="hljs-string">&quot;name&quot;</span>));<br>        System.out.println(redisTemplate.opsForHash().get(<span class="hljs-string">&quot;student&quot;</span>, <span class="hljs-string">&quot;age&quot;</span>));<br>        System.out.println(redisTemplate.opsForHash().get(<span class="hljs-string">&quot;student&quot;</span>, <span class="hljs-string">&quot;sex&quot;</span>));<br><br>        System.out.println(<span class="hljs-string">&quot;set操作&quot;</span>);<br>        redisTemplate.opsForSet().add(<span class="hljs-string">&quot;project&quot;</span>, <span class="hljs-string">&quot;软件工程&quot;</span>, <span class="hljs-string">&quot;计算机技术&quot;</span>, <span class="hljs-string">&quot;通信工程&quot;</span>, <span class="hljs-string">&quot;软件工程&quot;</span>);<br>        Set&lt;String&gt; project = redisTemplate.opsForSet().members(<span class="hljs-string">&quot;project&quot;</span>);<br>        <span class="hljs-keyword">for</span> (String s : project) &#123;<br>            System.out.print(s + <span class="hljs-string">&quot; &quot;</span>);<br>        &#125;<br>        System.out.println();<br><br>        System.out.println(<span class="hljs-string">&quot;zset操作&quot;</span>);<br>        redisTemplate.opsForZSet().add(<span class="hljs-string">&quot;movie&quot;</span>, <span class="hljs-string">&quot;热辣滚烫&quot;</span>, <span class="hljs-number">2.7d</span>);<br>        redisTemplate.opsForZSet().add(<span class="hljs-string">&quot;movie&quot;</span>, <span class="hljs-string">&quot;飞驰人生&quot;</span>, <span class="hljs-number">9.1d</span>);<br>        redisTemplate.opsForZSet().add(<span class="hljs-string">&quot;movie&quot;</span>, <span class="hljs-string">&quot;熊出没之逆转时空&quot;</span>, <span class="hljs-number">9.3d</span>);<br>        redisTemplate.opsForZSet().add(<span class="hljs-string">&quot;movie&quot;</span>, <span class="hljs-string">&quot;二十一条&quot;</span>, <span class="hljs-number">8.2d</span>);<br>        Set&lt;String&gt; movie = redisTemplate.opsForZSet().rangeByScore(<span class="hljs-string">&quot;movie&quot;</span>, <span class="hljs-number">3.0d</span>, <span class="hljs-number">9.3d</span>);<br>        <span class="hljs-keyword">for</span> (String s : movie) &#123;<br>            System.out.print(s + <span class="hljs-string">&quot; &quot;</span>);<br>        &#125;<br>        System.out.println();<br><br>        System.out.println(<span class="hljs-string">&quot;基数操作&quot;</span>);<br>        redisTemplate.opsForHyperLogLog().add(<span class="hljs-string">&quot;accessIp&quot;</span>, <span class="hljs-string">&quot;127.0.0.1&quot;</span>);<br>        redisTemplate.opsForHyperLogLog().add(<span class="hljs-string">&quot;accessIp&quot;</span>, <span class="hljs-string">&quot;192.168.10.1&quot;</span>);<br>        redisTemplate.opsForHyperLogLog().add(<span class="hljs-string">&quot;accessIp&quot;</span>, <span class="hljs-string">&quot;192.168.0.1&quot;</span>);<br>        redisTemplate.opsForHyperLogLog().add(<span class="hljs-string">&quot;accessIp&quot;</span>, <span class="hljs-string">&quot;33.45.23.1&quot;</span>);<br>        System.out.println(redisTemplate.opsForHyperLogLog().size(<span class="hljs-string">&quot;accessIp&quot;</span>));<br><br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果如下：</p><img src="/2024/04/02/Redis%E5%AD%A6%E4%B9%A02%E2%80%94SpringBoot%E6%95%B4%E5%90%88Redis%E3%80%81Redis%E5%B7%A5%E5%85%B7%E7%B1%BB/1.png" class=""><h3 id="3-RedisUtils工具类"><a href="#3-RedisUtils工具类" class="headerlink" title="3. RedisUtils工具类"></a>3. RedisUtils工具类</h3><p>虽然RedisTemplate提供的redis操作很全面，但对于不了解redis的开发同学来说，直接看RedisTemplate的方法不够见名知义，因此一般情况下，我们都会单独封装一个工具类，将常用的一些方法进行抽象，以方便后续使用。<br>创建Redis配置类，配置RedisTemplate</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RedisConfiguration</span> &#123;<br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> RedisTemplate&lt;String, Object&gt; <span class="hljs-title function_">redisTemplate</span><span class="hljs-params">(RedisConnectionFactory redisConnectionFactory)</span> &#123;<br>        RedisTemplate&lt;String, Object&gt; redisTemplate = <span class="hljs-keyword">new</span> <span class="hljs-title class_">RedisTemplate</span>&lt;&gt;();<br>        redisTemplate.setConnectionFactory(redisConnectionFactory);<br>        <span class="hljs-keyword">return</span> redisTemplate;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>工具类代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example.util;<br><br><span class="hljs-keyword">import</span> org.apache.commons.lang3.StringUtils;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.data.redis.core.RedisTemplate;<br><span class="hljs-keyword">import</span> org.springframework.data.redis.core.ZSetOperations;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-keyword">import</span> java.util.*;<br><span class="hljs-keyword">import</span> java.util.concurrent.TimeUnit;<br><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RedisUtils</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> RedisTemplate&lt;String, Object&gt; redisTemplate;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">removeKey</span><span class="hljs-params">(String key)</span> &#123;<br>        <span class="hljs-keyword">return</span> redisTemplate.delete(key);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">hasKey</span><span class="hljs-params">(String key)</span> &#123;<br>        <span class="hljs-keyword">if</span> (StringUtils.isEmpty(key)) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> redisTemplate.hasKey(key);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">expire</span><span class="hljs-params">(String key, <span class="hljs-type">long</span> time)</span> &#123;<br>        <span class="hljs-keyword">return</span> expire(key, time, TimeUnit.SECONDS);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">expire</span><span class="hljs-params">(String key, <span class="hljs-type">long</span> time, TimeUnit timeUnit)</span> &#123;<br>        <span class="hljs-keyword">if</span> (StringUtils.isEmpty(key)) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> redisTemplate.expire(key, time, timeUnit);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addKey</span><span class="hljs-params">(String key, Object value, <span class="hljs-type">long</span> time)</span> &#123;<br>        addKey(key, value, time, TimeUnit.SECONDS);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addKey</span><span class="hljs-params">(String key, Object value, <span class="hljs-type">long</span> time, TimeUnit timeUnit)</span> &#123;<br>        <span class="hljs-keyword">if</span> (StringUtils.isEmpty(key)) &#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        redisTemplate.opsForValue().set(key, value, time, timeUnit);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addKey</span><span class="hljs-params">(String key, Object value)</span> &#123;<br>        redisTemplate.opsForValue().set(key, value);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">getKey</span><span class="hljs-params">(String key)</span> &#123;<br>        <span class="hljs-keyword">if</span> (StringUtils.isEmpty(key)) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> redisTemplate.opsForValue().get(key);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">increment</span><span class="hljs-params">(String key)</span> &#123;<br>        increment(key, <span class="hljs-number">1L</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">increment</span><span class="hljs-params">(String key, <span class="hljs-type">long</span> delta)</span> &#123;<br>        <span class="hljs-keyword">if</span> (StringUtils.isEmpty(key)) &#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        redisTemplate.opsForValue().increment(key, delta);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">decrement</span><span class="hljs-params">(String key)</span> &#123;<br>        decrement(key, <span class="hljs-number">1L</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">decrement</span><span class="hljs-params">(String key, <span class="hljs-type">long</span> delta)</span> &#123;<br>        <span class="hljs-keyword">if</span> (StringUtils.isEmpty(key)) &#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        redisTemplate.opsForValue().decrement(key, delta);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">leftPush</span><span class="hljs-params">(String key, List&lt;Object&gt; values)</span> &#123;<br>        <span class="hljs-keyword">if</span> (StringUtils.isEmpty(key)) &#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        redisTemplate.opsForList().leftPushAll(key, values);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">leftPush</span><span class="hljs-params">(String key, Object... value)</span> &#123;<br>        <span class="hljs-keyword">if</span> (StringUtils.isEmpty(key)) &#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        redisTemplate.opsForList().leftPushAll(key, value);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">leftPop</span><span class="hljs-params">(String key)</span> &#123;<br>        <span class="hljs-keyword">if</span> (StringUtils.isEmpty(key)) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> redisTemplate.opsForList().leftPop(key);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> List&lt;Object&gt; <span class="hljs-title function_">range</span><span class="hljs-params">(String key, <span class="hljs-type">long</span> start, <span class="hljs-type">long</span> end)</span> &#123;<br>        <span class="hljs-keyword">if</span> (StringUtils.isEmpty(key)) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        &#125;<br>        <span class="hljs-keyword">return</span> redisTemplate.opsForList().range(key, start, end);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">indexOfList</span><span class="hljs-params">(String key, <span class="hljs-type">int</span> index)</span> &#123;<br>        <span class="hljs-keyword">if</span> (StringUtils.isEmpty(key)) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> redisTemplate.opsForList().index(key, index);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addHash</span><span class="hljs-params">(String key, Map&lt;String, Object&gt; map)</span> &#123;<br>        <span class="hljs-keyword">if</span> (StringUtils.isEmpty(key)) &#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (map == <span class="hljs-literal">null</span> || map.isEmpty()) &#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        map.forEach((field, value) -&gt; &#123;<br>            redisTemplate.opsForHash().put(key, field, value);<br>        &#125;);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addField</span><span class="hljs-params">(String key, String field, Object value)</span> &#123;<br>        <span class="hljs-keyword">if</span> (StringUtils.isEmpty(key) || StringUtils.isEmpty(field)) &#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        redisTemplate.opsForHash().put(key, field, value);<br>    &#125;<br><br>     <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">removeField</span><span class="hljs-params">(String key, String field)</span> &#123;<br>        <span class="hljs-keyword">if</span> (StringUtils.isEmpty(key) || StringUtils.isEmpty(field)) &#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        redisTemplate.opsForHash().delete(key, field);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Map&lt;String, Object&gt; <span class="hljs-title function_">getEntries</span><span class="hljs-params">(String key)</span> &#123;<br>        <span class="hljs-keyword">if</span> (StringUtils.isEmpty(key)) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        &#125;<br>        Map&lt;Object, Object&gt; entries = redisTemplate.opsForHash().entries(key);<br>        Map&lt;String, Object&gt; result = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        entries.forEach((k, v) -&gt; &#123;<br>            result.put(k.toString(), v);<br>        &#125;);<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">getField</span><span class="hljs-params">(String key, String field)</span> &#123;<br>        <span class="hljs-keyword">if</span> (StringUtils.isEmpty(key) || StringUtils.isEmpty(field)) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> redisTemplate.opsForHash().get(key, field);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Boolean <span class="hljs-title function_">hasField</span><span class="hljs-params">(String key, String field)</span> &#123;<br>        <span class="hljs-keyword">if</span> (StringUtils.isEmpty(key) || StringUtils.isEmpty(field)) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> redisTemplate.opsForHash().hasKey(key, field);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addSet</span><span class="hljs-params">(String key, String... value)</span> &#123;<br>        <span class="hljs-keyword">if</span> (StringUtils.isEmpty(key)) &#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        redisTemplate.opsForSet().add(key, value);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Set&lt;Object&gt; <span class="hljs-title function_">members</span><span class="hljs-params">(String key)</span> &#123;<br>        <span class="hljs-keyword">if</span> (StringUtils.isEmpty(key)) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>&lt;&gt;();<br>        &#125;<br>        <span class="hljs-keyword">return</span> redisTemplate.opsForSet().members(key);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Boolean <span class="hljs-title function_">isMember</span><span class="hljs-params">(String key, Object value)</span> &#123;<br>        <span class="hljs-keyword">if</span> (StringUtils.isEmpty(key)) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> redisTemplate.opsForSet().isMember(key, value);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addZSet</span><span class="hljs-params">(String key, Object value, Double score)</span> &#123;<br>        <span class="hljs-keyword">if</span> (StringUtils.isEmpty(key)) &#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        redisTemplate.opsForZSet().add(key, value, score);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Set&lt;Object&gt; <span class="hljs-title function_">rangeByScore</span><span class="hljs-params">(String key, Double min, Double max)</span> &#123;<br>        <span class="hljs-keyword">if</span> (StringUtils.isEmpty(key)) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>&lt;&gt;();<br>        &#125;<br>        <span class="hljs-keyword">return</span> redisTemplate.opsForZSet().rangeByScore(key, min, max);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Set&lt;ZSetOperations.TypedTuple&lt;Object&gt;&gt; rangeByScoreWithScore(String key, Double min, Double max) &#123;<br>        <span class="hljs-keyword">if</span> (StringUtils.isEmpty(key)) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>&lt;&gt;();<br>        &#125;<br>       <span class="hljs-keyword">return</span> redisTemplate.opsForZSet().rangeByScoreWithScores(key, min, max);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addHyperLogLog</span><span class="hljs-params">(String key, Object... value)</span> &#123;<br>        <span class="hljs-keyword">if</span> (StringUtils.isEmpty(key)) &#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        redisTemplate.opsForHyperLogLog().add(key, value);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addHyperLogLog</span><span class="hljs-params">(String key, List value)</span> &#123;<br>        <span class="hljs-keyword">if</span> (StringUtils.isEmpty(key)) &#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        redisTemplate.opsForHyperLogLog().add(key, value);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Long <span class="hljs-title function_">countHyperLogLog</span><span class="hljs-params">(String key)</span> &#123;<br>        <span class="hljs-keyword">if</span> (StringUtils.isEmpty(key)) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0L</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> redisTemplate.opsForHyperLogLog().size(key);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>修改之前的测试代码，将redisTemplate，改为我们的工具类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> RedisUtils redisUtils;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testRedisUtils</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;字符串操作=================&quot;</span>);<br>       redisUtils.addKey(<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;cxy&quot;</span>);<br>        System.out.println(redisUtils.getKey(<span class="hljs-string">&quot;name&quot;</span>));<br><br>        System.out.println(<span class="hljs-string">&quot;列表操作&quot;</span>);<br>        redisUtils.leftPush(<span class="hljs-string">&quot;school&quot;</span>, <span class="hljs-string">&quot;华南理工大学&quot;</span>);<br>        redisUtils.leftPush(<span class="hljs-string">&quot;school&quot;</span>, <span class="hljs-string">&quot;中山大学&quot;</span>);<br>        redisUtils.leftPush(<span class="hljs-string">&quot;school&quot;</span>, <span class="hljs-string">&quot;华南农业大学&quot;</span>);<br>        List&lt;Object&gt; school = redisUtils.range(<span class="hljs-string">&quot;school&quot;</span>, <span class="hljs-number">0</span>, <span class="hljs-number">5</span>);<br>        <span class="hljs-keyword">for</span> (Object s : school) &#123;<br>            System.out.print(s + <span class="hljs-string">&quot; &quot;</span>);<br>        &#125;<br>        System.out.println();<br><br>        System.out.println(<span class="hljs-string">&quot;hash操作&quot;</span>);<br>        redisUtils.addField(<span class="hljs-string">&quot;student&quot;</span>, <span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;cxy&quot;</span>);<br>        redisUtils.addField(<span class="hljs-string">&quot;student&quot;</span>, <span class="hljs-string">&quot;age&quot;</span>, <span class="hljs-string">&quot;21&quot;</span>);<br>        redisUtils.addField(<span class="hljs-string">&quot;student&quot;</span>, <span class="hljs-string">&quot;sex&quot;</span>, <span class="hljs-string">&quot;male&quot;</span>);<br>        System.out.println(redisUtils.getField(<span class="hljs-string">&quot;student&quot;</span>, <span class="hljs-string">&quot;name&quot;</span>));<br>        System.out.println(redisUtils.getField(<span class="hljs-string">&quot;student&quot;</span>, <span class="hljs-string">&quot;age&quot;</span>));<br>        System.out.println(redisUtils.getField(<span class="hljs-string">&quot;student&quot;</span>, <span class="hljs-string">&quot;sex&quot;</span>));<br><br>        System.out.println(<span class="hljs-string">&quot;set操作&quot;</span>);<br>        redisUtils.addSet(<span class="hljs-string">&quot;project&quot;</span>, <span class="hljs-string">&quot;软件工程&quot;</span>, <span class="hljs-string">&quot;计算机技术&quot;</span>, <span class="hljs-string">&quot;通信工程&quot;</span>, <span class="hljs-string">&quot;软件工程&quot;</span>);<br>        Set&lt;Object&gt; project = redisUtils.members(<span class="hljs-string">&quot;project&quot;</span>);<br>        <span class="hljs-keyword">for</span> (Object s : project) &#123;<br>            System.out.print(s + <span class="hljs-string">&quot; &quot;</span>);<br>        &#125;<br>        System.out.println();<br><br>        System.out.println(<span class="hljs-string">&quot;zset操作&quot;</span>);<br>        redisUtils.addZSet(<span class="hljs-string">&quot;movie&quot;</span>, <span class="hljs-string">&quot;热辣滚烫&quot;</span>, <span class="hljs-number">2.7d</span>);<br>        redisUtils.addZSet(<span class="hljs-string">&quot;movie&quot;</span>, <span class="hljs-string">&quot;飞驰人生&quot;</span>, <span class="hljs-number">9.1d</span>);<br>        redisUtils.addZSet(<span class="hljs-string">&quot;movie&quot;</span>, <span class="hljs-string">&quot;熊出没之逆转时空&quot;</span>, <span class="hljs-number">9.3d</span>);<br>        redisUtils.addZSet(<span class="hljs-string">&quot;movie&quot;</span>, <span class="hljs-string">&quot;二十一条&quot;</span>, <span class="hljs-number">8.2d</span>);<br>        Set&lt;Object&gt; movie = redisUtils.rangeByScore(<span class="hljs-string">&quot;movie&quot;</span>, <span class="hljs-number">3.0d</span>, <span class="hljs-number">9.3d</span>);<br>        <span class="hljs-keyword">for</span> (Object s : movie) &#123;<br>            System.out.print(s + <span class="hljs-string">&quot; &quot;</span>);<br>        &#125;<br>        System.out.println();<br><br>        System.out.println(<span class="hljs-string">&quot;基数操作&quot;</span>);<br>        redisUtils.addHyperLogLog(<span class="hljs-string">&quot;accessIp&quot;</span>, <span class="hljs-string">&quot;127.0.0.1&quot;</span>);<br>        redisUtils.addHyperLogLog(<span class="hljs-string">&quot;accessIp&quot;</span>, <span class="hljs-string">&quot;192.168.10.1&quot;</span>);<br>        redisUtils.addHyperLogLog(<span class="hljs-string">&quot;accessIp&quot;</span>, <span class="hljs-string">&quot;192.168.0.1&quot;</span>);<br>        redisUtils.addHyperLogLog(<span class="hljs-string">&quot;accessIp&quot;</span>, <span class="hljs-string">&quot;33.45.23.1&quot;</span>);<br>        System.out.println(redisUtils.countHyperLogLog(<span class="hljs-string">&quot;accessIp&quot;</span>));<br>    &#125;<br></code></pre></td></tr></table></figure><p>在测试之前，先删除之前添加的数据</p><img src="/2024/04/02/Redis%E5%AD%A6%E4%B9%A02%E2%80%94SpringBoot%E6%95%B4%E5%90%88Redis%E3%80%81Redis%E5%B7%A5%E5%85%B7%E7%B1%BB/2.png" class=""><p>测试结果如下：</p><img src="/2024/04/02/Redis%E5%AD%A6%E4%B9%A02%E2%80%94SpringBoot%E6%95%B4%E5%90%88Redis%E3%80%81Redis%E5%B7%A5%E5%85%B7%E7%B1%BB/3.png" class="">]]></content>
    
    
    
    <tags>
      
      <tag>中间件</tag>
      
      <tag>Redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Redis学习1-Redis简介、基础</title>
    <link href="/2024/04/02/Redis%E5%AD%A6%E4%B9%A01-Redis%E7%AE%80%E4%BB%8B%E3%80%81%E5%9F%BA%E7%A1%80/"/>
    <url>/2024/04/02/Redis%E5%AD%A6%E4%B9%A01-Redis%E7%AE%80%E4%BB%8B%E3%80%81%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<h3 id="1-介绍"><a href="#1-介绍" class="headerlink" title="1. 介绍"></a>1. 介绍</h3><h4 id="1-1-redis简介"><a href="#1-1-redis简介" class="headerlink" title="1.1. redis简介"></a>1.1. redis简介</h4><p>Redis(Remote Dictonary Server) 是由Salvatore Sanfilippo开发的key-value缓存数据库，基于C语言开发。目前市面上，Redis和MongoDB是当前使用最广泛的NoSQL，而就Redis技术而言，它的性能十分优越，可以支持每秒十几万此的读&#x2F;写操作，其性能远超数据库，并且还支持集群、分布式、主从同步等配置，原则上可以无限扩展，让更多的数据存储在内存中，更让人欣慰的是它还支持一定的事务能力，这保证了高并发的场景下数据的安全和一致性。</p><h4 id="1-2-redis特点"><a href="#1-2-redis特点" class="headerlink" title="1.2. redis特点"></a>1.2. redis特点</h4><p>与其他key&#x2F;value缓存产品相比，redis有以下特点：<br>1、Redis支持数据的持久化，可以将内存中的数据保存在磁盘中，重启的时候可以再次加载进行使用；<br>2、 Redis不仅支持key-value类型的数据，还提供list，set，zset，hash等数据结构的存储；<br>3、 Redis支持数据的备份，即master-slave模式的数据备份；</p><h3 id="2-Redis安装"><a href="#2-Redis安装" class="headerlink" title="2. Redis安装"></a>2. Redis安装</h3><h4 id="2-1-window"><a href="#2-1-window" class="headerlink" title="2.1. window"></a>2.1. window</h4><p>Redis Windows 下载地址：<a href="https://github.com/MicrosoftArchive/redis/releases">https://github.com/MicrosoftArchive/redis/releases</a></p><h4 id="2-2-linux"><a href="#2-2-linux" class="headerlink" title="2.2. linux"></a>2.2. linux</h4><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-variable">$</span> <span class="hljs-built_in">wget</span> http://download.redis.io/releases/redis<span class="hljs-literal">-4</span>.<span class="hljs-number">0.2</span>.tar.gz<br><span class="hljs-variable">$</span> tar xzf redis<span class="hljs-literal">-4</span>.<span class="hljs-number">0.2</span>.tar.gz<br><span class="hljs-variable">$</span> <span class="hljs-built_in">cd</span> redis<span class="hljs-literal">-4</span>.<span class="hljs-number">0.2</span><br><span class="hljs-variable">$</span> make<br></code></pre></td></tr></table></figure><p>执行上述命令后，进入redis目录下的src目录<br>启动redis服务</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs axapta">./redis-<span class="hljs-keyword">server</span><br></code></pre></td></tr></table></figure><img src="/2024/04/02/Redis%E5%AD%A6%E4%B9%A01-Redis%E7%AE%80%E4%BB%8B%E3%80%81%E5%9F%BA%E7%A1%80/1.png" class=""><p>进入redis命令行</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs avrasm">./redis-<span class="hljs-keyword">cli</span><br></code></pre></td></tr></table></figure><h4 id="2-3-配置项"><a href="#2-3-配置项" class="headerlink" title="2.3. 配置项"></a>2.3. 配置项</h4><p>进入redis.conf，可以修改一些配置项，主要的配置项如下：</p><table><thead><tr><th>port</th><th>端口号</th></tr></thead><tbody><tr><td>dir</td><td>本地数据库存放目录</td></tr><tr><td>dbfilename</td><td>本地数据库文件名</td></tr><tr><td>bind</td><td>绑定的主机地址</td></tr><tr><td>timeout</td><td>设置客户端闲置多长时间后关闭连接</td></tr><tr><td>loglevel</td><td>日志记录级别，有：debug，verbose，notice，warning，默认为verbose</td></tr><tr><td>logfile</td><td>日志记录方式，默认为标准输出</td></tr></tbody></table><h3 id="3-Redis数据类型"><a href="#3-Redis数据类型" class="headerlink" title="3. Redis数据类型"></a>3. Redis数据类型</h3><h4 id="3-1-String字符串"><a href="#3-1-String字符串" class="headerlink" title="3.1. String字符串"></a>3.1. String字符串</h4><p>最基本的数据类型，一个key对应一个value，redis的string可包含任何数据，比如jpg图片或者序列化的对象，一个键最大能存储512MB的对象<br>示例如下：</p><img src="/2024/04/02/Redis%E5%AD%A6%E4%B9%A01-Redis%E7%AE%80%E4%BB%8B%E3%80%81%E5%9F%BA%E7%A1%80/2.png" class=""><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td>SET</td><td>设置指定 key 的值</td></tr><tr><td>GET</td><td>获取指定 key 的值</td></tr><tr><td>MSET</td><td>同时设置一个或多个 key-value 对</td></tr><tr><td>MGET</td><td>获取所有(一个或多个)给定 key 的值</td></tr><tr><td>INCR</td><td>将 key 中储存的数字值增一</td></tr><tr><td>INCRBY</td><td>将 key 所储存的值加上给定的增量值 ( increment )</td></tr><tr><td>DECR</td><td>将 key 中储存的数字值减一</td></tr><tr><td>DECRBY</td><td>将 key 所储存的值减去给定的减量值 ( decrement )</td></tr></tbody></table><h4 id="3-2-Hash哈希"><a href="#3-2-Hash哈希" class="headerlink" title="3.2. Hash哈希"></a>3.2. Hash哈希</h4><p>Redis Hash是一个string类型的field和value的映射表，特别适合用于存储对象。<br>常用的命令为HMSET KEY FIELD VALUE FIELD VALUE，即同时将多个field-value（域-值）对设置到哈希表key中。示例如下：</p><img src="/2024/04/02/Redis%E5%AD%A6%E4%B9%A01-Redis%E7%AE%80%E4%BB%8B%E3%80%81%E5%9F%BA%E7%A1%80/3.png" class=""><p>其中，user:1为键</p><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td>HEXISTS</td><td>查看哈希表 key 中，指定的字段是否存在</td></tr><tr><td>HGET</td><td>获取存储在哈希表中指定字段的值</td></tr><tr><td>HSET</td><td>将哈希表 key 中的字段 field 的值设为 value</td></tr><tr><td>HMSET</td><td>同时将多个 field-value (域-值)对设置到哈希表 key 中</td></tr><tr><td>HMGET</td><td>获取所有给定字段的值</td></tr><tr><td>HDEL</td><td>删除一个或多个哈希表字段</td></tr></tbody></table><h4 id="3-3-List列表"><a href="#3-3-List列表" class="headerlink" title="3.3. List列表"></a>3.3. List列表</h4><p>Redis List为最简单的字符串列表，按照插入顺序排序，可以添加一个元素到列表的头部（左边）或尾部（右边）。<br>常用的命令有lpush，rpush，lrange，示例如下：</p><img src="/2024/04/02/Redis%E5%AD%A6%E4%B9%A01-Redis%E7%AE%80%E4%BB%8B%E3%80%81%E5%9F%BA%E7%A1%80/4.png" class=""><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td>LINDEX</td><td>通过索引获取列表中的元素</td></tr><tr><td>LINSERT</td><td>在列表的元素前或者后插入元素</td></tr><tr><td>LLEN</td><td>获取列表长度</td></tr><tr><td>LPOP</td><td>移出并获取列表的第一个元素</td></tr><tr><td>LPUSH</td><td>将一个或多个值插入到列表头部</td></tr><tr><td>RPOP</td><td>移除并获取列表最后一个元素</td></tr><tr><td>RPUSH</td><td>在列表中添加一个或多个值</td></tr><tr><td>LSET</td><td>通过索引设置列表元素的值</td></tr><tr><td>LRANGE</td><td>获取列表指定范围内的元素</td></tr></tbody></table><h4 id="3-4-set集合"><a href="#3-4-set集合" class="headerlink" title="3.4. set集合"></a>3.4. set集合</h4><p>Redis是string类型的无序集合，通过哈希表实现，元素具有唯一性。<br>常用命令有sadd，smembers</p><img src="/2024/04/02/Redis%E5%AD%A6%E4%B9%A01-Redis%E7%AE%80%E4%BB%8B%E3%80%81%E5%9F%BA%E7%A1%80/5.png" class=""><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td>SADD</td><td>向集合添加一个或多个成员</td></tr><tr><td>SCARD</td><td>获取集合的成员数</td></tr><tr><td>SDIFF</td><td>返回给定所有集合的差集</td></tr><tr><td>SINTER</td><td>返回给定所有集合的交集</td></tr><tr><td>SISMEMBER</td><td>判断 member 元素是否是集合 key 的成员</td></tr><tr><td>SMEMBERS</td><td>返回集合中的所有成员</td></tr><tr><td>SUNION</td><td>返回所有给定集合的并集</td></tr><tr><td>SREM</td><td>移除集合中一个或多个成员</td></tr></tbody></table><h4 id="3-5-zset（sorted-set）有序集合"><a href="#3-5-zset（sorted-set）有序集合" class="headerlink" title="3.5. zset（sorted set）有序集合"></a>3.5. zset（sorted set）有序集合</h4><p>和set一样是string类型元素的集合，不同的是每个元素会关联一个double类型的分数，通过分数为集合中的成员进行从小到大的排序，zset的成员是唯一的，但分数可以重复。<br>常用命令有：zadd，zrangeByscore</p><img src="/2024/04/02/Redis%E5%AD%A6%E4%B9%A01-Redis%E7%AE%80%E4%BB%8B%E3%80%81%E5%9F%BA%E7%A1%80/6.png" class=""><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td>ZADD</td><td>向有序集合添加一个或多个成员，或者更新已存在成员的分数</td></tr><tr><td>ZCARD</td><td>获取有序集合的成员数</td></tr><tr><td>ZCOUNT</td><td>计算在有序集合中指定区间分数的成员数</td></tr><tr><td>ZRANGE</td><td>通过索引区间返回有序集合成指定区间内的成员</td></tr><tr><td>ZRANGEBYSCORE</td><td>通过分数返回有序集合指定区间内的成员</td></tr><tr><td>ZRANK</td><td>返回有序集合中指定成员的索引</td></tr><tr><td>ZSCORE</td><td>返回有序集中，成员的分数值</td></tr></tbody></table><h4 id="3-6-Redis-Bitmap-位图"><a href="#3-6-Redis-Bitmap-位图" class="headerlink" title="3.6. Redis Bitmap 位图"></a>3.6. Redis Bitmap 位图</h4><p>通过类似map结构存放0或1（bit位）作为值，可以用来统计状态，如日活，是否浏览过某个东西</p><img src="/2024/04/02/Redis%E5%AD%A6%E4%B9%A01-Redis%E7%AE%80%E4%BB%8B%E3%80%81%E5%9F%BA%E7%A1%80/7.png" class=""><h4 id="3-7-HyperLogLogs基数统计"><a href="#3-7-HyperLogLogs基数统计" class="headerlink" title="3.7. HyperLogLogs基数统计"></a>3.7. HyperLogLogs基数统计</h4><p>可以接受多个元素作为输入，并给出输入元素的基数估算值<br>● 基数：集合中不同元素的数量，比如 {’apple’, ‘banana’, ‘cherry’, ‘banana’, ‘apple’} 的基数就是 3<br>● 估算值：算法给出的基数并不是精确的，可能会比实际稍微多一些或者稍微少一些，但会控制在合 理的范围之内<br>HyperLogLog 的优点是即使输入元素的数量或体积非常大，计算基数所需空间总是固定的，并且是很小的。<br>在Redis 里面，每个 HyperLogLog 键只需要花费 12 KB 内存，就可以计算接近 2^64 个不同元素的基数<br>这和计算基数时，元素越多耗费内存就越多的集合形成鲜明对比<br>因为HyperLogLog 只会根据输入元素来计算基数，而不会储存输入元素本身，所以 HyperLogLog 不能像集合那样，返回输入的各个元素</p><img src="/2024/04/02/Redis%E5%AD%A6%E4%B9%A01-Redis%E7%AE%80%E4%BB%8B%E3%80%81%E5%9F%BA%E7%A1%80/8.png" class=""><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td>PFADD</td><td>添加指定元素到 HyperLogLog 中</td></tr><tr><td>PFCOUNT</td><td>返回给定 HyperLogLog 的基数估算值</td></tr><tr><td>PFMERGE</td><td>将多个 HyperLogLog 合并为一个 HyperLogLog</td></tr></tbody></table>]]></content>
    
    
    
    <tags>
      
      <tag>中间件</tag>
      
      <tag>Redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Nacos学习2—Nacos配置中心</title>
    <link href="/2024/04/02/Nacos%E5%AD%A6%E4%B9%A02%E2%80%94Nacos%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/"/>
    <url>/2024/04/02/Nacos%E5%AD%A6%E4%B9%A02%E2%80%94Nacos%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/</url>
    
    <content type="html"><![CDATA[<p>在上一节中，介绍了Nacos配置中心的入门使用，在这一节，会讲解关于nacos配置中心的其他概念，比如命名空间、共享配置、以及如何在服务端更新nacos配置。</p><h3 id="1-nacos的基础概念"><a href="#1-nacos的基础概念" class="headerlink" title="1. nacos的基础概念"></a>1. nacos的基础概念</h3><p>如下图所示，在nacos配置中，namespace、group、dataId为最基础的、最重要的三个概念。<br>namespace: 命名空间可用于进行不同环境的配置隔离。一般一个环境划分到一个命名空间<br>group： 配置分组用于将不同的服务可以归类到同一分组。一般将一个项目的配置分到一组<br>dataId： 在系统中，一个配置文件通常就是一个配置集（dataId）。一般微服务的配置就是一个配置集</p><img src="/2024/04/02/Nacos%E5%AD%A6%E4%B9%A02%E2%80%94Nacos%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/image.png" class=""><p>当我们没有配置namespace时，其默认值就是public；没有配置group时，默认值为DEFAULT_GROUP，dataId默认是当前应用的application.name。<br>进入nacos，点击命名空间，选择新建命名空间</p><img src="/2024/04/02/Nacos%E5%AD%A6%E4%B9%A02%E2%80%94Nacos%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/image1.png" class=""><p>假设我们现在是在开发环境，然后我们创建一个dev命名空间，用于开发环境的相关配置,这里的命名空间id不用填，系统会自动生成</p><img src="/2024/04/02/Nacos%E5%AD%A6%E4%B9%A02%E2%80%94Nacos%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/image2.png" class=""><p>创建成功后，我们复制命名空间id</p><img src="/2024/04/02/Nacos%E5%AD%A6%E4%B9%A02%E2%80%94Nacos%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/image3.png" class=""><p>将这个命名空间id，粘贴到之前bootstrap.yml配置文件的namespace中</p><img src="/2024/04/02/Nacos%E5%AD%A6%E4%B9%A02%E2%80%94Nacos%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/image4.png" class=""><p>然后我们进入dev命名空间，新建一个配置</p><img src="/2024/04/02/Nacos%E5%AD%A6%E4%B9%A02%E2%80%94Nacos%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/image5.png" class=""><img src="/2024/04/02/Nacos%E5%AD%A6%E4%B9%A02%E2%80%94Nacos%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/image6.png" class=""><p>配置完毕后，启动项目，再次访问<a href="http://localhost:8080/test/hello%EF%BC%8C%E7%BB%93%E6%9E%9C%E5%A6%82%E4%B8%8B%EF%BC%9A">http://localhost:8080/test/hello，结果如下：</a></p><img src="/2024/04/02/Nacos%E5%AD%A6%E4%B9%A02%E2%80%94Nacos%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/image7.png" class=""><p>可见，此时读取到的，是dev命名空间下的配置。</p><h3 id="2-共享配置"><a href="#2-共享配置" class="headerlink" title="2. 共享配置"></a>2. 共享配置</h3><p>当我们项目中的服务数量增加后，配置文件也会相应的增加，而多个配置文件中，可能存在相同的配置，因此我们可以将这些相同的配置独立出来，作为该项目各个服务的共享配置文件。<br>假设我们现在有两个服务，这两个服务都共享同一个redis数据源和同一个mysql数据源，因此我们可以把这两个数据源的配置，提取成共享配置。<br>service1和service2的bootstrap.yml配置分别如下：</p><img src="/2024/04/02/Nacos%E5%AD%A6%E4%B9%A02%E2%80%94Nacos%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/image8.png" class=""><img src="/2024/04/02/Nacos%E5%AD%A6%E4%B9%A02%E2%80%94Nacos%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/image9.png" class=""><p>这两个服务的bootstrap配置文件内容，基本一样（除了端口号和服务名），除此之外，这里共享配置中，common-redis共享配置的refresh值设置为true，而common-mysql没有设置，也就是说，这两个服务能监听到common-redis配置的变化，而不会关注到common-mysql配置的变化。<br>配置完成后，这两个应用，我们都添加下面这个controller类，用于进行测试：</p><img src="/2024/04/02/Nacos%E5%AD%A6%E4%B9%A02%E2%80%94Nacos%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/image10.png" class=""><p>然后，我们在nacos上添加相关的共享配置</p><img src="/2024/04/02/Nacos%E5%AD%A6%E4%B9%A02%E2%80%94Nacos%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/image11.png" class=""><img src="/2024/04/02/Nacos%E5%AD%A6%E4%B9%A02%E2%80%94Nacos%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/image12.png" class=""><p>启动服务1和服务2，然后分别访问获取mysql配置和redis配置的接口</p><img src="/2024/04/02/Nacos%E5%AD%A6%E4%B9%A02%E2%80%94Nacos%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/image13.png" class=""><p>然后我们在分别修改mysql和redis的配置</p><img src="/2024/04/02/Nacos%E5%AD%A6%E4%B9%A02%E2%80%94Nacos%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/image14.png" class=""><img src="/2024/04/02/Nacos%E5%AD%A6%E4%B9%A02%E2%80%94Nacos%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/image15.png" class=""><p>然后再次访问相关的接口，结果如下：</p><img src="/2024/04/02/Nacos%E5%AD%A6%E4%B9%A02%E2%80%94Nacos%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/image16.png" class=""><p>由上图可知，如果公共配置想要获取实时数据，需要加上refresh属性的配置。</p><h3 id="3-扩展配置"><a href="#3-扩展配置" class="headerlink" title="3. 扩展配置"></a>3. 扩展配置</h3><p>一般情况下，我们的配置文件一个就可以了，但有时候，如果我们的配置分散在多个配置文件时，就需要使用到扩展配置了。<br>假设我们现在有两个扩展配置，一个是配置日志打印的，一个是配置消息队列，假设配置内容如下：<br>ext-log.yaml</p><img src="/2024/04/02/Nacos%E5%AD%A6%E4%B9%A02%E2%80%94Nacos%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/image17.png" class=""><img src="/2024/04/02/Nacos%E5%AD%A6%E4%B9%A02%E2%80%94Nacos%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/image18.png" class=""><p>bootstrap.yml内容如下：</p><img src="/2024/04/02/Nacos%E5%AD%A6%E4%B9%A02%E2%80%94Nacos%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/image19.png" class=""><p>添加一个controller用于测试</p><img src="/2024/04/02/Nacos%E5%AD%A6%E4%B9%A02%E2%80%94Nacos%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/image20.png" class=""><p>启动应用，结果如下：</p><img src="/2024/04/02/Nacos%E5%AD%A6%E4%B9%A02%E2%80%94Nacos%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/image21.png" class=""><p>然后我们修改扩展配置</p><img src="/2024/04/02/Nacos%E5%AD%A6%E4%B9%A02%E2%80%94Nacos%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/image22.png" class=""><img src="/2024/04/02/Nacos%E5%AD%A6%E4%B9%A02%E2%80%94Nacos%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/image23.png" class=""><p>再次访问相关的接口</p><img src="/2024/04/02/Nacos%E5%AD%A6%E4%B9%A02%E2%80%94Nacos%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/image24.png" class=""><p>可见，对于扩展配置，如果要获取实时数据，那么也需要加上refresh</p><h3 id="4-更新数据到nacos"><a href="#4-更新数据到nacos" class="headerlink" title="4. 更新数据到nacos"></a>4. 更新数据到nacos</h3><p>假设我们现在有一个数据迁移的任务，每隔一段时间，会触发这个任务一次，该任务会读取nacos配置中的起始时间和结束时间，然后查询数据库并将查询的数据进行迁移，最后会更新起始时间，然后修改nacos中的配置。<br>首先我们在nacos上添加一个和数据迁移相关的配置：</p><img src="/2024/04/02/Nacos%E5%AD%A6%E4%B9%A02%E2%80%94Nacos%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/image25.png" class=""><p>添加一个config，用于构造configService</p><img src="/2024/04/02/Nacos%E5%AD%A6%E4%B9%A02%E2%80%94Nacos%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/image26.png" class=""><p>添加一个定时任务，用于查询nacos配置，并根据nacos配置迁移数据</p><img src="/2024/04/02/Nacos%E5%AD%A6%E4%B9%A02%E2%80%94Nacos%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/image27.png" class=""><p>执行结果如下图所示，每隔十秒执行一次任务，并且将起始时间进行更新。</p><img src="/2024/04/02/Nacos%E5%AD%A6%E4%B9%A02%E2%80%94Nacos%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/image28.png" class=""><h3 id="5-参考文档"><a href="#5-参考文档" class="headerlink" title="5. 参考文档"></a>5. 参考文档</h3><p>（超详细）关于Nacos的共享配置( shared-configs)和拓展配置(extension-config)：<a href="https://blog.csdn.net/weixin_42329623/article/details/131018680">https://blog.csdn.net/weixin_42329623/article/details/131018680</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>中间件</tag>
      
      <tag>Nacos</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Nacos学习1—介绍、配置中心</title>
    <link href="/2024/04/02/Nacos%E5%AD%A6%E4%B9%A01%E2%80%94%E4%BB%8B%E7%BB%8D%E3%80%81%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/"/>
    <url>/2024/04/02/Nacos%E5%AD%A6%E4%B9%A01%E2%80%94%E4%BB%8B%E7%BB%8D%E3%80%81%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/</url>
    
    <content type="html"><![CDATA[<h3 id="1-背景"><a href="#1-背景" class="headerlink" title="1. 背景"></a>1. 背景</h3><p>在之前的Spring Cloud Gateway学习中，我们了解了网关相关配置，包括断言、过滤器等内容。在之前的文章中，我们是将这些配置，写到application.yml上，而一般情况下，我们Spring Cloud Gateway的网关配置，肯定不会是一成不变的，如果配置信息是在application.yml上，那么当我们需要添加其他的路由配置时，就先修改application.yml配置，然后重启服务，这不利于用户使用和产品的稳定。我们希望通过一个配置中心，来方便我们对这些路由信息进行统一的维护、管理。</p><h4 id="1-1-配置中心思路"><a href="#1-1-配置中心思路" class="headerlink" title="1.1. 配置中心思路"></a>1.1. 配置中心思路</h4><p>配置中心的一般思路为：<br>1） 首先把项目中的各种配置全部放到一个集中的地方进行统一管理，并提供一套标准接口。<br>2）当各个服务需要获取配置的时候，就来配置中心的接口拉取自己的配置。<br>3）当配置中心中的各种参数有更新的时候，也能通知到各个服务实时同步最新的消息，使之动态更新。<br>当加入服务配置中心后，我们的系统架构图如下：</p><img src="/2024/04/02/Nacos%E5%AD%A6%E4%B9%A01%E2%80%94%E4%BB%8B%E7%BB%8D%E3%80%81%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/image.png" class=""><h4 id="1-2-常用的服务配置中心"><a href="#1-2-常用的服务配置中心" class="headerlink" title="1.2. 常用的服务配置中心"></a>1.2. 常用的服务配置中心</h4><p>Spring Cloud Config:官方提供的分布式系统的外部配置中心。<br>Nacos:阿里开源的框架，致力于发现、配置和管理微服务。Nacos提供了一组简单易用的特性集，帮助您快速实现动态服务发现、服务配置、服务元数据及流量管理。<br>Apollo：携程框架部门研发的开源配置管理中心，能够集中化管理应用不同环境、不同集群的配置，配置修改后能够实时推送到应用端，并且具备规范的权限、流程治理等特性。</p><img src="/2024/04/02/Nacos%E5%AD%A6%E4%B9%A01%E2%80%94%E4%BB%8B%E7%BB%8D%E3%80%81%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/image1.png" class=""><h3 id="2-Nacos介绍和环境搭建"><a href="#2-Nacos介绍和环境搭建" class="headerlink" title="2. Nacos介绍和环境搭建"></a>2. Nacos介绍和环境搭建</h3><h4 id="2-1-Nacos介绍"><a href="#2-1-Nacos介绍" class="headerlink" title="2.1. Nacos介绍"></a>2.1. Nacos介绍</h4><p>Nacos是阿里巴巴推出的一个更易于构建云原生应用的动态服务发现、配置管理和服务管理平台。<br>Nacos的关键特性有以下几点：<br>1）服务发现和服务健康检测<br>Nacos 提供对服务的实时的健康检查，阻止向不健康的主机或服务实例发送请求。Nacos 支持传输层 (PING 或 TCP)和应用层 (如 HTTP、MySQL、用户自定义）的健康检查。 对于复杂的云环境和网络拓扑环境中（如 VPC、边缘网络等）服务的健康检查，Nacos 提供了 agent 上报模式和服务端主动检测2种健康检查模式。<br>2）动态配置服务<br>动态配置服务可以让您以中心化、外部化和动态化的方式管理所有环境的应用配置和服务配置。<br>动态配置消除了配置变更时重新部署应用和服务的需要，让配置管理变得更加高效和敏捷。<br>配置中心化管理让实现无状态服务变得更简单，让服务按需弹性扩展变得更容易。<br>3）动态DNS服务<br>动态 DNS 服务支持权重路由，从而更方便地实现中间层负载均衡、更灵活的路由策略、流量控制以及数据中心内网的简单DNS解析服务。<br>4）服务及其元数据管理<br>Nacos 能让您从微服务平台建设的视角管理数据中心的所有服务及元数据，包括管理服务的描述、生命周期、服务的静态依赖分析、服务的健康状态、服务的流量管理、路由及安全策略、服务的 SLA 以及最首要的 metrics 统计数据。</p><h4 id="2-2-Nacos环境搭建"><a href="#2-2-Nacos环境搭建" class="headerlink" title="2.2. Nacos环境搭建"></a>2.2. Nacos环境搭建</h4><p>进入Nacos官网：<a href="https://nacos.io/">https://nacos.io</a></p><img src="/2024/04/02/Nacos%E5%AD%A6%E4%B9%A01%E2%80%94%E4%BB%8B%E7%BB%8D%E3%80%81%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/image2.png" class=""><p>点击前往github，跳转至github下载页面，然后点击tags选择要下载的版本</p><img src="/2024/04/02/Nacos%E5%AD%A6%E4%B9%A01%E2%80%94%E4%BB%8B%E7%BB%8D%E3%80%81%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/image3.png" class=""><p>下载完毕后解压到需要安装的目录</p><img src="/2024/04/02/Nacos%E5%AD%A6%E4%B9%A01%E2%80%94%E4%BB%8B%E7%BB%8D%E3%80%81%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/image5.png" class=""><p>解压完毕后，进入bin目录，修改启动文件startup.cmd，将mode由”cluster”改为standalone</p><img src="/2024/04/02/Nacos%E5%AD%A6%E4%B9%A01%E2%80%94%E4%BB%8B%E7%BB%8D%E3%80%81%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/image6.png" class=""><p>修改完毕后，双击startup.cmd启动Nacos服务</p><img src="/2024/04/02/Nacos%E5%AD%A6%E4%B9%A01%E2%80%94%E4%BB%8B%E7%BB%8D%E3%80%81%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/image7.png" class=""><p>访问<a href="http://localhost:8848/nacos%EF%BC%8C%E9%BB%98%E8%AE%A4%E7%9A%84%E7%94%A8%E6%88%B7%E5%90%8D%E5%92%8C%E5%AF%86%E7%A0%81%E4%B8%BA%22nacos%22%E3%80%82">http://localhost:8848/nacos，默认的用户名和密码为&quot;nacos&quot;。</a></p><img src="/2024/04/02/Nacos%E5%AD%A6%E4%B9%A01%E2%80%94%E4%BB%8B%E7%BB%8D%E3%80%81%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/image8.png" class=""><h3 id="3-Nacos-Config配置中心"><a href="#3-Nacos-Config配置中心" class="headerlink" title="3. Nacos Config配置中心"></a>3. Nacos Config配置中心</h3><h4 id="3-1-基本使用"><a href="#3-1-基本使用" class="headerlink" title="3.1. 基本使用"></a>3.1. 基本使用</h4><p>添加Nacos config的依赖</p><img src="/2024/04/02/Nacos%E5%AD%A6%E4%B9%A01%E2%80%94%E4%BB%8B%E7%BB%8D%E3%80%81%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/image9.png" class=""><p>注意，如果是在springboot2.4.x的版本之后，对于bootstrap.properties和bootstrap.yaml配置文件，需要在pom中加入依赖：</p><img src="/2024/04/02/Nacos%E5%AD%A6%E4%B9%A01%E2%80%94%E4%BB%8B%E7%BB%8D%E3%80%81%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/image10.png" class=""><p>然后添加配置文件，注意，不能使用application.yml，要新建一个bootstrap.yml作为配置文件<br>配置文件有优先级为：<br>bootstrap.properties  &gt; bootstrap.yml &gt; application.properties &gt; application.yml<br>假设我们当前的配置如下：</p><img src="/2024/04/02/Nacos%E5%AD%A6%E4%B9%A01%E2%80%94%E4%BB%8B%E7%BB%8D%E3%80%81%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/image11.png" class=""><p>然后我们添加一个controller用于测试，下面这个controller的hello方法，会返回helloWorld的值，这里我先设置了一个默认值为“defalut value”</p><img src="/2024/04/02/Nacos%E5%AD%A6%E4%B9%A01%E2%80%94%E4%BB%8B%E7%BB%8D%E3%80%81%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/image12.png" class=""><p>当我们的hello.world在nacos上没有进行配置时，那么我们访问<a href="http://localhost/test/hello%EF%BC%8C%E7%BB%93%E6%9E%9C%E5%A6%82%E4%B8%8B%E5%9B%BE%E6%89%80%E7%A4%BA%EF%BC%9A">http://localhost:80/test/hello，结果如下图所示：</a></p><img src="/2024/04/02/Nacos%E5%AD%A6%E4%B9%A01%E2%80%94%E4%BB%8B%E7%BB%8D%E3%80%81%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/image13.png" class=""><p>现在我进入nacos官网，新建对应的配置，如下图所示，点击左边的创建配置</p><img src="/2024/04/02/Nacos%E5%AD%A6%E4%B9%A01%E2%80%94%E4%BB%8B%E7%BB%8D%E3%80%81%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/image14.png" class=""><img src="/2024/04/02/Nacos%E5%AD%A6%E4%B9%A01%E2%80%94%E4%BB%8B%E7%BB%8D%E3%80%81%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/image15.png" class=""><p>然后填写dataId,group,配置类型和配置的内容，注意，这里的data id要和我们的bootstrap.yml中配置的spring.cloud.nacos.config.name保持一致(如果不配置也可以，不配置的话，默认使用application.name的名称对应的配置）</p><img src="/2024/04/02/Nacos%E5%AD%A6%E4%B9%A01%E2%80%94%E4%BB%8B%E7%BB%8D%E3%80%81%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/image16.png" class=""><p>配置完毕后点击发布</p><img src="/2024/04/02/Nacos%E5%AD%A6%E4%B9%A01%E2%80%94%E4%BB%8B%E7%BB%8D%E3%80%81%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/image17.png" class=""><p>发布完成后，我们再次访问<a href="http://localhost/test/hello">http://localhost:80/test/hello</a></p><img src="/2024/04/02/Nacos%E5%AD%A6%E4%B9%A01%E2%80%94%E4%BB%8B%E7%BB%8D%E3%80%81%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/image18.png" class=""><h4 id="3-2-dataId"><a href="#3-2-dataId" class="headerlink" title="3.2. dataId"></a>3.2. dataId</h4><p>之所以配置spring.application.name或spring.cloud.nacos.config.name，是因为它是构成Nacos配置管理dataId字段的一部分。在Nacos 中，dataId完整格式如下：<br>${prefix}-${spring.profiles.active}.${file-extension}<br>prefix: 默认为spring.application.name的值，也可以通过配置项spring.cloud.nacos.config.name来配置<br>spring.profiles.active:当前环境对应的profile，当spring.profiles.active为空时，对应的连接符-也不存在<br>file-extension：配置内容的数据格式，可以通过spring.cloud.nacos.config.file-extension来配置，目前只支持properties和yaml类型<br>我们修改刚才的bootstrap.yaml配置文件，修改结果如下：</p><img src="/2024/04/02/Nacos%E5%AD%A6%E4%B9%A01%E2%80%94%E4%BB%8B%E7%BB%8D%E3%80%81%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/image19.png" class=""><p>然后在nacos添加一个配置</p><img src="/2024/04/02/Nacos%E5%AD%A6%E4%B9%A01%E2%80%94%E4%BB%8B%E7%BB%8D%E3%80%81%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/image20.png" class=""><p>然后重启应用，访问<a href="http://localhost:8080/test/hello%EF%BC%8C%E7%BB%93%E6%9E%9C%E5%A6%82%E4%B8%8B%EF%BC%9A">http://localhost:8080/test/hello，结果如下：</a></p><img src="/2024/04/02/Nacos%E5%AD%A6%E4%B9%A01%E2%80%94%E4%BB%8B%E7%BB%8D%E3%80%81%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/image21.png" class=""><h4 id="4-参考文章"><a href="#4-参考文章" class="headerlink" title="4. 参考文章"></a>4. 参考文章</h4><p>使用nacos作为配置中心：<a href="https://blog.csdn.net/weixin_65211978/article/details/128102799">https://blog.csdn.net/weixin_65211978/article/details/128102799</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>中间件</tag>
      
      <tag>Nacos</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringGateway学习2</title>
    <link href="/2024/04/02/SpringGateway%E5%AD%A6%E4%B9%A02/"/>
    <url>/2024/04/02/SpringGateway%E5%AD%A6%E4%B9%A02/</url>
    
    <content type="html"><![CDATA[<h3 id="1-断言"><a href="#1-断言" class="headerlink" title="1. 断言"></a>1. 断言</h3><p>在上一节中，我们的gateway应用，它的配置文件为：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">80</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">cloud:</span><br>    <span class="hljs-attr">gateway:</span><br>      <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span><br>      <span class="hljs-attr">routes:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">id:</span> <span class="hljs-string">app-service1</span><br>          <span class="hljs-attr">uri:</span> <span class="hljs-string">http://localhost:9000</span><br>          <span class="hljs-attr">predicates:</span> <span class="hljs-comment">#断言，为真则匹配成功</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">Path=/app1/**</span> <span class="hljs-comment">#配置规则Path，如果是app1开头的请求，会转发到目标URL</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">id:</span> <span class="hljs-string">app-service2</span><br>          <span class="hljs-attr">uri:</span> <span class="hljs-string">http://localhost:9001</span><br>          <span class="hljs-attr">predicates:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">Path=/app2/**</span><br></code></pre></td></tr></table></figure><p>这里面使用了Path断言，Path断言会根据请求的路径进行匹配，除了Path断言外，常用的断言如下图所示：</p><img src="/2024/04/02/SpringGateway%E5%AD%A6%E4%B9%A02/image.png" class=""><p>这里再简单介绍几个常用的断言：</p><h4 id="1-1-After"><a href="#1-1-After" class="headerlink" title="1.1. After"></a>1.1. After</h4><p>After用于匹配在指定日期时间之后发生的请求，也就是说，只有在指定日期之后的请求，才能被转发，假设我们的配置如下：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">80</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">cloud:</span><br>    <span class="hljs-attr">gateway:</span><br>      <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span><br>      <span class="hljs-attr">routes:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">id:</span> <span class="hljs-string">app-service1</span><br>          <span class="hljs-attr">uri:</span> <span class="hljs-string">http://localhost:9000</span><br>          <span class="hljs-attr">predicates:</span> <span class="hljs-comment">#断言，为真则匹配成功</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">After=2025-01-20T09:08:01.000+08:00[Asia/Shanghai]</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">Path=/app1/**</span> <span class="hljs-comment">#配置规则Path，如果是app1开头的请求，会转发到目标URL</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">id:</span> <span class="hljs-string">app-service2</span><br>          <span class="hljs-attr">uri:</span> <span class="hljs-string">http://localhost:9001</span><br>          <span class="hljs-attr">predicates:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">Path=/app2/**</span><br></code></pre></td></tr></table></figure><p>在1月20号9点8分之前：</p><img src="/2024/04/02/SpringGateway%E5%AD%A6%E4%B9%A02/image1.png" class=""><p>在1月20号9点8分之后：</p><img src="/2024/04/02/SpringGateway%E5%AD%A6%E4%B9%A02/image2.png" class=""><h4 id="1-2-Before"><a href="#1-2-Before" class="headerlink" title="1.2. Before"></a>1.2. Before</h4><p>Before用于匹配在指定日期之前的请求，也就是说，只有在指定日期之前，该请求才会被匹配并转发<br>假设我们的配置如下：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">80</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">cloud:</span><br>    <span class="hljs-attr">gateway:</span><br>      <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span><br>      <span class="hljs-attr">routes:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">id:</span> <span class="hljs-string">app-service1</span><br>          <span class="hljs-attr">uri:</span> <span class="hljs-string">http://localhost:9000</span><br>          <span class="hljs-attr">predicates:</span> <span class="hljs-comment">#断言，为真则匹配成功</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">After=2024-01-20T09:08:01.000+08:00[Asia/Shanghai]</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">Path=/app1/**</span> <span class="hljs-comment">#配置规则Path，如果是app1开头的请求，会转发到目标URL</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">id:</span> <span class="hljs-string">app-service2</span><br>          <span class="hljs-attr">uri:</span> <span class="hljs-string">http://localhost:9001</span><br>          <span class="hljs-attr">predicates:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">Before=2024-01-20T09:17:01.000+08:00[Asia/Shanghai]</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">Path=/app2/**</span><br></code></pre></td></tr></table></figure><p>在1月20号9点17分之前：</p><img src="/2024/04/02/SpringGateway%E5%AD%A6%E4%B9%A02/image3.png" class=""><p>在1月20号9点17分之后：</p><img src="/2024/04/02/SpringGateway%E5%AD%A6%E4%B9%A02/image4.png" class=""><h3 id="2-网关过滤器"><a href="#2-网关过滤器" class="headerlink" title="2. 网关过滤器"></a>2. 网关过滤器</h3><h4 id="2-1-Gateway-Filter"><a href="#2-1-Gateway-Filter" class="headerlink" title="2.1. Gateway Filter"></a>2.1. Gateway Filter</h4><p>SpringCloud Gateway的Filter分为两种类型：Gateway Filter和Global Filter，过滤器会对请求和响应进行处理，比如添加参数，URL重写等，常用的网关过滤器如下：</p><img src="/2024/04/02/SpringGateway%E5%AD%A6%E4%B9%A02/image5.png" class=""><h5 id="2-1-1-AddRequestHeader"><a href="#2-1-1-AddRequestHeader" class="headerlink" title="2.1.1. AddRequestHeader"></a>2.1.1. AddRequestHeader</h5><p>AddRequestHeader需要name和value参数<br>假设我们修改gateway应用的配置如下：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">80</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">cloud:</span><br>    <span class="hljs-attr">gateway:</span><br>      <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span><br>      <span class="hljs-attr">routes:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">id:</span> <span class="hljs-string">app-service1</span><br>          <span class="hljs-attr">uri:</span> <span class="hljs-string">http://localhost:9000</span><br>          <span class="hljs-attr">predicates:</span> <span class="hljs-comment">#断言，为真则匹配成功</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">Path=/app1/**</span> <span class="hljs-comment">#配置规则Path，如果是app1开头的请求，会转发到目标URL</span><br>          <span class="hljs-attr">filters:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">AddRequestHeader=X-Request-red,blue</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">id:</span> <span class="hljs-string">app-service2</span><br>          <span class="hljs-attr">uri:</span> <span class="hljs-string">http://localhost:9001</span><br>          <span class="hljs-attr">predicates:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">Path=/app2/**</span><br>          <span class="hljs-attr">filters:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">AddRequestHeader=X-Request-red,blue</span><br></code></pre></td></tr></table></figure><p>这里会将blue消息头添加到所有匹配请求的下游请求消息头中<br>然后修改app-service1应用的controller</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(value = &quot;/app1&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">App1Controller</span> &#123;<br><br>    <span class="hljs-meta">@GetMapping(value = &quot;/test&quot;)</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">test</span><span class="hljs-params">(HttpServletRequest request)</span> &#123;<br>        System.out.println(request.getHeader(<span class="hljs-string">&quot;X-Request-red&quot;</span>));<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;app1&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>修改app-service2应用的controller</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(value = &quot;/app2&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">App2Controller</span> &#123;<br><br>    <span class="hljs-meta">@GetMapping(value = &quot;/test&quot;)</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">test</span><span class="hljs-params">(HttpServletRequest request)</span> &#123;<br>        System.out.println(request.getHeader(<span class="hljs-string">&quot;X-Request-red&quot;</span>));<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;app2&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>分别访问<a href="http://localhost/app1/test%E5%92%8Chttp://localhost/app2/test%EF%BC%8C%E7%84%B6%E5%90%8E%E6%9F%A5%E7%9C%8B%E6%8E%A7%E5%88%B6%E5%8F%B0%EF%BC%8C%E5%8F%91%E7%8E%B0%E7%A1%AE%E5%AE%9E%E6%9C%89%E6%B7%BB%E5%8A%A0%E4%B8%8Ablue%E8%AF%B7%E6%B1%82%E5%A4%B4">http://localhost/app1/test和http://localhost/app2/test，然后查看控制台，发现确实有添加上blue请求头</a></p><img src="/2024/04/02/SpringGateway%E5%AD%A6%E4%B9%A02/image6.png" class=""><img src="/2024/04/02/SpringGateway%E5%AD%A6%E4%B9%A02/image7.png" class=""><h5 id="2-1-2-AddRequestParameter"><a href="#2-1-2-AddRequestParameter" class="headerlink" title="2.1.2. AddRequestParameter"></a>2.1.2. AddRequestParameter</h5><p>AddRequestParamter需要name和value参数<br>我们修改gateway的配置如下：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">80</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">cloud:</span><br>    <span class="hljs-attr">gateway:</span><br>      <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span><br>      <span class="hljs-attr">routes:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">id:</span> <span class="hljs-string">app-service1</span><br>          <span class="hljs-attr">uri:</span> <span class="hljs-string">http://localhost:9000</span><br>          <span class="hljs-attr">predicates:</span> <span class="hljs-comment">#断言，为真则匹配成功</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">Path=/app1/**</span> <span class="hljs-comment">#配置规则Path，如果是app1开头的请求，会转发到目标URL</span><br>          <span class="hljs-attr">filters:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">AddRequestHeader=X-Request-red,blue</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">AddRequestParameter=red,blue</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">id:</span> <span class="hljs-string">app-service2</span><br>          <span class="hljs-attr">uri:</span> <span class="hljs-string">http://localhost:9001</span><br>          <span class="hljs-attr">predicates:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">Path=/app2/**</span><br>          <span class="hljs-attr">filters:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">AddRequestHeader=X-Request-red,blue</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">AddRequestParameter=red,blue</span><br></code></pre></td></tr></table></figure><p>这里表示将red&#x3D;blue添加到下游请求参数中<br>我们修改app-service1和app-service2的controller代码，方便查看结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(value = &quot;/app1&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">App1Controller</span> &#123;<br><br>    <span class="hljs-meta">@GetMapping(value = &quot;/test&quot;)</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">test</span><span class="hljs-params">(HttpServletRequest request)</span> &#123;<br>        System.out.println(request.getHeader(<span class="hljs-string">&quot;X-Request-red&quot;</span>));<br>        System.out.println(request.getParameter(<span class="hljs-string">&quot;red&quot;</span>));<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;app1&quot;</span>;<br>    &#125;<br>&#125;<br><br><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(value = &quot;/app2&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">App2Controller</span> &#123;<br><br>    <span class="hljs-meta">@GetMapping(value = &quot;/test&quot;)</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">test</span><span class="hljs-params">(HttpServletRequest request)</span> &#123;<br>        System.out.println(request.getHeader(<span class="hljs-string">&quot;X-Request-red&quot;</span>));<br>        System.out.println(request.getParameter(<span class="hljs-string">&quot;red&quot;</span>));<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;app2&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>分别访问<a href="http://localhost/app1/test%E5%92%8Chttp://localhost/app2/test%EF%BC%8C%E7%BB%93%E6%9E%9C%E5%A6%82%E4%B8%8B%EF%BC%9A">http://localhost/app1/test和http://localhost/app2/test，结果如下：</a></p><img src="/2024/04/02/SpringGateway%E5%AD%A6%E4%B9%A02/image8.png" class=""><img src="/2024/04/02/SpringGateway%E5%AD%A6%E4%B9%A02/image9.png" class=""><h4 id="2-2-GlobalFilter"><a href="#2-2-GlobalFilter" class="headerlink" title="2.2. GlobalFilter"></a>2.2. GlobalFilter</h4><p>GlobalFilter是应用于所有路由的特殊过滤器</p><img src="/2024/04/02/SpringGateway%E5%AD%A6%E4%B9%A02/image10.png" class=""><p>通过全局网关过滤器，我们可以很方便的实现统一鉴权，下面我们自定义一个全局过滤器，通过token判断用户是否登录，从而实现一个统一的鉴权。<br>我们在gateway项目中，添加一个鉴权的全局网关过滤器：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.young.filter;<br><br><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSONObject;<br><span class="hljs-keyword">import</span> org.springframework.cloud.gateway.filter.GatewayFilterChain;<br><span class="hljs-keyword">import</span> org.springframework.cloud.gateway.filter.GlobalFilter;<br><span class="hljs-keyword">import</span> org.springframework.core.Ordered;<br><span class="hljs-keyword">import</span> org.springframework.core.io.buffer.DataBuffer;<br><span class="hljs-keyword">import</span> org.springframework.http.HttpStatus;<br><span class="hljs-keyword">import</span> org.springframework.http.server.reactive.ServerHttpRequest;<br><span class="hljs-keyword">import</span> org.springframework.http.server.reactive.ServerHttpResponse;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><span class="hljs-keyword">import</span> org.springframework.util.StringUtils;<br><span class="hljs-keyword">import</span> org.springframework.web.server.ServerWebExchange;<br><span class="hljs-keyword">import</span> reactor.core.publisher.Flux;<br><span class="hljs-keyword">import</span> reactor.core.publisher.Mono;<br><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AuthorizeFilter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">GlobalFilter</span>, Ordered &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Mono&lt;Void&gt; <span class="hljs-title function_">filter</span><span class="hljs-params">(ServerWebExchange exchange, GatewayFilterChain chain)</span> &#123;<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">ServerHttpResponse</span> <span class="hljs-variable">servletResponse</span> <span class="hljs-operator">=</span> exchange.getResponse();<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">ServerHttpRequest</span> <span class="hljs-variable">servletRequest</span> <span class="hljs-operator">=</span> exchange.getRequest();<br>        <span class="hljs-comment">// 获取token参数</span><br>        <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">token</span> <span class="hljs-operator">=</span> servletRequest.getHeaders().getFirst(<span class="hljs-string">&quot;token&quot;</span>);<br>        <span class="hljs-keyword">if</span> (StringUtils.isEmpty(token)) &#123;<br>            servletResponse.setStatusCode(HttpStatus.UNAUTHORIZED);<br>            servletResponse.getHeaders().add(<span class="hljs-string">&quot;Content-Type&quot;</span>, <span class="hljs-string">&quot;application/json;charset=UTF-8&quot;</span>);<br>            <span class="hljs-type">JSONObject</span> <span class="hljs-variable">jsonObject</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JSONObject</span>();<br>            jsonObject.put(<span class="hljs-string">&quot;code&quot;</span>, <span class="hljs-string">&quot;403&quot;</span>);<br>            jsonObject.put(<span class="hljs-string">&quot;message&quot;</span>, <span class="hljs-string">&quot;token is empty&quot;</span>);<br>            <span class="hljs-keyword">final</span> <span class="hljs-type">DataBuffer</span> <span class="hljs-variable">dataBuffer</span> <span class="hljs-operator">=</span> servletResponse.bufferFactory().wrap(jsonObject.toJSONString().getBytes());<br>            <span class="hljs-keyword">return</span> servletResponse.writeWith(Flux.just(dataBuffer));<br>        &#125;<br>        <span class="hljs-keyword">return</span> chain.filter(exchange);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getOrder</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>重新启动项目，然后访问<a href="http://localhost/app1/test">http://localhost/app1/test</a></p><img src="/2024/04/02/SpringGateway%E5%AD%A6%E4%B9%A02/image11.png" class=""><p>由于没有携带token，因此被拦截住，假设我们现在在请求头上添加token，再次访问，结果如下：</p><img src="/2024/04/02/SpringGateway%E5%AD%A6%E4%B9%A02/image12.png" class=""><p>此时能够访问成功，这里只是为了演示，因此鉴权逻辑写的比较简单，真实情况下的鉴权，可以基于此进行扩展和补充。</p><h3 id="3-参考文档"><a href="#3-参考文档" class="headerlink" title="3. 参考文档"></a>3. 参考文档</h3><p><a href="https://blog.csdn.net/zouliping123456/article/details/116128179">https://blog.csdn.net/zouliping123456/article/details/116128179</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>SpringBoot</tag>
      
      <tag>SpringGateway</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringGateway学习1</title>
    <link href="/2024/04/02/SpringGateway%E5%AD%A6%E4%B9%A01/"/>
    <url>/2024/04/02/SpringGateway%E5%AD%A6%E4%B9%A01/</url>
    
    <content type="html"><![CDATA[<h3 id="1-背景"><a href="#1-背景" class="headerlink" title="1. 背景"></a>1. 背景</h3><p>API网关是一个服务器，是系统对外的唯一入口，对于服务数量众多、复杂度比较高、规模比较大的业务来说，引入API网关有以下好处：<br>1） 聚合接口使得服务对调用者透明，客户端与后端耦合度降低<br>2） 聚合后台服务，节省流量，提高性能和用户体验<br>3）提供安全、流控、过滤、缓存、计费、监控等API管理功能<br>SpringCloud Gateway是基于Spring生态系统之上搭建的API网关，包括：Spring5， SpringBoot2和Project Reactor。Spring Cloud Gateway旨在提供一种简单有效的方法来路由到API，并为它们提供领域的关注点，例如安全性、监控&#x2F;指标、限流等。</p><h3 id="2-核心概念和原理"><a href="#2-核心概念和原理" class="headerlink" title="2. 核心概念和原理"></a>2. 核心概念和原理</h3><h4 id="2-1-核心概念"><a href="#2-1-核心概念" class="headerlink" title="2.1. 核心概念"></a>2.1. 核心概念</h4><p>路由（Route）：路由信息由ID、目标URL、一组断言和一组过滤器组成，如果断言路由为真，说明请求的URI和配置匹配<br>断言（Predicate）：Java8中的断言函数，SpringCloud Gateway中的断言函数，允许开发者去定义匹配来自Http Request中的任何信息，比如请求头和参数等<br>过滤器（Filter）：在SpringCloud Gateway中，有两种过滤器：Gateway Filter 和 Global Filter，过滤器负责对请求和响应进行处理。</p><h4 id="2-2-工作原理"><a href="#2-2-工作原理" class="headerlink" title="2.2. 工作原理"></a>2.2. 工作原理</h4><img src="/2024/04/02/SpringGateway%E5%AD%A6%E4%B9%A01/image1.png" class=""><p>客户端向Spring Cloud Gateway发出请求，由网关处理程序Gateway Handler Mapping映射确定与请求相匹配的路由（route），将其发送到网关web处理程序Gateway Web Handler，该程序通过指定的过滤器将请求发送到实际的服务，执行业务逻辑，然后返回。<br>过滤器由虚线分隔的原因是，过滤器可以在发送代理请求之前和之后运行逻辑。所有 pre过滤器逻辑均被执行。然后发出代理清求。发出代理清求后，将运行post过滤器逻辑。</p><h3 id="3-入门案例"><a href="#3-入门案例" class="headerlink" title="3. 入门案例"></a>3. 入门案例</h3><h4 id="3-1-创建普通的web项目，并测试相关接口"><a href="#3-1-创建普通的web项目，并测试相关接口" class="headerlink" title="3.1. 创建普通的web项目，并测试相关接口"></a>3.1. 创建普通的web项目，并测试相关接口</h4><p>创建一个maven项目，在该maven项目下，创建三个子模块，假设分别命名为gateway、app-service1、app-service2</p><img src="/2024/04/02/SpringGateway%E5%AD%A6%E4%B9%A01/image2.png" class=""><p>在父模块的pom.xml中，添加相关的版本管理</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.example<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>springcloudgateway1<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">packaging</span>&gt;</span>pom<span class="hljs-tag">&lt;/<span class="hljs-name">packaging</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">modules</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">module</span>&gt;</span>gateway<span class="hljs-tag">&lt;/<span class="hljs-name">module</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">module</span>&gt;</span>app-service1<span class="hljs-tag">&lt;/<span class="hljs-name">module</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">module</span>&gt;</span>app-service2<span class="hljs-tag">&lt;/<span class="hljs-name">module</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">modules</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.source</span>&gt;</span>8<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.source</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.target</span>&gt;</span>8<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.target</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">spring.boot.version</span>&gt;</span>2.5.2<span class="hljs-tag">&lt;/<span class="hljs-name">spring.boot.version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">spring.cloud.version</span>&gt;</span>2020.0.3<span class="hljs-tag">&lt;/<span class="hljs-name">spring.cloud.version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">spring.cloud.alibaba.version</span>&gt;</span>2.2.6.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">spring.cloud.alibaba.version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--Spring版本--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencyManagement</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-alibaba-dependencies<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;spring.cloud.alibaba.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">type</span>&gt;</span>pom<span class="hljs-tag">&lt;/<span class="hljs-name">type</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>import<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-dependencies<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;spring.boot.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">type</span>&gt;</span>pom<span class="hljs-tag">&lt;/<span class="hljs-name">type</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>import<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;spring.cloud.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">type</span>&gt;</span>pom<span class="hljs-tag">&lt;/<span class="hljs-name">type</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>import<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencyManagement</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br></code></pre></td></tr></table></figure><p>在gateway模块，添加下列依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-gateway<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><p>app-service1和app-service2模块，添加下列依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><p>在app-service1模块，添加启动类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.young;<br><br><span class="hljs-keyword">import</span> org.springframework.boot.SpringApplication;<br><span class="hljs-keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;<br><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Service1App</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        SpringApplication.run(Service1App.class, args);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>添加一个controller类用于测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(value = &quot;/app1&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">App1Controller</span> &#123;<br><br>    <span class="hljs-meta">@GetMapping(value = &quot;/test&quot;)</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">test</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;app1&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>application.yml配置信息如下：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">9000</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">app-service1</span><br></code></pre></td></tr></table></figure><p>在app-service2中，添加启动类</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Service2App</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">main</span>(<span class="hljs-params"><span class="hljs-built_in">String</span>[] args</span>) &#123;<br>        <span class="hljs-title class_">SpringApplication</span>.<span class="hljs-title function_">run</span>(<span class="hljs-title class_">Service2App</span>.<span class="hljs-property">class</span>, args);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>对外controller</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(value = &quot;/app2&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">App2Controller</span> &#123;<br><br>    <span class="hljs-meta">@GetMapping(value = &quot;/test&quot;)</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">test</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;app2&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>配置文件：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">9001</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">app-service2</span><br></code></pre></td></tr></table></figure><p>启动app-service1和app-service2，然后访问<a href="http://localhost:9000/app1/test%E5%92%8Chttp://localhost:9001/app2/test%EF%BC%8C%E7%BB%93%E6%9E%9C%E5%A6%82%E4%B8%8B%EF%BC%9A">http://localhost:9000/app1/test和http://localhost:9001/app2/test，结果如下：</a></p><img src="/2024/04/02/SpringGateway%E5%AD%A6%E4%B9%A01/image3.png" class=""><img src="/2024/04/02/SpringGateway%E5%AD%A6%E4%B9%A01/image4.png" class=""><h4 id="3-2-配置网关转发"><a href="#3-2-配置网关转发" class="headerlink" title="3.2. 配置网关转发"></a>3.2. 配置网关转发</h4><p>在gateway模块，添加启动类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">GatewayApp</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        SpringApplication.run(GatewayApp.class, args);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>修改配置文件，配置路由转发规则</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">80</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">cloud:</span><br>    <span class="hljs-attr">gateway:</span><br>      <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span><br>      <span class="hljs-attr">routes:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">id:</span> <span class="hljs-string">app-service1</span><br>          <span class="hljs-attr">uri:</span> <span class="hljs-string">http://localhost:9000</span><br>          <span class="hljs-attr">predicates:</span> <span class="hljs-comment">#断言，为真则匹配成功</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">Path=/app1/**</span> <span class="hljs-comment">#配置规则Path，如果是app1开头的请求，会转发到目标URL</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">id:</span> <span class="hljs-string">app-service2</span><br>          <span class="hljs-attr">uri:</span> <span class="hljs-string">http://localhost:9001</span><br>          <span class="hljs-attr">predicates:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">Path=/app2/**</span><br></code></pre></td></tr></table></figure><p>启动gateway项目，使用gateway的端口，进行测试</p><img src="/2024/04/02/SpringGateway%E5%AD%A6%E4%B9%A01/image5.png" class=""><img src="/2024/04/02/SpringGateway%E5%AD%A6%E4%B9%A01/image6.png" class="">]]></content>
    
    
    
    <tags>
      
      <tag>SpringBoot</tag>
      
      <tag>SpringGateway</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>线程池</title>
    <link href="/2024/04/02/%E7%BA%BF%E7%A8%8B%E6%B1%A0/"/>
    <url>/2024/04/02/%E7%BA%BF%E7%A8%8B%E6%B1%A0/</url>
    
    <content type="html"><![CDATA[<p>Executors是一个工厂类，提供了创建几种预配置线程池实例地方法，如果不需要应用任何自定义地微调，可以调用这些方法创建默认配置地线程池。Executors工厂类提供地线程池有以下几种：<br>1）newCachedThreadPool(): 创建一个可缓存地线程池，这个线程池地线程数量可以根据需要自动扩展，如果有可用的空闲线程，就会重用它们；如果没有可用的线程，就会创建一个新线程，适用于执行大量的短期异步任务。<br>2）newFixedThreadPool(int nThreads): 创建一个固定大小的线程池，其中包含指定数量的线程，线程数量是固定的，不会自动扩展，适用于执行固定数量的长期任务。<br>3）newSingleThreadExecutor(): 创建一个单线程的线程池，用于串行执行任务。适用于需要按顺序执行任务的场景。<br>4）newScheduledThreadPool(int corePoolSize): 创建一个单线程的定时执行线程池。只包含一个线程，用于串行定时执行任务。<br>5）newWorkStealingPool(int parallelism): 创建一个工作窃取线程池，线程数量根据CPU核心数动态调整，适用于CPU密集型的任务。</p><h3 id="ExecutorService"><a href="#ExecutorService" class="headerlink" title="ExecutorService"></a>ExecutorService</h3><p>ExecutorService是java.util.concurrent包的重要组成部分，是Java JDK提供的框架，用于简化异步模式下任务的执行。一般来说，ExecutorService会自动提供一个线程池和相关API，用于为其分配任务。</p><h4 id="工厂方法实例化ExecutorService"><a href="#工厂方法实例化ExecutorService" class="headerlink" title="工厂方法实例化ExecutorService"></a>工厂方法实例化ExecutorService</h4><p>Executors类提供了许多工厂方法用于实例化ExecutorService，最常用的是newFixedThreadPool方法，用于创建指定线程数的ExecutorService实例，使用方法如下所示：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">ExecutorService executor = Executors.newFixedThreadPool(10);<br></code></pre></td></tr></table></figure><h4 id="直接创建ExecutorService实例"><a href="#直接创建ExecutorService实例" class="headerlink" title="直接创建ExecutorService实例"></a>直接创建ExecutorService实例</h4><p>ExecutorService是一个接口，因此可以使用其任何实现类的实例，例如ThreadPoolExecutor类实现了ExecutorService接口并提供了一些构造函数用于配置执行程序服务及其内部池。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml">int core = Runtime.getRuntime().availableProcessors();<br>int max = Runtime.getRuntime().availableProcessors() * 2 + 1;<br>int wait = 60;<br>int capacity = 500;<br>ThreadPoolExecutor threadPoolExecutor = new ThreadPoolExecutor(core, max, wait, TimeUnit.SECONDS,<br>      new LinkedBlockingQueue<span class="hljs-tag">&lt;&gt;</span>(capacity),<br>      Executors.defaultThreadFactory(),<br>      new ThreadPoolExecutor.CallerRunsPolicy());<br></code></pre></td></tr></table></figure><p>这里的参数，从左到右分别表示：<br>1）corePoolSize：核心线程数<br>2）maxPoolSize：最大线程数<br>3）keepAliveTime：额外的线程（即实例化超过corePoolSize的线程）在空闲状态下的存活时间。<br>4）unit：等待时间单位<br>5）workQueue：任务队列<br>6）threadFactory：线程工厂<br>7）handler：拒绝策略<br>其中，拒绝策略主要有以下几种：<br>1）AbortPolicy：直接抛出RejectedExecutionException异常阻止系统正常运行。<br>2）CallerRunsPolicy：既不抛弃任务，也不抛出异常，而是将某些任务回退给调用者，从而降低任务的流量。<br>3）DiscardOldestPolicy：抛出等待队列中最先等待的任务，然后把当前任务加入队列中。<br>4）DiscardPolicy：既不处理也不抛出异常，如果允许任务丢弃，这是最好的方法。</p><h4 id="任务分配给ExecutorService"><a href="#任务分配给ExecutorService" class="headerlink" title="任务分配给ExecutorService"></a>任务分配给ExecutorService</h4><p>ExecutorService可以执行Runnable和Callable任务，首先我们创建两个原始任务类：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs xml">private static List&lt;Callable<span class="hljs-tag">&lt;<span class="hljs-name">String</span>&gt;</span>&gt; buildCallableTasks() &#123;<br>      Callable<span class="hljs-tag">&lt;<span class="hljs-name">String</span>&gt;</span> callableTask = () -&gt; &#123;<br>          TimeUnit.MILLISECONDS.sleep(300);<br>          System.out.println(&quot;buildCallable==========&quot;);<br>          return &quot;Task&#x27;s execution&quot;;<br>      &#125;;<br><br>      List&lt;Callable<span class="hljs-tag">&lt;<span class="hljs-name">String</span>&gt;</span>&gt; callableTasks = new ArrayList<span class="hljs-tag">&lt;&gt;</span>();<br>      callableTasks.add(callableTask);<br>      callableTasks.add(callableTask);<br>      callableTasks.add(callableTask);<br>      return callableTasks;<br>  &#125;<br><br>  private static Runnable buildRunnable() &#123;<br>      return () -&gt; &#123;<br>          try &#123;<br>              TimeUnit.MILLISECONDS.sleep(300);<br>              System.out.println(&quot;buildRunnable===========&quot;);<br>          &#125; catch (InterruptedException e) &#123;<br>              e.printStackTrace();<br>          &#125;<br>      &#125;;<br>  &#125;<br></code></pre></td></tr></table></figure><p>创建完任务之后，可以使用多种方法将任务分配给ExecutorService.</p><h5 id="execute"><a href="#execute" class="headerlink" title="execute"></a>execute</h5><p>改方法返回值为空(void),因此改方法没有任何可能获得任务执行结果或检查任务的状态。使用示例如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml">private static void testExecute() &#123;<br>       ExecutorService executorService = Executors.newFixedThreadPool(2);<br>       Runnable runnable = buildRunnable();<br>       executorService.execute(runnable);<br>       System.out.println(&quot;hello world=========&quot;);<br>   &#125;<br></code></pre></td></tr></table></figure><p>在main方法中调用该方法，结果如下：</p><img src="/2024/04/02/%E7%BA%BF%E7%A8%8B%E6%B1%A0/image.png" class=""><h5 id="submit"><a href="#submit" class="headerlink" title="submit"></a>submit</h5><p>submit方法会将一个Callable或Runnable任务提交给ExecutorService并返回future类型的结果。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xml">private static void testSubmit() throws ExecutionException, InterruptedException &#123;<br>       ExecutorService executorService = Executors.newFixedThreadPool(2);<br>       Runnable runnable = buildRunnable();<br>       List&lt;Callable<span class="hljs-tag">&lt;<span class="hljs-name">String</span>&gt;</span>&gt; callableTasks = buildCallableTasks();<br>       Future&lt;?&gt; runnableFuture = executorService.submit(runnable);<br>       List&lt;Future<span class="hljs-tag">&lt;<span class="hljs-name">String</span>&gt;</span>&gt; callableFutures = new ArrayList<span class="hljs-tag">&lt;&gt;</span>();<br>       for (Callable<span class="hljs-tag">&lt;<span class="hljs-name">String</span>&gt;</span> callableTask : callableTasks) &#123;<br>           callableFutures.add(executorService.submit(callableTask));<br>       &#125;<br>       System.out.println(runnableFuture.get());<br>       for (Future<span class="hljs-tag">&lt;<span class="hljs-name">String</span>&gt;</span> callableFuture : callableFutures) &#123;<br>           System.out.println(callableFuture.get());<br>       &#125;<br>   &#125;<br></code></pre></td></tr></table></figure><p>通过future类的get方法，能获取返回的结果，如果提交的是一个Runnable任务，那么通过future的get方法，返回的是一个null，如下图所示：</p><img src="/2024/04/02/%E7%BA%BF%E7%A8%8B%E6%B1%A0/image(1).png" class=""><h5 id="invokeAny"><a href="#invokeAny" class="headerlink" title="invokeAny"></a>invokeAny</h5><p>invokeAny方法将一组任务分配给ExecutorService，使每个任务执行，并返回任意一个成功执行的任务结果。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml">private static void testInvokeAny() throws ExecutionException, InterruptedException &#123;<br>      ExecutorService executorService = Executors.newFixedThreadPool(2);<br>      List&lt;Callable<span class="hljs-tag">&lt;<span class="hljs-name">String</span>&gt;</span>&gt; callableTasks = buildCallableTasks();<br>      String result = executorService.invokeAny(callableTasks);<br>      System.out.println(result);<br>  &#125;<br></code></pre></td></tr></table></figure><p>结果如下所示：</p><img src="/2024/04/02/%E7%BA%BF%E7%A8%8B%E6%B1%A0/image(2).png" class=""><h5 id="invokeAll"><a href="#invokeAll" class="headerlink" title="invokeAll"></a>invokeAll</h5><p>invokeAll方法将一组任务分配给ExecutorService，使每个任务执行，并以Future类型的对象列表形式返回所有任务执行的结果。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml">private static void testInvokeAll() throws InterruptedException, ExecutionException &#123;<br>       ExecutorService executorService = Executors.newFixedThreadPool(2);<br>       List&lt;Callable<span class="hljs-tag">&lt;<span class="hljs-name">String</span>&gt;</span>&gt; callableTasks = buildCallableTasks();<br>       List&lt;Future<span class="hljs-tag">&lt;<span class="hljs-name">String</span>&gt;</span>&gt; futures = executorService.invokeAll(callableTasks);<br>       for (Future<span class="hljs-tag">&lt;<span class="hljs-name">String</span>&gt;</span> future : futures) &#123;<br>           System.out.println(future.get());<br>       &#125;<br>   &#125;<br></code></pre></td></tr></table></figure><p>结果如下：</p><img src="/2024/04/02/%E7%BA%BF%E7%A8%8B%E6%B1%A0/image(3).png" class=""><h4 id="关闭ExecutorService"><a href="#关闭ExecutorService" class="headerlink" title="关闭ExecutorService"></a>关闭ExecutorService</h4><p>一般情况下，ExecutorService并不会自动关闭，即使所有任务都执行完毕，或者没有要处理的任务，也不会自动销毁ExecutorService，会一直处于等待状态，等待我们给他分配新的工作。当应用程序需要处理不定期出现的任务时，这种机制很有用，但是也带来一些副作用：即使应用程序到达它的终点，也不会被停止，因为等待ExecutorService将导致JVM继续运行，这样，我们就需要主动关闭Executor Service。<br>要关闭ExecutorService，可以使用shutdown方法或shutdownNow方法</p><h5 id="shutdown"><a href="#shutdown" class="headerlink" title="shutdown"></a>shutdown</h5><p>shutdown方法并保护会立即销毁ExecutorService实例，而是首先让ExecutorService停止接受新任务，并且在所有正在运行的线程完成当前工作后关闭。</p><h5 id="shutdownNow"><a href="#shutdownNow" class="headerlink" title="shutdownNow"></a>shutdownNow</h5><p>shutdownNow() 方法会尝试立即销毁 ExecutorService 实例，所以并不能保证所有正在运行的线程将同时停止。该方法会返回等待处理的任务列表，由开发人员自行决定如何处理这些任务。<br>因为提供了两个方法，因此关闭 ExecutorService 实例的最佳实战 （ 也是 Oracle 所推荐的 ）就是同时使用这两种方法并结合 awaitTermination() 方法。<br>使用这种方式，ExecutorService 首先停止执行新任务，等待指定的时间段完成所有任务。如果该时间到期，则立即停止执行。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs xml">private static void testInvokeAll() throws InterruptedException, ExecutionException &#123;<br>     ExecutorService executorService = Executors.newFixedThreadPool(2);<br>     List&lt;Callable<span class="hljs-tag">&lt;<span class="hljs-name">String</span>&gt;</span>&gt; callableTasks = buildCallableTasks();<br>     List&lt;Future<span class="hljs-tag">&lt;<span class="hljs-name">String</span>&gt;</span>&gt; futures = executorService.invokeAll(callableTasks);<br>     for (Future<span class="hljs-tag">&lt;<span class="hljs-name">String</span>&gt;</span> future : futures) &#123;<br>         System.out.println(future.get());<br>     &#125;<br>     executorService.shutdown();<br>     try &#123;<br>         if (!executorService.awaitTermination(800, TimeUnit.MILLISECONDS)) &#123;<br>             executorService.shutdownNow();<br>         &#125;<br>     &#125; catch (InterruptedException e) &#123;<br>         executorService.shutdownNow();<br>     &#125;<br> &#125;<br></code></pre></td></tr></table></figure><h3 id="Future接口"><a href="#Future接口" class="headerlink" title="Future接口"></a>Future接口</h3><p>在ExecutorService的submit方法、invokeAll方法，都会返回一个Future对象或Future对象集合，这些Future接口的对象允许我们获取任务执行的结果或检查任务状态（运行中还是执行完毕）</p><h4 id="get方法"><a href="#get方法" class="headerlink" title="get方法"></a>get方法</h4><p>future接口提供一个特殊的阻塞方法get，它返回callable任务执行的实际结果，但如果是runnable任务，只会返回null。此外，正在执行的任务随时可能抛出异常或中断执行，因此我们要将get调用放在try catch语句块中，以捕获InterruptedException或ExecutionException异常。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs xml">private static void testFutureGet() &#123;<br>      ExecutorService executorService = Executors.newFixedThreadPool(2);<br>      Callable<span class="hljs-tag">&lt;<span class="hljs-name">String</span>&gt;</span> callable = () -&gt; &#123;<br>          System.out.println(&quot;执行callable任务&quot;);<br>          TimeUnit.MILLISECONDS.sleep(300);<br>          return &quot;callable执行完毕&quot;;<br>      &#125;;<br>      Future<span class="hljs-tag">&lt;<span class="hljs-name">String</span>&gt;</span> future = executorService.submit(callable);<br>      try &#123;<br>          String result = future.get();<br>          System.out.println(result);<br>      &#125; catch (InterruptedException | ExecutionException e) &#123;<br>          e.printStackTrace();<br>      &#125;<br>      executorService.shutdown();<br>      try &#123;<br>          if (!executorService.awaitTermination(800, TimeUnit.MILLISECONDS)) &#123;<br>              executorService.shutdownNow();<br>          &#125;<br>      &#125; catch (InterruptedException e) &#123;<br>          executorService.shutdownNow();<br>      &#125;<br>  &#125;<br><br></code></pre></td></tr></table></figure><p>因为get方法是阻塞的，并且不知道要阻塞多长时间，因此可能导致应用程序的性能降低，如果结果数据并不重要，我们可以使用超时机制来避免长时间阻塞，也就是使用get的重载方法，第一个参数为超时时间，第二个参数为时间的单位。如果在超时时间内正常结束，那么返回Future的结果，如果超时了还没结束，那么将抛出TimeoutExeception异常。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs xml">private static void testFutureGet() &#123;<br>        ExecutorService executorService = Executors.newFixedThreadPool(2);<br>        Callable<span class="hljs-tag">&lt;<span class="hljs-name">String</span>&gt;</span> callable = () -&gt; &#123;<br>            System.out.println(&quot;执行callable任务&quot;);<br>            TimeUnit.MILLISECONDS.sleep(300);<br>            return &quot;callable执行完毕&quot;;<br>        &#125;;<br>        Future<span class="hljs-tag">&lt;<span class="hljs-name">String</span>&gt;</span> future = executorService.submit(callable);<br>        try &#123;<br>            String result = future.get(400, TimeUnit.MILLISECONDS);<br>            System.out.println(result);<br>        &#125; catch (InterruptedException | ExecutionException | TimeoutException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br><br>        Callable<span class="hljs-tag">&lt;<span class="hljs-name">String</span>&gt;</span> callable2 = () -&gt; &#123;<br>            System.out.println(&quot;执行callable任务&quot;);<br>            TimeUnit.MILLISECONDS.sleep(500);<br>            return &quot;callable执行完毕&quot;;<br>        &#125;;<br>        Future<span class="hljs-tag">&lt;<span class="hljs-name">String</span>&gt;</span> future2 = executorService.submit(callable2);<br>        try &#123;<br>            String result = future2.get(400, TimeUnit.MILLISECONDS);<br>            System.out.println(result);<br>        &#125; catch (InterruptedException | ExecutionException | TimeoutException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        executorService.shutdown();<br>        try &#123;<br>            if (!executorService.awaitTermination(800, TimeUnit.MILLISECONDS)) &#123;<br>                executorService.shutdownNow();<br>            &#125;<br>        &#125; catch (InterruptedException e) &#123;<br>            executorService.shutdownNow();<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><p>执行结果如下，第一个任务没有超时，所以能正常获取结果，第二个任务超时，所以会抛出异常。</p><img src="/2024/04/02/%E7%BA%BF%E7%A8%8B%E6%B1%A0/image(4).png" class=""><h4 id="其他方法"><a href="#其他方法" class="headerlink" title="其他方法"></a>其他方法</h4><p>除了get方法外，Future还提供许多方法，主要的方法如下：<br>1）isDone： 检查已分配的任务是否已处理<br>2）cancel： 取消任务执行<br>3）isCancelled：检查任务是否已取消</p><h3 id="ScheduledExecutorService接口"><a href="#ScheduledExecutorService接口" class="headerlink" title="ScheduledExecutorService接口"></a>ScheduledExecutorService接口</h3><p>ScheduledExecutorService接口用于在一些预定义的延迟之后运行任务或定期运行任务。我们可以通过Executors类的工厂方法实例化ScheduledExecutorService，如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">ScheduledExecutorService scheduledExecutorService = Executors.newSingleThreadScheduledExecutor();<br></code></pre></td></tr></table></figure><p>在ScheduledExecutorService接口中，有三个主要方法：<br>1）schedule：允许在指定的延迟后执行一次任务。<br>2）scheduleAtFixedRate：允许在指定的初始延迟后执行任务，然后以一定的周期重复执行，其中period参数用于指定两个任务的开始时间之间的间隔时间，因此任务执行的频率是固定的。<br>3）scheduleWithFixedDelay：类似于scheduleAtFixedRate，它也重复执行给定的任务，单period参数用于指定前一个任务的结束和下一个任务的开始之间的间隔时间，也就是指定下一个任务延时多久后才执行，执行频率可能会有所不同，具体取决于执行任务给定任务所需的时间。</p><h4 id="scheduled方法"><a href="#scheduled方法" class="headerlink" title="scheduled方法"></a>scheduled方法</h4><p>假设要在固定延迟后安排某个任务的执行，可以使用ScheduledExecutorService实例的scheduled方法：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs xml">private static void testScheduled() &#123;<br>        ScheduledExecutorService scheduledExecutorService = Executors.newSingleThreadScheduledExecutor();<br>        Callable<span class="hljs-tag">&lt;<span class="hljs-name">String</span>&gt;</span> callable = () -&gt; &#123;<br>            System.out.println(&quot;执行callable任务====&quot;);<br>            return &quot;callable&quot;;<br>        &#125;;<br>        ScheduledFuture<span class="hljs-tag">&lt;<span class="hljs-name">String</span>&gt;</span> schedule = scheduledExecutorService.schedule(callable, 1, TimeUnit.SECONDS);<br>        System.out.println(&quot;主线程运行中========&quot;);<br>        try &#123;<br>            System.out.println(schedule.get());<br>        &#125; catch (InterruptedException | ExecutionException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br><br>        scheduledExecutorService.shutdown();<br>        try &#123;<br>            if (!scheduledExecutorService.awaitTermination(800, TimeUnit.MILLISECONDS)) &#123;<br>                scheduledExecutorService.shutdownNow();<br>            &#125;<br>        &#125; catch (InterruptedException  e) &#123;<br>            scheduledExecutorService.shutdownNow();<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><p>结果如下，在延迟一秒后，才开始执行线程任务：</p><img src="/2024/04/02/%E7%BA%BF%E7%A8%8B%E6%B1%A0/image(5).png" class=""><h4 id="scheduleAtFixedRate方法"><a href="#scheduleAtFixedRate方法" class="headerlink" title="scheduleAtFixedRate方法"></a>scheduleAtFixedRate方法</h4><p>当我们需要在固定延迟后，定期执行任务时，可以使用scheduleAtFixedRate方法，如下所示，每隔500毫秒执行相同的任务：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml">private static void testScheduleAtFixRate() &#123;<br>       ScheduledExecutorService scheduledExecutorService = Executors.newSingleThreadScheduledExecutor();<br>       Runnable runnable = () -&gt; &#123;<br>           System.out.println(System.currentTimeMillis());<br>           System.out.println(&quot;执行callable任务====&quot;);<br>       &#125;;<br>       // 延迟1秒后，每间隔2秒执行一次<br>       scheduledExecutorService.scheduleAtFixedRate(runnable, 1, 2, TimeUnit.SECONDS);<br>   &#125;<br></code></pre></td></tr></table></figure><p>结果如下所示，从时间戳我们可以看出，确实是每隔2秒执行一次</p><img src="/2024/04/02/%E7%BA%BF%E7%A8%8B%E6%B1%A0/image(6).png" class=""><p>如果任务执行时间比间隔时间长，那么scheduledExecutorService将等到当前任务执行后再开始下一个任务</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xml">private static void testScheduleAtFixRate() &#123;<br>       ScheduledExecutorService scheduledExecutorService = Executors.newSingleThreadScheduledExecutor();<br>       Runnable runnable = () -&gt; &#123;<br>           System.out.println(System.currentTimeMillis());<br>           try &#123;<br>               TimeUnit.SECONDS.sleep(3);<br>           &#125; catch (InterruptedException e) &#123;<br>               throw new RuntimeException(e);<br>           &#125;<br>           System.out.println(&quot;执行callable任务====&quot;);<br>       &#125;;<br>       // 延迟1秒后，每间隔2秒执行一次<br>       scheduledExecutorService.scheduleAtFixedRate(runnable, 1, 2, TimeUnit.SECONDS);<br>   &#125;<br></code></pre></td></tr></table></figure><p>如下所示，我们执行任务需要3秒，而间隔时间是2秒，通过打印结果可以看出，任务之间间隔3秒，也就是会等待任务执行完成后才开始下一个任务：</p><img src="/2024/04/02/%E7%BA%BF%E7%A8%8B%E6%B1%A0/image(7).png" class=""><h4 id="scheduleWithFixedDelay方法"><a href="#scheduleWithFixedDelay方法" class="headerlink" title="scheduleWithFixedDelay方法"></a>scheduleWithFixedDelay方法</h4><p>如果任务之间必须具有固定长度的延迟，那么可以使用scheduleWithFixedDelay方法。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs xml">private static void testScheduleWithFixDelay() &#123;<br>     ScheduledExecutorService scheduledExecutorService = Executors.newSingleThreadScheduledExecutor();<br>     Runnable runnable = () -&gt; &#123;<br>         System.out.println(System.currentTimeMillis());<br>         try &#123;<br>             TimeUnit.SECONDS.sleep(3);<br>         &#125; catch (InterruptedException e) &#123;<br>             throw new RuntimeException(e);<br>         &#125;<br>         System.out.println(&quot;执行callable任务====&quot;);<br>     &#125;;<br>     // 延迟1秒后，每间隔2秒执行一次<br>     scheduledExecutorService.scheduleWithFixedDelay(runnable, 1, 2, TimeUnit.SECONDS);<br> &#125;<br><br></code></pre></td></tr></table></figure><p>在上述代码中，任务执行时长需要3秒，然后我们设置延迟时间为2秒，最终执行结果如下，从时间戳中可以看出，在上一个任务执行完毕后，间隔2秒才会开始下一个任务，因此任务与任务间隔时长为5秒。</p><img src="/2024/04/02/%E7%BA%BF%E7%A8%8B%E6%B1%A0/image(8).png" class=""><h3 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h3><p><a href="https://blog.csdn.net/qq_21484461/article/details/133101696">https://blog.csdn.net/qq_21484461&#x2F;article&#x2F;details&#x2F;133101696</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2024/04/02/hello-world/"/>
    <url>/2024/04/02/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
