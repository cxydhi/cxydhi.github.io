<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>线程池</title>
    <link href="/2024/04/02/%E7%BA%BF%E7%A8%8B%E6%B1%A0/"/>
    <url>/2024/04/02/%E7%BA%BF%E7%A8%8B%E6%B1%A0/</url>
    
    <content type="html"><![CDATA[<p>Executors是一个工厂类，提供了创建几种预配置线程池实例地方法，如果不需要应用任何自定义地微调，可以调用这些方法创建默认配置地线程池。Executors工厂类提供地线程池有以下几种：<br>1）newCachedThreadPool(): 创建一个可缓存地线程池，这个线程池地线程数量可以根据需要自动扩展，如果有可用的空闲线程，就会重用它们；如果没有可用的线程，就会创建一个新线程，适用于执行大量的短期异步任务。<br>2）newFixedThreadPool(int nThreads): 创建一个固定大小的线程池，其中包含指定数量的线程，线程数量是固定的，不会自动扩展，适用于执行固定数量的长期任务。<br>3）newSingleThreadExecutor(): 创建一个单线程的线程池，用于串行执行任务。适用于需要按顺序执行任务的场景。<br>4）newScheduledThreadPool(int corePoolSize): 创建一个单线程的定时执行线程池。只包含一个线程，用于串行定时执行任务。<br>5）newWorkStealingPool(int parallelism): 创建一个工作窃取线程池，线程数量根据CPU核心数动态调整，适用于CPU密集型的任务。</p><h3 id="ExecutorService"><a href="#ExecutorService" class="headerlink" title="ExecutorService"></a>ExecutorService</h3><p>ExecutorService是java.util.concurrent包的重要组成部分，是Java JDK提供的框架，用于简化异步模式下任务的执行。一般来说，ExecutorService会自动提供一个线程池和相关API，用于为其分配任务。</p><h4 id="工厂方法实例化ExecutorService"><a href="#工厂方法实例化ExecutorService" class="headerlink" title="工厂方法实例化ExecutorService"></a>工厂方法实例化ExecutorService</h4><p>Executors类提供了许多工厂方法用于实例化ExecutorService，最常用的是newFixedThreadPool方法，用于创建指定线程数的ExecutorService实例，使用方法如下所示：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">ExecutorService executor = Executors.newFixedThreadPool(10);<br></code></pre></td></tr></table></figure><h4 id="直接创建ExecutorService实例"><a href="#直接创建ExecutorService实例" class="headerlink" title="直接创建ExecutorService实例"></a>直接创建ExecutorService实例</h4><p>ExecutorService是一个接口，因此可以使用其任何实现类的实例，例如ThreadPoolExecutor类实现了ExecutorService接口并提供了一些构造函数用于配置执行程序服务及其内部池。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml">int core = Runtime.getRuntime().availableProcessors();<br>int max = Runtime.getRuntime().availableProcessors() * 2 + 1;<br>int wait = 60;<br>int capacity = 500;<br>ThreadPoolExecutor threadPoolExecutor = new ThreadPoolExecutor(core, max, wait, TimeUnit.SECONDS,<br>      new LinkedBlockingQueue<span class="hljs-tag">&lt;&gt;</span>(capacity),<br>      Executors.defaultThreadFactory(),<br>      new ThreadPoolExecutor.CallerRunsPolicy());<br></code></pre></td></tr></table></figure><p>这里的参数，从左到右分别表示：<br>1）corePoolSize：核心线程数<br>2）maxPoolSize：最大线程数<br>3）keepAliveTime：额外的线程（即实例化超过corePoolSize的线程）在空闲状态下的存活时间。<br>4）unit：等待时间单位<br>5）workQueue：任务队列<br>6）threadFactory：线程工厂<br>7）handler：拒绝策略<br>其中，拒绝策略主要有以下几种：<br>1）AbortPolicy：直接抛出RejectedExecutionException异常阻止系统正常运行。<br>2）CallerRunsPolicy：既不抛弃任务，也不抛出异常，而是将某些任务回退给调用者，从而降低任务的流量。<br>3）DiscardOldestPolicy：抛出等待队列中最先等待的任务，然后把当前任务加入队列中。<br>4）DiscardPolicy：既不处理也不抛出异常，如果允许任务丢弃，这是最好的方法。</p><h4 id="任务分配给ExecutorService"><a href="#任务分配给ExecutorService" class="headerlink" title="任务分配给ExecutorService"></a>任务分配给ExecutorService</h4><p>ExecutorService可以执行Runnable和Callable任务，首先我们创建两个原始任务类：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs xml">private static List&lt;Callable<span class="hljs-tag">&lt;<span class="hljs-name">String</span>&gt;</span>&gt; buildCallableTasks() &#123;<br>      Callable<span class="hljs-tag">&lt;<span class="hljs-name">String</span>&gt;</span> callableTask = () -&gt; &#123;<br>          TimeUnit.MILLISECONDS.sleep(300);<br>          System.out.println(&quot;buildCallable==========&quot;);<br>          return &quot;Task&#x27;s execution&quot;;<br>      &#125;;<br><br>      List&lt;Callable<span class="hljs-tag">&lt;<span class="hljs-name">String</span>&gt;</span>&gt; callableTasks = new ArrayList<span class="hljs-tag">&lt;&gt;</span>();<br>      callableTasks.add(callableTask);<br>      callableTasks.add(callableTask);<br>      callableTasks.add(callableTask);<br>      return callableTasks;<br>  &#125;<br><br>  private static Runnable buildRunnable() &#123;<br>      return () -&gt; &#123;<br>          try &#123;<br>              TimeUnit.MILLISECONDS.sleep(300);<br>              System.out.println(&quot;buildRunnable===========&quot;);<br>          &#125; catch (InterruptedException e) &#123;<br>              e.printStackTrace();<br>          &#125;<br>      &#125;;<br>  &#125;<br></code></pre></td></tr></table></figure><p>创建完任务之后，可以使用多种方法将任务分配给ExecutorService.</p><h5 id="execute"><a href="#execute" class="headerlink" title="execute"></a>execute</h5><p>改方法返回值为空(void),因此改方法没有任何可能获得任务执行结果或检查任务的状态。使用示例如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml">private static void testExecute() &#123;<br>       ExecutorService executorService = Executors.newFixedThreadPool(2);<br>       Runnable runnable = buildRunnable();<br>       executorService.execute(runnable);<br>       System.out.println(&quot;hello world=========&quot;);<br>   &#125;<br></code></pre></td></tr></table></figure><p>在main方法中调用该方法，结果如下：</p><img src="/2024/04/02/%E7%BA%BF%E7%A8%8B%E6%B1%A0/image.png" class=""><h5 id="submit"><a href="#submit" class="headerlink" title="submit"></a>submit</h5><p>submit方法会将一个Callable或Runnable任务提交给ExecutorService并返回future类型的结果。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xml">private static void testSubmit() throws ExecutionException, InterruptedException &#123;<br>       ExecutorService executorService = Executors.newFixedThreadPool(2);<br>       Runnable runnable = buildRunnable();<br>       List&lt;Callable<span class="hljs-tag">&lt;<span class="hljs-name">String</span>&gt;</span>&gt; callableTasks = buildCallableTasks();<br>       Future&lt;?&gt; runnableFuture = executorService.submit(runnable);<br>       List&lt;Future<span class="hljs-tag">&lt;<span class="hljs-name">String</span>&gt;</span>&gt; callableFutures = new ArrayList<span class="hljs-tag">&lt;&gt;</span>();<br>       for (Callable<span class="hljs-tag">&lt;<span class="hljs-name">String</span>&gt;</span> callableTask : callableTasks) &#123;<br>           callableFutures.add(executorService.submit(callableTask));<br>       &#125;<br>       System.out.println(runnableFuture.get());<br>       for (Future<span class="hljs-tag">&lt;<span class="hljs-name">String</span>&gt;</span> callableFuture : callableFutures) &#123;<br>           System.out.println(callableFuture.get());<br>       &#125;<br>   &#125;<br></code></pre></td></tr></table></figure><p>通过future类的get方法，能获取返回的结果，如果提交的是一个Runnable任务，那么通过future的get方法，返回的是一个null，如下图所示：</p><img src="/2024/04/02/%E7%BA%BF%E7%A8%8B%E6%B1%A0/image(1).png" class=""><h5 id="invokeAny"><a href="#invokeAny" class="headerlink" title="invokeAny"></a>invokeAny</h5><p>invokeAny方法将一组任务分配给ExecutorService，使每个任务执行，并返回任意一个成功执行的任务结果。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml">private static void testInvokeAny() throws ExecutionException, InterruptedException &#123;<br>      ExecutorService executorService = Executors.newFixedThreadPool(2);<br>      List&lt;Callable<span class="hljs-tag">&lt;<span class="hljs-name">String</span>&gt;</span>&gt; callableTasks = buildCallableTasks();<br>      String result = executorService.invokeAny(callableTasks);<br>      System.out.println(result);<br>  &#125;<br></code></pre></td></tr></table></figure><p>结果如下所示：</p><img src="/2024/04/02/%E7%BA%BF%E7%A8%8B%E6%B1%A0/image(2).png" class=""><h5 id="invokeAll"><a href="#invokeAll" class="headerlink" title="invokeAll"></a>invokeAll</h5><p>invokeAll方法将一组任务分配给ExecutorService，使每个任务执行，并以Future类型的对象列表形式返回所有任务执行的结果。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml">private static void testInvokeAll() throws InterruptedException, ExecutionException &#123;<br>       ExecutorService executorService = Executors.newFixedThreadPool(2);<br>       List&lt;Callable<span class="hljs-tag">&lt;<span class="hljs-name">String</span>&gt;</span>&gt; callableTasks = buildCallableTasks();<br>       List&lt;Future<span class="hljs-tag">&lt;<span class="hljs-name">String</span>&gt;</span>&gt; futures = executorService.invokeAll(callableTasks);<br>       for (Future<span class="hljs-tag">&lt;<span class="hljs-name">String</span>&gt;</span> future : futures) &#123;<br>           System.out.println(future.get());<br>       &#125;<br>   &#125;<br></code></pre></td></tr></table></figure><p>结果如下：</p><img src="/2024/04/02/%E7%BA%BF%E7%A8%8B%E6%B1%A0/image(3).png" class=""><h4 id="关闭ExecutorService"><a href="#关闭ExecutorService" class="headerlink" title="关闭ExecutorService"></a>关闭ExecutorService</h4><p>一般情况下，ExecutorService并不会自动关闭，即使所有任务都执行完毕，或者没有要处理的任务，也不会自动销毁ExecutorService，会一直处于等待状态，等待我们给他分配新的工作。当应用程序需要处理不定期出现的任务时，这种机制很有用，但是也带来一些副作用：即使应用程序到达它的终点，也不会被停止，因为等待ExecutorService将导致JVM继续运行，这样，我们就需要主动关闭Executor Service。<br>要关闭ExecutorService，可以使用shutdown方法或shutdownNow方法</p><h5 id="shutdown"><a href="#shutdown" class="headerlink" title="shutdown"></a>shutdown</h5><p>shutdown方法并保护会立即销毁ExecutorService实例，而是首先让ExecutorService停止接受新任务，并且在所有正在运行的线程完成当前工作后关闭。</p><h5 id="shutdownNow"><a href="#shutdownNow" class="headerlink" title="shutdownNow"></a>shutdownNow</h5><p>shutdownNow() 方法会尝试立即销毁 ExecutorService 实例，所以并不能保证所有正在运行的线程将同时停止。该方法会返回等待处理的任务列表，由开发人员自行决定如何处理这些任务。<br>因为提供了两个方法，因此关闭 ExecutorService 实例的最佳实战 （ 也是 Oracle 所推荐的 ）就是同时使用这两种方法并结合 awaitTermination() 方法。<br>使用这种方式，ExecutorService 首先停止执行新任务，等待指定的时间段完成所有任务。如果该时间到期，则立即停止执行。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs xml">private static void testInvokeAll() throws InterruptedException, ExecutionException &#123;<br>     ExecutorService executorService = Executors.newFixedThreadPool(2);<br>     List&lt;Callable<span class="hljs-tag">&lt;<span class="hljs-name">String</span>&gt;</span>&gt; callableTasks = buildCallableTasks();<br>     List&lt;Future<span class="hljs-tag">&lt;<span class="hljs-name">String</span>&gt;</span>&gt; futures = executorService.invokeAll(callableTasks);<br>     for (Future<span class="hljs-tag">&lt;<span class="hljs-name">String</span>&gt;</span> future : futures) &#123;<br>         System.out.println(future.get());<br>     &#125;<br>     executorService.shutdown();<br>     try &#123;<br>         if (!executorService.awaitTermination(800, TimeUnit.MILLISECONDS)) &#123;<br>             executorService.shutdownNow();<br>         &#125;<br>     &#125; catch (InterruptedException e) &#123;<br>         executorService.shutdownNow();<br>     &#125;<br> &#125;<br></code></pre></td></tr></table></figure><h3 id="Future接口"><a href="#Future接口" class="headerlink" title="Future接口"></a>Future接口</h3><p>在ExecutorService的submit方法、invokeAll方法，都会返回一个Future对象或Future对象集合，这些Future接口的对象允许我们获取任务执行的结果或检查任务状态（运行中还是执行完毕）</p><h4 id="get方法"><a href="#get方法" class="headerlink" title="get方法"></a>get方法</h4><p>future接口提供一个特殊的阻塞方法get，它返回callable任务执行的实际结果，但如果是runnable任务，只会返回null。此外，正在执行的任务随时可能抛出异常或中断执行，因此我们要将get调用放在try catch语句块中，以捕获InterruptedException或ExecutionException异常。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs xml">private static void testFutureGet() &#123;<br>      ExecutorService executorService = Executors.newFixedThreadPool(2);<br>      Callable<span class="hljs-tag">&lt;<span class="hljs-name">String</span>&gt;</span> callable = () -&gt; &#123;<br>          System.out.println(&quot;执行callable任务&quot;);<br>          TimeUnit.MILLISECONDS.sleep(300);<br>          return &quot;callable执行完毕&quot;;<br>      &#125;;<br>      Future<span class="hljs-tag">&lt;<span class="hljs-name">String</span>&gt;</span> future = executorService.submit(callable);<br>      try &#123;<br>          String result = future.get();<br>          System.out.println(result);<br>      &#125; catch (InterruptedException | ExecutionException e) &#123;<br>          e.printStackTrace();<br>      &#125;<br>      executorService.shutdown();<br>      try &#123;<br>          if (!executorService.awaitTermination(800, TimeUnit.MILLISECONDS)) &#123;<br>              executorService.shutdownNow();<br>          &#125;<br>      &#125; catch (InterruptedException e) &#123;<br>          executorService.shutdownNow();<br>      &#125;<br>  &#125;<br><br></code></pre></td></tr></table></figure><p>因为get方法是阻塞的，并且不知道要阻塞多长时间，因此可能导致应用程序的性能降低，如果结果数据并不重要，我们可以使用超时机制来避免长时间阻塞，也就是使用get的重载方法，第一个参数为超时时间，第二个参数为时间的单位。如果在超时时间内正常结束，那么返回Future的结果，如果超时了还没结束，那么将抛出TimeoutExeception异常。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs xml">private static void testFutureGet() &#123;<br>        ExecutorService executorService = Executors.newFixedThreadPool(2);<br>        Callable<span class="hljs-tag">&lt;<span class="hljs-name">String</span>&gt;</span> callable = () -&gt; &#123;<br>            System.out.println(&quot;执行callable任务&quot;);<br>            TimeUnit.MILLISECONDS.sleep(300);<br>            return &quot;callable执行完毕&quot;;<br>        &#125;;<br>        Future<span class="hljs-tag">&lt;<span class="hljs-name">String</span>&gt;</span> future = executorService.submit(callable);<br>        try &#123;<br>            String result = future.get(400, TimeUnit.MILLISECONDS);<br>            System.out.println(result);<br>        &#125; catch (InterruptedException | ExecutionException | TimeoutException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br><br>        Callable<span class="hljs-tag">&lt;<span class="hljs-name">String</span>&gt;</span> callable2 = () -&gt; &#123;<br>            System.out.println(&quot;执行callable任务&quot;);<br>            TimeUnit.MILLISECONDS.sleep(500);<br>            return &quot;callable执行完毕&quot;;<br>        &#125;;<br>        Future<span class="hljs-tag">&lt;<span class="hljs-name">String</span>&gt;</span> future2 = executorService.submit(callable2);<br>        try &#123;<br>            String result = future2.get(400, TimeUnit.MILLISECONDS);<br>            System.out.println(result);<br>        &#125; catch (InterruptedException | ExecutionException | TimeoutException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        executorService.shutdown();<br>        try &#123;<br>            if (!executorService.awaitTermination(800, TimeUnit.MILLISECONDS)) &#123;<br>                executorService.shutdownNow();<br>            &#125;<br>        &#125; catch (InterruptedException e) &#123;<br>            executorService.shutdownNow();<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><p>执行结果如下，第一个任务没有超时，所以能正常获取结果，第二个任务超时，所以会抛出异常。</p><img src="/2024/04/02/%E7%BA%BF%E7%A8%8B%E6%B1%A0/image(4).png" class=""><h4 id="其他方法"><a href="#其他方法" class="headerlink" title="其他方法"></a>其他方法</h4><p>除了get方法外，Future还提供许多方法，主要的方法如下：<br>1）isDone： 检查已分配的任务是否已处理<br>2）cancel： 取消任务执行<br>3）isCancelled：检查任务是否已取消</p><h3 id="ScheduledExecutorService接口"><a href="#ScheduledExecutorService接口" class="headerlink" title="ScheduledExecutorService接口"></a>ScheduledExecutorService接口</h3><p>ScheduledExecutorService接口用于在一些预定义的延迟之后运行任务或定期运行任务。我们可以通过Executors类的工厂方法实例化ScheduledExecutorService，如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">ScheduledExecutorService scheduledExecutorService = Executors.newSingleThreadScheduledExecutor();<br></code></pre></td></tr></table></figure><p>在ScheduledExecutorService接口中，有三个主要方法：<br>1）schedule：允许在指定的延迟后执行一次任务。<br>2）scheduleAtFixedRate：允许在指定的初始延迟后执行任务，然后以一定的周期重复执行，其中period参数用于指定两个任务的开始时间之间的间隔时间，因此任务执行的频率是固定的。<br>3）scheduleWithFixedDelay：类似于scheduleAtFixedRate，它也重复执行给定的任务，单period参数用于指定前一个任务的结束和下一个任务的开始之间的间隔时间，也就是指定下一个任务延时多久后才执行，执行频率可能会有所不同，具体取决于执行任务给定任务所需的时间。</p><h4 id="scheduled方法"><a href="#scheduled方法" class="headerlink" title="scheduled方法"></a>scheduled方法</h4><p>假设要在固定延迟后安排某个任务的执行，可以使用ScheduledExecutorService实例的scheduled方法：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs xml">private static void testScheduled() &#123;<br>        ScheduledExecutorService scheduledExecutorService = Executors.newSingleThreadScheduledExecutor();<br>        Callable<span class="hljs-tag">&lt;<span class="hljs-name">String</span>&gt;</span> callable = () -&gt; &#123;<br>            System.out.println(&quot;执行callable任务====&quot;);<br>            return &quot;callable&quot;;<br>        &#125;;<br>        ScheduledFuture<span class="hljs-tag">&lt;<span class="hljs-name">String</span>&gt;</span> schedule = scheduledExecutorService.schedule(callable, 1, TimeUnit.SECONDS);<br>        System.out.println(&quot;主线程运行中========&quot;);<br>        try &#123;<br>            System.out.println(schedule.get());<br>        &#125; catch (InterruptedException | ExecutionException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br><br>        scheduledExecutorService.shutdown();<br>        try &#123;<br>            if (!scheduledExecutorService.awaitTermination(800, TimeUnit.MILLISECONDS)) &#123;<br>                scheduledExecutorService.shutdownNow();<br>            &#125;<br>        &#125; catch (InterruptedException  e) &#123;<br>            scheduledExecutorService.shutdownNow();<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><p>结果如下，在延迟一秒后，才开始执行线程任务：</p><img src="/2024/04/02/%E7%BA%BF%E7%A8%8B%E6%B1%A0/image(5).png" class=""><h4 id="scheduleAtFixedRate方法"><a href="#scheduleAtFixedRate方法" class="headerlink" title="scheduleAtFixedRate方法"></a>scheduleAtFixedRate方法</h4><p>当我们需要在固定延迟后，定期执行任务时，可以使用scheduleAtFixedRate方法，如下所示，每隔500毫秒执行相同的任务：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml">private static void testScheduleAtFixRate() &#123;<br>       ScheduledExecutorService scheduledExecutorService = Executors.newSingleThreadScheduledExecutor();<br>       Runnable runnable = () -&gt; &#123;<br>           System.out.println(System.currentTimeMillis());<br>           System.out.println(&quot;执行callable任务====&quot;);<br>       &#125;;<br>       // 延迟1秒后，每间隔2秒执行一次<br>       scheduledExecutorService.scheduleAtFixedRate(runnable, 1, 2, TimeUnit.SECONDS);<br>   &#125;<br></code></pre></td></tr></table></figure><p>结果如下所示，从时间戳我们可以看出，确实是每隔2秒执行一次</p><img src="/2024/04/02/%E7%BA%BF%E7%A8%8B%E6%B1%A0/image(6).png" class=""><p>如果任务执行时间比间隔时间长，那么scheduledExecutorService将等到当前任务执行后再开始下一个任务</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xml">private static void testScheduleAtFixRate() &#123;<br>       ScheduledExecutorService scheduledExecutorService = Executors.newSingleThreadScheduledExecutor();<br>       Runnable runnable = () -&gt; &#123;<br>           System.out.println(System.currentTimeMillis());<br>           try &#123;<br>               TimeUnit.SECONDS.sleep(3);<br>           &#125; catch (InterruptedException e) &#123;<br>               throw new RuntimeException(e);<br>           &#125;<br>           System.out.println(&quot;执行callable任务====&quot;);<br>       &#125;;<br>       // 延迟1秒后，每间隔2秒执行一次<br>       scheduledExecutorService.scheduleAtFixedRate(runnable, 1, 2, TimeUnit.SECONDS);<br>   &#125;<br></code></pre></td></tr></table></figure><p>如下所示，我们执行任务需要3秒，而间隔时间是2秒，通过打印结果可以看出，任务之间间隔3秒，也就是会等待任务执行完成后才开始下一个任务：</p><img src="/2024/04/02/%E7%BA%BF%E7%A8%8B%E6%B1%A0/image(7).png" class=""><h4 id="scheduleWithFixedDelay方法"><a href="#scheduleWithFixedDelay方法" class="headerlink" title="scheduleWithFixedDelay方法"></a>scheduleWithFixedDelay方法</h4><p>如果任务之间必须具有固定长度的延迟，那么可以使用scheduleWithFixedDelay方法。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs xml">private static void testScheduleWithFixDelay() &#123;<br>     ScheduledExecutorService scheduledExecutorService = Executors.newSingleThreadScheduledExecutor();<br>     Runnable runnable = () -&gt; &#123;<br>         System.out.println(System.currentTimeMillis());<br>         try &#123;<br>             TimeUnit.SECONDS.sleep(3);<br>         &#125; catch (InterruptedException e) &#123;<br>             throw new RuntimeException(e);<br>         &#125;<br>         System.out.println(&quot;执行callable任务====&quot;);<br>     &#125;;<br>     // 延迟1秒后，每间隔2秒执行一次<br>     scheduledExecutorService.scheduleWithFixedDelay(runnable, 1, 2, TimeUnit.SECONDS);<br> &#125;<br><br></code></pre></td></tr></table></figure><p>在上述代码中，任务执行时长需要3秒，然后我们设置延迟时间为2秒，最终执行结果如下，从时间戳中可以看出，在上一个任务执行完毕后，间隔2秒才会开始下一个任务，因此任务与任务间隔时长为5秒。</p><img src="/2024/04/02/%E7%BA%BF%E7%A8%8B%E6%B1%A0/image(8).png" class=""><h3 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h3><p><a href="https://blog.csdn.net/qq_21484461/article/details/133101696">https://blog.csdn.net/qq_21484461&#x2F;article&#x2F;details&#x2F;133101696</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2024/04/02/hello-world/"/>
    <url>/2024/04/02/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
