{"meta":{"version":1,"warehouse":"5.0.1"},"models":{"Asset":[{"_id":"node_modules/hexo-theme-landscape/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.css","path":"fancybox/jquery.fancybox.min.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.js","path":"fancybox/jquery.fancybox.min.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/js/jquery-3.6.4.min.js","path":"js/jquery-3.6.4.min.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/js/script.js","path":"js/script.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":0,"renderable":1},{"_id":"themes/fluid/source/css/gitalk.css","path":"css/gitalk.css","modified":0,"renderable":1},{"_id":"themes/fluid/source/css/highlight-dark.styl","path":"css/highlight-dark.styl","modified":0,"renderable":1},{"_id":"themes/fluid/source/css/highlight.styl","path":"css/highlight.styl","modified":0,"renderable":1},{"_id":"themes/fluid/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/avatar.png","path":"img/avatar.png","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/default.png","path":"img/default.png","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/fluid.png","path":"img/fluid.png","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/loading.gif","path":"img/loading.gif","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/police_beian.png","path":"img/police_beian.png","modified":0,"renderable":1},{"_id":"themes/fluid/source/xml/local-search.xml","path":"xml/local-search.xml","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/boot.js","path":"js/boot.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/color-schema.js","path":"js/color-schema.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/events.js","path":"js/events.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/img-lazyload.js","path":"js/img-lazyload.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/leancloud.js","path":"js/leancloud.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/local-search.js","path":"js/local-search.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/plugins.js","path":"js/plugins.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1}],"Cache":[{"_id":"source/_posts/hello-world.md","hash":"acad91ace80b80295b11a9b7ad4c29a2dcfdd8fb","modified":1712046491982},{"_id":"node_modules/hexo-theme-landscape/LICENSE","hash":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":1712046594830},{"_id":"node_modules/hexo-theme-landscape/README.md","hash":"1a9b279e6dd29fd19245f913f0c4a316ffaa62db","modified":1712046595445},{"_id":"node_modules/hexo-theme-landscape/_config.yml","hash":"b608c1f1322760dce9805285a602a95832730a2e","modified":1712046595518},{"_id":"node_modules/hexo-theme-landscape/package.json","hash":"4bf95d52f77edf811f23f6d264a7493311a8d078","modified":1712046595442},{"_id":"node_modules/hexo-theme-landscape/languages/de-DE.yml","hash":"d29d1c4256b7ed9df42f511c2ff0a23ad5fd6c1f","modified":1712046595521},{"_id":"node_modules/hexo-theme-landscape/languages/de.yml","hash":"3ebf0775abbee928c8d7bda943c191d166ded0d3","modified":1712046595523},{"_id":"node_modules/hexo-theme-landscape/languages/default.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1712046595525},{"_id":"node_modules/hexo-theme-landscape/languages/en-GB.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1712046595528},{"_id":"node_modules/hexo-theme-landscape/languages/en-US.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1712046595530},{"_id":"node_modules/hexo-theme-landscape/languages/es-ES.yml","hash":"7008a8fc91f18d2a735864817b8ebda30c7a2c66","modified":1712046595534},{"_id":"node_modules/hexo-theme-landscape/languages/en.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1712046595533},{"_id":"node_modules/hexo-theme-landscape/languages/es.yml","hash":"76edb1171b86532ef12cfd15f5f2c1ac3949f061","modified":1712046595537},{"_id":"node_modules/hexo-theme-landscape/languages/fr-FR.yml","hash":"8d09dbdab00a30a2870b56f7c0a7ca7deafa7b88","modified":1712046595539},{"_id":"node_modules/hexo-theme-landscape/languages/fr.yml","hash":"415e1c580ced8e4ce20b3b0aeedc3610341c76fb","modified":1712046595541},{"_id":"node_modules/hexo-theme-landscape/languages/hu-HU.yml","hash":"712d18664898fa21ba38d4973e90ef41a324ea25","modified":1712046595543},{"_id":"node_modules/hexo-theme-landscape/languages/hu.yml","hash":"284d557130bf54a74e7dcef9d42096130e4d9550","modified":1712046595545},{"_id":"node_modules/hexo-theme-landscape/languages/it-IT.yml","hash":"2cb6dc2fab9bd2dbe1c8bb869a9e8bf85a564fdd","modified":1712046595546},{"_id":"node_modules/hexo-theme-landscape/languages/it.yml","hash":"89b7d91306b2c1a0f3ac023b657bf974f798a1e8","modified":1712046595547},{"_id":"node_modules/hexo-theme-landscape/languages/ja-JP.yml","hash":"08481267e0c112e1f6855620f2837ec4c4a98bbd","modified":1712046595549},{"_id":"node_modules/hexo-theme-landscape/languages/ja.yml","hash":"a73e1b9c80fd6e930e2628b393bfe3fb716a21a9","modified":1712046595550},{"_id":"node_modules/hexo-theme-landscape/languages/ko-KR.yml","hash":"19209ad8f9d4057e8df808937f950eb265e1db69","modified":1712046595553},{"_id":"node_modules/hexo-theme-landscape/languages/mn-MN.yml","hash":"b9e5f3e7c0c2f779cf2cfded6db847b5941637ca","modified":1712046595557},{"_id":"node_modules/hexo-theme-landscape/languages/ko.yml","hash":"881d6a0a101706e0452af81c580218e0bfddd9cf","modified":1712046595555},{"_id":"node_modules/hexo-theme-landscape/languages/mn.yml","hash":"2e7523951072a9403ead3840ad823edd1084c116","modified":1712046595559},{"_id":"node_modules/hexo-theme-landscape/languages/nl-NL.yml","hash":"5ebbc30021f05d99938f96dfff280392df7f91f0","modified":1712046595562},{"_id":"node_modules/hexo-theme-landscape/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1712046595564},{"_id":"node_modules/hexo-theme-landscape/languages/pt-PT.yml","hash":"0f852b6b228e6ea59aa3540574bb89b233f2a098","modified":1712046595568},{"_id":"node_modules/hexo-theme-landscape/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1712046595566},{"_id":"node_modules/hexo-theme-landscape/languages/pt.yml","hash":"57d07b75d434fbfc33b0ddb543021cb5f53318a8","modified":1712046595570},{"_id":"node_modules/hexo-theme-landscape/languages/ru-RU.yml","hash":"360d11a28bb768afb1dd15f63fa7fd3a8cc547ee","modified":1712046595573},{"_id":"node_modules/hexo-theme-landscape/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1712046595575},{"_id":"node_modules/hexo-theme-landscape/languages/th-TH.yml","hash":"ebfdba9bc4842c829473c1e6e4544344f182724d","modified":1712046595577},{"_id":"node_modules/hexo-theme-landscape/languages/th.yml","hash":"84a55b00aa01f03982be294e43c33a20e6d32862","modified":1712046595579},{"_id":"node_modules/hexo-theme-landscape/languages/tr.yml","hash":"a1cdbfa17682d7a971de8ab8588bf57c74224b5b","modified":1712046595581},{"_id":"node_modules/hexo-theme-landscape/languages/zh-CN.yml","hash":"1efd95774f401c80193eac6ee3f1794bfe93dc5a","modified":1712046595582},{"_id":"node_modules/hexo-theme-landscape/languages/zh-TW.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1712046595584},{"_id":"node_modules/hexo-theme-landscape/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1712046595119},{"_id":"node_modules/hexo-theme-landscape/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1712046595192},{"_id":"node_modules/hexo-theme-landscape/layout/layout.ejs","hash":"0d1765036e4874500e68256fedb7470e96eeb6ee","modified":1712046595281},{"_id":"node_modules/hexo-theme-landscape/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1712046595274},{"_id":"node_modules/hexo-theme-landscape/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1712046595307},{"_id":"node_modules/hexo-theme-landscape/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1712046595317},{"_id":"node_modules/hexo-theme-landscape/scripts/fancybox.js","hash":"c857d7a5e4a5d71c743a009c5932bf84229db428","modified":1712046595405},{"_id":"node_modules/hexo-theme-landscape/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1712046595350},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/after-footer.ejs","hash":"377d257d5d16e0158a4405c72401517b074fd7ff","modified":1712046595001},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/archive-post.ejs","hash":"c7a71425a946d05414c069ec91811b5c09a92c47","modified":1712046595030},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/archive.ejs","hash":"7cb70a7a54f8c7ae49b10d1f37c0a9b74eab8826","modified":1712046595054},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/article.ejs","hash":"56597e951203dd662a6d2c817c7c4f1c920d4a25","modified":1712046595140},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/footer.ejs","hash":"3656eb692254346671abc03cb3ba1459829e0dce","modified":1712046595221},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/gauges-analytics.ejs","hash":"21a1e2a3907d1a3dad1cd0ab855fe6735f233c74","modified":1712046595241},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/google-analytics.ejs","hash":"2ea7442ea1e1a8ab4e41e26c563f58413b59a3d0","modified":1712046595248},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/head.ejs","hash":"f05bced793b0314d4f2ef0c993b3a51d0b7d203a","modified":1712046595257},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/header.ejs","hash":"6a5033d189554c9a6d42e2ef7952ae5c9742648e","modified":1712046595265},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/mobile-nav.ejs","hash":"e952a532dfc583930a666b9d4479c32d4a84b44e","modified":1712046595290},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/sidebar.ejs","hash":"930da35cc2d447a92e5ee8f835735e6fd2232469","modified":1712046595332},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/archive.ejs","hash":"beb4a86fcc82a9bdda9289b59db5a1988918bec3","modified":1712046595091},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/category.ejs","hash":"dd1e5af3c6af3f5d6c85dfd5ca1766faed6a0b05","modified":1712046595179},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/recent_posts.ejs","hash":"60c4b012dcc656438ff59997e60367e5a21ab746","modified":1712046595325},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/tag.ejs","hash":"2de380865df9ab5f577f7d3bcadf44261eb5faae","modified":1712046595346},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/tagcloud.ejs","hash":"b4a2079101643f63993dcdb32925c9b071763b46","modified":1712046595357},{"_id":"node_modules/hexo-theme-landscape/source/css/_extend.styl","hash":"222fbe6d222531d61c1ef0f868c90f747b1c2ced","modified":1712046595450},{"_id":"node_modules/hexo-theme-landscape/source/css/_variables.styl","hash":"ca28281423ae57d76b6c1eb91cd845fd4e518bd6","modified":1712046595456},{"_id":"node_modules/hexo-theme-landscape/source/css/style.styl","hash":"e55a1d92954ed20f6887f92dc727bb995a010a43","modified":1712046595511},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.css","hash":"1be9b79be02a1cfc5d96c4a5e0feb8f472babd95","modified":1712046594928},{"_id":"node_modules/hexo-theme-landscape/source/js/script.js","hash":"49773efcb2221bbdf2d86f3f5c5ff2d841b528cc","modified":1712046595438},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/category.ejs","hash":"c6bcd0e04271ffca81da25bcff5adf3d46f02fc0","modified":1712046595164},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/date.ejs","hash":"f1458584b679545830b75bef2526e2f3eb931045","modified":1712046595204},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":1712046595230},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/nav.ejs","hash":"16a904de7bceccbb36b4267565f2215704db2880","modified":1712046595300},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/tag.ejs","hash":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":1712046595340},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/title.ejs","hash":"4d7e62574ddf46de9b41605fe3140d77b5ddb26d","modified":1712046595362},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/archive.styl","hash":"db15f5677dc68f1730e82190bab69c24611ca292","modified":1712046595463},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/article.styl","hash":"2d1f6f79ebf9cb55ebdb3865a2474437eb2b37c6","modified":1712046595468},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/comment.styl","hash":"79d280d8d203abb3bd933ca9b8e38c78ec684987","modified":1712046595472},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/footer.styl","hash":"e35a060b8512031048919709a8e7b1ec0e40bc1b","modified":1712046595476},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/header.styl","hash":"268d2989acb06e2ddd06cc36a6918c6cd865476b","modified":1712046595488},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/highlight.styl","hash":"9cc3b2927d814f2f6e8e188f9d3657b94f4c6ef3","modified":1712046595491},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/mobile.styl","hash":"a399cf9e1e1cec3e4269066e2948d7ae5854d745","modified":1712046595497},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/sidebar-aside.styl","hash":"890349df5145abf46ce7712010c89237900b3713","modified":1712046595500},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/sidebar-bottom.styl","hash":"8fd4f30d319542babfd31f087ddbac550f000a8a","modified":1712046595504},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/sidebar.styl","hash":"404ec059dc674a48b9ab89cd83f258dec4dcb24d","modified":1712046595507},{"_id":"node_modules/hexo-theme-landscape/source/css/_util/grid.styl","hash":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":1712046595482},{"_id":"node_modules/hexo-theme-landscape/source/css/_util/mixin.styl","hash":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":1712046595494},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.js","hash":"6181412e73966696d08e1e5b1243a572d0f22ba6","modified":1712046595433},{"_id":"node_modules/hexo-theme-landscape/source/js/jquery-3.6.4.min.js","hash":"eda46747c71d38a880bee44f9a439c3858bb8f99","modified":1712046595420},{"_id":"node_modules/hexo-theme-landscape/source/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1712046595399},{"_id":"source/_posts/线程池.md","hash":"d9f96bd3c6745e67ce71bce152a757290180b228","modified":1712066535255},{"_id":"public/2024/04/02/线程池/index.html","hash":"1239e2e928939b756657ed520667cf3575bfe184","modified":1712066882047},{"_id":"public/2024/04/02/hello-world/index.html","hash":"a6198ce50fb41df1f79fc3d90e4a9f73e1a2e0b7","modified":1712061924643},{"_id":"public/archives/index.html","hash":"d2062953dd669644be75e22dc2990756a7ea0d84","modified":1714808305818},{"_id":"public/index.html","hash":"06667201fa8b9e4839f472a69ca65e3b30e51ac7","modified":1714808305818},{"_id":"public/archives/2024/index.html","hash":"ba4ff6b170552678dc72bfc102664ede11614b54","modified":1714808305818},{"_id":"public/archives/2024/04/index.html","hash":"a1e970afdebbc24032d6c7242f2e0704d7efc7c9","modified":1714808305818},{"_id":"public/css/style.css","hash":"ddb3792605d744ab3d9f0a649c82b62e9b16daa6","modified":1712047252979},{"_id":"public/fancybox/jquery.fancybox.min.css","hash":"1be9b79be02a1cfc5d96c4a5e0feb8f472babd95","modified":1712047252979},{"_id":"public/js/jquery-3.6.4.min.js","hash":"eda46747c71d38a880bee44f9a439c3858bb8f99","modified":1712047252979},{"_id":"public/fancybox/jquery.fancybox.min.js","hash":"6181412e73966696d08e1e5b1243a572d0f22ba6","modified":1712047252979},{"_id":"public/js/script.js","hash":"49773efcb2221bbdf2d86f3f5c5ff2d841b528cc","modified":1712047252979},{"_id":"public/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1712047252979},{"_id":"source/_posts/线程池/image(1).png","hash":"8bad4e766ae7dbfcf81b301a58bbbb0ba5785589","modified":1712047412856},{"_id":"source/_posts/线程池/image(2).png","hash":"d8c7e2a705312a91d829bbf87a526f870eb6e8d6","modified":1712047420631},{"_id":"source/_posts/线程池/image(3).png","hash":"f85c7a0fefd6098b4164be50a8f2e541944ac08a","modified":1712047427185},{"_id":"source/_posts/线程池/image(4).png","hash":"9f135115f204fe7ed50d221551353a854ac4e1bc","modified":1712047435507},{"_id":"source/_posts/线程池/image(5).png","hash":"ddda2c480e2bc5072b78aa1d7072b8ddd85776a4","modified":1712047442254},{"_id":"source/_posts/线程池/image(6).png","hash":"085fe66ffedf9eebb1ae325e1dbd96bc6431a55a","modified":1712047448263},{"_id":"source/_posts/线程池/image(7).png","hash":"b43161db368d2cee63755ecafd1b8bc7d4566174","modified":1712047455298},{"_id":"source/_posts/线程池/image(8).png","hash":"47b5a26d24552f84b9185cde03313e4e0ba24c8a","modified":1712047461510},{"_id":"source/_posts/线程池/image.png","hash":"7449866503ab66f38febc886206f5fac6b1f23ab","modified":1712047403871},{"_id":"themes/fluid/source/css/_pages/_tag/tag.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1688287284000},{"_id":"themes/fluid/.editorconfig","hash":"33218fbd623feb43edf5f99f15965392cecc44a6","modified":1688287284000},{"_id":"themes/fluid/.eslintrc","hash":"4bc2b19ce2b8c4d242f97d4ccf2d741e68ab0097","modified":1688287284000},{"_id":"themes/fluid/.gitattributes","hash":"a54f902957d49356376b59287b894b1a3d7a003f","modified":1688287284000},{"_id":"themes/fluid/LICENSE","hash":"26f9356fd6e84b5a88df6d9014378f41b65ba209","modified":1688287284000},{"_id":"themes/fluid/.gitignore","hash":"ae3bfcb89777657c5dfb5169d91445dcb0e5ab98","modified":1688287284000},{"_id":"themes/fluid/README.md","hash":"49f681a203eecfa7127ac22edc13bd3b49693d0a","modified":1688287284000},{"_id":"themes/fluid/package.json","hash":"41983970c0977b3c626c3f1e3c714cf78ac6a04e","modified":1688287284000},{"_id":"themes/fluid/README_en.md","hash":"49541d4ec48c4b517c5b3fe17a2e92d87090d007","modified":1688287284000},{"_id":"themes/fluid/_config.yml","hash":"cdde6c6d6a1bdf9fb965313e21d92cf6213582b6","modified":1688287284000},{"_id":"themes/fluid/languages/en.yml","hash":"cb11b39f44ea069652c9647179606b6cecc98d50","modified":1688287284000},{"_id":"themes/fluid/languages/de.yml","hash":"0e7d455d9e004ff15d8924b7a0c35cea25ee5b1d","modified":1688287284000},{"_id":"themes/fluid/languages/es.yml","hash":"7112594259c88c04714be152af7fd377687dad40","modified":1688287284000},{"_id":"themes/fluid/languages/eo.yml","hash":"a556251cc50a5680578c03f1efbf252b1f4ab860","modified":1688287284000},{"_id":"themes/fluid/languages/ja.yml","hash":"3dd6d20f8d26585a7c154a8e59fe8d5d902f4c6a","modified":1688287284000},{"_id":"themes/fluid/languages/ru.yml","hash":"7dc78f22696649a4c68dc65a9b52d9a992fa82a0","modified":1688287284000},{"_id":"themes/fluid/languages/zh-CN.yml","hash":"f96a22f989897ecddc69d5867a206e1cf6b8f610","modified":1688287284000},{"_id":"themes/fluid/languages/zh-TW.yml","hash":"596d031dff3826ae8e4ffc8931fff28977b73247","modified":1688287284000},{"_id":"themes/fluid/languages/zh-HK.yml","hash":"80ed400a7adaa92ea54fc7f5d534c9af795bed00","modified":1688287284000},{"_id":"themes/fluid/layout/about.ejs","hash":"163bee643e6a38912d3ae70923c83c48d57222e7","modified":1688287284000},{"_id":"themes/fluid/layout/404.ejs","hash":"b84d575c7b7f778b4cb64e89ad3d0aed4a896820","modified":1688287284000},{"_id":"themes/fluid/layout/archive.ejs","hash":"7c1f44005849791feae4abaa10fae4cb983d3277","modified":1688287284000},{"_id":"themes/fluid/layout/categories.ejs","hash":"13859726c27b6c79b5876ec174176d0f9c1ee164","modified":1688287284000},{"_id":"themes/fluid/layout/category.ejs","hash":"f099161b738a16a32253f42085b5444f902018ed","modified":1688287284000},{"_id":"themes/fluid/layout/layout.ejs","hash":"7e0023474128fbe4d68c467704c41f1712432415","modified":1688287284000},{"_id":"themes/fluid/layout/index.ejs","hash":"9b4c154462ce78de4c9ea7dd15dce4ca8e8c1cf8","modified":1688287284000},{"_id":"themes/fluid/layout/page.ejs","hash":"ed5007a3feb8f14d3d2843271bfb298eb0c56219","modified":1688287284000},{"_id":"themes/fluid/layout/links.ejs","hash":"1cac32ec4579aaf7b9fa39d317497331d4c5e1dd","modified":1688287284000},{"_id":"themes/fluid/layout/post.ejs","hash":"75ab6958d929e92566ca580d0b8bd0eeae10649a","modified":1688287284000},{"_id":"themes/fluid/layout/tag.ejs","hash":"9d686364c4d16a1a9219471623af452035c5b966","modified":1688287284000},{"_id":"themes/fluid/layout/tags.ejs","hash":"1d06af34b6cf1d8a20d2eb565e309326ceba309f","modified":1688287284000},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/bug_report_zh.md","hash":"c8b0d49c49e3c88872fd3b37909345ff5b2b6aa0","modified":1688287284000},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/bug_report.md","hash":"554c0d0e086a0784d83ee71c83f8bceeb60aecc8","modified":1688287284000},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/feature_request_zh.md","hash":"ed08574b196447376dd74411cca664ac9227a5d4","modified":1688287284000},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/feature_request.md","hash":"c134dd57ffd269b93402ccfffe7dbe0f0b583bec","modified":1688287284000},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/question.md","hash":"ab5eab9e3ff889c4ba7fd82846e7f5b7ae15bebc","modified":1688287284000},{"_id":"themes/fluid/.github/workflows/limit.yaml","hash":"f8bd2edeb4424ee7a055b31583445d5d5dff91a4","modified":1688287284000},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/question_zh.md","hash":"fff07ce0472afc368d388637cb9d438195da9b5b","modified":1688287284000},{"_id":"themes/fluid/layout/_partials/archive-list.ejs","hash":"7520fbf91f762207c2ab06b2c293235cd5b23905","modified":1688287284000},{"_id":"themes/fluid/.github/workflows/publish.yaml","hash":"6f02e6440d88629229556e3fd47d0280fe2240db","modified":1688287284000},{"_id":"themes/fluid/layout/_partials/category-chains.ejs","hash":"18309584aab83bc4deb20723ebad832149dd2e24","modified":1688287284000},{"_id":"themes/fluid/layout/_partials/category-list.ejs","hash":"f8d2f1907450e61968e6d54443e9be8138196a77","modified":1688287284000},{"_id":"themes/fluid/layout/_partials/comments.ejs","hash":"d707c47b2638c94e489bc43d4cfd098b7c58447f","modified":1688287284000},{"_id":"themes/fluid/layout/_partials/footer.ejs","hash":"10ccfb8eef4e16182183c9a3e175c90d5b6397d3","modified":1688287284000},{"_id":"themes/fluid/layout/_partials/css.ejs","hash":"85f6e051550907681ab4ed2e268ac8f6e9ebf931","modified":1688287284000},{"_id":"themes/fluid/layout/_partials/header.ejs","hash":"0d5e397d30051e5fbabe7b47cfd1f1e6a5820af1","modified":1688287284000},{"_id":"themes/fluid/layout/_partials/head.ejs","hash":"7b7b1d098726e86687a15fe3d520d178577ffcae","modified":1688287284000},{"_id":"themes/fluid/layout/_partials/markdown-plugins.ejs","hash":"fc4bdf7de0cf1a66d0e5e4fba1b31d6f7ed49468","modified":1688287284000},{"_id":"themes/fluid/layout/_partials/search.ejs","hash":"70e1c929e084ca8a2648cedabf29b372511ea2b8","modified":1688287284000},{"_id":"themes/fluid/scripts/events/index.js","hash":"79de5a379b28cad759a49048351c7f6b8915bd7d","modified":1688287284000},{"_id":"themes/fluid/layout/_partials/paginator.ejs","hash":"0f38a2c238169edcb63fc46c23bfc529ff3859b7","modified":1688287284000},{"_id":"themes/fluid/scripts/filters/default-injects.js","hash":"b2013ae8e189cd07ebc8a2ff48a78e153345210f","modified":1688287284000},{"_id":"themes/fluid/layout/_partials/scripts.ejs","hash":"da5810785105e5075861593c7ac22c7aa9665a72","modified":1688287284000},{"_id":"themes/fluid/scripts/filters/locals.js","hash":"58d0fec976f6b1d35e7ea03edc45414088acf05c","modified":1688287284000},{"_id":"themes/fluid/scripts/filters/post-filter.js","hash":"0047666f996c54017e06668b5242ed8a311ebce0","modified":1688287284000},{"_id":"themes/fluid/scripts/generators/index-generator.js","hash":"9159fc22fa84a7b605dd15fe4104f01fe9c71147","modified":1688287284000},{"_id":"themes/fluid/scripts/generators/pages.js","hash":"d3e75f53c59674d171309e50702954671f31f1a4","modified":1688287284000},{"_id":"themes/fluid/scripts/generators/local-search.js","hash":"9ac5ddad06e9b0e6015ce531430018182a4bc0fa","modified":1688287284000},{"_id":"themes/fluid/scripts/helpers/date.js","hash":"9bda6382f61b40a20c24af466fe10c8366ebb74c","modified":1688287284000},{"_id":"themes/fluid/scripts/helpers/engine.js","hash":"d3a231d106795ce99cb0bc77eb65f9ae44515933","modified":1688287284000},{"_id":"themes/fluid/scripts/helpers/export-config.js","hash":"8e67b522c47aa250860e3fe2c733f1f958a506c0","modified":1688287284000},{"_id":"themes/fluid/scripts/helpers/injects.js","hash":"1ad2ae6b11bd8806ee7dd6eb7140d8b54a95d613","modified":1688287284000},{"_id":"themes/fluid/scripts/helpers/import.js","hash":"ca53e8dbf7d44cfd372cfa79ac60f35a7d5b0076","modified":1688287284000},{"_id":"themes/fluid/scripts/helpers/page.js","hash":"4607607445233b3029ef20ed5e91de0da0a7f9c5","modified":1688287284000},{"_id":"themes/fluid/scripts/helpers/scope.js","hash":"d41d9d658fcb54964b388598e996747aadb85b0f","modified":1688287284000},{"_id":"themes/fluid/scripts/helpers/url.js","hash":"2a6a8288176d0e0f6ec008056bf2745a86e8943e","modified":1688287284000},{"_id":"themes/fluid/scripts/helpers/utils.js","hash":"226f99b465ff513de075a8e78b321d6cb62592ca","modified":1688287284000},{"_id":"themes/fluid/scripts/helpers/wordcount.js","hash":"4543b8954c5c2ca91191cc0d53cf071b3f26faaa","modified":1688287284000},{"_id":"themes/fluid/scripts/tags/button.js","hash":"3eb43a8cdea0a64576ad6b31b4df6c2bf5698d4c","modified":1688287284000},{"_id":"themes/fluid/scripts/tags/checkbox.js","hash":"4938610c3543a921a341bc074626d511cb1a4b45","modified":1688287284000},{"_id":"themes/fluid/scripts/tags/group-image.js","hash":"4aeebb797026f1df25646a5d69f7fde79b1bcd26","modified":1688287284000},{"_id":"themes/fluid/scripts/tags/label.js","hash":"f05a6d32cca79535b22907dc03edb9d3fa2d8176","modified":1688287284000},{"_id":"themes/fluid/scripts/tags/mermaid.js","hash":"75160561e1ef3603b6d2ad2938464ab1cb77fd38","modified":1688287284000},{"_id":"themes/fluid/scripts/tags/note.js","hash":"e3b456a079e5dc0032473b516c865b20f83d2c26","modified":1688287284000},{"_id":"themes/fluid/scripts/utils/compare-versions.js","hash":"dbbc928c914fc2bd242cd66aa0c45971aec13a5d","modified":1688287284000},{"_id":"themes/fluid/scripts/utils/object.js","hash":"33b57e4decdc5e75c518859f168c8ba80b2c665b","modified":1688287284000},{"_id":"themes/fluid/scripts/utils/resolve.js","hash":"8c4a8b62aa8608f12f1e9046231dff04859dc3e9","modified":1688287284000},{"_id":"themes/fluid/scripts/utils/url-join.js","hash":"718aab5e7b2059a06b093ca738de420d9afa44ba","modified":1688287284000},{"_id":"themes/fluid/source/css/gitalk.css","hash":"a57b3cc8e04a0a4a27aefa07facf5b5e7bca0e76","modified":1688287284000},{"_id":"themes/fluid/source/css/highlight-dark.styl","hash":"45695ef75c31a4aa57324dd408b7e2327a337018","modified":1688287284000},{"_id":"themes/fluid/source/css/highlight.styl","hash":"a9efc52a646a9e585439c768557e3e3c9e3326dc","modified":1688287284000},{"_id":"themes/fluid/source/css/main.styl","hash":"855ae5fe229c51afa57f7645f6997a27a705d7e4","modified":1688287284000},{"_id":"themes/fluid/source/img/avatar.png","hash":"fe739a158cc128f70f780eb5fa96f388b81d478f","modified":1688287284000},{"_id":"themes/fluid/source/img/loading.gif","hash":"2d2fc0f947940f98c21afafef39ecf226a2e8d55","modified":1688287284000},{"_id":"themes/fluid/source/img/fluid.png","hash":"64b215db2cb3af98fe639e94537cb5209f959c78","modified":1688287284000},{"_id":"themes/fluid/source/img/police_beian.png","hash":"90efded6baa2dde599a9d6b1387973e8e64923ea","modified":1688287284000},{"_id":"themes/fluid/source/xml/local-search.xml","hash":"8c96ba6a064705602ce28d096fd7dd9069630a55","modified":1688287284000},{"_id":"themes/fluid/source/js/boot.js","hash":"38bd26c6b7acdafda86dda3560e6a3ca488d3c76","modified":1688287284000},{"_id":"themes/fluid/source/js/color-schema.js","hash":"76a198f8721352ebeaf5b2ef2f4db00612da4796","modified":1688287284000},{"_id":"themes/fluid/source/js/events.js","hash":"89e3561488a618ed0caeb9edf18e441978e29c25","modified":1688287284000},{"_id":"themes/fluid/source/js/leancloud.js","hash":"eff77c7a5c399fcaefda48884980571e15243fc9","modified":1688287284000},{"_id":"themes/fluid/source/js/img-lazyload.js","hash":"cbdeca434ec4da51f488c821d51b4d23c73294af","modified":1688287284000},{"_id":"themes/fluid/source/js/plugins.js","hash":"c34916291e392a774ff3e85c55badb83e8661297","modified":1688287284000},{"_id":"themes/fluid/source/js/local-search.js","hash":"b9945f76f8682f3ec32edfb285b26eb559f7b7e8","modified":1688287284000},{"_id":"themes/fluid/source/js/utils.js","hash":"b82e7c289a66dfd36064470fd41c0e96fc598b43","modified":1688287284000},{"_id":"themes/fluid/layout/_partials/comments/changyan.ejs","hash":"c9b2d68ed3d375f1953e7007307d2a3f75ed6249","modified":1688287284000},{"_id":"themes/fluid/layout/_partials/comments/cusdis.ejs","hash":"5f9dc012be27040bbe874d0c093c0d53958cc987","modified":1688287284000},{"_id":"themes/fluid/layout/_partials/comments/disqus.ejs","hash":"aab4a4d24c55231a37db308ae94414319cecdd9b","modified":1688287284000},{"_id":"themes/fluid/layout/_partials/comments/discuss.ejs","hash":"98d065b58ce06b7d18bff3c974e96fa0f34ae03a","modified":1688287284000},{"_id":"themes/fluid/layout/_partials/comments/gitalk.ejs","hash":"843bc141a4545eb20d1c92fb63c85d459b4271ec","modified":1688287284000},{"_id":"themes/fluid/layout/_partials/comments/giscus.ejs","hash":"95f8b866b158eff9352c381c243b332a155a5110","modified":1688287284000},{"_id":"themes/fluid/layout/_partials/comments/livere.ejs","hash":"2264758fed57542a7389c7aa9f00f1aefa17eb87","modified":1688287284000},{"_id":"themes/fluid/layout/_partials/comments/remark42.ejs","hash":"d4e9532feeb02aed61bd15eda536b5b631454dac","modified":1688287284000},{"_id":"themes/fluid/layout/_partials/comments/twikoo.ejs","hash":"d84bcb5ccd78470a60c067fc914ac0ac67ac8777","modified":1688287284000},{"_id":"themes/fluid/layout/_partials/comments/utterances.ejs","hash":"c7ccf7f28308334a6da6f5425b141a24b5eca0e2","modified":1688287284000},{"_id":"themes/fluid/layout/_partials/comments/valine.ejs","hash":"19ba937553dddd317f827d682661a1066a7b1f30","modified":1688287284000},{"_id":"themes/fluid/layout/_partials/footer/beian.ejs","hash":"4fb9b5dd3f3e41a586d6af44e5069afe7c81fff2","modified":1688287284000},{"_id":"themes/fluid/layout/_partials/comments/waline.ejs","hash":"12727da7cf3ac83443270f550be4d1c06135b52b","modified":1688287284000},{"_id":"themes/fluid/layout/_partials/header/banner.ejs","hash":"e07757b59e7b89eea213d0e595cb5932f812fd32","modified":1688287284000},{"_id":"themes/fluid/layout/_partials/footer/statistics.ejs","hash":"454d8dd4c39f9494ebeb03ca0746f5bc122af76a","modified":1688287284000},{"_id":"themes/fluid/layout/_partials/header/navigation.ejs","hash":"870db75e4e403a840c4463dfeed2c9114846e7cc","modified":1688287284000},{"_id":"themes/fluid/layout/_partials/plugins/analytics.ejs","hash":"4f68c80bd1395e2f6d11e373116e54de11cb62e8","modified":1688287284000},{"_id":"themes/fluid/layout/_partials/plugins/anchorjs.ejs","hash":"40181442d3a2b8734783a0ad7caf2d2522e3f2ab","modified":1688287284000},{"_id":"themes/fluid/layout/_partials/plugins/code-widget.ejs","hash":"3a505cba37942badf62a56bbb8b605b72af330aa","modified":1688287284000},{"_id":"themes/fluid/layout/_partials/plugins/encrypt.ejs","hash":"0fff24cf5bf99fbe5c56c292e2eac4a89bf29db4","modified":1688287284000},{"_id":"themes/fluid/layout/_partials/plugins/highlight.ejs","hash":"7529dd215b09d3557804333942377b9e20fa554e","modified":1688287284000},{"_id":"themes/fluid/layout/_partials/plugins/fancybox.ejs","hash":"9d1ea2a46b8c8ad8c168594d578f40764818ef13","modified":1688287284000},{"_id":"themes/fluid/layout/_partials/plugins/math.ejs","hash":"dcbf9a381ee76f2f1f75fcbc22c50a502ec85023","modified":1688287284000},{"_id":"themes/fluid/layout/_partials/plugins/mermaid.ejs","hash":"03ac02762f801970d1c4e73d6ec8d4c503780e50","modified":1688287284000},{"_id":"themes/fluid/layout/_partials/plugins/nprogress.ejs","hash":"4c2d39ce816b8a6dcd6b53113c8695f8bd650a23","modified":1688287284000},{"_id":"themes/fluid/layout/_partials/plugins/typed.ejs","hash":"f345374885cd6a334f09a11f59c443b5d577c06c","modified":1688287284000},{"_id":"themes/fluid/layout/_partials/post/category-bar.ejs","hash":"8772bce97ed297e7a88523f4e939ed6436c22f87","modified":1688287284000},{"_id":"themes/fluid/layout/_partials/post/meta-bottom.ejs","hash":"375974ec017696e294dc12469fb0ae257800dc2d","modified":1688287284000},{"_id":"themes/fluid/layout/_partials/post/copyright.ejs","hash":"529f3069742b3d338c769ba2d836e7f3c342a09d","modified":1688287284000},{"_id":"themes/fluid/layout/_partials/post/sidebar-left.ejs","hash":"9992c99b3eb728ad195970e1b84d665f2c8691c4","modified":1688287284000},{"_id":"themes/fluid/layout/_partials/post/meta-top.ejs","hash":"ce6e9f578f4faa45840abddf8f46af3f4b69c177","modified":1688287284000},{"_id":"themes/fluid/layout/_partials/post/sidebar-right.ejs","hash":"d5fcc9b60e02f869a29a8c17a16a6028ecc1e6d8","modified":1688287284000},{"_id":"themes/fluid/scripts/events/lib/compatible-configs.js","hash":"ef474d1fa5bbafc52619ced0f9dc7eaf2affb363","modified":1688287284000},{"_id":"themes/fluid/layout/_partials/post/toc.ejs","hash":"635a89060fbf72eeda066fc4bd0a97462f069417","modified":1688287284000},{"_id":"themes/fluid/scripts/events/lib/footnote.js","hash":"b2f61b91fffb17d11ad56811f07d52d23f012741","modified":1688287284000},{"_id":"themes/fluid/scripts/events/lib/hello.js","hash":"44c5eb97b98813a07c659d6afedd17fad63b1821","modified":1688287284000},{"_id":"themes/fluid/scripts/events/lib/highlight.js","hash":"8d3ae1ec6660fbb0e563bc08c2f8deefde1f3bf6","modified":1688287284000},{"_id":"themes/fluid/scripts/events/lib/merge-configs.js","hash":"7c944c43b2ece5dd84859bd9d1fe955d13427387","modified":1688287284000},{"_id":"themes/fluid/scripts/events/lib/injects.js","hash":"5ae4b07204683e54b5a1b74e931702bbce2ac23e","modified":1688287284000},{"_id":"themes/fluid/scripts/events/lib/lazyload.js","hash":"9ba0d4bc224e22af8a5a48d6ff13e5a0fcfee2a4","modified":1688287284000},{"_id":"themes/fluid/source/css/_functions/base.styl","hash":"2e46f3f4e2c9fe34c1ff1c598738fc7349ae8188","modified":1688287284000},{"_id":"themes/fluid/source/css/_mixins/base.styl","hash":"542e306ee9494e8a78e44d6d7d409605d94caeb3","modified":1688287284000},{"_id":"themes/fluid/source/css/_pages/pages.styl","hash":"b8e887bc7fb3b765a1f8ec9448eff8603a41984f","modified":1688287284000},{"_id":"themes/fluid/source/css/_variables/base.styl","hash":"4ed5f0ae105ef4c7dd92eaf652ceda176c38e502","modified":1688287284000},{"_id":"themes/fluid/source/css/_pages/_about/about.styl","hash":"97fe42516ea531fdad771489b68aa8b2a7f6ae46","modified":1688287284000},{"_id":"themes/fluid/source/css/_pages/_base/base.styl","hash":"643284c567665f96915f0b64e59934dda315f74d","modified":1688287284000},{"_id":"themes/fluid/source/css/_pages/_base/inline.styl","hash":"411a3fa3f924a87e00ff04d18b5c83283b049a4d","modified":1688287284000},{"_id":"themes/fluid/source/css/_pages/_archive/archive.styl","hash":"c475e6681546d30350eaed11f23081ecae80c375","modified":1688287284000},{"_id":"themes/fluid/source/css/_pages/_base/color-schema.styl","hash":"e413212e5a667d5b8299c4d2a39c4dfa1378d119","modified":1688287284000},{"_id":"themes/fluid/source/css/_pages/_base/keyframes.styl","hash":"94065ea50f5bef7566d184f2422f6ac20866ba22","modified":1688287284000},{"_id":"themes/fluid/source/css/_pages/_base/print.styl","hash":"166afbc596ea4b552bad7290ec372d25ec34db7b","modified":1688287284000},{"_id":"themes/fluid/source/css/_pages/_category/category-bar.styl","hash":"cc6df43fef6bb3efecbfdd8b9e467424a1dea581","modified":1688287284000},{"_id":"themes/fluid/source/css/_pages/_category/category-chain.styl","hash":"0cdf7ef50dfd0669d3b257821384ff31cd81b7c9","modified":1688287284000},{"_id":"themes/fluid/source/css/_pages/_category/category-list.styl","hash":"7edfe1b571ecca7d08f5f4dbcf76f4ffdcfbf0b5","modified":1688287284000},{"_id":"themes/fluid/source/css/_pages/_index/index.styl","hash":"0acbd71633bcc7191672ea4e1b2277bea350d73b","modified":1688287284000},{"_id":"themes/fluid/source/css/_pages/_post/markdown.styl","hash":"1e3d3a82721e7c10bcfcecec6d81cf2979039452","modified":1688287284000},{"_id":"themes/fluid/source/css/_pages/_post/highlight.styl","hash":"4df764d298fe556e501db4afc2b05686fe6ebcfb","modified":1688287284000},{"_id":"themes/fluid/source/css/_pages/_post/comment.styl","hash":"780f3788e7357bcd3f3262d781cb91bb53976a93","modified":1688287284000},{"_id":"themes/fluid/source/css/_pages/_links/links.styl","hash":"5c7f2044e3f1da05a3229537c06bd879836f8d6e","modified":1688287284000},{"_id":"themes/fluid/source/css/_pages/_post/post-page.styl","hash":"ecf3488566b374d564ae985c61e08562ba908023","modified":1688287284000},{"_id":"themes/fluid/source/css/_pages/_tag/tags.styl","hash":"65bfc01c76abc927fa1a23bf2422892b0d566c3f","modified":1688287284000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/anchorjs.styl","hash":"e0cebda4a6f499aff75e71417d88caa7ceb13b94","modified":1688287284000},{"_id":"themes/fluid/source/css/_pages/_post/post-tag.styl","hash":"27f70062415ccf66a9b6f4952db124fc1471fda5","modified":1688287284000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/banner.styl","hash":"7a0bd629bc234fc75e3cc8e3715ffada92f09e73","modified":1688287284000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/board.styl","hash":"4397037fc3f0033dbe546c33cd9dbdabd8cb1632","modified":1688287284000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/code-widget.styl","hash":"b66ab013f0f37d724a149b85b3c7432afcf460ad","modified":1688287284000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/footer.styl","hash":"2caaca71dd1ff63d583099ed817677dd267b457e","modified":1688287284000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/copyright.styl","hash":"26f71a9cd60d96bb0cb5bbdf58150b8e524d9707","modified":1688287284000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/footnote.styl","hash":"ae9289cc89649af2042907f8a003303b987f3404","modified":1688287284000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/header.styl","hash":"c4459248c66ea1326feed021179b847ae91d465f","modified":1688287284000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/modal.styl","hash":"adf6c1e5c8e1fb41c77ce6e2258001df61245aa2","modified":1688287284000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/noscript.styl","hash":"0cf2f2bb44f456150d428016675d5876a9d2e2aa","modified":1688287284000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/ngrogress.styl","hash":"5d225357b4a58d46118e6616377168336ed44cb2","modified":1688287284000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/pagination.styl","hash":"8bb1b68e5f3552cb48c2ffa31edbc53646a8fb4c","modified":1688287284000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/scroll-btn.styl","hash":"f0e429a27fa8a7658fcbddbb4d4dbe4afa12499a","modified":1688287284000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/qrcode.styl","hash":"78704a94c0436097abfb0e0a57abeb3429c749b7","modified":1688287284000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/toc.styl","hash":"9e7452aa2372153f25d7a4675c9d36d281a65d24","modified":1688287284000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/search.styl","hash":"10f7e91a91e681fb9fe46f9df7707b9ef78707c8","modified":1688287284000},{"_id":"themes/fluid/source/img/default.png","hash":"167a12978d80371cf578c8a2e45c24a2eb25b6fb","modified":1688287284000},{"_id":"public/local-search.xml","hash":"dcc38ec1e35a644d5d041f28a61627e45c3462b6","modified":1714808305818},{"_id":"public/404.html","hash":"81315bfedd5d2eca22cde0e225237d5efcc839d1","modified":1712061924643},{"_id":"public/tags/index.html","hash":"b8e5fbfe121631ab3e2c267d6a89d191675f3ca3","modified":1714808305818},{"_id":"public/categories/index.html","hash":"3de6d4307f5817409a6a607e442716f1295ca42e","modified":1712061924643},{"_id":"public/links/index.html","hash":"634b136cc54051d8e46a233c426bdb86b23270a5","modified":1712061924643},{"_id":"public/img/avatar.png","hash":"fe739a158cc128f70f780eb5fa96f388b81d478f","modified":1712048426794},{"_id":"public/img/fluid.png","hash":"64b215db2cb3af98fe639e94537cb5209f959c78","modified":1712048426794},{"_id":"public/img/police_beian.png","hash":"90efded6baa2dde599a9d6b1387973e8e64923ea","modified":1712048426794},{"_id":"public/img/loading.gif","hash":"2d2fc0f947940f98c21afafef39ecf226a2e8d55","modified":1712048426794},{"_id":"public/2024/04/02/线程池/image(1).png","hash":"8bad4e766ae7dbfcf81b301a58bbbb0ba5785589","modified":1712048426794},{"_id":"public/xml/local-search.xml","hash":"8c96ba6a064705602ce28d096fd7dd9069630a55","modified":1712048426794},{"_id":"public/2024/04/02/线程池/image.png","hash":"7449866503ab66f38febc886206f5fac6b1f23ab","modified":1712048426794},{"_id":"public/2024/04/02/线程池/image(2).png","hash":"d8c7e2a705312a91d829bbf87a526f870eb6e8d6","modified":1712048426794},{"_id":"public/2024/04/02/线程池/image(4).png","hash":"9f135115f204fe7ed50d221551353a854ac4e1bc","modified":1712048426794},{"_id":"public/2024/04/02/线程池/image(3).png","hash":"f85c7a0fefd6098b4164be50a8f2e541944ac08a","modified":1712048426794},{"_id":"public/2024/04/02/线程池/image(7).png","hash":"b43161db368d2cee63755ecafd1b8bc7d4566174","modified":1712048426794},{"_id":"public/2024/04/02/线程池/image(8).png","hash":"47b5a26d24552f84b9185cde03313e4e0ba24c8a","modified":1712048426794},{"_id":"public/2024/04/02/线程池/image(6).png","hash":"085fe66ffedf9eebb1ae325e1dbd96bc6431a55a","modified":1712048426794},{"_id":"public/2024/04/02/线程池/image(5).png","hash":"ddda2c480e2bc5072b78aa1d7072b8ddd85776a4","modified":1712048426794},{"_id":"public/css/highlight.css","hash":"04d4ddbb5e1d1007447c2fe293ee05aae9b9563e","modified":1712048426794},{"_id":"public/css/main.css","hash":"526a4522eb54bb51772f51fb98295dc4fe03429f","modified":1712048426794},{"_id":"public/css/gitalk.css","hash":"a57b3cc8e04a0a4a27aefa07facf5b5e7bca0e76","modified":1712048426794},{"_id":"public/css/highlight-dark.css","hash":"902294bada4323c0f51502d67cba8c3a0298952f","modified":1712048426794},{"_id":"public/js/boot.js","hash":"38bd26c6b7acdafda86dda3560e6a3ca488d3c76","modified":1712048426794},{"_id":"public/js/events.js","hash":"89e3561488a618ed0caeb9edf18e441978e29c25","modified":1712048426794},{"_id":"public/js/color-schema.js","hash":"76a198f8721352ebeaf5b2ef2f4db00612da4796","modified":1712048426794},{"_id":"public/js/img-lazyload.js","hash":"cbdeca434ec4da51f488c821d51b4d23c73294af","modified":1712048426794},{"_id":"public/js/leancloud.js","hash":"eff77c7a5c399fcaefda48884980571e15243fc9","modified":1712048426794},{"_id":"public/js/local-search.js","hash":"b9945f76f8682f3ec32edfb285b26eb559f7b7e8","modified":1712048426794},{"_id":"public/js/plugins.js","hash":"c34916291e392a774ff3e85c55badb83e8661297","modified":1712048426794},{"_id":"public/js/utils.js","hash":"b82e7c289a66dfd36064470fd41c0e96fc598b43","modified":1712048426794},{"_id":"public/img/default.png","hash":"167a12978d80371cf578c8a2e45c24a2eb25b6fb","modified":1712048426794},{"_id":"source/_posts/SpringGateway学习1.md","hash":"a8cab680d924831063476a2927f2288518c2e47c","modified":1712123149186},{"_id":"source/_posts/SpringGateway学习1/image1.png","hash":"24b1db15df82b3cb4bda0ad4a4d0b733588d3e13","modified":1712059168270},{"_id":"source/_posts/SpringGateway学习1/image3.png","hash":"586a2509b1adc656f34aefba218206352ca3ba78","modified":1712059328591},{"_id":"source/_posts/SpringGateway学习1/image4.png","hash":"4906ecca299f8bc8e399fae37fbe2151bc6aa362","modified":1712059333405},{"_id":"source/_posts/SpringGateway学习1/image2.png","hash":"2e96681475e17246d08d893e8e8b484d03403950","modified":1712059315814},{"_id":"source/_posts/SpringGateway学习1/image5.png","hash":"f77882db20f6ac7e526e39c6f3dec88c0c6bf980","modified":1712059338646},{"_id":"source/_posts/SpringGateway学习1/image6.png","hash":"aad8162e6d64c15801783a1ba2bec089f2901b37","modified":1712059342929},{"_id":"source/_posts/SpringGateway学习2.md","hash":"bbc8be12cbf84b91f936191d26f688a439f56ed7","modified":1712123159055},{"_id":"source/_posts/SpringGateway学习2/image.png","hash":"b6824d4209533439102cd7e18b4fdf6891401e61","modified":1712059976804},{"_id":"source/_posts/SpringGateway学习2/image1.png","hash":"c69e96b542534ddfffeffc666962b80054f18ca2","modified":1712059984961},{"_id":"source/_posts/SpringGateway学习2/image11.png","hash":"1648c14da32339f899fa8ebc0d8ff484021499e1","modified":1712060070700},{"_id":"source/_posts/SpringGateway学习2/image10.png","hash":"a25fe03d0e533978a37868ac265402e456bb3cd2","modified":1712060061472},{"_id":"source/_posts/SpringGateway学习2/image2.png","hash":"36d390ccefef959dd2da3ae35d031323a1121758","modified":1712059992643},{"_id":"source/_posts/SpringGateway学习2/image12.png","hash":"38b498d5d01ec48b0a8f9ef33774a6c72af25b56","modified":1712060077934},{"_id":"source/_posts/SpringGateway学习2/image3.png","hash":"e06a6259aeb28d6f8a2ac5f304a8c3acd76b9f66","modified":1712060002404},{"_id":"source/_posts/SpringGateway学习2/image4.png","hash":"68074928b0a814ef6c00e2350daa4e247a31d94b","modified":1712060009516},{"_id":"source/_posts/SpringGateway学习2/image5.png","hash":"2c241af4a832d92fd3c767d8b8d88dc96c25b682","modified":1712060019227},{"_id":"source/_posts/SpringGateway学习2/image6.png","hash":"be72d353cef9bf86907a6d09ffbd4291501e40f9","modified":1712060027699},{"_id":"source/_posts/SpringGateway学习2/image7.png","hash":"5ef249200d280a567ec16cd66eb65b727b660764","modified":1712060035668},{"_id":"source/_posts/SpringGateway学习2/image8.png","hash":"af66ca74fc4498ede1ed1cd26e453337e1c67be5","modified":1712060044150},{"_id":"source/_posts/SpringGateway学习2/image9.png","hash":"269abac7aa9c8fe5826319e7be4aeb93e51daac3","modified":1712060052119},{"_id":"source/_posts/Nacos学习1—介绍、配置中心.md","hash":"ee84f2dc75bc22781715523d3c519ee22a911509","modified":1712123095909},{"_id":"source/_posts/Nacos学习1—介绍、配置中心/image10.png","hash":"c1530d88d6719582b49b1af85bf1da6db8ca7258","modified":1712060512504},{"_id":"source/_posts/Nacos学习1—介绍、配置中心/image.png","hash":"e082469a1d320475fac1614b98ce2017775072fe","modified":1712060423117},{"_id":"source/_posts/Nacos学习1—介绍、配置中心/image1.png","hash":"84790435da263cf20c6885c2a8043c4d3333af77","modified":1712060430104},{"_id":"source/_posts/Nacos学习1—介绍、配置中心/image12.png","hash":"51a067b635d193a0607e7b7fa4fd3c650fc5e075","modified":1712060526959},{"_id":"source/_posts/Nacos学习1—介绍、配置中心/image11.png","hash":"e2cd66fcf4e193161b5383ee451ca76cbd93df61","modified":1712060519295},{"_id":"source/_posts/Nacos学习1—介绍、配置中心/image13.png","hash":"369d78fd1bcaef5eb1be7a30db0a8cbe7c8c3a28","modified":1712060534529},{"_id":"source/_posts/Nacos学习1—介绍、配置中心/image14.png","hash":"811b5031f391a3c7d00583f4954d24f473377dc0","modified":1712060542231},{"_id":"source/_posts/Nacos学习1—介绍、配置中心/image15.png","hash":"e4db9a5fd659a687aee8166a22fe315afef784a0","modified":1712060553727},{"_id":"source/_posts/Nacos学习1—介绍、配置中心/image16.png","hash":"1b2306d8f80d05ec6ebaff8b5deacf62da19a784","modified":1712060560184},{"_id":"source/_posts/Nacos学习1—介绍、配置中心/image17.png","hash":"9fd6935ada5ac0ca20c77e38376b1d2df2741c63","modified":1712060567196},{"_id":"source/_posts/Nacos学习1—介绍、配置中心/image18.png","hash":"6b28432656e0cef8d0f41d102fccae8dc7eba1b9","modified":1712060574464},{"_id":"source/_posts/Nacos学习1—介绍、配置中心/image19.png","hash":"a542fba1c29995007833bd5ae21daaafe85e73e7","modified":1712060581840},{"_id":"source/_posts/Nacos学习1—介绍、配置中心/image2.png","hash":"8cae42d4a7ae4221f707ffaeec8d9b928d5d02c2","modified":1712060448481},{"_id":"source/_posts/Nacos学习1—介绍、配置中心/image20.png","hash":"9759efd23b82a1aa7262ac7855fe4f27a7684e23","modified":1712060590141},{"_id":"source/_posts/Nacos学习1—介绍、配置中心/image21.png","hash":"d8cb8fb1f03850b794cb2eeea546d46316e43609","modified":1712060610048},{"_id":"source/_posts/Nacos学习1—介绍、配置中心/image3.png","hash":"e7d079f09826ab7cb84ca1224802bbb99aa51fbc","modified":1712060458320},{"_id":"source/_posts/Nacos学习1—介绍、配置中心/image4.png","hash":"e7d079f09826ab7cb84ca1224802bbb99aa51fbc","modified":1712060468040},{"_id":"source/_posts/Nacos学习1—介绍、配置中心/image5.png","hash":"044a4c14769afea9e3b453cea19ac945920f16b9","modified":1712060475507},{"_id":"source/_posts/Nacos学习1—介绍、配置中心/image7.png","hash":"e34ea5cd2fb4de1298e42c157c5ce4be14c38bee","modified":1712060490701},{"_id":"source/_posts/Nacos学习1—介绍、配置中心/image8.png","hash":"b6f41fc3b3983544dbccb7ee8b2c7f5aef0938cc","modified":1712060497482},{"_id":"source/_posts/Nacos学习1—介绍、配置中心/image9.png","hash":"0515e8c0394e9db20617cf6c782d005ade6311e9","modified":1712060505472},{"_id":"source/_posts/Nacos学习1—介绍、配置中心/image6.png","hash":"f95c0003157e6d0757908c635d442de0fc0cf825","modified":1712060483317},{"_id":"source/_posts/Nacos学习2—Nacos配置中心.md","hash":"d2e33a7755d28153bf54f465ab2454e8c9a5eb9a","modified":1712123087541},{"_id":"source/_posts/Nacos学习2—Nacos配置中心/image.png","hash":"24c280ba7910a6e9cea56272c19268c0c3a817e2","modified":1712061104470},{"_id":"source/_posts/Nacos学习2—Nacos配置中心/image1.png","hash":"5b51a80224fbd169029ffaafbafaa4f0fa342f97","modified":1712061112634},{"_id":"source/_posts/Nacos学习2—Nacos配置中心/image12.png","hash":"08d399b32a47285c273108ebf2e16e791a32e393","modified":1712061201708},{"_id":"source/_posts/Nacos学习2—Nacos配置中心/image10.png","hash":"839f6ddf0a079062515402290ca5f6e88f4f87d1","modified":1712061186961},{"_id":"source/_posts/Nacos学习2—Nacos配置中心/image13.png","hash":"6f1d6092ac3424a9d6169293e6767d181d0d7835","modified":1712061211375},{"_id":"source/_posts/Nacos学习2—Nacos配置中心/image11.png","hash":"9a2d2d08aaadeff1a60356994e23fc74e695ea3d","modified":1712061193943},{"_id":"source/_posts/Nacos学习2—Nacos配置中心/image14.png","hash":"4b77a92cad12ca45cc097a038a11938f35b32a51","modified":1712061223132},{"_id":"source/_posts/Nacos学习2—Nacos配置中心/image15.png","hash":"b4f576df0628983d5a2ab34f10181c395526e514","modified":1712061234572},{"_id":"source/_posts/Nacos学习2—Nacos配置中心/image16.png","hash":"5200e9d2120749e9dea51a25e50176e9fe34b771","modified":1712061243103},{"_id":"source/_posts/Nacos学习2—Nacos配置中心/image18.png","hash":"47ae4a320d7b94435e098ee23588b751fe9518d4","modified":1712061267062},{"_id":"source/_posts/Nacos学习2—Nacos配置中心/image17.png","hash":"2ba96af14229306c94bdb1b4d417a393637eafc7","modified":1712061252423},{"_id":"source/_posts/Nacos学习2—Nacos配置中心/image2.png","hash":"f8d1d4d312873471b8a4808c787dc26dbc363010","modified":1712061119890},{"_id":"source/_posts/Nacos学习2—Nacos配置中心/image19.png","hash":"19d4f646e85488183ee13a512302d658872ac58c","modified":1712061277386},{"_id":"source/_posts/Nacos学习2—Nacos配置中心/image20.png","hash":"9d616bb6ee2ca95f5469b006ccf3fe9a86bebc23","modified":1712061283989},{"_id":"source/_posts/Nacos学习2—Nacos配置中心/image21.png","hash":"eef4db395240044da1f5207b971044b970358e31","modified":1712061291721},{"_id":"source/_posts/Nacos学习2—Nacos配置中心/image22.png","hash":"46d836c6112e0ddff39e658c50eaf74e1fc06133","modified":1712061302992},{"_id":"source/_posts/Nacos学习2—Nacos配置中心/image26.png","hash":"7c9c5a71a6e0981144f40a7a892e701eb62965d6","modified":1712061340787},{"_id":"source/_posts/Nacos学习2—Nacos配置中心/image23.png","hash":"7dbb86ff6cadce7317a748175e50da29377867dc","modified":1712061312924},{"_id":"source/_posts/Nacos学习2—Nacos配置中心/image24.png","hash":"0f00f3b974adb87de54fe23cdceb8a55c62ea7e4","modified":1712061323677},{"_id":"source/_posts/Nacos学习2—Nacos配置中心/image25.png","hash":"d281d89e28e1c47aec79330043afa02f736c1492","modified":1712061332181},{"_id":"source/_posts/Nacos学习2—Nacos配置中心/image27.png","hash":"16fe5743a040cc156627f2491da44a518551ea22","modified":1712061350130},{"_id":"source/_posts/Nacos学习2—Nacos配置中心/image28.png","hash":"2619e495f911bba89bfb057668f63ae8806cbb16","modified":1712061358411},{"_id":"source/_posts/Nacos学习2—Nacos配置中心/image3.png","hash":"1ddf5ece4f4a3e00b8142b154762553492b35b7c","modified":1712061127480},{"_id":"source/_posts/Nacos学习2—Nacos配置中心/image4.png","hash":"ef12acc646eaa291a44f6f191cf01e38dfb23e93","modified":1712061135892},{"_id":"source/_posts/Nacos学习2—Nacos配置中心/image6.png","hash":"79ba2d51713bda0bbb91147d06b57f0c17cede2a","modified":1712061155191},{"_id":"source/_posts/Nacos学习2—Nacos配置中心/image7.png","hash":"85b0ad76b40a45b4c4904a8953ddf3f9d19c67e5","modified":1712061163102},{"_id":"source/_posts/Nacos学习2—Nacos配置中心/image8.png","hash":"b74ee7e78a30e07094b0c2a26941f550b4b76f92","modified":1712061170726},{"_id":"source/_posts/Nacos学习2—Nacos配置中心/image5.png","hash":"eb6a59b902107d4818e03970cb96b9f85a5b8cee","modified":1712061144487},{"_id":"source/_posts/Nacos学习2—Nacos配置中心/image9.png","hash":"affb0e340a3c4ae6a18d59792c0643d08a20f6ed","modified":1712061178796},{"_id":"public/2024/04/02/Nacos学习2—Nacos配置中心/index.html","hash":"317fd91f1fd7977777c3044012505d88666bf892","modified":1712123170006},{"_id":"public/2024/04/02/Nacos学习1—介绍、配置中心/index.html","hash":"f45cb6cc7e856b4e99e6ea0798812045b2d6a7d1","modified":1712123170006},{"_id":"public/2024/04/02/SpringGateway学习2/index.html","hash":"c5fd80c4dfc35dfcb493c7bf6139aba90583ad69","modified":1712123170006},{"_id":"public/2024/04/02/SpringGateway学习1/index.html","hash":"202a1cd169147b5c5d9b797433ff43b066f53b92","modified":1712123170006},{"_id":"public/2024/04/02/SpringGateway学习1/image1.png","hash":"24b1db15df82b3cb4bda0ad4a4d0b733588d3e13","modified":1712061924643},{"_id":"public/2024/04/02/SpringGateway学习1/image5.png","hash":"f77882db20f6ac7e526e39c6f3dec88c0c6bf980","modified":1712061924643},{"_id":"public/2024/04/02/SpringGateway学习1/image4.png","hash":"4906ecca299f8bc8e399fae37fbe2151bc6aa362","modified":1712061924643},{"_id":"public/2024/04/02/SpringGateway学习1/image2.png","hash":"2e96681475e17246d08d893e8e8b484d03403950","modified":1712061924643},{"_id":"public/2024/04/02/SpringGateway学习1/image3.png","hash":"586a2509b1adc656f34aefba218206352ca3ba78","modified":1712061924643},{"_id":"public/2024/04/02/SpringGateway学习1/image6.png","hash":"aad8162e6d64c15801783a1ba2bec089f2901b37","modified":1712061924643},{"_id":"public/2024/04/02/SpringGateway学习2/image.png","hash":"b6824d4209533439102cd7e18b4fdf6891401e61","modified":1712061924643},{"_id":"public/2024/04/02/SpringGateway学习2/image1.png","hash":"c69e96b542534ddfffeffc666962b80054f18ca2","modified":1712061924643},{"_id":"public/2024/04/02/SpringGateway学习2/image10.png","hash":"a25fe03d0e533978a37868ac265402e456bb3cd2","modified":1712061924643},{"_id":"public/2024/04/02/SpringGateway学习2/image11.png","hash":"1648c14da32339f899fa8ebc0d8ff484021499e1","modified":1712061924643},{"_id":"public/2024/04/02/SpringGateway学习2/image12.png","hash":"38b498d5d01ec48b0a8f9ef33774a6c72af25b56","modified":1712061924643},{"_id":"public/2024/04/02/SpringGateway学习2/image2.png","hash":"36d390ccefef959dd2da3ae35d031323a1121758","modified":1712061924643},{"_id":"public/2024/04/02/SpringGateway学习2/image4.png","hash":"68074928b0a814ef6c00e2350daa4e247a31d94b","modified":1712061924643},{"_id":"public/2024/04/02/SpringGateway学习2/image3.png","hash":"e06a6259aeb28d6f8a2ac5f304a8c3acd76b9f66","modified":1712061924643},{"_id":"public/2024/04/02/SpringGateway学习2/image5.png","hash":"2c241af4a832d92fd3c767d8b8d88dc96c25b682","modified":1712061924643},{"_id":"public/2024/04/02/SpringGateway学习2/image6.png","hash":"be72d353cef9bf86907a6d09ffbd4291501e40f9","modified":1712061924643},{"_id":"public/2024/04/02/SpringGateway学习2/image7.png","hash":"5ef249200d280a567ec16cd66eb65b727b660764","modified":1712061924643},{"_id":"public/2024/04/02/SpringGateway学习2/image8.png","hash":"af66ca74fc4498ede1ed1cd26e453337e1c67be5","modified":1712061924643},{"_id":"public/2024/04/02/Nacos学习1—介绍、配置中心/image.png","hash":"e082469a1d320475fac1614b98ce2017775072fe","modified":1712061924643},{"_id":"public/2024/04/02/SpringGateway学习2/image9.png","hash":"269abac7aa9c8fe5826319e7be4aeb93e51daac3","modified":1712061924643},{"_id":"public/2024/04/02/Nacos学习1—介绍、配置中心/image1.png","hash":"84790435da263cf20c6885c2a8043c4d3333af77","modified":1712061924643},{"_id":"public/2024/04/02/Nacos学习1—介绍、配置中心/image10.png","hash":"c1530d88d6719582b49b1af85bf1da6db8ca7258","modified":1712061924643},{"_id":"public/2024/04/02/Nacos学习1—介绍、配置中心/image11.png","hash":"e2cd66fcf4e193161b5383ee451ca76cbd93df61","modified":1712061924643},{"_id":"public/2024/04/02/Nacos学习1—介绍、配置中心/image12.png","hash":"51a067b635d193a0607e7b7fa4fd3c650fc5e075","modified":1712061924643},{"_id":"public/2024/04/02/Nacos学习1—介绍、配置中心/image13.png","hash":"369d78fd1bcaef5eb1be7a30db0a8cbe7c8c3a28","modified":1712061924643},{"_id":"public/2024/04/02/Nacos学习1—介绍、配置中心/image14.png","hash":"811b5031f391a3c7d00583f4954d24f473377dc0","modified":1712061924643},{"_id":"public/2024/04/02/Nacos学习1—介绍、配置中心/image15.png","hash":"e4db9a5fd659a687aee8166a22fe315afef784a0","modified":1712061924643},{"_id":"public/2024/04/02/Nacos学习1—介绍、配置中心/image16.png","hash":"1b2306d8f80d05ec6ebaff8b5deacf62da19a784","modified":1712061924643},{"_id":"public/2024/04/02/Nacos学习1—介绍、配置中心/image17.png","hash":"9fd6935ada5ac0ca20c77e38376b1d2df2741c63","modified":1712061924643},{"_id":"public/2024/04/02/Nacos学习1—介绍、配置中心/image18.png","hash":"6b28432656e0cef8d0f41d102fccae8dc7eba1b9","modified":1712061924643},{"_id":"public/2024/04/02/Nacos学习1—介绍、配置中心/image19.png","hash":"a542fba1c29995007833bd5ae21daaafe85e73e7","modified":1712061924643},{"_id":"public/2024/04/02/Nacos学习1—介绍、配置中心/image2.png","hash":"8cae42d4a7ae4221f707ffaeec8d9b928d5d02c2","modified":1712061924643},{"_id":"public/2024/04/02/Nacos学习1—介绍、配置中心/image20.png","hash":"9759efd23b82a1aa7262ac7855fe4f27a7684e23","modified":1712061924643},{"_id":"public/2024/04/02/Nacos学习1—介绍、配置中心/image21.png","hash":"d8cb8fb1f03850b794cb2eeea546d46316e43609","modified":1712061924643},{"_id":"public/2024/04/02/Nacos学习1—介绍、配置中心/image3.png","hash":"e7d079f09826ab7cb84ca1224802bbb99aa51fbc","modified":1712061924643},{"_id":"public/2024/04/02/Nacos学习1—介绍、配置中心/image4.png","hash":"e7d079f09826ab7cb84ca1224802bbb99aa51fbc","modified":1712061924643},{"_id":"public/2024/04/02/Nacos学习1—介绍、配置中心/image5.png","hash":"044a4c14769afea9e3b453cea19ac945920f16b9","modified":1712061924643},{"_id":"public/2024/04/02/Nacos学习1—介绍、配置中心/image7.png","hash":"e34ea5cd2fb4de1298e42c157c5ce4be14c38bee","modified":1712061924643},{"_id":"public/2024/04/02/Nacos学习1—介绍、配置中心/image8.png","hash":"b6f41fc3b3983544dbccb7ee8b2c7f5aef0938cc","modified":1712061924643},{"_id":"public/2024/04/02/Nacos学习1—介绍、配置中心/image9.png","hash":"0515e8c0394e9db20617cf6c782d005ade6311e9","modified":1712061924643},{"_id":"public/2024/04/02/Nacos学习2—Nacos配置中心/image.png","hash":"24c280ba7910a6e9cea56272c19268c0c3a817e2","modified":1712061924643},{"_id":"public/2024/04/02/Nacos学习2—Nacos配置中心/image10.png","hash":"839f6ddf0a079062515402290ca5f6e88f4f87d1","modified":1712061924643},{"_id":"public/2024/04/02/Nacos学习2—Nacos配置中心/image1.png","hash":"5b51a80224fbd169029ffaafbafaa4f0fa342f97","modified":1712061924643},{"_id":"public/2024/04/02/Nacos学习2—Nacos配置中心/image11.png","hash":"9a2d2d08aaadeff1a60356994e23fc74e695ea3d","modified":1712061924643},{"_id":"public/2024/04/02/Nacos学习2—Nacos配置中心/image12.png","hash":"08d399b32a47285c273108ebf2e16e791a32e393","modified":1712061924643},{"_id":"public/2024/04/02/Nacos学习2—Nacos配置中心/image14.png","hash":"4b77a92cad12ca45cc097a038a11938f35b32a51","modified":1712061924643},{"_id":"public/2024/04/02/Nacos学习2—Nacos配置中心/image13.png","hash":"6f1d6092ac3424a9d6169293e6767d181d0d7835","modified":1712061924643},{"_id":"public/2024/04/02/Nacos学习2—Nacos配置中心/image15.png","hash":"b4f576df0628983d5a2ab34f10181c395526e514","modified":1712061924643},{"_id":"public/2024/04/02/Nacos学习2—Nacos配置中心/image16.png","hash":"5200e9d2120749e9dea51a25e50176e9fe34b771","modified":1712061924643},{"_id":"public/2024/04/02/Nacos学习2—Nacos配置中心/image17.png","hash":"2ba96af14229306c94bdb1b4d417a393637eafc7","modified":1712061924643},{"_id":"public/2024/04/02/Nacos学习2—Nacos配置中心/image18.png","hash":"47ae4a320d7b94435e098ee23588b751fe9518d4","modified":1712061924643},{"_id":"public/2024/04/02/Nacos学习2—Nacos配置中心/image19.png","hash":"19d4f646e85488183ee13a512302d658872ac58c","modified":1712061924643},{"_id":"public/2024/04/02/Nacos学习2—Nacos配置中心/image2.png","hash":"f8d1d4d312873471b8a4808c787dc26dbc363010","modified":1712061924643},{"_id":"public/2024/04/02/Nacos学习2—Nacos配置中心/image20.png","hash":"9d616bb6ee2ca95f5469b006ccf3fe9a86bebc23","modified":1712061924643},{"_id":"public/2024/04/02/Nacos学习2—Nacos配置中心/image21.png","hash":"eef4db395240044da1f5207b971044b970358e31","modified":1712061924643},{"_id":"public/2024/04/02/Nacos学习2—Nacos配置中心/image22.png","hash":"46d836c6112e0ddff39e658c50eaf74e1fc06133","modified":1712061924643},{"_id":"public/2024/04/02/Nacos学习2—Nacos配置中心/image23.png","hash":"7dbb86ff6cadce7317a748175e50da29377867dc","modified":1712061924643},{"_id":"public/2024/04/02/Nacos学习2—Nacos配置中心/image24.png","hash":"0f00f3b974adb87de54fe23cdceb8a55c62ea7e4","modified":1712061924643},{"_id":"public/2024/04/02/Nacos学习1—介绍、配置中心/image6.png","hash":"f95c0003157e6d0757908c635d442de0fc0cf825","modified":1712061924643},{"_id":"public/2024/04/02/Nacos学习2—Nacos配置中心/image25.png","hash":"d281d89e28e1c47aec79330043afa02f736c1492","modified":1712061924643},{"_id":"public/2024/04/02/Nacos学习2—Nacos配置中心/image27.png","hash":"16fe5743a040cc156627f2491da44a518551ea22","modified":1712061924643},{"_id":"public/2024/04/02/Nacos学习2—Nacos配置中心/image26.png","hash":"7c9c5a71a6e0981144f40a7a892e701eb62965d6","modified":1712061924643},{"_id":"public/2024/04/02/Nacos学习2—Nacos配置中心/image28.png","hash":"2619e495f911bba89bfb057668f63ae8806cbb16","modified":1712061924643},{"_id":"public/2024/04/02/Nacos学习2—Nacos配置中心/image3.png","hash":"1ddf5ece4f4a3e00b8142b154762553492b35b7c","modified":1712061924643},{"_id":"public/2024/04/02/Nacos学习2—Nacos配置中心/image4.png","hash":"ef12acc646eaa291a44f6f191cf01e38dfb23e93","modified":1712061924643},{"_id":"public/2024/04/02/Nacos学习2—Nacos配置中心/image5.png","hash":"eb6a59b902107d4818e03970cb96b9f85a5b8cee","modified":1712061924643},{"_id":"public/2024/04/02/Nacos学习2—Nacos配置中心/image6.png","hash":"79ba2d51713bda0bbb91147d06b57f0c17cede2a","modified":1712061924643},{"_id":"public/2024/04/02/Nacos学习2—Nacos配置中心/image7.png","hash":"85b0ad76b40a45b4c4904a8953ddf3f9d19c67e5","modified":1712061924643},{"_id":"public/2024/04/02/Nacos学习2—Nacos配置中心/image8.png","hash":"b74ee7e78a30e07094b0c2a26941f550b4b76f92","modified":1712061924643},{"_id":"public/2024/04/02/Nacos学习2—Nacos配置中心/image9.png","hash":"affb0e340a3c4ae6a18d59792c0643d08a20f6ed","modified":1712061924643},{"_id":"source/_posts/Redis学习1-Redis简介、基础.md","hash":"cd6b385707c6ed13d4837aa39512b540bd5b0468","modified":1712123075288},{"_id":"source/_posts/Redis学习1-Redis简介、基础/1.png","hash":"c7232d3569ac62356b9318dbf6043e7e08c43913","modified":1712063104599},{"_id":"source/_posts/Redis学习1-Redis简介、基础/2.png","hash":"f777fe0f1cad0e68d13836190102cf6a2bf6bf57","modified":1712063110499},{"_id":"source/_posts/Redis学习1-Redis简介、基础/3.png","hash":"9f47437a5144ed4b49cb22e65c8c806a49aa25e8","modified":1712063115894},{"_id":"source/_posts/Redis学习1-Redis简介、基础/4.png","hash":"2cc4b0648c5945ffc3279d65cff6e697fbce9b68","modified":1712063123172},{"_id":"source/_posts/Redis学习1-Redis简介、基础/5.png","hash":"5fe9a373725a21cde6943e6d11cc90594990751d","modified":1712063128012},{"_id":"source/_posts/Redis学习1-Redis简介、基础/7.png","hash":"871cbd81a277ec5c5ce4dc395577bdda6daefacd","modified":1712063139794},{"_id":"source/_posts/Redis学习1-Redis简介、基础/6.png","hash":"37a8f2cfc11d1f785d6804e7e5acb3ded9292f66","modified":1712063133014},{"_id":"source/_posts/Redis学习1-Redis简介、基础/8.png","hash":"89d54a26e7b3d4cdbeca4085832f762802e763b5","modified":1712063144719},{"_id":"public/2024/04/02/Redis学习1-Redis简介、基础/index.html","hash":"fb601578c3b9018ab2dae8a4577a3fdc5ec82b59","modified":1712123170006},{"_id":"public/2024/04/02/Redis学习1-Redis简介、基础/3.png","hash":"9f47437a5144ed4b49cb22e65c8c806a49aa25e8","modified":1712063209453},{"_id":"public/2024/04/02/Redis学习1-Redis简介、基础/2.png","hash":"f777fe0f1cad0e68d13836190102cf6a2bf6bf57","modified":1712063209453},{"_id":"public/2024/04/02/Redis学习1-Redis简介、基础/1.png","hash":"c7232d3569ac62356b9318dbf6043e7e08c43913","modified":1712063209453},{"_id":"public/2024/04/02/Redis学习1-Redis简介、基础/4.png","hash":"2cc4b0648c5945ffc3279d65cff6e697fbce9b68","modified":1712063209453},{"_id":"public/2024/04/02/Redis学习1-Redis简介、基础/6.png","hash":"37a8f2cfc11d1f785d6804e7e5acb3ded9292f66","modified":1712063209453},{"_id":"public/2024/04/02/Redis学习1-Redis简介、基础/5.png","hash":"5fe9a373725a21cde6943e6d11cc90594990751d","modified":1712063209453},{"_id":"public/2024/04/02/Redis学习1-Redis简介、基础/7.png","hash":"871cbd81a277ec5c5ce4dc395577bdda6daefacd","modified":1712063209453},{"_id":"public/2024/04/02/Redis学习1-Redis简介、基础/8.png","hash":"89d54a26e7b3d4cdbeca4085832f762802e763b5","modified":1712063209453},{"_id":"source/_posts/Redis学习2—SpringBoot整合Redis、Redis工具类.md","hash":"d58877af276cbc9090894033bdd7b615be639202","modified":1712123069086},{"_id":"source/_posts/Redis学习3—Redis应用之缓存.md","hash":"9edf8a0a1aec8262127ce3561585302e7d4de0be","modified":1712123062736},{"_id":"source/_posts/Redis学习4—Redis应用之限流.md","hash":"f570da4b812469c893d16ad5f9528b1aaf6b96b4","modified":1712123055019},{"_id":"source/_posts/Redis学习5-Redis应用之签到.md","hash":"bcdef38bb63f88d06a54907cdc94161b60b37199","modified":1712123047646},{"_id":"source/_posts/Redis学习6—Redis分布式锁.md","hash":"c829726548523bc3cea74c5425af6ced688f94e3","modified":1712123029958},{"_id":"source/_posts/Redis学习2—SpringBoot整合Redis、Redis工具类/1.png","hash":"1ee54731822438af9d3b4a491d4ac718b8237c63","modified":1712063473695},{"_id":"source/_posts/Redis学习2—SpringBoot整合Redis、Redis工具类/2.png","hash":"3fbfbccf3e911317f01a1e3c223970f3984878e0","modified":1712063488951},{"_id":"source/_posts/Redis学习2—SpringBoot整合Redis、Redis工具类/3.png","hash":"01e646ccc59bd0a536973076fe546b96f97f72cb","modified":1712063493574},{"_id":"source/_posts/Redis学习3—Redis应用之缓存/1.png","hash":"a9e617eab4b8228bdfc1172f8f58351bae7d273c","modified":1712064069560},{"_id":"source/_posts/Redis学习3—Redis应用之缓存/10.png","hash":"9ef66a3fe895eb20c34bc1793ace8d4aebbc3a62","modified":1712064127361},{"_id":"source/_posts/Redis学习3—Redis应用之缓存/11.png","hash":"d565bc73b4f217a393371f6f60dd29d88eb06a16","modified":1712064134570},{"_id":"source/_posts/Redis学习3—Redis应用之缓存/12.png","hash":"3c4f08cbcd171702f2ea3242caa96d30a1ac0a54","modified":1712064142628},{"_id":"source/_posts/Redis学习3—Redis应用之缓存/13.png","hash":"ae96298617f85e224ebe6317ad2fe1aa15ac73e7","modified":1712064155176},{"_id":"source/_posts/Redis学习3—Redis应用之缓存/14.png","hash":"61d90310dd811b8ee35aa5c8a68194162c51dd3c","modified":1712064161449},{"_id":"source/_posts/Redis学习3—Redis应用之缓存/15.png","hash":"89e30827289489f89471c82df8cbf7b162671b95","modified":1712064167466},{"_id":"source/_posts/Redis学习3—Redis应用之缓存/16.png","hash":"12fd11b3a65611de78360d996c351bbba49122a8","modified":1712064174753},{"_id":"source/_posts/Redis学习3—Redis应用之缓存/17.png","hash":"3bc602456b3a0478950ab92593680096bc90dbfa","modified":1712064181188},{"_id":"source/_posts/Redis学习3—Redis应用之缓存/18.png","hash":"95c1c3b3a91ba1e500ec7a2a73ed82c5926a075d","modified":1712064189975},{"_id":"source/_posts/Redis学习3—Redis应用之缓存/19.png","hash":"edcaa44f59b972f73fbf8241060d95a0378e7d27","modified":1712064195270},{"_id":"source/_posts/Redis学习3—Redis应用之缓存/2.png","hash":"d701eff13dda7d559ccbdf19d937fc19d507eb89","modified":1712064074561},{"_id":"source/_posts/Redis学习3—Redis应用之缓存/20.png","hash":"dd821a8f50be8fa826c809b85fb183b8734d5f44","modified":1712064200906},{"_id":"source/_posts/Redis学习3—Redis应用之缓存/21.pnf","hash":"bc76a9224ece2ecd946428d8da3ddcd0667f1e05","modified":1712064208001},{"_id":"source/_posts/Redis学习3—Redis应用之缓存/22.png","hash":"29ed48232297bedd06442219dba52fb7638c75fe","modified":1712064214886},{"_id":"source/_posts/Redis学习3—Redis应用之缓存/23.png","hash":"e4790bd2a35716b8b853ca67e82a75c835dbe683","modified":1712064222270},{"_id":"source/_posts/Redis学习3—Redis应用之缓存/24.png","hash":"c453a2f38cd8754ffc8e37a371522917ceb82296","modified":1712064227072},{"_id":"source/_posts/Redis学习3—Redis应用之缓存/25.png","hash":"9b8bfa920be75b42e864c836d5000bdc332fc59b","modified":1712064233836},{"_id":"source/_posts/Redis学习3—Redis应用之缓存/26.png","hash":"5da411f28ee63721a685397bc2df918a11be040b","modified":1712064240747},{"_id":"source/_posts/Redis学习3—Redis应用之缓存/27.png","hash":"50735cfd3b10ba3b50a662d004effd404b5d926b","modified":1712064247742},{"_id":"source/_posts/Redis学习3—Redis应用之缓存/3.png","hash":"6e4d1f3f21eb3a89d93fb9f7691a67225b9fe403","modified":1712064078947},{"_id":"source/_posts/Redis学习3—Redis应用之缓存/4.png","hash":"284d46e933d490711d12b2bb1faeeef8361969ec","modified":1712064084035},{"_id":"source/_posts/Redis学习3—Redis应用之缓存/5.png","hash":"018f75c2726787a299a07729f9492fca2a644aee","modified":1712064089002},{"_id":"source/_posts/Redis学习3—Redis应用之缓存/6.png","hash":"8cd7f983bb22a7f22765442a2e5a8ba706913efb","modified":1712064097418},{"_id":"source/_posts/Redis学习3—Redis应用之缓存/7.png","hash":"4f14861d360a95d90b44e81464d3f9e266c67cdd","modified":1712064102027},{"_id":"source/_posts/Redis学习3—Redis应用之缓存/8.png","hash":"ba270279bba5a0b7e9a9f31ad38896640f29afab","modified":1712064109835},{"_id":"source/_posts/Redis学习3—Redis应用之缓存/9.png","hash":"6e2de7af11e3d6f9982abdc21f7eeecb8249a556","modified":1712064118714},{"_id":"source/_posts/Redis学习4—Redis应用之限流/1.png","hash":"72d86f5676c0fa03f685a11604e00d8faa7e0007","modified":1712064682757},{"_id":"source/_posts/Redis学习4—Redis应用之限流/2.png","hash":"202c481e6629e666cb3bcaa2d11dd6d4d7d87fef","modified":1712064703671},{"_id":"source/_posts/Redis学习4—Redis应用之限流/3.png","hash":"e51e5e101e799ceda9f64f3d6d39519dad6f815a","modified":1712064707956},{"_id":"source/_posts/Redis学习4—Redis应用之限流/4.png","hash":"8c139efbdd81bcd690194b036761c5cf3f5ea2a3","modified":1712064713679},{"_id":"source/_posts/Redis学习4—Redis应用之限流/5.png","hash":"2eb87a56a19ac4be69589458a258a4f6cc0d4417","modified":1712064719312},{"_id":"source/_posts/Redis学习4—Redis应用之限流/6.png","hash":"b738b19b1b47d9578d5fbcc7ee4efda8da0dd96d","modified":1712064728819},{"_id":"source/_posts/Redis学习4—Redis应用之限流/7.png","hash":"8b94367c80e6b49606b619d9f74aea3ba93a1a2f","modified":1712065481598},{"_id":"source/_posts/Redis学习5-Redis应用之签到/1.png","hash":"e5bded1f6966203235f13a72924d6b080520a36a","modified":1712064952539},{"_id":"source/_posts/Redis学习5-Redis应用之签到/2.png","hash":"2f6bf654c921227d37bfdbcdfa41eb74634dfe02","modified":1712064959030},{"_id":"source/_posts/Redis学习5-Redis应用之签到/3.png","hash":"64ce201b66e26ecc0273b011f3a258b1d1bf9e9d","modified":1712064963861},{"_id":"source/_posts/Redis学习5-Redis应用之签到/4.png","hash":"0ef24218db2c470de9ec326767040e91edf13693","modified":1712064974203},{"_id":"source/_posts/Redis学习6—Redis分布式锁/1.png","hash":"7842a765802cb3d0609b3a7128fec2c58ad58978","modified":1712065424347},{"_id":"source/_posts/Redis学习6—Redis分布式锁/10.png","hash":"2b25878dab27f93ad878f15ad66c5543cbe21c94","modified":1712065503338},{"_id":"source/_posts/Redis学习6—Redis分布式锁/11.png","hash":"3b9f1d389b08a731eac4b973d9b2674c8724270b","modified":1712065508681},{"_id":"source/_posts/Redis学习6—Redis分布式锁/12.png","hash":"e7d8d6de6022dbaf112e5c28cc2bfb7c16dd5d24","modified":1712065514559},{"_id":"source/_posts/Redis学习6—Redis分布式锁/13.png","hash":"55e90b6e2ac3346d28c31c079da526468792ac63","modified":1712065519137},{"_id":"source/_posts/Redis学习6—Redis分布式锁/15.png","hash":"e71be382d79ea3835f2b7b0e4e64713a60b0bd71","modified":1712065532264},{"_id":"source/_posts/Redis学习6—Redis分布式锁/14.png","hash":"3260e810a269afd5f6de6e909ef0a7de32fca97e","modified":1712065526886},{"_id":"source/_posts/Redis学习6—Redis分布式锁/16.png","hash":"9de34c01f5192c3cd2ff992c57c1ce2422f35cbb","modified":1712065538628},{"_id":"source/_posts/Redis学习6—Redis分布式锁/17.png","hash":"84d9f91e2dd30dadb609a666ed5b5852e51545b7","modified":1712065546702},{"_id":"source/_posts/Redis学习6—Redis分布式锁/18.png","hash":"f1a699bba8f8319484b433f4a854ed14f99bf97e","modified":1712065552009},{"_id":"source/_posts/Redis学习6—Redis分布式锁/19.png","hash":"ae8d8aa3d56ce662917af5ab5ed38f0c55cb5a27","modified":1712065557772},{"_id":"source/_posts/Redis学习6—Redis分布式锁/2.png","hash":"f47b83a3be4a44494300e494731eead2b7373b06","modified":1712065429028},{"_id":"source/_posts/Redis学习6—Redis分布式锁/20.png","hash":"de901bbe76360166ab02acb6a40b2d97f0973c15","modified":1712065562357},{"_id":"source/_posts/Redis学习6—Redis分布式锁/21.png","hash":"e741a93ebce8b304a6526defb4c6ee42543e7c6d","modified":1712065568775},{"_id":"source/_posts/Redis学习6—Redis分布式锁/23.png","hash":"e063f6918a216efc42c3782b244c79b9ed0be684","modified":1712065579189},{"_id":"source/_posts/Redis学习6—Redis分布式锁/22.png","hash":"d036dca98141bfe61080664e600574442dc9d72f","modified":1712065573875},{"_id":"source/_posts/Redis学习6—Redis分布式锁/3.png","hash":"91be755bce6eae88402adfb2834779eaadfc11bc","modified":1712065435967},{"_id":"source/_posts/Redis学习6—Redis分布式锁/4.png","hash":"b045e83abe98502e2e0f7fe9fca78d14024c0aa9","modified":1712065447013},{"_id":"source/_posts/Redis学习6—Redis分布式锁/5.png","hash":"13c44cac63efa705d4c366b153e26666be907ac9","modified":1712065454506},{"_id":"source/_posts/Redis学习6—Redis分布式锁/6.png","hash":"9e345d3b3bbb7ebd3bbd3edcb76a77a4ec50fc60","modified":1712065459904},{"_id":"source/_posts/Redis学习6—Redis分布式锁/7.png","hash":"83cb2b97bb5516aa4d59a7684203ad77a7107b68","modified":1712065464751},{"_id":"source/_posts/Redis学习6—Redis分布式锁/8.png","hash":"fa6db81e8fd17d661dec10ded2002e4bff700db7","modified":1712065489889},{"_id":"source/_posts/Redis学习6—Redis分布式锁/9.png","hash":"d90b940da7d17447ff094d64f6e3c432823172ab","modified":1712065496840},{"_id":"source/_posts/Redis学习3—Redis应用之缓存/21.png","hash":"bc76a9224ece2ecd946428d8da3ddcd0667f1e05","modified":1712065867278},{"_id":"source/_posts/Redis学习6—Redis分布式锁/24.png","hash":"fc912d1806516048f74df83e94473eea09ce072d","modified":1712066182769},{"_id":"public/2024/04/02/Redis学习6—Redis分布式锁/index.html","hash":"ad291195ba3200e25139bf7202e5bae4ca9e8e82","modified":1712127958029},{"_id":"public/2024/04/02/Redis学习5-Redis应用之签到/index.html","hash":"d57625b0e40bc9d58dda040338177257dc5bcef4","modified":1712123170006},{"_id":"public/2024/04/02/Redis学习4—Redis应用之限流/index.html","hash":"0ed6314d60eabba4d602237257eacaa7e00033b4","modified":1712123170006},{"_id":"public/2024/04/02/Redis学习3—Redis应用之缓存/index.html","hash":"4d06a027edffc1068ef652d8c3dc1aacdd320a5f","modified":1712123170006},{"_id":"public/2024/04/02/Redis学习2—SpringBoot整合Redis、Redis工具类/index.html","hash":"1aac62cd2628177aa4943d5e391bf8f0df8da014","modified":1712123170006},{"_id":"public/archives/page/2/index.html","hash":"554421303c324f2a059bc902df199268a2fc4bf3","modified":1714808305818},{"_id":"public/archives/2024/page/2/index.html","hash":"afe0af81471e70b7567da6615cf86f355c709e7b","modified":1714808305818},{"_id":"public/archives/2024/04/page/2/index.html","hash":"6450024433b7d773d53aa89a3f6b1e2f45ce108a","modified":1714808305818},{"_id":"public/page/2/index.html","hash":"693d9d3fcd8729f141b49115a2a9089da6c23d76","modified":1714808305818},{"_id":"public/2024/04/02/Redis学习5-Redis应用之签到/1.png","hash":"e5bded1f6966203235f13a72924d6b080520a36a","modified":1712066356307},{"_id":"public/2024/04/02/Redis学习2—SpringBoot整合Redis、Redis工具类/2.png","hash":"3fbfbccf3e911317f01a1e3c223970f3984878e0","modified":1712066356307},{"_id":"public/2024/04/02/Redis学习2—SpringBoot整合Redis、Redis工具类/3.png","hash":"01e646ccc59bd0a536973076fe546b96f97f72cb","modified":1712066356307},{"_id":"public/2024/04/02/Redis学习2—SpringBoot整合Redis、Redis工具类/1.png","hash":"1ee54731822438af9d3b4a491d4ac718b8237c63","modified":1712066356307},{"_id":"public/2024/04/02/Redis学习5-Redis应用之签到/3.png","hash":"64ce201b66e26ecc0273b011f3a258b1d1bf9e9d","modified":1712066356307},{"_id":"public/2024/04/02/Redis学习5-Redis应用之签到/2.png","hash":"2f6bf654c921227d37bfdbcdfa41eb74634dfe02","modified":1712066356307},{"_id":"public/2024/04/02/Redis学习5-Redis应用之签到/4.png","hash":"0ef24218db2c470de9ec326767040e91edf13693","modified":1712066356307},{"_id":"public/2024/04/02/Redis学习6—Redis分布式锁/10.png","hash":"2b25878dab27f93ad878f15ad66c5543cbe21c94","modified":1712066356307},{"_id":"public/2024/04/02/Redis学习6—Redis分布式锁/1.png","hash":"7842a765802cb3d0609b3a7128fec2c58ad58978","modified":1712066356307},{"_id":"public/2024/04/02/Redis学习6—Redis分布式锁/11.png","hash":"3b9f1d389b08a731eac4b973d9b2674c8724270b","modified":1712066356307},{"_id":"public/2024/04/02/Redis学习6—Redis分布式锁/12.png","hash":"e7d8d6de6022dbaf112e5c28cc2bfb7c16dd5d24","modified":1712066356307},{"_id":"public/2024/04/02/Redis学习6—Redis分布式锁/13.png","hash":"55e90b6e2ac3346d28c31c079da526468792ac63","modified":1712066356307},{"_id":"public/2024/04/02/Redis学习6—Redis分布式锁/15.png","hash":"e71be382d79ea3835f2b7b0e4e64713a60b0bd71","modified":1712066356307},{"_id":"public/2024/04/02/Redis学习6—Redis分布式锁/14.png","hash":"3260e810a269afd5f6de6e909ef0a7de32fca97e","modified":1712066356307},{"_id":"public/2024/04/02/Redis学习6—Redis分布式锁/16.png","hash":"9de34c01f5192c3cd2ff992c57c1ce2422f35cbb","modified":1712066356307},{"_id":"public/2024/04/02/Redis学习6—Redis分布式锁/17.png","hash":"84d9f91e2dd30dadb609a666ed5b5852e51545b7","modified":1712066356307},{"_id":"public/2024/04/02/Redis学习6—Redis分布式锁/18.png","hash":"f1a699bba8f8319484b433f4a854ed14f99bf97e","modified":1712066356307},{"_id":"public/2024/04/02/Redis学习6—Redis分布式锁/19.png","hash":"ae8d8aa3d56ce662917af5ab5ed38f0c55cb5a27","modified":1712066356307},{"_id":"public/2024/04/02/Redis学习6—Redis分布式锁/2.png","hash":"f47b83a3be4a44494300e494731eead2b7373b06","modified":1712066356307},{"_id":"public/2024/04/02/Redis学习6—Redis分布式锁/20.png","hash":"de901bbe76360166ab02acb6a40b2d97f0973c15","modified":1712066356307},{"_id":"public/2024/04/02/Redis学习6—Redis分布式锁/21.png","hash":"e741a93ebce8b304a6526defb4c6ee42543e7c6d","modified":1712066356307},{"_id":"public/2024/04/02/Redis学习6—Redis分布式锁/22.png","hash":"d036dca98141bfe61080664e600574442dc9d72f","modified":1712066356307},{"_id":"public/2024/04/02/Redis学习6—Redis分布式锁/23.png","hash":"e063f6918a216efc42c3782b244c79b9ed0be684","modified":1712066356307},{"_id":"public/2024/04/02/Redis学习6—Redis分布式锁/3.png","hash":"91be755bce6eae88402adfb2834779eaadfc11bc","modified":1712066356307},{"_id":"public/2024/04/02/Redis学习6—Redis分布式锁/6.png","hash":"9e345d3b3bbb7ebd3bbd3edcb76a77a4ec50fc60","modified":1712066356307},{"_id":"public/2024/04/02/Redis学习6—Redis分布式锁/5.png","hash":"13c44cac63efa705d4c366b153e26666be907ac9","modified":1712066356307},{"_id":"public/2024/04/02/Redis学习6—Redis分布式锁/4.png","hash":"b045e83abe98502e2e0f7fe9fca78d14024c0aa9","modified":1712066356307},{"_id":"public/2024/04/02/Redis学习6—Redis分布式锁/7.png","hash":"83cb2b97bb5516aa4d59a7684203ad77a7107b68","modified":1712066356307},{"_id":"public/2024/04/02/Redis学习6—Redis分布式锁/8.png","hash":"fa6db81e8fd17d661dec10ded2002e4bff700db7","modified":1712066356307},{"_id":"public/2024/04/02/Redis学习6—Redis分布式锁/9.png","hash":"d90b940da7d17447ff094d64f6e3c432823172ab","modified":1712066356307},{"_id":"public/2024/04/02/Redis学习4—Redis应用之限流/1.png","hash":"72d86f5676c0fa03f685a11604e00d8faa7e0007","modified":1712066356307},{"_id":"public/2024/04/02/Redis学习4—Redis应用之限流/2.png","hash":"202c481e6629e666cb3bcaa2d11dd6d4d7d87fef","modified":1712066356307},{"_id":"public/2024/04/02/Redis学习4—Redis应用之限流/3.png","hash":"e51e5e101e799ceda9f64f3d6d39519dad6f815a","modified":1712066356307},{"_id":"public/2024/04/02/Redis学习4—Redis应用之限流/4.png","hash":"8c139efbdd81bcd690194b036761c5cf3f5ea2a3","modified":1712066356307},{"_id":"public/2024/04/02/Redis学习4—Redis应用之限流/5.png","hash":"2eb87a56a19ac4be69589458a258a4f6cc0d4417","modified":1712066356307},{"_id":"public/2024/04/02/Redis学习4—Redis应用之限流/6.png","hash":"b738b19b1b47d9578d5fbcc7ee4efda8da0dd96d","modified":1712066356307},{"_id":"public/2024/04/02/Redis学习4—Redis应用之限流/7.png","hash":"8b94367c80e6b49606b619d9f74aea3ba93a1a2f","modified":1712066356307},{"_id":"public/2024/04/02/Redis学习3—Redis应用之缓存/1.png","hash":"a9e617eab4b8228bdfc1172f8f58351bae7d273c","modified":1712066356307},{"_id":"public/2024/04/02/Redis学习3—Redis应用之缓存/11.png","hash":"d565bc73b4f217a393371f6f60dd29d88eb06a16","modified":1712066356307},{"_id":"public/2024/04/02/Redis学习3—Redis应用之缓存/10.png","hash":"9ef66a3fe895eb20c34bc1793ace8d4aebbc3a62","modified":1712066356307},{"_id":"public/2024/04/02/Redis学习3—Redis应用之缓存/12.png","hash":"3c4f08cbcd171702f2ea3242caa96d30a1ac0a54","modified":1712066356307},{"_id":"public/2024/04/02/Redis学习3—Redis应用之缓存/13.png","hash":"ae96298617f85e224ebe6317ad2fe1aa15ac73e7","modified":1712066356307},{"_id":"public/2024/04/02/Redis学习3—Redis应用之缓存/14.png","hash":"61d90310dd811b8ee35aa5c8a68194162c51dd3c","modified":1712066356307},{"_id":"public/2024/04/02/Redis学习3—Redis应用之缓存/15.png","hash":"89e30827289489f89471c82df8cbf7b162671b95","modified":1712066356307},{"_id":"public/2024/04/02/Redis学习3—Redis应用之缓存/16.png","hash":"12fd11b3a65611de78360d996c351bbba49122a8","modified":1712066356307},{"_id":"public/2024/04/02/Redis学习3—Redis应用之缓存/17.png","hash":"3bc602456b3a0478950ab92593680096bc90dbfa","modified":1712066356307},{"_id":"public/2024/04/02/Redis学习3—Redis应用之缓存/18.png","hash":"95c1c3b3a91ba1e500ec7a2a73ed82c5926a075d","modified":1712066356307},{"_id":"public/2024/04/02/Redis学习3—Redis应用之缓存/19.png","hash":"edcaa44f59b972f73fbf8241060d95a0378e7d27","modified":1712066356307},{"_id":"public/2024/04/02/Redis学习3—Redis应用之缓存/2.png","hash":"d701eff13dda7d559ccbdf19d937fc19d507eb89","modified":1712066356307},{"_id":"public/2024/04/02/Redis学习3—Redis应用之缓存/20.png","hash":"dd821a8f50be8fa826c809b85fb183b8734d5f44","modified":1712066356307},{"_id":"public/2024/04/02/Redis学习3—Redis应用之缓存/22.png","hash":"29ed48232297bedd06442219dba52fb7638c75fe","modified":1712066356307},{"_id":"public/2024/04/02/Redis学习3—Redis应用之缓存/23.png","hash":"e4790bd2a35716b8b853ca67e82a75c835dbe683","modified":1712066356307},{"_id":"public/2024/04/02/Redis学习3—Redis应用之缓存/24.png","hash":"c453a2f38cd8754ffc8e37a371522917ceb82296","modified":1712066356307},{"_id":"public/2024/04/02/Redis学习3—Redis应用之缓存/25.png","hash":"9b8bfa920be75b42e864c836d5000bdc332fc59b","modified":1712066356307},{"_id":"public/2024/04/02/Redis学习3—Redis应用之缓存/26.png","hash":"5da411f28ee63721a685397bc2df918a11be040b","modified":1712066356307},{"_id":"public/2024/04/02/Redis学习3—Redis应用之缓存/27.png","hash":"50735cfd3b10ba3b50a662d004effd404b5d926b","modified":1712066356307},{"_id":"public/2024/04/02/Redis学习3—Redis应用之缓存/3.png","hash":"6e4d1f3f21eb3a89d93fb9f7691a67225b9fe403","modified":1712066356307},{"_id":"public/2024/04/02/Redis学习3—Redis应用之缓存/5.png","hash":"018f75c2726787a299a07729f9492fca2a644aee","modified":1712066356307},{"_id":"public/2024/04/02/Redis学习3—Redis应用之缓存/4.png","hash":"284d46e933d490711d12b2bb1faeeef8361969ec","modified":1712066356307},{"_id":"public/2024/04/02/Redis学习3—Redis应用之缓存/6.png","hash":"8cd7f983bb22a7f22765442a2e5a8ba706913efb","modified":1712066356307},{"_id":"public/2024/04/02/Redis学习3—Redis应用之缓存/7.png","hash":"4f14861d360a95d90b44e81464d3f9e266c67cdd","modified":1712066356307},{"_id":"public/2024/04/02/Redis学习3—Redis应用之缓存/8.png","hash":"ba270279bba5a0b7e9a9f31ad38896640f29afab","modified":1712066356307},{"_id":"public/2024/04/02/Redis学习3—Redis应用之缓存/9.png","hash":"6e2de7af11e3d6f9982abdc21f7eeecb8249a556","modified":1712066356307},{"_id":"public/2024/04/02/Redis学习3—Redis应用之缓存/21.png","hash":"bc76a9224ece2ecd946428d8da3ddcd0667f1e05","modified":1712066356307},{"_id":"public/2024/04/02/Redis学习6—Redis分布式锁/24.png","hash":"fc912d1806516048f74df83e94473eea09ce072d","modified":1712066356307},{"_id":"public/tags/Java/index.html","hash":"38c368d3a17eb9bed2d6a4c2b281b2bf516d1d35","modified":1712066882047},{"_id":"public/tags/中间件-Redis/index.html","hash":"36fd3251b936b11f16757dfff37e42c981c00272","modified":1712066882047},{"_id":"public/tags/中间件-Nacos/index.html","hash":"f09f92dbd96f20154ac6b78c1b0dd9819646b6c7","modified":1712066882047},{"_id":"public/tags/SpringBoot-SpringGateway/index.html","hash":"533ec6598bd219b0dd56a6d057114e85018f7c00","modified":1712066882047},{"_id":"public/tags/中间件/index.html","hash":"bc026f1e4eaa46cbedb6891ff5a85cef10e92dbf","modified":1712127958029},{"_id":"public/tags/Redis/index.html","hash":"23eadafd009c2a49944e2944ea7300ab603a1dd8","modified":1712123170006},{"_id":"public/tags/Nacos/index.html","hash":"16cb1671cb356f8fcf669ae2a870e97f599ecbf1","modified":1712123170006},{"_id":"public/tags/SpringBoot/index.html","hash":"9423989ad6a75252d7141545d91d6cd414ab5074","modified":1712130754283},{"_id":"public/tags/SpringGateway/index.html","hash":"8ad6e76b6963e0b900338d152885fa59e63197d2","modified":1712123170006},{"_id":"source/_posts/MongoDB学习1—MongoDB简介.md","hash":"f508aa5893a04254d6289a77e4fefe26a4b01c9c","modified":1712124306910},{"_id":"source/_posts/MongoDB学习2—SpringBoot集成MongoDB.md","hash":"77cd7a96a3367f8ad56a82c4fe8f23df71239c36","modified":1712124696391},{"_id":"source/_posts/MongoDB学习1—MongoDB简介/1.png","hash":"1ab77d2ee09d33b8e339edd7bfcc16d7ef95969a","modified":1712124265724},{"_id":"source/_posts/MongoDB学习1—MongoDB简介/3.png","hash":"2519f189f442f174348fd0a729b2debdac457bbd","modified":1712124280324},{"_id":"source/_posts/MongoDB学习2—SpringBoot集成MongoDB/1.png","hash":"30e4b20d1331eb9db46bdcfa228fe20983ab058e","modified":1712124562104},{"_id":"source/_posts/MongoDB学习1—MongoDB简介/2.png","hash":"0467b1c6a87c356efd8022fbbff9ad94cedf5b51","modified":1712124272773},{"_id":"source/_posts/MongoDB学习2—SpringBoot集成MongoDB/10.png","hash":"6ca13c938f180401eebeeb8c70ec8c0861b24ff1","modified":1712124630895},{"_id":"source/_posts/MongoDB学习2—SpringBoot集成MongoDB/2.png","hash":"470224a86b5227375cca181204b5fa757d410d0c","modified":1712124568542},{"_id":"source/_posts/MongoDB学习2—SpringBoot集成MongoDB/3.png","hash":"3c10164b06f66cfe542929ea78d9066da2fe2af1","modified":1712124573353},{"_id":"source/_posts/MongoDB学习2—SpringBoot集成MongoDB/4.png","hash":"8b2792bb5fe517b093a2f286a0b2a664450f9767","modified":1712124579551},{"_id":"source/_posts/MongoDB学习2—SpringBoot集成MongoDB/6.png","hash":"6b5a3f41964fff91641506f57dabe5816f882d8d","modified":1712124606370},{"_id":"source/_posts/MongoDB学习2—SpringBoot集成MongoDB/5.png","hash":"c425bedc5f299ffbee7d3e38d37af7f4e3b3b789","modified":1712124585389},{"_id":"source/_posts/MongoDB学习2—SpringBoot集成MongoDB/7.png","hash":"df3a0041a1dea0bc12427f99068f9762cee527af","modified":1712124612181},{"_id":"source/_posts/MongoDB学习2—SpringBoot集成MongoDB/8.png","hash":"7fc612fe4ca182e62aef74e3822440184d7edc79","modified":1712124617783},{"_id":"source/_posts/MongoDB学习2—SpringBoot集成MongoDB/9.png","hash":"405b1c9c662f52d5f1691a324f009f70916bc06e","modified":1712124623171},{"_id":"source/_posts/登录、注册学习.md","hash":"4bcc1946d42975a45f396f2230b28e6c42a45e5b","modified":1712127914899},{"_id":"source/_posts/登录、注册学习/1.png","hash":"7dfd73ea4425aa5876ed86f399523c19921843c2","modified":1712125717746},{"_id":"source/_posts/登录、注册学习/10.png","hash":"9bac209f3566ccd842387d446c43d57a166bc5e7","modified":1712126008188},{"_id":"source/_posts/登录、注册学习/11.png","hash":"9a67aee865f492f27c31b7b9930d5c2adf0b0cbe","modified":1712126012799},{"_id":"source/_posts/登录、注册学习/12.png","hash":"4f52834f6e883bccef5918c803b8c13929535f94","modified":1712126019152},{"_id":"source/_posts/登录、注册学习/13.png","hash":"8342f8bd5140f625aae25c65e249c033183e0ec6","modified":1712126027895},{"_id":"source/_posts/登录、注册学习/14.png","hash":"0b8d38a06a4f4dd20a10e4141a545570f33b1f7d","modified":1712126033232},{"_id":"source/_posts/登录、注册学习/15.png","hash":"ed43a19c57cf904b43f0addef7d4e7bc89504f45","modified":1712126039559},{"_id":"source/_posts/登录、注册学习/16.png","hash":"5e3ac10e37b8c9eec72a35479d8d43428ec7ad47","modified":1712126091801},{"_id":"source/_posts/登录、注册学习/17.png","hash":"7f65a65040c8fe0dbaad3fe500c7365a443b031d","modified":1712126100304},{"_id":"source/_posts/登录、注册学习/19.png","hash":"04f3bad7821cdaadbc1842ae6c404b5f2ca0c035","modified":1712126111385},{"_id":"source/_posts/登录、注册学习/18.png","hash":"8d9360d503f700fe4a03b26f06af809aa8894a52","modified":1712126105482},{"_id":"source/_posts/登录、注册学习/2.png","hash":"13901bafa2f3aa1eedd604e92d57c93668186576","modified":1712125726825},{"_id":"source/_posts/登录、注册学习/20.png","hash":"0b567af50a2eabf9eb5c82f9e5ba15749b008031","modified":1712126118882},{"_id":"source/_posts/登录、注册学习/21.png","hash":"cb71024e689907e4c60a636cfffc170bc24aa32d","modified":1712126123450},{"_id":"source/_posts/登录、注册学习/22.png","hash":"2299af0d50d72fc24a29c8e021fe43b5160cb25b","modified":1712126129158},{"_id":"source/_posts/登录、注册学习/23.png","hash":"b5081f8178c614c9ca17508022f5c900d7db8143","modified":1712126142921},{"_id":"source/_posts/登录、注册学习/24.png","hash":"807608beb61bdb65004a155f2679409d3822e528","modified":1712126152001},{"_id":"source/_posts/登录、注册学习/25.png","hash":"35a1984116c5e0e142362109d4649193b5b0f5f0","modified":1712126156261},{"_id":"source/_posts/登录、注册学习/26.png","hash":"8ea195e9e12e7020f2e68eabd72168bc1433d802","modified":1712126160565},{"_id":"source/_posts/登录、注册学习/27.png","hash":"2ccf631257f3890bdc91d3baf013e000e0e5c6bd","modified":1712126166103},{"_id":"source/_posts/登录、注册学习/3.png","hash":"c6ee02a31f0670a04627852247979417a13f045c","modified":1712125737738},{"_id":"source/_posts/登录、注册学习/4.png","hash":"e448bdd069db00aa8b0c50c5118250a0fed45b1c","modified":1712125742974},{"_id":"source/_posts/登录、注册学习/5.png","hash":"66ef1e5a6a928ea4fdc1055b7356cbbaf3d8c515","modified":1712125748662},{"_id":"source/_posts/登录、注册学习/6.png","hash":"63c15b0c553cbf29a7f9fd32f016ac314eeed179","modified":1712125756453},{"_id":"source/_posts/登录、注册学习/7.png","hash":"e2d085aba6be3cf7c2d6d4f43d34ec013dae739f","modified":1712125761722},{"_id":"source/_posts/登录、注册学习/8.png","hash":"d4da32cc43b6092d3cb94a2d610b6c56a06d07b8","modified":1712125768421},{"_id":"source/_posts/登录、注册学习/9.png","hash":"d1279f82b71ed9dd00b9c402f07d5bf1e61857eb","modified":1712125954187},{"_id":"public/2024/04/03/登录、注册学习/index.html","hash":"57ee3cd3d68da589536a5da3bbc44ca9ac1a9fd9","modified":1712129008616},{"_id":"public/2024/04/03/MongoDB学习2—SpringBoot集成MongoDB/index.html","hash":"597a11c1c7af0b4ca8d131e4909ed02e59824c3f","modified":1712127958029},{"_id":"public/2024/04/03/MongoDB学习1—MongoDB简介/index.html","hash":"9259fdd0b603b4abca0daafdbd4dd7c3b7967cbf","modified":1712127958029},{"_id":"public/tags/MongoDB/index.html","hash":"e590f7be11467e03cdc5a165241dfc71263a0bd9","modified":1712127958029},{"_id":"public/tags/SpringSecurity/index.html","hash":"20996c874e601458bfc7f5dcc2c3b9cf5c09ef87","modified":1712130754283},{"_id":"public/2024/04/03/MongoDB学习1—MongoDB简介/2.png","hash":"0467b1c6a87c356efd8022fbbff9ad94cedf5b51","modified":1712127958029},{"_id":"public/2024/04/03/MongoDB学习1—MongoDB简介/3.png","hash":"2519f189f442f174348fd0a729b2debdac457bbd","modified":1712127958029},{"_id":"public/2024/04/03/MongoDB学习1—MongoDB简介/1.png","hash":"1ab77d2ee09d33b8e339edd7bfcc16d7ef95969a","modified":1712127958029},{"_id":"public/2024/04/03/MongoDB学习2—SpringBoot集成MongoDB/1.png","hash":"30e4b20d1331eb9db46bdcfa228fe20983ab058e","modified":1712127958029},{"_id":"public/2024/04/03/MongoDB学习2—SpringBoot集成MongoDB/10.png","hash":"6ca13c938f180401eebeeb8c70ec8c0861b24ff1","modified":1712127958029},{"_id":"public/2024/04/03/MongoDB学习2—SpringBoot集成MongoDB/4.png","hash":"8b2792bb5fe517b093a2f286a0b2a664450f9767","modified":1712127958029},{"_id":"public/2024/04/03/MongoDB学习2—SpringBoot集成MongoDB/2.png","hash":"470224a86b5227375cca181204b5fa757d410d0c","modified":1712127958029},{"_id":"public/2024/04/03/MongoDB学习2—SpringBoot集成MongoDB/5.png","hash":"c425bedc5f299ffbee7d3e38d37af7f4e3b3b789","modified":1712127958029},{"_id":"public/2024/04/03/MongoDB学习2—SpringBoot集成MongoDB/3.png","hash":"3c10164b06f66cfe542929ea78d9066da2fe2af1","modified":1712127958029},{"_id":"public/2024/04/03/MongoDB学习2—SpringBoot集成MongoDB/6.png","hash":"6b5a3f41964fff91641506f57dabe5816f882d8d","modified":1712127958029},{"_id":"public/2024/04/03/MongoDB学习2—SpringBoot集成MongoDB/7.png","hash":"df3a0041a1dea0bc12427f99068f9762cee527af","modified":1712127958029},{"_id":"public/2024/04/03/MongoDB学习2—SpringBoot集成MongoDB/8.png","hash":"7fc612fe4ca182e62aef74e3822440184d7edc79","modified":1712127958029},{"_id":"public/2024/04/03/MongoDB学习2—SpringBoot集成MongoDB/9.png","hash":"405b1c9c662f52d5f1691a324f009f70916bc06e","modified":1712127958029},{"_id":"public/2024/04/03/登录、注册学习/1.png","hash":"7dfd73ea4425aa5876ed86f399523c19921843c2","modified":1712127958029},{"_id":"public/2024/04/03/登录、注册学习/11.png","hash":"9a67aee865f492f27c31b7b9930d5c2adf0b0cbe","modified":1712127958029},{"_id":"public/2024/04/03/登录、注册学习/10.png","hash":"9bac209f3566ccd842387d446c43d57a166bc5e7","modified":1712127958029},{"_id":"public/2024/04/03/登录、注册学习/14.png","hash":"0b8d38a06a4f4dd20a10e4141a545570f33b1f7d","modified":1712127958029},{"_id":"public/2024/04/03/登录、注册学习/12.png","hash":"4f52834f6e883bccef5918c803b8c13929535f94","modified":1712127958029},{"_id":"public/2024/04/03/登录、注册学习/13.png","hash":"8342f8bd5140f625aae25c65e249c033183e0ec6","modified":1712127958029},{"_id":"public/2024/04/03/登录、注册学习/15.png","hash":"ed43a19c57cf904b43f0addef7d4e7bc89504f45","modified":1712127958029},{"_id":"public/2024/04/03/登录、注册学习/16.png","hash":"5e3ac10e37b8c9eec72a35479d8d43428ec7ad47","modified":1712127958029},{"_id":"public/2024/04/03/登录、注册学习/17.png","hash":"7f65a65040c8fe0dbaad3fe500c7365a443b031d","modified":1712127958029},{"_id":"public/2024/04/03/登录、注册学习/18.png","hash":"8d9360d503f700fe4a03b26f06af809aa8894a52","modified":1712127958029},{"_id":"public/2024/04/03/登录、注册学习/19.png","hash":"04f3bad7821cdaadbc1842ae6c404b5f2ca0c035","modified":1712127958029},{"_id":"public/2024/04/03/登录、注册学习/2.png","hash":"13901bafa2f3aa1eedd604e92d57c93668186576","modified":1712127958029},{"_id":"public/2024/04/03/登录、注册学习/20.png","hash":"0b567af50a2eabf9eb5c82f9e5ba15749b008031","modified":1712127958029},{"_id":"public/2024/04/03/登录、注册学习/21.png","hash":"cb71024e689907e4c60a636cfffc170bc24aa32d","modified":1712127958029},{"_id":"public/2024/04/03/登录、注册学习/22.png","hash":"2299af0d50d72fc24a29c8e021fe43b5160cb25b","modified":1712127958029},{"_id":"public/2024/04/03/登录、注册学习/24.png","hash":"807608beb61bdb65004a155f2679409d3822e528","modified":1712127958029},{"_id":"public/2024/04/03/登录、注册学习/23.png","hash":"b5081f8178c614c9ca17508022f5c900d7db8143","modified":1712127958029},{"_id":"public/2024/04/03/登录、注册学习/25.png","hash":"35a1984116c5e0e142362109d4649193b5b0f5f0","modified":1712127958029},{"_id":"public/2024/04/03/登录、注册学习/26.png","hash":"8ea195e9e12e7020f2e68eabd72168bc1433d802","modified":1712127958029},{"_id":"public/2024/04/03/登录、注册学习/27.png","hash":"2ccf631257f3890bdc91d3baf013e000e0e5c6bd","modified":1712127958029},{"_id":"public/2024/04/03/登录、注册学习/3.png","hash":"c6ee02a31f0670a04627852247979417a13f045c","modified":1712127958029},{"_id":"public/2024/04/03/登录、注册学习/4.png","hash":"e448bdd069db00aa8b0c50c5118250a0fed45b1c","modified":1712127958029},{"_id":"public/2024/04/03/登录、注册学习/5.png","hash":"66ef1e5a6a928ea4fdc1055b7356cbbaf3d8c515","modified":1712127958029},{"_id":"public/2024/04/03/登录、注册学习/6.png","hash":"63c15b0c553cbf29a7f9fd32f016ac314eeed179","modified":1712127958029},{"_id":"public/2024/04/03/登录、注册学习/7.png","hash":"e2d085aba6be3cf7c2d6d4f43d34ec013dae739f","modified":1712127958029},{"_id":"public/2024/04/03/登录、注册学习/8.png","hash":"d4da32cc43b6092d3cb94a2d610b6c56a06d07b8","modified":1712127958029},{"_id":"public/2024/04/03/登录、注册学习/9.png","hash":"d1279f82b71ed9dd00b9c402f07d5bf1e61857eb","modified":1712127958029},{"_id":"source/_posts/鉴权学习.md","hash":"d81a81ae7d148ea7edf5ad54ac3de62fd993a955","modified":1712129000854},{"_id":"source/_posts/鉴权学习/10.png","hash":"7bbfbe2aac7a9127797a22a190197937499dba0e","modified":1712128893481},{"_id":"source/_posts/鉴权学习/1.png","hash":"c07ed859fdbd6ce6484f210ba28fca088adb6a62","modified":1712128834278},{"_id":"source/_posts/鉴权学习/11.png","hash":"921124ef18e767d1bf3b354e5e6b11d17f46285a","modified":1712128898668},{"_id":"source/_posts/鉴权学习/12.png","hash":"eb22b0ed24fd1369fce7874bb2240176c0c2ae6d","modified":1712128906886},{"_id":"source/_posts/鉴权学习/13.png","hash":"5a64c6f4ecc4ea482cd2f4c6a0322e4c199049b0","modified":1712128912508},{"_id":"source/_posts/鉴权学习/14.png","hash":"8d849e345cf73ad80ec07037a197bf874a698bb8","modified":1712128918202},{"_id":"source/_posts/鉴权学习/15.png","hash":"48d4bc07138aa7d414dfef60835f7a05c54368c2","modified":1712128923294},{"_id":"source/_posts/鉴权学习/17.png","hash":"63e9efe641fdcce4c123b6b09a16ec26f2e8a610","modified":1712128934153},{"_id":"source/_posts/鉴权学习/16.png","hash":"4d7ba188d2c5e5b7e32d5030e3f7b49da89b65fe","modified":1712128928942},{"_id":"source/_posts/鉴权学习/2.png","hash":"0e670565d1ae80443446892a79bd2924c4f290d3","modified":1712128838785},{"_id":"source/_posts/鉴权学习/3.png","hash":"562a4f78c6429d9c124cc1e84002d29d1c5d75fa","modified":1712128844168},{"_id":"source/_posts/鉴权学习/4.png","hash":"4df5abda40e6483d1dfb58d14f27279a8f81932f","modified":1712128857870},{"_id":"source/_posts/鉴权学习/5.png","hash":"0416bb3eabb8ccac2e546b590333d97e3440f8f3","modified":1712128862834},{"_id":"source/_posts/鉴权学习/7.png","hash":"67980bf308d9da263df0f972f2712ce2c5aee43d","modified":1712128874489},{"_id":"source/_posts/鉴权学习/6.png","hash":"075e86a07f7958d54a575f15dcc0ae80d9eb0652","modified":1712128866634},{"_id":"source/_posts/鉴权学习/9.png","hash":"bcf5154654fa4e60dcd8e715d3bb2ec30a4062f8","modified":1712128886457},{"_id":"source/_posts/鉴权学习/8.png","hash":"ab96cd3966e4260a2cc9d02c16031b6273081979","modified":1712128879919},{"_id":"public/2024/04/03/鉴权学习/index.html","hash":"153d8835e6653b39048cef1766b1055299a2b949","modified":1712130754283},{"_id":"public/2024/04/03/鉴权学习/1.png","hash":"c07ed859fdbd6ce6484f210ba28fca088adb6a62","modified":1712129008616},{"_id":"public/2024/04/03/鉴权学习/10.png","hash":"7bbfbe2aac7a9127797a22a190197937499dba0e","modified":1712129008616},{"_id":"public/2024/04/03/鉴权学习/12.png","hash":"eb22b0ed24fd1369fce7874bb2240176c0c2ae6d","modified":1712129008616},{"_id":"public/2024/04/03/鉴权学习/11.png","hash":"921124ef18e767d1bf3b354e5e6b11d17f46285a","modified":1712129008616},{"_id":"public/2024/04/03/鉴权学习/13.png","hash":"5a64c6f4ecc4ea482cd2f4c6a0322e4c199049b0","modified":1712129008616},{"_id":"public/2024/04/03/鉴权学习/14.png","hash":"8d849e345cf73ad80ec07037a197bf874a698bb8","modified":1712129008616},{"_id":"public/2024/04/03/鉴权学习/15.png","hash":"48d4bc07138aa7d414dfef60835f7a05c54368c2","modified":1712129008616},{"_id":"public/2024/04/03/鉴权学习/17.png","hash":"63e9efe641fdcce4c123b6b09a16ec26f2e8a610","modified":1712129008616},{"_id":"public/2024/04/03/鉴权学习/16.png","hash":"4d7ba188d2c5e5b7e32d5030e3f7b49da89b65fe","modified":1712129008616},{"_id":"public/2024/04/03/鉴权学习/2.png","hash":"0e670565d1ae80443446892a79bd2924c4f290d3","modified":1712129008616},{"_id":"public/2024/04/03/鉴权学习/3.png","hash":"562a4f78c6429d9c124cc1e84002d29d1c5d75fa","modified":1712129008616},{"_id":"public/2024/04/03/鉴权学习/4.png","hash":"4df5abda40e6483d1dfb58d14f27279a8f81932f","modified":1712129008616},{"_id":"public/2024/04/03/鉴权学习/5.png","hash":"0416bb3eabb8ccac2e546b590333d97e3440f8f3","modified":1712129008616},{"_id":"public/2024/04/03/鉴权学习/6.png","hash":"075e86a07f7958d54a575f15dcc0ae80d9eb0652","modified":1712129008616},{"_id":"public/2024/04/03/鉴权学习/8.png","hash":"ab96cd3966e4260a2cc9d02c16031b6273081979","modified":1712129008616},{"_id":"public/2024/04/03/鉴权学习/7.png","hash":"67980bf308d9da263df0f972f2712ce2c5aee43d","modified":1712129008616},{"_id":"public/2024/04/03/鉴权学习/9.png","hash":"bcf5154654fa4e60dcd8e715d3bb2ec30a4062f8","modified":1712129008616},{"_id":"source/_posts/SpringSecurity学习1—SpringSecurity认证.md","hash":"4c286d98e22456abe0fe19d6cc303e2877486bde","modified":1712129764173},{"_id":"source/_posts/SpringSecurity学习2—SpringSecurity授权.md","hash":"69bf80d314834922b7ab408c96e765391fa79ab5","modified":1712130815920},{"_id":"source/_posts/SpringSecurity学习1—SpringSecurity认证/1.png","hash":"e08c4d65ab7fa01a02bdceeed4de2caede454173","modified":1712129602837},{"_id":"source/_posts/SpringSecurity学习1—SpringSecurity认证/10.png","hash":"fd8d21f51ec5fc87f2f17794572096d62df78055","modified":1712129650933},{"_id":"source/_posts/SpringSecurity学习1—SpringSecurity认证/11.png","hash":"39182560c30df6def604cf7f0cef83c94567e86e","modified":1712129658616},{"_id":"source/_posts/SpringSecurity学习1—SpringSecurity认证/13.png","hash":"52a29e9a67874c7988825e5e771fdf475716c7ca","modified":1712129681399},{"_id":"source/_posts/SpringSecurity学习1—SpringSecurity认证/12.png","hash":"cbfd1f67962248773e256b5af3252869945627b8","modified":1712129669538},{"_id":"source/_posts/SpringSecurity学习1—SpringSecurity认证/14.png","hash":"4ae51f5c68a25256aeebdb3fa7e931dcd972a15b","modified":1712129688058},{"_id":"source/_posts/SpringSecurity学习1—SpringSecurity认证/2.png","hash":"b61a737ecff6a51a5c047e4a4c624b190a2097d9","modified":1712129607495},{"_id":"source/_posts/SpringSecurity学习1—SpringSecurity认证/3.png","hash":"c5173ef50612938ae77a69b139ae8d897b18645e","modified":1712129612494},{"_id":"source/_posts/SpringSecurity学习1—SpringSecurity认证/4.png","hash":"481272ef8790ba323e58b75d9b0c87ecd0b1b64b","modified":1712129616921},{"_id":"source/_posts/SpringSecurity学习1—SpringSecurity认证/5.png","hash":"7e68c4ae42e362b4399a44a84783ca3afa897af1","modified":1712129621867},{"_id":"source/_posts/SpringSecurity学习1—SpringSecurity认证/7.png","hash":"8da1f235c1a01c3a91be84fc702056f9b30eccf9","modified":1712129634823},{"_id":"source/_posts/SpringSecurity学习1—SpringSecurity认证/8.png","hash":"cd872f24d8f5a1665ff5e52644326390de6acecc","modified":1712129638704},{"_id":"source/_posts/SpringSecurity学习1—SpringSecurity认证/9.png","hash":"d681e68cf006d1d66e55fc4a6701d5e06c318615","modified":1712129645384},{"_id":"source/_posts/SpringSecurity学习2—SpringSecurity授权/1.png","hash":"e08c4d65ab7fa01a02bdceeed4de2caede454173","modified":1712130235462},{"_id":"source/_posts/SpringSecurity学习2—SpringSecurity授权/10.png","hash":"5e04f7deb44fb29c2714599b501666bb6d140e52","modified":1712130299622},{"_id":"source/_posts/SpringSecurity学习2—SpringSecurity授权/11.png","hash":"140d510511e773aec57f6675dc9809c724cab9df","modified":1712130304956},{"_id":"source/_posts/SpringSecurity学习2—SpringSecurity授权/12.png","hash":"b7fddda832affbd6ea84d562e7db641b49ffed11","modified":1712130310673},{"_id":"source/_posts/SpringSecurity学习2—SpringSecurity授权/13.png","hash":"f4a5013f7ae226e2c6a5bccc3cce21864a586f38","modified":1712130316412},{"_id":"source/_posts/SpringSecurity学习2—SpringSecurity授权/14.png","hash":"b113b858209c6770f8bc41538d138357b3d3a04d","modified":1712130323194},{"_id":"source/_posts/SpringSecurity学习2—SpringSecurity授权/15.png","hash":"b816853342a40b3bbe71f456ce1e856b53de531a","modified":1712130330693},{"_id":"source/_posts/SpringSecurity学习2—SpringSecurity授权/16.png","hash":"0f2c50d753230154513bc61897f3aef1fed36064","modified":1712130336530},{"_id":"source/_posts/SpringSecurity学习2—SpringSecurity授权/17.png","hash":"4042921cf09ff98ef545d3042638ec13a9ad3c9f","modified":1712130341104},{"_id":"source/_posts/SpringSecurity学习2—SpringSecurity授权/18.png","hash":"fd7fefb767d6da970a6e2be0d001605076738aec","modified":1712130345463},{"_id":"source/_posts/SpringSecurity学习2—SpringSecurity授权/19.png","hash":"cf641de64e8a52f87bc5239e8d0c260efbaf5b64","modified":1712130350227},{"_id":"source/_posts/SpringSecurity学习2—SpringSecurity授权/20.png","hash":"6b6b890f5d4b1f72e9eaf36e4409b3aa7d12af9d","modified":1712130356515},{"_id":"source/_posts/SpringSecurity学习2—SpringSecurity授权/2.png","hash":"1922ff226ef6593ebb91e82b8706cad8218979dc","modified":1712130249809},{"_id":"source/_posts/SpringSecurity学习2—SpringSecurity授权/21.png","hash":"3cc351d87adeda81357b8eba567daae02a129974","modified":1712130362020},{"_id":"source/_posts/SpringSecurity学习2—SpringSecurity授权/22.png","hash":"6694f53a65a83b178c193b42f020df835da84d07","modified":1712130367741},{"_id":"source/_posts/SpringSecurity学习2—SpringSecurity授权/23.png","hash":"11cf09347f7da589ffafa79fffbdda094fdf2016","modified":1712130373314},{"_id":"source/_posts/SpringSecurity学习2—SpringSecurity授权/24.png","hash":"e34c1b1f0403b20d2882407919a3e3320523014d","modified":1712130381409},{"_id":"source/_posts/SpringSecurity学习2—SpringSecurity授权/3.png","hash":"4a08351b729061b839a70dd1774d70eb6579aba2","modified":1712130255276},{"_id":"source/_posts/SpringSecurity学习2—SpringSecurity授权/4.png","hash":"dcbb7d1d228331f883239e7e5e7ea1ef5558a453","modified":1712130260051},{"_id":"source/_posts/SpringSecurity学习2—SpringSecurity授权/5.png","hash":"21f1a446173acd1c65996af2b93de34fa58cf8cc","modified":1712130266850},{"_id":"source/_posts/SpringSecurity学习2—SpringSecurity授权/6.png","hash":"c0f5566410fba4ccb107bd71a3c5ee0e468247f5","modified":1712130274435},{"_id":"source/_posts/SpringSecurity学习2—SpringSecurity授权/7.png","hash":"1fc99cc454f334a748375d184dc6480275fddb4f","modified":1712130280755},{"_id":"source/_posts/SpringSecurity学习2—SpringSecurity授权/8.png","hash":"16346211a1915cb131ce8627e9ea018e95dbeaa2","modified":1712130286752},{"_id":"source/_posts/SpringSecurity学习2—SpringSecurity授权/9.png","hash":"a76b7dcb3953f55c1570e940c8234d16f7d6375a","modified":1712130292083},{"_id":"source/_posts/SpringSecurity学习1—SpringSecurity认证/6.png","hash":"14f6c62cca8c4b164b44df031abd708fc73ab9e6","modified":1712129628044},{"_id":"public/2024/04/03/SpringSecurity学习2—SpringSecurity授权/index.html","hash":"ed2348c22e7e1161b10d53336c7b5710c151c0e9","modified":1714808305818},{"_id":"public/2024/04/03/SpringSecurity学习1—SpringSecurity认证/index.html","hash":"4cead3fbb60c2199f4cbc45be0f3a2d25428e710","modified":1712130754283},{"_id":"public/2024/04/03/SpringSecurity学习1—SpringSecurity认证/11.png","hash":"39182560c30df6def604cf7f0cef83c94567e86e","modified":1712130754283},{"_id":"public/2024/04/03/SpringSecurity学习1—SpringSecurity认证/12.png","hash":"cbfd1f67962248773e256b5af3252869945627b8","modified":1712130754283},{"_id":"public/2024/04/03/SpringSecurity学习1—SpringSecurity认证/10.png","hash":"fd8d21f51ec5fc87f2f17794572096d62df78055","modified":1712130754283},{"_id":"public/2024/04/03/SpringSecurity学习1—SpringSecurity认证/1.png","hash":"e08c4d65ab7fa01a02bdceeed4de2caede454173","modified":1712130754283},{"_id":"public/2024/04/03/SpringSecurity学习1—SpringSecurity认证/14.png","hash":"4ae51f5c68a25256aeebdb3fa7e931dcd972a15b","modified":1712130754283},{"_id":"public/2024/04/03/SpringSecurity学习1—SpringSecurity认证/13.png","hash":"52a29e9a67874c7988825e5e771fdf475716c7ca","modified":1712130754283},{"_id":"public/2024/04/03/SpringSecurity学习1—SpringSecurity认证/3.png","hash":"c5173ef50612938ae77a69b139ae8d897b18645e","modified":1712130754283},{"_id":"public/2024/04/03/SpringSecurity学习1—SpringSecurity认证/2.png","hash":"b61a737ecff6a51a5c047e4a4c624b190a2097d9","modified":1712130754283},{"_id":"public/2024/04/03/SpringSecurity学习1—SpringSecurity认证/4.png","hash":"481272ef8790ba323e58b75d9b0c87ecd0b1b64b","modified":1712130754283},{"_id":"public/2024/04/03/SpringSecurity学习1—SpringSecurity认证/5.png","hash":"7e68c4ae42e362b4399a44a84783ca3afa897af1","modified":1712130754283},{"_id":"public/2024/04/03/SpringSecurity学习1—SpringSecurity认证/7.png","hash":"8da1f235c1a01c3a91be84fc702056f9b30eccf9","modified":1712130754283},{"_id":"public/2024/04/03/SpringSecurity学习1—SpringSecurity认证/8.png","hash":"cd872f24d8f5a1665ff5e52644326390de6acecc","modified":1712130754283},{"_id":"public/2024/04/03/SpringSecurity学习1—SpringSecurity认证/9.png","hash":"d681e68cf006d1d66e55fc4a6701d5e06c318615","modified":1712130754283},{"_id":"public/2024/04/03/SpringSecurity学习2—SpringSecurity授权/1.png","hash":"e08c4d65ab7fa01a02bdceeed4de2caede454173","modified":1712130754283},{"_id":"public/2024/04/03/SpringSecurity学习2—SpringSecurity授权/10.png","hash":"5e04f7deb44fb29c2714599b501666bb6d140e52","modified":1712130754283},{"_id":"public/2024/04/03/SpringSecurity学习2—SpringSecurity授权/11.png","hash":"140d510511e773aec57f6675dc9809c724cab9df","modified":1712130754283},{"_id":"public/2024/04/03/SpringSecurity学习2—SpringSecurity授权/12.png","hash":"b7fddda832affbd6ea84d562e7db641b49ffed11","modified":1712130754283},{"_id":"public/2024/04/03/SpringSecurity学习2—SpringSecurity授权/13.png","hash":"f4a5013f7ae226e2c6a5bccc3cce21864a586f38","modified":1712130754283},{"_id":"public/2024/04/03/SpringSecurity学习2—SpringSecurity授权/14.png","hash":"b113b858209c6770f8bc41538d138357b3d3a04d","modified":1712130754283},{"_id":"public/2024/04/03/SpringSecurity学习2—SpringSecurity授权/15.png","hash":"b816853342a40b3bbe71f456ce1e856b53de531a","modified":1712130754283},{"_id":"public/2024/04/03/SpringSecurity学习2—SpringSecurity授权/16.png","hash":"0f2c50d753230154513bc61897f3aef1fed36064","modified":1712130754283},{"_id":"public/2024/04/03/SpringSecurity学习2—SpringSecurity授权/17.png","hash":"4042921cf09ff98ef545d3042638ec13a9ad3c9f","modified":1712130754283},{"_id":"public/2024/04/03/SpringSecurity学习2—SpringSecurity授权/18.png","hash":"fd7fefb767d6da970a6e2be0d001605076738aec","modified":1712130754283},{"_id":"public/2024/04/03/SpringSecurity学习2—SpringSecurity授权/19.png","hash":"cf641de64e8a52f87bc5239e8d0c260efbaf5b64","modified":1712130754283},{"_id":"public/2024/04/03/SpringSecurity学习2—SpringSecurity授权/2.png","hash":"1922ff226ef6593ebb91e82b8706cad8218979dc","modified":1712130754283},{"_id":"public/2024/04/03/SpringSecurity学习2—SpringSecurity授权/20.png","hash":"6b6b890f5d4b1f72e9eaf36e4409b3aa7d12af9d","modified":1712130754283},{"_id":"public/2024/04/03/SpringSecurity学习2—SpringSecurity授权/21.png","hash":"3cc351d87adeda81357b8eba567daae02a129974","modified":1712130754283},{"_id":"public/2024/04/03/SpringSecurity学习2—SpringSecurity授权/22.png","hash":"6694f53a65a83b178c193b42f020df835da84d07","modified":1712130754283},{"_id":"public/2024/04/03/SpringSecurity学习2—SpringSecurity授权/23.png","hash":"11cf09347f7da589ffafa79fffbdda094fdf2016","modified":1712130754283},{"_id":"public/2024/04/03/SpringSecurity学习2—SpringSecurity授权/24.png","hash":"e34c1b1f0403b20d2882407919a3e3320523014d","modified":1712130754283},{"_id":"public/2024/04/03/SpringSecurity学习2—SpringSecurity授权/3.png","hash":"4a08351b729061b839a70dd1774d70eb6579aba2","modified":1712130754283},{"_id":"public/2024/04/03/SpringSecurity学习2—SpringSecurity授权/4.png","hash":"dcbb7d1d228331f883239e7e5e7ea1ef5558a453","modified":1712130754283},{"_id":"public/2024/04/03/SpringSecurity学习2—SpringSecurity授权/5.png","hash":"21f1a446173acd1c65996af2b93de34fa58cf8cc","modified":1712130754283},{"_id":"public/2024/04/03/SpringSecurity学习2—SpringSecurity授权/6.png","hash":"c0f5566410fba4ccb107bd71a3c5ee0e468247f5","modified":1712130754283},{"_id":"public/2024/04/03/SpringSecurity学习2—SpringSecurity授权/7.png","hash":"1fc99cc454f334a748375d184dc6480275fddb4f","modified":1712130754283},{"_id":"public/2024/04/03/SpringSecurity学习2—SpringSecurity授权/8.png","hash":"16346211a1915cb131ce8627e9ea018e95dbeaa2","modified":1712130754283},{"_id":"public/2024/04/03/SpringSecurity学习2—SpringSecurity授权/9.png","hash":"a76b7dcb3953f55c1570e940c8234d16f7d6375a","modified":1712130754283},{"_id":"public/2024/04/03/SpringSecurity学习1—SpringSecurity认证/6.png","hash":"14f6c62cca8c4b164b44df031abd708fc73ab9e6","modified":1712130754283},{"_id":"source/_posts/手撸Mybatis（一）——代理mapper.md","hash":"8c7431463493c2686048bd44308ba2cf51df67a8","modified":1714808296632},{"_id":"source/_posts/手撸Mybatis（一）——代理mapper/1.png","hash":"18dc4da586157d16d62e1a297747b07cea056ab3","modified":1714806857502},{"_id":"source/_posts/手撸Mybatis（一）——代理mapper/2.png","hash":"3edcaf36cc825949e29c3c0fa84298b9274b7234","modified":1714806857536},{"_id":"public/2024/05/04/手撸Mybatis（一）——代理mapper/index.html","hash":"772d6d919d1b418ae741aa2ca0caa4cea32748e8","modified":1714808305818},{"_id":"public/archives/2024/05/index.html","hash":"89d01b7f53806131e4ae272ca668478a7dfab2bd","modified":1714808305818},{"_id":"public/tags/Mybatis/index.html","hash":"af1ac33a6b747af764339892cbf998c2084411b8","modified":1714808305818},{"_id":"public/2024/05/04/手撸Mybatis（一）——代理mapper/1.png","hash":"18dc4da586157d16d62e1a297747b07cea056ab3","modified":1714808305818},{"_id":"public/2024/05/04/手撸Mybatis（一）——代理mapper/2.png","hash":"3edcaf36cc825949e29c3c0fa84298b9274b7234","modified":1714808305818}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","slug":"hello-world","published":1,"date":"2024-04-02T08:28:11.981Z","updated":"2024-04-02T08:28:11.982Z","comments":1,"layout":"post","photos":[],"_id":"clui4h1ce0000icvlaibq1uwm","content":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n","excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n"},{"title":"线程池","date":"2024-04-02T08:36:48.000Z","_content":"Executors是一个工厂类，提供了创建几种预配置线程池实例地方法，如果不需要应用任何自定义地微调，可以调用这些方法创建默认配置地线程池。Executors工厂类提供地线程池有以下几种：\n1）newCachedThreadPool(): 创建一个可缓存地线程池，这个线程池地线程数量可以根据需要自动扩展，如果有可用的空闲线程，就会重用它们；如果没有可用的线程，就会创建一个新线程，适用于执行大量的短期异步任务。\n2）newFixedThreadPool(int nThreads): 创建一个固定大小的线程池，其中包含指定数量的线程，线程数量是固定的，不会自动扩展，适用于执行固定数量的长期任务。\n3）newSingleThreadExecutor(): 创建一个单线程的线程池，用于串行执行任务。适用于需要按顺序执行任务的场景。\n4）newScheduledThreadPool(int corePoolSize): 创建一个单线程的定时执行线程池。只包含一个线程，用于串行定时执行任务。\n5）newWorkStealingPool(int parallelism): 创建一个工作窃取线程池，线程数量根据CPU核心数动态调整，适用于CPU密集型的任务。\n### ExecutorService\nExecutorService是java.util.concurrent包的重要组成部分，是Java JDK提供的框架，用于简化异步模式下任务的执行。一般来说，ExecutorService会自动提供一个线程池和相关API，用于为其分配任务。\n#### 工厂方法实例化ExecutorService\nExecutors类提供了许多工厂方法用于实例化ExecutorService，最常用的是newFixedThreadPool方法，用于创建指定线程数的ExecutorService实例，使用方法如下所示：\n```xml\nExecutorService executor = Executors.newFixedThreadPool(10);\n```\n#### 直接创建ExecutorService实例\nExecutorService是一个接口，因此可以使用其任何实现类的实例，例如ThreadPoolExecutor类实现了ExecutorService接口并提供了一些构造函数用于配置执行程序服务及其内部池。\n```xml\n int core = Runtime.getRuntime().availableProcessors();\n int max = Runtime.getRuntime().availableProcessors() * 2 + 1;\n int wait = 60;\n int capacity = 500;\n ThreadPoolExecutor threadPoolExecutor = new ThreadPoolExecutor(core, max, wait, TimeUnit.SECONDS,\n       new LinkedBlockingQueue<>(capacity),\n       Executors.defaultThreadFactory(),\n       new ThreadPoolExecutor.CallerRunsPolicy());\n```\n这里的参数，从左到右分别表示：\n1）corePoolSize：核心线程数\n2）maxPoolSize：最大线程数\n3）keepAliveTime：额外的线程（即实例化超过corePoolSize的线程）在空闲状态下的存活时间。\n4）unit：等待时间单位\n5）workQueue：任务队列\n6）threadFactory：线程工厂\n7）handler：拒绝策略\n其中，拒绝策略主要有以下几种：\n1）AbortPolicy：直接抛出RejectedExecutionException异常阻止系统正常运行。\n2）CallerRunsPolicy：既不抛弃任务，也不抛出异常，而是将某些任务回退给调用者，从而降低任务的流量。\n3）DiscardOldestPolicy：抛出等待队列中最先等待的任务，然后把当前任务加入队列中。\n4）DiscardPolicy：既不处理也不抛出异常，如果允许任务丢弃，这是最好的方法。\n#### 任务分配给ExecutorService\nExecutorService可以执行Runnable和Callable任务，首先我们创建两个原始任务类：\n```xml\n  private static List<Callable<String>> buildCallableTasks() {\n        Callable<String> callableTask = () -> {\n            TimeUnit.MILLISECONDS.sleep(300);\n            System.out.println(\"buildCallable==========\");\n            return \"Task's execution\";\n        };\n\n        List<Callable<String>> callableTasks = new ArrayList<>();\n        callableTasks.add(callableTask);\n        callableTasks.add(callableTask);\n        callableTasks.add(callableTask);\n        return callableTasks;\n    }\n\n    private static Runnable buildRunnable() {\n        return () -> {\n            try {\n                TimeUnit.MILLISECONDS.sleep(300);\n                System.out.println(\"buildRunnable===========\");\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        };\n    }\n```\n创建完任务之后，可以使用多种方法将任务分配给ExecutorService.\n##### execute\n改方法返回值为空(void),因此改方法没有任何可能获得任务执行结果或检查任务的状态。使用示例如下：\n```xml\n private static void testExecute() {\n        ExecutorService executorService = Executors.newFixedThreadPool(2);\n        Runnable runnable = buildRunnable();\n        executorService.execute(runnable);\n        System.out.println(\"hello world=========\");\n    }\n```\n在main方法中调用该方法，结果如下：\n{% asset_img image.png %}\n##### submit\nsubmit方法会将一个Callable或Runnable任务提交给ExecutorService并返回future类型的结果。\n```xml\n private static void testSubmit() throws ExecutionException, InterruptedException {\n        ExecutorService executorService = Executors.newFixedThreadPool(2);\n        Runnable runnable = buildRunnable();\n        List<Callable<String>> callableTasks = buildCallableTasks();\n        Future<?> runnableFuture = executorService.submit(runnable);\n        List<Future<String>> callableFutures = new ArrayList<>();\n        for (Callable<String> callableTask : callableTasks) {\n            callableFutures.add(executorService.submit(callableTask));\n        }\n        System.out.println(runnableFuture.get());\n        for (Future<String> callableFuture : callableFutures) {\n            System.out.println(callableFuture.get());\n        }\n    }\n```\n通过future类的get方法，能获取返回的结果，如果提交的是一个Runnable任务，那么通过future的get方法，返回的是一个null，如下图所示：\n{% asset_img image(1).png %}\n##### invokeAny\ninvokeAny方法将一组任务分配给ExecutorService，使每个任务执行，并返回任意一个成功执行的任务结果。\n```xml\n  private static void testInvokeAny() throws ExecutionException, InterruptedException {\n        ExecutorService executorService = Executors.newFixedThreadPool(2);\n        List<Callable<String>> callableTasks = buildCallableTasks();\n        String result = executorService.invokeAny(callableTasks);\n        System.out.println(result);\n    }\n```\n结果如下所示：\n{% asset_img image(2).png %}\n##### invokeAll\ninvokeAll方法将一组任务分配给ExecutorService，使每个任务执行，并以Future类型的对象列表形式返回所有任务执行的结果。\n```xml\n private static void testInvokeAll() throws InterruptedException, ExecutionException {\n        ExecutorService executorService = Executors.newFixedThreadPool(2);\n        List<Callable<String>> callableTasks = buildCallableTasks();\n        List<Future<String>> futures = executorService.invokeAll(callableTasks);\n        for (Future<String> future : futures) {\n            System.out.println(future.get());\n        }\n    }\n```\n结果如下：\n{% asset_img image(3).png %}\n#### 关闭ExecutorService\n一般情况下，ExecutorService并不会自动关闭，即使所有任务都执行完毕，或者没有要处理的任务，也不会自动销毁ExecutorService，会一直处于等待状态，等待我们给他分配新的工作。当应用程序需要处理不定期出现的任务时，这种机制很有用，但是也带来一些副作用：即使应用程序到达它的终点，也不会被停止，因为等待ExecutorService将导致JVM继续运行，这样，我们就需要主动关闭Executor Service。\n要关闭ExecutorService，可以使用shutdown方法或shutdownNow方法\n##### shutdown\nshutdown方法并保护会立即销毁ExecutorService实例，而是首先让ExecutorService停止接受新任务，并且在所有正在运行的线程完成当前工作后关闭。\n##### shutdownNow\nshutdownNow() 方法会尝试立即销毁 ExecutorService 实例，所以并不能保证所有正在运行的线程将同时停止。该方法会返回等待处理的任务列表，由开发人员自行决定如何处理这些任务。\n因为提供了两个方法，因此关闭 ExecutorService 实例的最佳实战 （ 也是 Oracle 所推荐的 ）就是同时使用这两种方法并结合 awaitTermination() 方法。\n使用这种方式，ExecutorService 首先停止执行新任务，等待指定的时间段完成所有任务。如果该时间到期，则立即停止执行。\n```xml\n   private static void testInvokeAll() throws InterruptedException, ExecutionException {\n        ExecutorService executorService = Executors.newFixedThreadPool(2);\n        List<Callable<String>> callableTasks = buildCallableTasks();\n        List<Future<String>> futures = executorService.invokeAll(callableTasks);\n        for (Future<String> future : futures) {\n            System.out.println(future.get());\n        }\n        executorService.shutdown();\n        try {\n            if (!executorService.awaitTermination(800, TimeUnit.MILLISECONDS)) {\n                executorService.shutdownNow();\n            }\n        } catch (InterruptedException e) {\n            executorService.shutdownNow();\n        }\n    }\n```\n### Future接口\n在ExecutorService的submit方法、invokeAll方法，都会返回一个Future对象或Future对象集合，这些Future接口的对象允许我们获取任务执行的结果或检查任务状态（运行中还是执行完毕）\n#### get方法\nfuture接口提供一个特殊的阻塞方法get，它返回callable任务执行的实际结果，但如果是runnable任务，只会返回null。此外，正在执行的任务随时可能抛出异常或中断执行，因此我们要将get调用放在try catch语句块中，以捕获InterruptedException或ExecutionException异常。\n```xml\n  private static void testFutureGet() {\n        ExecutorService executorService = Executors.newFixedThreadPool(2);\n        Callable<String> callable = () -> {\n            System.out.println(\"执行callable任务\");\n            TimeUnit.MILLISECONDS.sleep(300);\n            return \"callable执行完毕\";\n        };\n        Future<String> future = executorService.submit(callable);\n        try {\n            String result = future.get();\n            System.out.println(result);\n        } catch (InterruptedException | ExecutionException e) {\n            e.printStackTrace();\n        }\n        executorService.shutdown();\n        try {\n            if (!executorService.awaitTermination(800, TimeUnit.MILLISECONDS)) {\n                executorService.shutdownNow();\n            }\n        } catch (InterruptedException e) {\n            executorService.shutdownNow();\n        }\n    }\n\n```\n因为get方法是阻塞的，并且不知道要阻塞多长时间，因此可能导致应用程序的性能降低，如果结果数据并不重要，我们可以使用超时机制来避免长时间阻塞，也就是使用get的重载方法，第一个参数为超时时间，第二个参数为时间的单位。如果在超时时间内正常结束，那么返回Future的结果，如果超时了还没结束，那么将抛出TimeoutExeception异常。\n```xml\nprivate static void testFutureGet() {\n        ExecutorService executorService = Executors.newFixedThreadPool(2);\n        Callable<String> callable = () -> {\n            System.out.println(\"执行callable任务\");\n            TimeUnit.MILLISECONDS.sleep(300);\n            return \"callable执行完毕\";\n        };\n        Future<String> future = executorService.submit(callable);\n        try {\n            String result = future.get(400, TimeUnit.MILLISECONDS);\n            System.out.println(result);\n        } catch (InterruptedException | ExecutionException | TimeoutException e) {\n            e.printStackTrace();\n        }\n\n        Callable<String> callable2 = () -> {\n            System.out.println(\"执行callable任务\");\n            TimeUnit.MILLISECONDS.sleep(500);\n            return \"callable执行完毕\";\n        };\n        Future<String> future2 = executorService.submit(callable2);\n        try {\n            String result = future2.get(400, TimeUnit.MILLISECONDS);\n            System.out.println(result);\n        } catch (InterruptedException | ExecutionException | TimeoutException e) {\n            e.printStackTrace();\n        }\n        executorService.shutdown();\n        try {\n            if (!executorService.awaitTermination(800, TimeUnit.MILLISECONDS)) {\n                executorService.shutdownNow();\n            }\n        } catch (InterruptedException e) {\n            executorService.shutdownNow();\n        }\n    }\n```\n执行结果如下，第一个任务没有超时，所以能正常获取结果，第二个任务超时，所以会抛出异常。\n{% asset_img image(4).png %}\n#### 其他方法\n除了get方法外，Future还提供许多方法，主要的方法如下：\n1）isDone： 检查已分配的任务是否已处理\n2）cancel： 取消任务执行\n3）isCancelled：检查任务是否已取消\n### ScheduledExecutorService接口\nScheduledExecutorService接口用于在一些预定义的延迟之后运行任务或定期运行任务。我们可以通过Executors类的工厂方法实例化ScheduledExecutorService，如下：\n```xml\n        ScheduledExecutorService scheduledExecutorService = Executors.newSingleThreadScheduledExecutor();\n```\n在ScheduledExecutorService接口中，有三个主要方法：\n1）schedule：允许在指定的延迟后执行一次任务。\n2）scheduleAtFixedRate：允许在指定的初始延迟后执行任务，然后以一定的周期重复执行，其中period参数用于指定两个任务的开始时间之间的间隔时间，因此任务执行的频率是固定的。\n3）scheduleWithFixedDelay：类似于scheduleAtFixedRate，它也重复执行给定的任务，单period参数用于指定前一个任务的结束和下一个任务的开始之间的间隔时间，也就是指定下一个任务延时多久后才执行，执行频率可能会有所不同，具体取决于执行任务给定任务所需的时间。\n#### scheduled方法\n假设要在固定延迟后安排某个任务的执行，可以使用ScheduledExecutorService实例的scheduled方法：\n```xml\nprivate static void testScheduled() {\n        ScheduledExecutorService scheduledExecutorService = Executors.newSingleThreadScheduledExecutor();\n        Callable<String> callable = () -> {\n            System.out.println(\"执行callable任务====\");\n            return \"callable\";\n        };\n        ScheduledFuture<String> schedule = scheduledExecutorService.schedule(callable, 1, TimeUnit.SECONDS);\n        System.out.println(\"主线程运行中========\");\n        try {\n            System.out.println(schedule.get());\n        } catch (InterruptedException | ExecutionException e) {\n            e.printStackTrace();\n        }\n\n        scheduledExecutorService.shutdown();\n        try {\n            if (!scheduledExecutorService.awaitTermination(800, TimeUnit.MILLISECONDS)) {\n                scheduledExecutorService.shutdownNow();\n            }\n        } catch (InterruptedException  e) {\n            scheduledExecutorService.shutdownNow();\n        }\n    }\n```\n结果如下，在延迟一秒后，才开始执行线程任务：\n{% asset_img image(5).png %}\n#### scheduleAtFixedRate方法\n当我们需要在固定延迟后，定期执行任务时，可以使用scheduleAtFixedRate方法，如下所示，每隔500毫秒执行相同的任务：\n```xml\n private static void testScheduleAtFixRate() {\n        ScheduledExecutorService scheduledExecutorService = Executors.newSingleThreadScheduledExecutor();\n        Runnable runnable = () -> {\n            System.out.println(System.currentTimeMillis());\n            System.out.println(\"执行callable任务====\");\n        };\n        // 延迟1秒后，每间隔2秒执行一次\n        scheduledExecutorService.scheduleAtFixedRate(runnable, 1, 2, TimeUnit.SECONDS);\n    }\n```\n结果如下所示，从时间戳我们可以看出，确实是每隔2秒执行一次\n{% asset_img image(6).png %}\n如果任务执行时间比间隔时间长，那么scheduledExecutorService将等到当前任务执行后再开始下一个任务\n```xml\n private static void testScheduleAtFixRate() {\n        ScheduledExecutorService scheduledExecutorService = Executors.newSingleThreadScheduledExecutor();\n        Runnable runnable = () -> {\n            System.out.println(System.currentTimeMillis());\n            try {\n                TimeUnit.SECONDS.sleep(3);\n            } catch (InterruptedException e) {\n                throw new RuntimeException(e);\n            }\n            System.out.println(\"执行callable任务====\");\n        };\n        // 延迟1秒后，每间隔2秒执行一次\n        scheduledExecutorService.scheduleAtFixedRate(runnable, 1, 2, TimeUnit.SECONDS);\n    }\n```\n如下所示，我们执行任务需要3秒，而间隔时间是2秒，通过打印结果可以看出，任务之间间隔3秒，也就是会等待任务执行完成后才开始下一个任务：\n{% asset_img image(7).png %}\n#### scheduleWithFixedDelay方法\n如果任务之间必须具有固定长度的延迟，那么可以使用scheduleWithFixedDelay方法。\n```xml\n   private static void testScheduleWithFixDelay() {\n        ScheduledExecutorService scheduledExecutorService = Executors.newSingleThreadScheduledExecutor();\n        Runnable runnable = () -> {\n            System.out.println(System.currentTimeMillis());\n            try {\n                TimeUnit.SECONDS.sleep(3);\n            } catch (InterruptedException e) {\n                throw new RuntimeException(e);\n            }\n            System.out.println(\"执行callable任务====\");\n        };\n        // 延迟1秒后，每间隔2秒执行一次\n        scheduledExecutorService.scheduleWithFixedDelay(runnable, 1, 2, TimeUnit.SECONDS);\n    }\n\n```\n在上述代码中，任务执行时长需要3秒，然后我们设置延迟时间为2秒，最终执行结果如下，从时间戳中可以看出，在上一个任务执行完毕后，间隔2秒才会开始下一个任务，因此任务与任务间隔时长为5秒。\n{% asset_img image(8).png %}\n### 参考文章\n[https://blog.csdn.net/qq_21484461/article/details/133101696](https://blog.csdn.net/qq_21484461/article/details/133101696)\n","source":"_posts/线程池.md","raw":"---\ntitle: 线程池\ndate: 2024-04-02 16:36:48\ntags: Java\n---\nExecutors是一个工厂类，提供了创建几种预配置线程池实例地方法，如果不需要应用任何自定义地微调，可以调用这些方法创建默认配置地线程池。Executors工厂类提供地线程池有以下几种：\n1）newCachedThreadPool(): 创建一个可缓存地线程池，这个线程池地线程数量可以根据需要自动扩展，如果有可用的空闲线程，就会重用它们；如果没有可用的线程，就会创建一个新线程，适用于执行大量的短期异步任务。\n2）newFixedThreadPool(int nThreads): 创建一个固定大小的线程池，其中包含指定数量的线程，线程数量是固定的，不会自动扩展，适用于执行固定数量的长期任务。\n3）newSingleThreadExecutor(): 创建一个单线程的线程池，用于串行执行任务。适用于需要按顺序执行任务的场景。\n4）newScheduledThreadPool(int corePoolSize): 创建一个单线程的定时执行线程池。只包含一个线程，用于串行定时执行任务。\n5）newWorkStealingPool(int parallelism): 创建一个工作窃取线程池，线程数量根据CPU核心数动态调整，适用于CPU密集型的任务。\n### ExecutorService\nExecutorService是java.util.concurrent包的重要组成部分，是Java JDK提供的框架，用于简化异步模式下任务的执行。一般来说，ExecutorService会自动提供一个线程池和相关API，用于为其分配任务。\n#### 工厂方法实例化ExecutorService\nExecutors类提供了许多工厂方法用于实例化ExecutorService，最常用的是newFixedThreadPool方法，用于创建指定线程数的ExecutorService实例，使用方法如下所示：\n```xml\nExecutorService executor = Executors.newFixedThreadPool(10);\n```\n#### 直接创建ExecutorService实例\nExecutorService是一个接口，因此可以使用其任何实现类的实例，例如ThreadPoolExecutor类实现了ExecutorService接口并提供了一些构造函数用于配置执行程序服务及其内部池。\n```xml\n int core = Runtime.getRuntime().availableProcessors();\n int max = Runtime.getRuntime().availableProcessors() * 2 + 1;\n int wait = 60;\n int capacity = 500;\n ThreadPoolExecutor threadPoolExecutor = new ThreadPoolExecutor(core, max, wait, TimeUnit.SECONDS,\n       new LinkedBlockingQueue<>(capacity),\n       Executors.defaultThreadFactory(),\n       new ThreadPoolExecutor.CallerRunsPolicy());\n```\n这里的参数，从左到右分别表示：\n1）corePoolSize：核心线程数\n2）maxPoolSize：最大线程数\n3）keepAliveTime：额外的线程（即实例化超过corePoolSize的线程）在空闲状态下的存活时间。\n4）unit：等待时间单位\n5）workQueue：任务队列\n6）threadFactory：线程工厂\n7）handler：拒绝策略\n其中，拒绝策略主要有以下几种：\n1）AbortPolicy：直接抛出RejectedExecutionException异常阻止系统正常运行。\n2）CallerRunsPolicy：既不抛弃任务，也不抛出异常，而是将某些任务回退给调用者，从而降低任务的流量。\n3）DiscardOldestPolicy：抛出等待队列中最先等待的任务，然后把当前任务加入队列中。\n4）DiscardPolicy：既不处理也不抛出异常，如果允许任务丢弃，这是最好的方法。\n#### 任务分配给ExecutorService\nExecutorService可以执行Runnable和Callable任务，首先我们创建两个原始任务类：\n```xml\n  private static List<Callable<String>> buildCallableTasks() {\n        Callable<String> callableTask = () -> {\n            TimeUnit.MILLISECONDS.sleep(300);\n            System.out.println(\"buildCallable==========\");\n            return \"Task's execution\";\n        };\n\n        List<Callable<String>> callableTasks = new ArrayList<>();\n        callableTasks.add(callableTask);\n        callableTasks.add(callableTask);\n        callableTasks.add(callableTask);\n        return callableTasks;\n    }\n\n    private static Runnable buildRunnable() {\n        return () -> {\n            try {\n                TimeUnit.MILLISECONDS.sleep(300);\n                System.out.println(\"buildRunnable===========\");\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        };\n    }\n```\n创建完任务之后，可以使用多种方法将任务分配给ExecutorService.\n##### execute\n改方法返回值为空(void),因此改方法没有任何可能获得任务执行结果或检查任务的状态。使用示例如下：\n```xml\n private static void testExecute() {\n        ExecutorService executorService = Executors.newFixedThreadPool(2);\n        Runnable runnable = buildRunnable();\n        executorService.execute(runnable);\n        System.out.println(\"hello world=========\");\n    }\n```\n在main方法中调用该方法，结果如下：\n{% asset_img image.png %}\n##### submit\nsubmit方法会将一个Callable或Runnable任务提交给ExecutorService并返回future类型的结果。\n```xml\n private static void testSubmit() throws ExecutionException, InterruptedException {\n        ExecutorService executorService = Executors.newFixedThreadPool(2);\n        Runnable runnable = buildRunnable();\n        List<Callable<String>> callableTasks = buildCallableTasks();\n        Future<?> runnableFuture = executorService.submit(runnable);\n        List<Future<String>> callableFutures = new ArrayList<>();\n        for (Callable<String> callableTask : callableTasks) {\n            callableFutures.add(executorService.submit(callableTask));\n        }\n        System.out.println(runnableFuture.get());\n        for (Future<String> callableFuture : callableFutures) {\n            System.out.println(callableFuture.get());\n        }\n    }\n```\n通过future类的get方法，能获取返回的结果，如果提交的是一个Runnable任务，那么通过future的get方法，返回的是一个null，如下图所示：\n{% asset_img image(1).png %}\n##### invokeAny\ninvokeAny方法将一组任务分配给ExecutorService，使每个任务执行，并返回任意一个成功执行的任务结果。\n```xml\n  private static void testInvokeAny() throws ExecutionException, InterruptedException {\n        ExecutorService executorService = Executors.newFixedThreadPool(2);\n        List<Callable<String>> callableTasks = buildCallableTasks();\n        String result = executorService.invokeAny(callableTasks);\n        System.out.println(result);\n    }\n```\n结果如下所示：\n{% asset_img image(2).png %}\n##### invokeAll\ninvokeAll方法将一组任务分配给ExecutorService，使每个任务执行，并以Future类型的对象列表形式返回所有任务执行的结果。\n```xml\n private static void testInvokeAll() throws InterruptedException, ExecutionException {\n        ExecutorService executorService = Executors.newFixedThreadPool(2);\n        List<Callable<String>> callableTasks = buildCallableTasks();\n        List<Future<String>> futures = executorService.invokeAll(callableTasks);\n        for (Future<String> future : futures) {\n            System.out.println(future.get());\n        }\n    }\n```\n结果如下：\n{% asset_img image(3).png %}\n#### 关闭ExecutorService\n一般情况下，ExecutorService并不会自动关闭，即使所有任务都执行完毕，或者没有要处理的任务，也不会自动销毁ExecutorService，会一直处于等待状态，等待我们给他分配新的工作。当应用程序需要处理不定期出现的任务时，这种机制很有用，但是也带来一些副作用：即使应用程序到达它的终点，也不会被停止，因为等待ExecutorService将导致JVM继续运行，这样，我们就需要主动关闭Executor Service。\n要关闭ExecutorService，可以使用shutdown方法或shutdownNow方法\n##### shutdown\nshutdown方法并保护会立即销毁ExecutorService实例，而是首先让ExecutorService停止接受新任务，并且在所有正在运行的线程完成当前工作后关闭。\n##### shutdownNow\nshutdownNow() 方法会尝试立即销毁 ExecutorService 实例，所以并不能保证所有正在运行的线程将同时停止。该方法会返回等待处理的任务列表，由开发人员自行决定如何处理这些任务。\n因为提供了两个方法，因此关闭 ExecutorService 实例的最佳实战 （ 也是 Oracle 所推荐的 ）就是同时使用这两种方法并结合 awaitTermination() 方法。\n使用这种方式，ExecutorService 首先停止执行新任务，等待指定的时间段完成所有任务。如果该时间到期，则立即停止执行。\n```xml\n   private static void testInvokeAll() throws InterruptedException, ExecutionException {\n        ExecutorService executorService = Executors.newFixedThreadPool(2);\n        List<Callable<String>> callableTasks = buildCallableTasks();\n        List<Future<String>> futures = executorService.invokeAll(callableTasks);\n        for (Future<String> future : futures) {\n            System.out.println(future.get());\n        }\n        executorService.shutdown();\n        try {\n            if (!executorService.awaitTermination(800, TimeUnit.MILLISECONDS)) {\n                executorService.shutdownNow();\n            }\n        } catch (InterruptedException e) {\n            executorService.shutdownNow();\n        }\n    }\n```\n### Future接口\n在ExecutorService的submit方法、invokeAll方法，都会返回一个Future对象或Future对象集合，这些Future接口的对象允许我们获取任务执行的结果或检查任务状态（运行中还是执行完毕）\n#### get方法\nfuture接口提供一个特殊的阻塞方法get，它返回callable任务执行的实际结果，但如果是runnable任务，只会返回null。此外，正在执行的任务随时可能抛出异常或中断执行，因此我们要将get调用放在try catch语句块中，以捕获InterruptedException或ExecutionException异常。\n```xml\n  private static void testFutureGet() {\n        ExecutorService executorService = Executors.newFixedThreadPool(2);\n        Callable<String> callable = () -> {\n            System.out.println(\"执行callable任务\");\n            TimeUnit.MILLISECONDS.sleep(300);\n            return \"callable执行完毕\";\n        };\n        Future<String> future = executorService.submit(callable);\n        try {\n            String result = future.get();\n            System.out.println(result);\n        } catch (InterruptedException | ExecutionException e) {\n            e.printStackTrace();\n        }\n        executorService.shutdown();\n        try {\n            if (!executorService.awaitTermination(800, TimeUnit.MILLISECONDS)) {\n                executorService.shutdownNow();\n            }\n        } catch (InterruptedException e) {\n            executorService.shutdownNow();\n        }\n    }\n\n```\n因为get方法是阻塞的，并且不知道要阻塞多长时间，因此可能导致应用程序的性能降低，如果结果数据并不重要，我们可以使用超时机制来避免长时间阻塞，也就是使用get的重载方法，第一个参数为超时时间，第二个参数为时间的单位。如果在超时时间内正常结束，那么返回Future的结果，如果超时了还没结束，那么将抛出TimeoutExeception异常。\n```xml\nprivate static void testFutureGet() {\n        ExecutorService executorService = Executors.newFixedThreadPool(2);\n        Callable<String> callable = () -> {\n            System.out.println(\"执行callable任务\");\n            TimeUnit.MILLISECONDS.sleep(300);\n            return \"callable执行完毕\";\n        };\n        Future<String> future = executorService.submit(callable);\n        try {\n            String result = future.get(400, TimeUnit.MILLISECONDS);\n            System.out.println(result);\n        } catch (InterruptedException | ExecutionException | TimeoutException e) {\n            e.printStackTrace();\n        }\n\n        Callable<String> callable2 = () -> {\n            System.out.println(\"执行callable任务\");\n            TimeUnit.MILLISECONDS.sleep(500);\n            return \"callable执行完毕\";\n        };\n        Future<String> future2 = executorService.submit(callable2);\n        try {\n            String result = future2.get(400, TimeUnit.MILLISECONDS);\n            System.out.println(result);\n        } catch (InterruptedException | ExecutionException | TimeoutException e) {\n            e.printStackTrace();\n        }\n        executorService.shutdown();\n        try {\n            if (!executorService.awaitTermination(800, TimeUnit.MILLISECONDS)) {\n                executorService.shutdownNow();\n            }\n        } catch (InterruptedException e) {\n            executorService.shutdownNow();\n        }\n    }\n```\n执行结果如下，第一个任务没有超时，所以能正常获取结果，第二个任务超时，所以会抛出异常。\n{% asset_img image(4).png %}\n#### 其他方法\n除了get方法外，Future还提供许多方法，主要的方法如下：\n1）isDone： 检查已分配的任务是否已处理\n2）cancel： 取消任务执行\n3）isCancelled：检查任务是否已取消\n### ScheduledExecutorService接口\nScheduledExecutorService接口用于在一些预定义的延迟之后运行任务或定期运行任务。我们可以通过Executors类的工厂方法实例化ScheduledExecutorService，如下：\n```xml\n        ScheduledExecutorService scheduledExecutorService = Executors.newSingleThreadScheduledExecutor();\n```\n在ScheduledExecutorService接口中，有三个主要方法：\n1）schedule：允许在指定的延迟后执行一次任务。\n2）scheduleAtFixedRate：允许在指定的初始延迟后执行任务，然后以一定的周期重复执行，其中period参数用于指定两个任务的开始时间之间的间隔时间，因此任务执行的频率是固定的。\n3）scheduleWithFixedDelay：类似于scheduleAtFixedRate，它也重复执行给定的任务，单period参数用于指定前一个任务的结束和下一个任务的开始之间的间隔时间，也就是指定下一个任务延时多久后才执行，执行频率可能会有所不同，具体取决于执行任务给定任务所需的时间。\n#### scheduled方法\n假设要在固定延迟后安排某个任务的执行，可以使用ScheduledExecutorService实例的scheduled方法：\n```xml\nprivate static void testScheduled() {\n        ScheduledExecutorService scheduledExecutorService = Executors.newSingleThreadScheduledExecutor();\n        Callable<String> callable = () -> {\n            System.out.println(\"执行callable任务====\");\n            return \"callable\";\n        };\n        ScheduledFuture<String> schedule = scheduledExecutorService.schedule(callable, 1, TimeUnit.SECONDS);\n        System.out.println(\"主线程运行中========\");\n        try {\n            System.out.println(schedule.get());\n        } catch (InterruptedException | ExecutionException e) {\n            e.printStackTrace();\n        }\n\n        scheduledExecutorService.shutdown();\n        try {\n            if (!scheduledExecutorService.awaitTermination(800, TimeUnit.MILLISECONDS)) {\n                scheduledExecutorService.shutdownNow();\n            }\n        } catch (InterruptedException  e) {\n            scheduledExecutorService.shutdownNow();\n        }\n    }\n```\n结果如下，在延迟一秒后，才开始执行线程任务：\n{% asset_img image(5).png %}\n#### scheduleAtFixedRate方法\n当我们需要在固定延迟后，定期执行任务时，可以使用scheduleAtFixedRate方法，如下所示，每隔500毫秒执行相同的任务：\n```xml\n private static void testScheduleAtFixRate() {\n        ScheduledExecutorService scheduledExecutorService = Executors.newSingleThreadScheduledExecutor();\n        Runnable runnable = () -> {\n            System.out.println(System.currentTimeMillis());\n            System.out.println(\"执行callable任务====\");\n        };\n        // 延迟1秒后，每间隔2秒执行一次\n        scheduledExecutorService.scheduleAtFixedRate(runnable, 1, 2, TimeUnit.SECONDS);\n    }\n```\n结果如下所示，从时间戳我们可以看出，确实是每隔2秒执行一次\n{% asset_img image(6).png %}\n如果任务执行时间比间隔时间长，那么scheduledExecutorService将等到当前任务执行后再开始下一个任务\n```xml\n private static void testScheduleAtFixRate() {\n        ScheduledExecutorService scheduledExecutorService = Executors.newSingleThreadScheduledExecutor();\n        Runnable runnable = () -> {\n            System.out.println(System.currentTimeMillis());\n            try {\n                TimeUnit.SECONDS.sleep(3);\n            } catch (InterruptedException e) {\n                throw new RuntimeException(e);\n            }\n            System.out.println(\"执行callable任务====\");\n        };\n        // 延迟1秒后，每间隔2秒执行一次\n        scheduledExecutorService.scheduleAtFixedRate(runnable, 1, 2, TimeUnit.SECONDS);\n    }\n```\n如下所示，我们执行任务需要3秒，而间隔时间是2秒，通过打印结果可以看出，任务之间间隔3秒，也就是会等待任务执行完成后才开始下一个任务：\n{% asset_img image(7).png %}\n#### scheduleWithFixedDelay方法\n如果任务之间必须具有固定长度的延迟，那么可以使用scheduleWithFixedDelay方法。\n```xml\n   private static void testScheduleWithFixDelay() {\n        ScheduledExecutorService scheduledExecutorService = Executors.newSingleThreadScheduledExecutor();\n        Runnable runnable = () -> {\n            System.out.println(System.currentTimeMillis());\n            try {\n                TimeUnit.SECONDS.sleep(3);\n            } catch (InterruptedException e) {\n                throw new RuntimeException(e);\n            }\n            System.out.println(\"执行callable任务====\");\n        };\n        // 延迟1秒后，每间隔2秒执行一次\n        scheduledExecutorService.scheduleWithFixedDelay(runnable, 1, 2, TimeUnit.SECONDS);\n    }\n\n```\n在上述代码中，任务执行时长需要3秒，然后我们设置延迟时间为2秒，最终执行结果如下，从时间戳中可以看出，在上一个任务执行完毕后，间隔2秒才会开始下一个任务，因此任务与任务间隔时长为5秒。\n{% asset_img image(8).png %}\n### 参考文章\n[https://blog.csdn.net/qq_21484461/article/details/133101696](https://blog.csdn.net/qq_21484461/article/details/133101696)\n","slug":"线程池","published":1,"updated":"2024-04-02T14:02:15.255Z","_id":"clui4qb780000iovldijo3jbx","comments":1,"layout":"post","photos":[],"content":"<p>Executors是一个工厂类，提供了创建几种预配置线程池实例地方法，如果不需要应用任何自定义地微调，可以调用这些方法创建默认配置地线程池。Executors工厂类提供地线程池有以下几种：<br>1）newCachedThreadPool(): 创建一个可缓存地线程池，这个线程池地线程数量可以根据需要自动扩展，如果有可用的空闲线程，就会重用它们；如果没有可用的线程，就会创建一个新线程，适用于执行大量的短期异步任务。<br>2）newFixedThreadPool(int nThreads): 创建一个固定大小的线程池，其中包含指定数量的线程，线程数量是固定的，不会自动扩展，适用于执行固定数量的长期任务。<br>3）newSingleThreadExecutor(): 创建一个单线程的线程池，用于串行执行任务。适用于需要按顺序执行任务的场景。<br>4）newScheduledThreadPool(int corePoolSize): 创建一个单线程的定时执行线程池。只包含一个线程，用于串行定时执行任务。<br>5）newWorkStealingPool(int parallelism): 创建一个工作窃取线程池，线程数量根据CPU核心数动态调整，适用于CPU密集型的任务。</p>\n<h3 id=\"ExecutorService\"><a href=\"#ExecutorService\" class=\"headerlink\" title=\"ExecutorService\"></a>ExecutorService</h3><p>ExecutorService是java.util.concurrent包的重要组成部分，是Java JDK提供的框架，用于简化异步模式下任务的执行。一般来说，ExecutorService会自动提供一个线程池和相关API，用于为其分配任务。</p>\n<h4 id=\"工厂方法实例化ExecutorService\"><a href=\"#工厂方法实例化ExecutorService\" class=\"headerlink\" title=\"工厂方法实例化ExecutorService\"></a>工厂方法实例化ExecutorService</h4><p>Executors类提供了许多工厂方法用于实例化ExecutorService，最常用的是newFixedThreadPool方法，用于创建指定线程数的ExecutorService实例，使用方法如下所示：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\">ExecutorService executor = Executors.newFixedThreadPool(10);<br></code></pre></td></tr></table></figure>\n<h4 id=\"直接创建ExecutorService实例\"><a href=\"#直接创建ExecutorService实例\" class=\"headerlink\" title=\"直接创建ExecutorService实例\"></a>直接创建ExecutorService实例</h4><p>ExecutorService是一个接口，因此可以使用其任何实现类的实例，例如ThreadPoolExecutor类实现了ExecutorService接口并提供了一些构造函数用于配置执行程序服务及其内部池。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\">int core = Runtime.getRuntime().availableProcessors();<br>int max = Runtime.getRuntime().availableProcessors() * 2 + 1;<br>int wait = 60;<br>int capacity = 500;<br>ThreadPoolExecutor threadPoolExecutor = new ThreadPoolExecutor(core, max, wait, TimeUnit.SECONDS,<br>      new LinkedBlockingQueue<span class=\"hljs-tag\">&lt;&gt;</span>(capacity),<br>      Executors.defaultThreadFactory(),<br>      new ThreadPoolExecutor.CallerRunsPolicy());<br></code></pre></td></tr></table></figure>\n<p>这里的参数，从左到右分别表示：<br>1）corePoolSize：核心线程数<br>2）maxPoolSize：最大线程数<br>3）keepAliveTime：额外的线程（即实例化超过corePoolSize的线程）在空闲状态下的存活时间。<br>4）unit：等待时间单位<br>5）workQueue：任务队列<br>6）threadFactory：线程工厂<br>7）handler：拒绝策略<br>其中，拒绝策略主要有以下几种：<br>1）AbortPolicy：直接抛出RejectedExecutionException异常阻止系统正常运行。<br>2）CallerRunsPolicy：既不抛弃任务，也不抛出异常，而是将某些任务回退给调用者，从而降低任务的流量。<br>3）DiscardOldestPolicy：抛出等待队列中最先等待的任务，然后把当前任务加入队列中。<br>4）DiscardPolicy：既不处理也不抛出异常，如果允许任务丢弃，这是最好的方法。</p>\n<h4 id=\"任务分配给ExecutorService\"><a href=\"#任务分配给ExecutorService\" class=\"headerlink\" title=\"任务分配给ExecutorService\"></a>任务分配给ExecutorService</h4><p>ExecutorService可以执行Runnable和Callable任务，首先我们创建两个原始任务类：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\">private static List&lt;Callable<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">String</span>&gt;</span>&gt; buildCallableTasks() &#123;<br>      Callable<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">String</span>&gt;</span> callableTask = () -&gt; &#123;<br>          TimeUnit.MILLISECONDS.sleep(300);<br>          System.out.println(&quot;buildCallable==========&quot;);<br>          return &quot;Task&#x27;s execution&quot;;<br>      &#125;;<br><br>      List&lt;Callable<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">String</span>&gt;</span>&gt; callableTasks = new ArrayList<span class=\"hljs-tag\">&lt;&gt;</span>();<br>      callableTasks.add(callableTask);<br>      callableTasks.add(callableTask);<br>      callableTasks.add(callableTask);<br>      return callableTasks;<br>  &#125;<br><br>  private static Runnable buildRunnable() &#123;<br>      return () -&gt; &#123;<br>          try &#123;<br>              TimeUnit.MILLISECONDS.sleep(300);<br>              System.out.println(&quot;buildRunnable===========&quot;);<br>          &#125; catch (InterruptedException e) &#123;<br>              e.printStackTrace();<br>          &#125;<br>      &#125;;<br>  &#125;<br></code></pre></td></tr></table></figure>\n<p>创建完任务之后，可以使用多种方法将任务分配给ExecutorService.</p>\n<h5 id=\"execute\"><a href=\"#execute\" class=\"headerlink\" title=\"execute\"></a>execute</h5><p>改方法返回值为空(void),因此改方法没有任何可能获得任务执行结果或检查任务的状态。使用示例如下：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\">private static void testExecute() &#123;<br>       ExecutorService executorService = Executors.newFixedThreadPool(2);<br>       Runnable runnable = buildRunnable();<br>       executorService.execute(runnable);<br>       System.out.println(&quot;hello world=========&quot;);<br>   &#125;<br></code></pre></td></tr></table></figure>\n<p>在main方法中调用该方法，结果如下：</p>\n<img src=\"/2024/04/02/%E7%BA%BF%E7%A8%8B%E6%B1%A0/image.png\" class=\"\">\n<h5 id=\"submit\"><a href=\"#submit\" class=\"headerlink\" title=\"submit\"></a>submit</h5><p>submit方法会将一个Callable或Runnable任务提交给ExecutorService并返回future类型的结果。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\">private static void testSubmit() throws ExecutionException, InterruptedException &#123;<br>       ExecutorService executorService = Executors.newFixedThreadPool(2);<br>       Runnable runnable = buildRunnable();<br>       List&lt;Callable<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">String</span>&gt;</span>&gt; callableTasks = buildCallableTasks();<br>       Future&lt;?&gt; runnableFuture = executorService.submit(runnable);<br>       List&lt;Future<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">String</span>&gt;</span>&gt; callableFutures = new ArrayList<span class=\"hljs-tag\">&lt;&gt;</span>();<br>       for (Callable<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">String</span>&gt;</span> callableTask : callableTasks) &#123;<br>           callableFutures.add(executorService.submit(callableTask));<br>       &#125;<br>       System.out.println(runnableFuture.get());<br>       for (Future<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">String</span>&gt;</span> callableFuture : callableFutures) &#123;<br>           System.out.println(callableFuture.get());<br>       &#125;<br>   &#125;<br></code></pre></td></tr></table></figure>\n<p>通过future类的get方法，能获取返回的结果，如果提交的是一个Runnable任务，那么通过future的get方法，返回的是一个null，如下图所示：</p>\n<img src=\"/2024/04/02/%E7%BA%BF%E7%A8%8B%E6%B1%A0/image(1).png\" class=\"\">\n<h5 id=\"invokeAny\"><a href=\"#invokeAny\" class=\"headerlink\" title=\"invokeAny\"></a>invokeAny</h5><p>invokeAny方法将一组任务分配给ExecutorService，使每个任务执行，并返回任意一个成功执行的任务结果。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\">private static void testInvokeAny() throws ExecutionException, InterruptedException &#123;<br>      ExecutorService executorService = Executors.newFixedThreadPool(2);<br>      List&lt;Callable<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">String</span>&gt;</span>&gt; callableTasks = buildCallableTasks();<br>      String result = executorService.invokeAny(callableTasks);<br>      System.out.println(result);<br>  &#125;<br></code></pre></td></tr></table></figure>\n<p>结果如下所示：</p>\n<img src=\"/2024/04/02/%E7%BA%BF%E7%A8%8B%E6%B1%A0/image(2).png\" class=\"\">\n<h5 id=\"invokeAll\"><a href=\"#invokeAll\" class=\"headerlink\" title=\"invokeAll\"></a>invokeAll</h5><p>invokeAll方法将一组任务分配给ExecutorService，使每个任务执行，并以Future类型的对象列表形式返回所有任务执行的结果。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\">private static void testInvokeAll() throws InterruptedException, ExecutionException &#123;<br>       ExecutorService executorService = Executors.newFixedThreadPool(2);<br>       List&lt;Callable<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">String</span>&gt;</span>&gt; callableTasks = buildCallableTasks();<br>       List&lt;Future<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">String</span>&gt;</span>&gt; futures = executorService.invokeAll(callableTasks);<br>       for (Future<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">String</span>&gt;</span> future : futures) &#123;<br>           System.out.println(future.get());<br>       &#125;<br>   &#125;<br></code></pre></td></tr></table></figure>\n<p>结果如下：</p>\n<img src=\"/2024/04/02/%E7%BA%BF%E7%A8%8B%E6%B1%A0/image(3).png\" class=\"\">\n<h4 id=\"关闭ExecutorService\"><a href=\"#关闭ExecutorService\" class=\"headerlink\" title=\"关闭ExecutorService\"></a>关闭ExecutorService</h4><p>一般情况下，ExecutorService并不会自动关闭，即使所有任务都执行完毕，或者没有要处理的任务，也不会自动销毁ExecutorService，会一直处于等待状态，等待我们给他分配新的工作。当应用程序需要处理不定期出现的任务时，这种机制很有用，但是也带来一些副作用：即使应用程序到达它的终点，也不会被停止，因为等待ExecutorService将导致JVM继续运行，这样，我们就需要主动关闭Executor Service。<br>要关闭ExecutorService，可以使用shutdown方法或shutdownNow方法</p>\n<h5 id=\"shutdown\"><a href=\"#shutdown\" class=\"headerlink\" title=\"shutdown\"></a>shutdown</h5><p>shutdown方法并保护会立即销毁ExecutorService实例，而是首先让ExecutorService停止接受新任务，并且在所有正在运行的线程完成当前工作后关闭。</p>\n<h5 id=\"shutdownNow\"><a href=\"#shutdownNow\" class=\"headerlink\" title=\"shutdownNow\"></a>shutdownNow</h5><p>shutdownNow() 方法会尝试立即销毁 ExecutorService 实例，所以并不能保证所有正在运行的线程将同时停止。该方法会返回等待处理的任务列表，由开发人员自行决定如何处理这些任务。<br>因为提供了两个方法，因此关闭 ExecutorService 实例的最佳实战 （ 也是 Oracle 所推荐的 ）就是同时使用这两种方法并结合 awaitTermination() 方法。<br>使用这种方式，ExecutorService 首先停止执行新任务，等待指定的时间段完成所有任务。如果该时间到期，则立即停止执行。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\">private static void testInvokeAll() throws InterruptedException, ExecutionException &#123;<br>     ExecutorService executorService = Executors.newFixedThreadPool(2);<br>     List&lt;Callable<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">String</span>&gt;</span>&gt; callableTasks = buildCallableTasks();<br>     List&lt;Future<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">String</span>&gt;</span>&gt; futures = executorService.invokeAll(callableTasks);<br>     for (Future<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">String</span>&gt;</span> future : futures) &#123;<br>         System.out.println(future.get());<br>     &#125;<br>     executorService.shutdown();<br>     try &#123;<br>         if (!executorService.awaitTermination(800, TimeUnit.MILLISECONDS)) &#123;<br>             executorService.shutdownNow();<br>         &#125;<br>     &#125; catch (InterruptedException e) &#123;<br>         executorService.shutdownNow();<br>     &#125;<br> &#125;<br></code></pre></td></tr></table></figure>\n<h3 id=\"Future接口\"><a href=\"#Future接口\" class=\"headerlink\" title=\"Future接口\"></a>Future接口</h3><p>在ExecutorService的submit方法、invokeAll方法，都会返回一个Future对象或Future对象集合，这些Future接口的对象允许我们获取任务执行的结果或检查任务状态（运行中还是执行完毕）</p>\n<h4 id=\"get方法\"><a href=\"#get方法\" class=\"headerlink\" title=\"get方法\"></a>get方法</h4><p>future接口提供一个特殊的阻塞方法get，它返回callable任务执行的实际结果，但如果是runnable任务，只会返回null。此外，正在执行的任务随时可能抛出异常或中断执行，因此我们要将get调用放在try catch语句块中，以捕获InterruptedException或ExecutionException异常。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\">private static void testFutureGet() &#123;<br>      ExecutorService executorService = Executors.newFixedThreadPool(2);<br>      Callable<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">String</span>&gt;</span> callable = () -&gt; &#123;<br>          System.out.println(&quot;执行callable任务&quot;);<br>          TimeUnit.MILLISECONDS.sleep(300);<br>          return &quot;callable执行完毕&quot;;<br>      &#125;;<br>      Future<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">String</span>&gt;</span> future = executorService.submit(callable);<br>      try &#123;<br>          String result = future.get();<br>          System.out.println(result);<br>      &#125; catch (InterruptedException | ExecutionException e) &#123;<br>          e.printStackTrace();<br>      &#125;<br>      executorService.shutdown();<br>      try &#123;<br>          if (!executorService.awaitTermination(800, TimeUnit.MILLISECONDS)) &#123;<br>              executorService.shutdownNow();<br>          &#125;<br>      &#125; catch (InterruptedException e) &#123;<br>          executorService.shutdownNow();<br>      &#125;<br>  &#125;<br><br></code></pre></td></tr></table></figure>\n<p>因为get方法是阻塞的，并且不知道要阻塞多长时间，因此可能导致应用程序的性能降低，如果结果数据并不重要，我们可以使用超时机制来避免长时间阻塞，也就是使用get的重载方法，第一个参数为超时时间，第二个参数为时间的单位。如果在超时时间内正常结束，那么返回Future的结果，如果超时了还没结束，那么将抛出TimeoutExeception异常。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\">private static void testFutureGet() &#123;<br>        ExecutorService executorService = Executors.newFixedThreadPool(2);<br>        Callable<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">String</span>&gt;</span> callable = () -&gt; &#123;<br>            System.out.println(&quot;执行callable任务&quot;);<br>            TimeUnit.MILLISECONDS.sleep(300);<br>            return &quot;callable执行完毕&quot;;<br>        &#125;;<br>        Future<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">String</span>&gt;</span> future = executorService.submit(callable);<br>        try &#123;<br>            String result = future.get(400, TimeUnit.MILLISECONDS);<br>            System.out.println(result);<br>        &#125; catch (InterruptedException | ExecutionException | TimeoutException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br><br>        Callable<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">String</span>&gt;</span> callable2 = () -&gt; &#123;<br>            System.out.println(&quot;执行callable任务&quot;);<br>            TimeUnit.MILLISECONDS.sleep(500);<br>            return &quot;callable执行完毕&quot;;<br>        &#125;;<br>        Future<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">String</span>&gt;</span> future2 = executorService.submit(callable2);<br>        try &#123;<br>            String result = future2.get(400, TimeUnit.MILLISECONDS);<br>            System.out.println(result);<br>        &#125; catch (InterruptedException | ExecutionException | TimeoutException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        executorService.shutdown();<br>        try &#123;<br>            if (!executorService.awaitTermination(800, TimeUnit.MILLISECONDS)) &#123;<br>                executorService.shutdownNow();<br>            &#125;<br>        &#125; catch (InterruptedException e) &#123;<br>            executorService.shutdownNow();<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure>\n<p>执行结果如下，第一个任务没有超时，所以能正常获取结果，第二个任务超时，所以会抛出异常。</p>\n<img src=\"/2024/04/02/%E7%BA%BF%E7%A8%8B%E6%B1%A0/image(4).png\" class=\"\">\n<h4 id=\"其他方法\"><a href=\"#其他方法\" class=\"headerlink\" title=\"其他方法\"></a>其他方法</h4><p>除了get方法外，Future还提供许多方法，主要的方法如下：<br>1）isDone： 检查已分配的任务是否已处理<br>2）cancel： 取消任务执行<br>3）isCancelled：检查任务是否已取消</p>\n<h3 id=\"ScheduledExecutorService接口\"><a href=\"#ScheduledExecutorService接口\" class=\"headerlink\" title=\"ScheduledExecutorService接口\"></a>ScheduledExecutorService接口</h3><p>ScheduledExecutorService接口用于在一些预定义的延迟之后运行任务或定期运行任务。我们可以通过Executors类的工厂方法实例化ScheduledExecutorService，如下：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\">ScheduledExecutorService scheduledExecutorService = Executors.newSingleThreadScheduledExecutor();<br></code></pre></td></tr></table></figure>\n<p>在ScheduledExecutorService接口中，有三个主要方法：<br>1）schedule：允许在指定的延迟后执行一次任务。<br>2）scheduleAtFixedRate：允许在指定的初始延迟后执行任务，然后以一定的周期重复执行，其中period参数用于指定两个任务的开始时间之间的间隔时间，因此任务执行的频率是固定的。<br>3）scheduleWithFixedDelay：类似于scheduleAtFixedRate，它也重复执行给定的任务，单period参数用于指定前一个任务的结束和下一个任务的开始之间的间隔时间，也就是指定下一个任务延时多久后才执行，执行频率可能会有所不同，具体取决于执行任务给定任务所需的时间。</p>\n<h4 id=\"scheduled方法\"><a href=\"#scheduled方法\" class=\"headerlink\" title=\"scheduled方法\"></a>scheduled方法</h4><p>假设要在固定延迟后安排某个任务的执行，可以使用ScheduledExecutorService实例的scheduled方法：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\">private static void testScheduled() &#123;<br>        ScheduledExecutorService scheduledExecutorService = Executors.newSingleThreadScheduledExecutor();<br>        Callable<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">String</span>&gt;</span> callable = () -&gt; &#123;<br>            System.out.println(&quot;执行callable任务====&quot;);<br>            return &quot;callable&quot;;<br>        &#125;;<br>        ScheduledFuture<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">String</span>&gt;</span> schedule = scheduledExecutorService.schedule(callable, 1, TimeUnit.SECONDS);<br>        System.out.println(&quot;主线程运行中========&quot;);<br>        try &#123;<br>            System.out.println(schedule.get());<br>        &#125; catch (InterruptedException | ExecutionException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br><br>        scheduledExecutorService.shutdown();<br>        try &#123;<br>            if (!scheduledExecutorService.awaitTermination(800, TimeUnit.MILLISECONDS)) &#123;<br>                scheduledExecutorService.shutdownNow();<br>            &#125;<br>        &#125; catch (InterruptedException  e) &#123;<br>            scheduledExecutorService.shutdownNow();<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure>\n<p>结果如下，在延迟一秒后，才开始执行线程任务：</p>\n<img src=\"/2024/04/02/%E7%BA%BF%E7%A8%8B%E6%B1%A0/image(5).png\" class=\"\">\n<h4 id=\"scheduleAtFixedRate方法\"><a href=\"#scheduleAtFixedRate方法\" class=\"headerlink\" title=\"scheduleAtFixedRate方法\"></a>scheduleAtFixedRate方法</h4><p>当我们需要在固定延迟后，定期执行任务时，可以使用scheduleAtFixedRate方法，如下所示，每隔500毫秒执行相同的任务：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\">private static void testScheduleAtFixRate() &#123;<br>       ScheduledExecutorService scheduledExecutorService = Executors.newSingleThreadScheduledExecutor();<br>       Runnable runnable = () -&gt; &#123;<br>           System.out.println(System.currentTimeMillis());<br>           System.out.println(&quot;执行callable任务====&quot;);<br>       &#125;;<br>       // 延迟1秒后，每间隔2秒执行一次<br>       scheduledExecutorService.scheduleAtFixedRate(runnable, 1, 2, TimeUnit.SECONDS);<br>   &#125;<br></code></pre></td></tr></table></figure>\n<p>结果如下所示，从时间戳我们可以看出，确实是每隔2秒执行一次</p>\n<img src=\"/2024/04/02/%E7%BA%BF%E7%A8%8B%E6%B1%A0/image(6).png\" class=\"\">\n<p>如果任务执行时间比间隔时间长，那么scheduledExecutorService将等到当前任务执行后再开始下一个任务</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\">private static void testScheduleAtFixRate() &#123;<br>       ScheduledExecutorService scheduledExecutorService = Executors.newSingleThreadScheduledExecutor();<br>       Runnable runnable = () -&gt; &#123;<br>           System.out.println(System.currentTimeMillis());<br>           try &#123;<br>               TimeUnit.SECONDS.sleep(3);<br>           &#125; catch (InterruptedException e) &#123;<br>               throw new RuntimeException(e);<br>           &#125;<br>           System.out.println(&quot;执行callable任务====&quot;);<br>       &#125;;<br>       // 延迟1秒后，每间隔2秒执行一次<br>       scheduledExecutorService.scheduleAtFixedRate(runnable, 1, 2, TimeUnit.SECONDS);<br>   &#125;<br></code></pre></td></tr></table></figure>\n<p>如下所示，我们执行任务需要3秒，而间隔时间是2秒，通过打印结果可以看出，任务之间间隔3秒，也就是会等待任务执行完成后才开始下一个任务：</p>\n<img src=\"/2024/04/02/%E7%BA%BF%E7%A8%8B%E6%B1%A0/image(7).png\" class=\"\">\n<h4 id=\"scheduleWithFixedDelay方法\"><a href=\"#scheduleWithFixedDelay方法\" class=\"headerlink\" title=\"scheduleWithFixedDelay方法\"></a>scheduleWithFixedDelay方法</h4><p>如果任务之间必须具有固定长度的延迟，那么可以使用scheduleWithFixedDelay方法。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\">private static void testScheduleWithFixDelay() &#123;<br>     ScheduledExecutorService scheduledExecutorService = Executors.newSingleThreadScheduledExecutor();<br>     Runnable runnable = () -&gt; &#123;<br>         System.out.println(System.currentTimeMillis());<br>         try &#123;<br>             TimeUnit.SECONDS.sleep(3);<br>         &#125; catch (InterruptedException e) &#123;<br>             throw new RuntimeException(e);<br>         &#125;<br>         System.out.println(&quot;执行callable任务====&quot;);<br>     &#125;;<br>     // 延迟1秒后，每间隔2秒执行一次<br>     scheduledExecutorService.scheduleWithFixedDelay(runnable, 1, 2, TimeUnit.SECONDS);<br> &#125;<br><br></code></pre></td></tr></table></figure>\n<p>在上述代码中，任务执行时长需要3秒，然后我们设置延迟时间为2秒，最终执行结果如下，从时间戳中可以看出，在上一个任务执行完毕后，间隔2秒才会开始下一个任务，因此任务与任务间隔时长为5秒。</p>\n<img src=\"/2024/04/02/%E7%BA%BF%E7%A8%8B%E6%B1%A0/image(8).png\" class=\"\">\n<h3 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h3><p><a href=\"https://blog.csdn.net/qq_21484461/article/details/133101696\">https://blog.csdn.net/qq_21484461&#x2F;article&#x2F;details&#x2F;133101696</a></p>\n","excerpt":"","more":"<p>Executors是一个工厂类，提供了创建几种预配置线程池实例地方法，如果不需要应用任何自定义地微调，可以调用这些方法创建默认配置地线程池。Executors工厂类提供地线程池有以下几种：<br>1）newCachedThreadPool(): 创建一个可缓存地线程池，这个线程池地线程数量可以根据需要自动扩展，如果有可用的空闲线程，就会重用它们；如果没有可用的线程，就会创建一个新线程，适用于执行大量的短期异步任务。<br>2）newFixedThreadPool(int nThreads): 创建一个固定大小的线程池，其中包含指定数量的线程，线程数量是固定的，不会自动扩展，适用于执行固定数量的长期任务。<br>3）newSingleThreadExecutor(): 创建一个单线程的线程池，用于串行执行任务。适用于需要按顺序执行任务的场景。<br>4）newScheduledThreadPool(int corePoolSize): 创建一个单线程的定时执行线程池。只包含一个线程，用于串行定时执行任务。<br>5）newWorkStealingPool(int parallelism): 创建一个工作窃取线程池，线程数量根据CPU核心数动态调整，适用于CPU密集型的任务。</p>\n<h3 id=\"ExecutorService\"><a href=\"#ExecutorService\" class=\"headerlink\" title=\"ExecutorService\"></a>ExecutorService</h3><p>ExecutorService是java.util.concurrent包的重要组成部分，是Java JDK提供的框架，用于简化异步模式下任务的执行。一般来说，ExecutorService会自动提供一个线程池和相关API，用于为其分配任务。</p>\n<h4 id=\"工厂方法实例化ExecutorService\"><a href=\"#工厂方法实例化ExecutorService\" class=\"headerlink\" title=\"工厂方法实例化ExecutorService\"></a>工厂方法实例化ExecutorService</h4><p>Executors类提供了许多工厂方法用于实例化ExecutorService，最常用的是newFixedThreadPool方法，用于创建指定线程数的ExecutorService实例，使用方法如下所示：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\">ExecutorService executor = Executors.newFixedThreadPool(10);<br></code></pre></td></tr></table></figure>\n<h4 id=\"直接创建ExecutorService实例\"><a href=\"#直接创建ExecutorService实例\" class=\"headerlink\" title=\"直接创建ExecutorService实例\"></a>直接创建ExecutorService实例</h4><p>ExecutorService是一个接口，因此可以使用其任何实现类的实例，例如ThreadPoolExecutor类实现了ExecutorService接口并提供了一些构造函数用于配置执行程序服务及其内部池。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\">int core = Runtime.getRuntime().availableProcessors();<br>int max = Runtime.getRuntime().availableProcessors() * 2 + 1;<br>int wait = 60;<br>int capacity = 500;<br>ThreadPoolExecutor threadPoolExecutor = new ThreadPoolExecutor(core, max, wait, TimeUnit.SECONDS,<br>      new LinkedBlockingQueue<span class=\"hljs-tag\">&lt;&gt;</span>(capacity),<br>      Executors.defaultThreadFactory(),<br>      new ThreadPoolExecutor.CallerRunsPolicy());<br></code></pre></td></tr></table></figure>\n<p>这里的参数，从左到右分别表示：<br>1）corePoolSize：核心线程数<br>2）maxPoolSize：最大线程数<br>3）keepAliveTime：额外的线程（即实例化超过corePoolSize的线程）在空闲状态下的存活时间。<br>4）unit：等待时间单位<br>5）workQueue：任务队列<br>6）threadFactory：线程工厂<br>7）handler：拒绝策略<br>其中，拒绝策略主要有以下几种：<br>1）AbortPolicy：直接抛出RejectedExecutionException异常阻止系统正常运行。<br>2）CallerRunsPolicy：既不抛弃任务，也不抛出异常，而是将某些任务回退给调用者，从而降低任务的流量。<br>3）DiscardOldestPolicy：抛出等待队列中最先等待的任务，然后把当前任务加入队列中。<br>4）DiscardPolicy：既不处理也不抛出异常，如果允许任务丢弃，这是最好的方法。</p>\n<h4 id=\"任务分配给ExecutorService\"><a href=\"#任务分配给ExecutorService\" class=\"headerlink\" title=\"任务分配给ExecutorService\"></a>任务分配给ExecutorService</h4><p>ExecutorService可以执行Runnable和Callable任务，首先我们创建两个原始任务类：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\">private static List&lt;Callable<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">String</span>&gt;</span>&gt; buildCallableTasks() &#123;<br>      Callable<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">String</span>&gt;</span> callableTask = () -&gt; &#123;<br>          TimeUnit.MILLISECONDS.sleep(300);<br>          System.out.println(&quot;buildCallable==========&quot;);<br>          return &quot;Task&#x27;s execution&quot;;<br>      &#125;;<br><br>      List&lt;Callable<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">String</span>&gt;</span>&gt; callableTasks = new ArrayList<span class=\"hljs-tag\">&lt;&gt;</span>();<br>      callableTasks.add(callableTask);<br>      callableTasks.add(callableTask);<br>      callableTasks.add(callableTask);<br>      return callableTasks;<br>  &#125;<br><br>  private static Runnable buildRunnable() &#123;<br>      return () -&gt; &#123;<br>          try &#123;<br>              TimeUnit.MILLISECONDS.sleep(300);<br>              System.out.println(&quot;buildRunnable===========&quot;);<br>          &#125; catch (InterruptedException e) &#123;<br>              e.printStackTrace();<br>          &#125;<br>      &#125;;<br>  &#125;<br></code></pre></td></tr></table></figure>\n<p>创建完任务之后，可以使用多种方法将任务分配给ExecutorService.</p>\n<h5 id=\"execute\"><a href=\"#execute\" class=\"headerlink\" title=\"execute\"></a>execute</h5><p>改方法返回值为空(void),因此改方法没有任何可能获得任务执行结果或检查任务的状态。使用示例如下：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\">private static void testExecute() &#123;<br>       ExecutorService executorService = Executors.newFixedThreadPool(2);<br>       Runnable runnable = buildRunnable();<br>       executorService.execute(runnable);<br>       System.out.println(&quot;hello world=========&quot;);<br>   &#125;<br></code></pre></td></tr></table></figure>\n<p>在main方法中调用该方法，结果如下：</p>\n<img src=\"/2024/04/02/%E7%BA%BF%E7%A8%8B%E6%B1%A0/image.png\" class=\"\">\n<h5 id=\"submit\"><a href=\"#submit\" class=\"headerlink\" title=\"submit\"></a>submit</h5><p>submit方法会将一个Callable或Runnable任务提交给ExecutorService并返回future类型的结果。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\">private static void testSubmit() throws ExecutionException, InterruptedException &#123;<br>       ExecutorService executorService = Executors.newFixedThreadPool(2);<br>       Runnable runnable = buildRunnable();<br>       List&lt;Callable<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">String</span>&gt;</span>&gt; callableTasks = buildCallableTasks();<br>       Future&lt;?&gt; runnableFuture = executorService.submit(runnable);<br>       List&lt;Future<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">String</span>&gt;</span>&gt; callableFutures = new ArrayList<span class=\"hljs-tag\">&lt;&gt;</span>();<br>       for (Callable<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">String</span>&gt;</span> callableTask : callableTasks) &#123;<br>           callableFutures.add(executorService.submit(callableTask));<br>       &#125;<br>       System.out.println(runnableFuture.get());<br>       for (Future<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">String</span>&gt;</span> callableFuture : callableFutures) &#123;<br>           System.out.println(callableFuture.get());<br>       &#125;<br>   &#125;<br></code></pre></td></tr></table></figure>\n<p>通过future类的get方法，能获取返回的结果，如果提交的是一个Runnable任务，那么通过future的get方法，返回的是一个null，如下图所示：</p>\n<img src=\"/2024/04/02/%E7%BA%BF%E7%A8%8B%E6%B1%A0/image(1).png\" class=\"\">\n<h5 id=\"invokeAny\"><a href=\"#invokeAny\" class=\"headerlink\" title=\"invokeAny\"></a>invokeAny</h5><p>invokeAny方法将一组任务分配给ExecutorService，使每个任务执行，并返回任意一个成功执行的任务结果。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\">private static void testInvokeAny() throws ExecutionException, InterruptedException &#123;<br>      ExecutorService executorService = Executors.newFixedThreadPool(2);<br>      List&lt;Callable<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">String</span>&gt;</span>&gt; callableTasks = buildCallableTasks();<br>      String result = executorService.invokeAny(callableTasks);<br>      System.out.println(result);<br>  &#125;<br></code></pre></td></tr></table></figure>\n<p>结果如下所示：</p>\n<img src=\"/2024/04/02/%E7%BA%BF%E7%A8%8B%E6%B1%A0/image(2).png\" class=\"\">\n<h5 id=\"invokeAll\"><a href=\"#invokeAll\" class=\"headerlink\" title=\"invokeAll\"></a>invokeAll</h5><p>invokeAll方法将一组任务分配给ExecutorService，使每个任务执行，并以Future类型的对象列表形式返回所有任务执行的结果。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\">private static void testInvokeAll() throws InterruptedException, ExecutionException &#123;<br>       ExecutorService executorService = Executors.newFixedThreadPool(2);<br>       List&lt;Callable<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">String</span>&gt;</span>&gt; callableTasks = buildCallableTasks();<br>       List&lt;Future<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">String</span>&gt;</span>&gt; futures = executorService.invokeAll(callableTasks);<br>       for (Future<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">String</span>&gt;</span> future : futures) &#123;<br>           System.out.println(future.get());<br>       &#125;<br>   &#125;<br></code></pre></td></tr></table></figure>\n<p>结果如下：</p>\n<img src=\"/2024/04/02/%E7%BA%BF%E7%A8%8B%E6%B1%A0/image(3).png\" class=\"\">\n<h4 id=\"关闭ExecutorService\"><a href=\"#关闭ExecutorService\" class=\"headerlink\" title=\"关闭ExecutorService\"></a>关闭ExecutorService</h4><p>一般情况下，ExecutorService并不会自动关闭，即使所有任务都执行完毕，或者没有要处理的任务，也不会自动销毁ExecutorService，会一直处于等待状态，等待我们给他分配新的工作。当应用程序需要处理不定期出现的任务时，这种机制很有用，但是也带来一些副作用：即使应用程序到达它的终点，也不会被停止，因为等待ExecutorService将导致JVM继续运行，这样，我们就需要主动关闭Executor Service。<br>要关闭ExecutorService，可以使用shutdown方法或shutdownNow方法</p>\n<h5 id=\"shutdown\"><a href=\"#shutdown\" class=\"headerlink\" title=\"shutdown\"></a>shutdown</h5><p>shutdown方法并保护会立即销毁ExecutorService实例，而是首先让ExecutorService停止接受新任务，并且在所有正在运行的线程完成当前工作后关闭。</p>\n<h5 id=\"shutdownNow\"><a href=\"#shutdownNow\" class=\"headerlink\" title=\"shutdownNow\"></a>shutdownNow</h5><p>shutdownNow() 方法会尝试立即销毁 ExecutorService 实例，所以并不能保证所有正在运行的线程将同时停止。该方法会返回等待处理的任务列表，由开发人员自行决定如何处理这些任务。<br>因为提供了两个方法，因此关闭 ExecutorService 实例的最佳实战 （ 也是 Oracle 所推荐的 ）就是同时使用这两种方法并结合 awaitTermination() 方法。<br>使用这种方式，ExecutorService 首先停止执行新任务，等待指定的时间段完成所有任务。如果该时间到期，则立即停止执行。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\">private static void testInvokeAll() throws InterruptedException, ExecutionException &#123;<br>     ExecutorService executorService = Executors.newFixedThreadPool(2);<br>     List&lt;Callable<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">String</span>&gt;</span>&gt; callableTasks = buildCallableTasks();<br>     List&lt;Future<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">String</span>&gt;</span>&gt; futures = executorService.invokeAll(callableTasks);<br>     for (Future<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">String</span>&gt;</span> future : futures) &#123;<br>         System.out.println(future.get());<br>     &#125;<br>     executorService.shutdown();<br>     try &#123;<br>         if (!executorService.awaitTermination(800, TimeUnit.MILLISECONDS)) &#123;<br>             executorService.shutdownNow();<br>         &#125;<br>     &#125; catch (InterruptedException e) &#123;<br>         executorService.shutdownNow();<br>     &#125;<br> &#125;<br></code></pre></td></tr></table></figure>\n<h3 id=\"Future接口\"><a href=\"#Future接口\" class=\"headerlink\" title=\"Future接口\"></a>Future接口</h3><p>在ExecutorService的submit方法、invokeAll方法，都会返回一个Future对象或Future对象集合，这些Future接口的对象允许我们获取任务执行的结果或检查任务状态（运行中还是执行完毕）</p>\n<h4 id=\"get方法\"><a href=\"#get方法\" class=\"headerlink\" title=\"get方法\"></a>get方法</h4><p>future接口提供一个特殊的阻塞方法get，它返回callable任务执行的实际结果，但如果是runnable任务，只会返回null。此外，正在执行的任务随时可能抛出异常或中断执行，因此我们要将get调用放在try catch语句块中，以捕获InterruptedException或ExecutionException异常。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\">private static void testFutureGet() &#123;<br>      ExecutorService executorService = Executors.newFixedThreadPool(2);<br>      Callable<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">String</span>&gt;</span> callable = () -&gt; &#123;<br>          System.out.println(&quot;执行callable任务&quot;);<br>          TimeUnit.MILLISECONDS.sleep(300);<br>          return &quot;callable执行完毕&quot;;<br>      &#125;;<br>      Future<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">String</span>&gt;</span> future = executorService.submit(callable);<br>      try &#123;<br>          String result = future.get();<br>          System.out.println(result);<br>      &#125; catch (InterruptedException | ExecutionException e) &#123;<br>          e.printStackTrace();<br>      &#125;<br>      executorService.shutdown();<br>      try &#123;<br>          if (!executorService.awaitTermination(800, TimeUnit.MILLISECONDS)) &#123;<br>              executorService.shutdownNow();<br>          &#125;<br>      &#125; catch (InterruptedException e) &#123;<br>          executorService.shutdownNow();<br>      &#125;<br>  &#125;<br><br></code></pre></td></tr></table></figure>\n<p>因为get方法是阻塞的，并且不知道要阻塞多长时间，因此可能导致应用程序的性能降低，如果结果数据并不重要，我们可以使用超时机制来避免长时间阻塞，也就是使用get的重载方法，第一个参数为超时时间，第二个参数为时间的单位。如果在超时时间内正常结束，那么返回Future的结果，如果超时了还没结束，那么将抛出TimeoutExeception异常。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\">private static void testFutureGet() &#123;<br>        ExecutorService executorService = Executors.newFixedThreadPool(2);<br>        Callable<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">String</span>&gt;</span> callable = () -&gt; &#123;<br>            System.out.println(&quot;执行callable任务&quot;);<br>            TimeUnit.MILLISECONDS.sleep(300);<br>            return &quot;callable执行完毕&quot;;<br>        &#125;;<br>        Future<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">String</span>&gt;</span> future = executorService.submit(callable);<br>        try &#123;<br>            String result = future.get(400, TimeUnit.MILLISECONDS);<br>            System.out.println(result);<br>        &#125; catch (InterruptedException | ExecutionException | TimeoutException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br><br>        Callable<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">String</span>&gt;</span> callable2 = () -&gt; &#123;<br>            System.out.println(&quot;执行callable任务&quot;);<br>            TimeUnit.MILLISECONDS.sleep(500);<br>            return &quot;callable执行完毕&quot;;<br>        &#125;;<br>        Future<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">String</span>&gt;</span> future2 = executorService.submit(callable2);<br>        try &#123;<br>            String result = future2.get(400, TimeUnit.MILLISECONDS);<br>            System.out.println(result);<br>        &#125; catch (InterruptedException | ExecutionException | TimeoutException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        executorService.shutdown();<br>        try &#123;<br>            if (!executorService.awaitTermination(800, TimeUnit.MILLISECONDS)) &#123;<br>                executorService.shutdownNow();<br>            &#125;<br>        &#125; catch (InterruptedException e) &#123;<br>            executorService.shutdownNow();<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure>\n<p>执行结果如下，第一个任务没有超时，所以能正常获取结果，第二个任务超时，所以会抛出异常。</p>\n<img src=\"/2024/04/02/%E7%BA%BF%E7%A8%8B%E6%B1%A0/image(4).png\" class=\"\">\n<h4 id=\"其他方法\"><a href=\"#其他方法\" class=\"headerlink\" title=\"其他方法\"></a>其他方法</h4><p>除了get方法外，Future还提供许多方法，主要的方法如下：<br>1）isDone： 检查已分配的任务是否已处理<br>2）cancel： 取消任务执行<br>3）isCancelled：检查任务是否已取消</p>\n<h3 id=\"ScheduledExecutorService接口\"><a href=\"#ScheduledExecutorService接口\" class=\"headerlink\" title=\"ScheduledExecutorService接口\"></a>ScheduledExecutorService接口</h3><p>ScheduledExecutorService接口用于在一些预定义的延迟之后运行任务或定期运行任务。我们可以通过Executors类的工厂方法实例化ScheduledExecutorService，如下：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\">ScheduledExecutorService scheduledExecutorService = Executors.newSingleThreadScheduledExecutor();<br></code></pre></td></tr></table></figure>\n<p>在ScheduledExecutorService接口中，有三个主要方法：<br>1）schedule：允许在指定的延迟后执行一次任务。<br>2）scheduleAtFixedRate：允许在指定的初始延迟后执行任务，然后以一定的周期重复执行，其中period参数用于指定两个任务的开始时间之间的间隔时间，因此任务执行的频率是固定的。<br>3）scheduleWithFixedDelay：类似于scheduleAtFixedRate，它也重复执行给定的任务，单period参数用于指定前一个任务的结束和下一个任务的开始之间的间隔时间，也就是指定下一个任务延时多久后才执行，执行频率可能会有所不同，具体取决于执行任务给定任务所需的时间。</p>\n<h4 id=\"scheduled方法\"><a href=\"#scheduled方法\" class=\"headerlink\" title=\"scheduled方法\"></a>scheduled方法</h4><p>假设要在固定延迟后安排某个任务的执行，可以使用ScheduledExecutorService实例的scheduled方法：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\">private static void testScheduled() &#123;<br>        ScheduledExecutorService scheduledExecutorService = Executors.newSingleThreadScheduledExecutor();<br>        Callable<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">String</span>&gt;</span> callable = () -&gt; &#123;<br>            System.out.println(&quot;执行callable任务====&quot;);<br>            return &quot;callable&quot;;<br>        &#125;;<br>        ScheduledFuture<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">String</span>&gt;</span> schedule = scheduledExecutorService.schedule(callable, 1, TimeUnit.SECONDS);<br>        System.out.println(&quot;主线程运行中========&quot;);<br>        try &#123;<br>            System.out.println(schedule.get());<br>        &#125; catch (InterruptedException | ExecutionException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br><br>        scheduledExecutorService.shutdown();<br>        try &#123;<br>            if (!scheduledExecutorService.awaitTermination(800, TimeUnit.MILLISECONDS)) &#123;<br>                scheduledExecutorService.shutdownNow();<br>            &#125;<br>        &#125; catch (InterruptedException  e) &#123;<br>            scheduledExecutorService.shutdownNow();<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure>\n<p>结果如下，在延迟一秒后，才开始执行线程任务：</p>\n<img src=\"/2024/04/02/%E7%BA%BF%E7%A8%8B%E6%B1%A0/image(5).png\" class=\"\">\n<h4 id=\"scheduleAtFixedRate方法\"><a href=\"#scheduleAtFixedRate方法\" class=\"headerlink\" title=\"scheduleAtFixedRate方法\"></a>scheduleAtFixedRate方法</h4><p>当我们需要在固定延迟后，定期执行任务时，可以使用scheduleAtFixedRate方法，如下所示，每隔500毫秒执行相同的任务：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\">private static void testScheduleAtFixRate() &#123;<br>       ScheduledExecutorService scheduledExecutorService = Executors.newSingleThreadScheduledExecutor();<br>       Runnable runnable = () -&gt; &#123;<br>           System.out.println(System.currentTimeMillis());<br>           System.out.println(&quot;执行callable任务====&quot;);<br>       &#125;;<br>       // 延迟1秒后，每间隔2秒执行一次<br>       scheduledExecutorService.scheduleAtFixedRate(runnable, 1, 2, TimeUnit.SECONDS);<br>   &#125;<br></code></pre></td></tr></table></figure>\n<p>结果如下所示，从时间戳我们可以看出，确实是每隔2秒执行一次</p>\n<img src=\"/2024/04/02/%E7%BA%BF%E7%A8%8B%E6%B1%A0/image(6).png\" class=\"\">\n<p>如果任务执行时间比间隔时间长，那么scheduledExecutorService将等到当前任务执行后再开始下一个任务</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\">private static void testScheduleAtFixRate() &#123;<br>       ScheduledExecutorService scheduledExecutorService = Executors.newSingleThreadScheduledExecutor();<br>       Runnable runnable = () -&gt; &#123;<br>           System.out.println(System.currentTimeMillis());<br>           try &#123;<br>               TimeUnit.SECONDS.sleep(3);<br>           &#125; catch (InterruptedException e) &#123;<br>               throw new RuntimeException(e);<br>           &#125;<br>           System.out.println(&quot;执行callable任务====&quot;);<br>       &#125;;<br>       // 延迟1秒后，每间隔2秒执行一次<br>       scheduledExecutorService.scheduleAtFixedRate(runnable, 1, 2, TimeUnit.SECONDS);<br>   &#125;<br></code></pre></td></tr></table></figure>\n<p>如下所示，我们执行任务需要3秒，而间隔时间是2秒，通过打印结果可以看出，任务之间间隔3秒，也就是会等待任务执行完成后才开始下一个任务：</p>\n<img src=\"/2024/04/02/%E7%BA%BF%E7%A8%8B%E6%B1%A0/image(7).png\" class=\"\">\n<h4 id=\"scheduleWithFixedDelay方法\"><a href=\"#scheduleWithFixedDelay方法\" class=\"headerlink\" title=\"scheduleWithFixedDelay方法\"></a>scheduleWithFixedDelay方法</h4><p>如果任务之间必须具有固定长度的延迟，那么可以使用scheduleWithFixedDelay方法。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\">private static void testScheduleWithFixDelay() &#123;<br>     ScheduledExecutorService scheduledExecutorService = Executors.newSingleThreadScheduledExecutor();<br>     Runnable runnable = () -&gt; &#123;<br>         System.out.println(System.currentTimeMillis());<br>         try &#123;<br>             TimeUnit.SECONDS.sleep(3);<br>         &#125; catch (InterruptedException e) &#123;<br>             throw new RuntimeException(e);<br>         &#125;<br>         System.out.println(&quot;执行callable任务====&quot;);<br>     &#125;;<br>     // 延迟1秒后，每间隔2秒执行一次<br>     scheduledExecutorService.scheduleWithFixedDelay(runnable, 1, 2, TimeUnit.SECONDS);<br> &#125;<br><br></code></pre></td></tr></table></figure>\n<p>在上述代码中，任务执行时长需要3秒，然后我们设置延迟时间为2秒，最终执行结果如下，从时间戳中可以看出，在上一个任务执行完毕后，间隔2秒才会开始下一个任务，因此任务与任务间隔时长为5秒。</p>\n<img src=\"/2024/04/02/%E7%BA%BF%E7%A8%8B%E6%B1%A0/image(8).png\" class=\"\">\n<h3 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h3><p><a href=\"https://blog.csdn.net/qq_21484461/article/details/133101696\">https://blog.csdn.net/qq_21484461&#x2F;article&#x2F;details&#x2F;133101696</a></p>\n"},{"title":"SpringGateway学习1","date":"2024-04-02T11:56:52.000Z","_content":"### 1. 背景\nAPI网关是一个服务器，是系统对外的唯一入口，对于服务数量众多、复杂度比较高、规模比较大的业务来说，引入API网关有以下好处：\n1） 聚合接口使得服务对调用者透明，客户端与后端耦合度降低\n2） 聚合后台服务，节省流量，提高性能和用户体验\n3）提供安全、流控、过滤、缓存、计费、监控等API管理功能\nSpringCloud Gateway是基于Spring生态系统之上搭建的API网关，包括：Spring5， SpringBoot2和Project Reactor。Spring Cloud Gateway旨在提供一种简单有效的方法来路由到API，并为它们提供领域的关注点，例如安全性、监控/指标、限流等。\n### 2. 核心概念和原理\n#### 2.1. 核心概念\n路由（Route）：路由信息由ID、目标URL、一组断言和一组过滤器组成，如果断言路由为真，说明请求的URI和配置匹配\n断言（Predicate）：Java8中的断言函数，SpringCloud Gateway中的断言函数，允许开发者去定义匹配来自Http Request中的任何信息，比如请求头和参数等\n过滤器（Filter）：在SpringCloud Gateway中，有两种过滤器：Gateway Filter 和 Global Filter，过滤器负责对请求和响应进行处理。\n#### 2.2. 工作原理\n{% asset_img image1.png %}\n客户端向Spring Cloud Gateway发出请求，由网关处理程序Gateway Handler Mapping映射确定与请求相匹配的路由（route），将其发送到网关web处理程序Gateway Web Handler，该程序通过指定的过滤器将请求发送到实际的服务，执行业务逻辑，然后返回。\n过滤器由虚线分隔的原因是，过滤器可以在发送代理请求之前和之后运行逻辑。所有 pre过滤器逻辑均被执行。然后发出代理清求。发出代理清求后，将运行post过滤器逻辑。\n\n### 3. 入门案例\n#### 3.1. 创建普通的web项目，并测试相关接口\n创建一个maven项目，在该maven项目下，创建三个子模块，假设分别命名为gateway、app-service1、app-service2\n{% asset_img image2.png %}\n在父模块的pom.xml中，添加相关的版本管理\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n\n    <groupId>org.example</groupId>\n    <artifactId>springcloudgateway1</artifactId>\n    <packaging>pom</packaging>\n    <version>1.0-SNAPSHOT</version>\n    <modules>\n        <module>gateway</module>\n        <module>app-service1</module>\n        <module>app-service2</module>\n    </modules>\n\n    <properties>\n        <maven.compiler.source>8</maven.compiler.source>\n        <maven.compiler.target>8</maven.compiler.target>\n        <spring.boot.version>2.5.2</spring.boot.version>\n        <spring.cloud.version>2020.0.3</spring.cloud.version>\n        <spring.cloud.alibaba.version>2.2.6.RELEASE</spring.cloud.alibaba.version>\n    </properties>\n\n    <!--Spring版本-->\n    <dependencyManagement>\n        <dependencies>\n            <dependency>\n                <groupId>com.alibaba.cloud</groupId>\n                <artifactId>spring-cloud-alibaba-dependencies</artifactId>\n                <version>${spring.cloud.alibaba.version}</version>\n                <type>pom</type>\n                <scope>import</scope>\n            </dependency>\n            <dependency>\n                <groupId>org.springframework.boot</groupId>\n                <artifactId>spring-boot-dependencies</artifactId>\n                <version>${spring.boot.version}</version>\n                <type>pom</type>\n                <scope>import</scope>\n            </dependency>\n            <dependency>\n                <groupId>org.springframework.cloud</groupId>\n                <artifactId>spring-cloud-dependencies</artifactId>\n                <version>${spring.cloud.version}</version>\n                <type>pom</type>\n                <scope>import</scope>\n            </dependency>\n        </dependencies>\n    </dependencyManagement>\n\n    <build>\n        <plugins>\n            <plugin>\n                <groupId>org.springframework.boot</groupId>\n                <artifactId>spring-boot-maven-plugin</artifactId>\n            </plugin>\n        </plugins>\n    </build>\n\n</project>\n```\n在gateway模块，添加下列依赖：\n``` xml\n<dependencies>\n        <dependency>\n            <groupId>org.springframework.cloud</groupId>\n            <artifactId>spring-cloud-starter-gateway</artifactId>\n        </dependency>\n    </dependencies>\n```\napp-service1和app-service2模块，添加下列依赖：\n``` xml\n<dependencies>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-web</artifactId>\n        </dependency>\n    </dependencies>\n```\n在app-service1模块，添加启动类：\n``` java\npackage com.young;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\n\n@SpringBootApplication\npublic class Service1App {\n    public static void main(String[] args) {\n        SpringApplication.run(Service1App.class, args);\n    }\n}\n```\n添加一个controller类用于测试：\n``` java\n@RestController\n@RequestMapping(value = \"/app1\")\npublic class App1Controller {\n\n    @GetMapping(value = \"/test\")\n    public Object test() {\n        return \"app1\";\n    }\n}\n```\napplication.yml配置信息如下：\n``` yml\nserver:\n  port: 9000\nspring:\n  application:\n    name: app-service1\n```\n在app-service2中，添加启动类\n```\n@SpringBootApplication\npublic class Service2App {\n    public static void main(String[] args) {\n        SpringApplication.run(Service2App.class, args);\n    }\n}\n```\n对外controller\n``` java\n@RestController\n@RequestMapping(value = \"/app2\")\npublic class App2Controller {\n\n    @GetMapping(value = \"/test\")\n    public Object test() {\n        return \"app2\";\n    }\n}\n```\n配置文件：\n``` yml\nserver:\n  port: 9001\nspring:\n  application:\n    name: app-service2\n```\n启动app-service1和app-service2，然后访问http://localhost:9000/app1/test和http://localhost:9001/app2/test，结果如下：\n{% asset_img image3.png %}\n{% asset_img image4.png %}\n#### 3.2. 配置网关转发\n在gateway模块，添加启动类：\n```java\n@SpringBootApplication\npublic class GatewayApp {\n    public static void main(String[] args) {\n        SpringApplication.run(GatewayApp.class, args);\n    }\n}\n```\n修改配置文件，配置路由转发规则\n``` yml\nserver:\n  port: 80\nspring:\n  cloud:\n    gateway:\n      enabled: true\n      routes:\n        - id: app-service1\n          uri: http://localhost:9000\n          predicates: #断言，为真则匹配成功\n            - Path=/app1/** #配置规则Path，如果是app1开头的请求，会转发到目标URL\n        - id: app-service2\n          uri: http://localhost:9001\n          predicates:\n            - Path=/app2/**\n```\n启动gateway项目，使用gateway的端口，进行测试\n{% asset_img image5.png %}\n{% asset_img image6.png %}","source":"_posts/SpringGateway学习1.md","raw":"---\ntitle: SpringGateway学习1\ndate: 2024-04-02 19:56:52\ntags: \n    - SpringBoot\n    - SpringGateway\n---\n### 1. 背景\nAPI网关是一个服务器，是系统对外的唯一入口，对于服务数量众多、复杂度比较高、规模比较大的业务来说，引入API网关有以下好处：\n1） 聚合接口使得服务对调用者透明，客户端与后端耦合度降低\n2） 聚合后台服务，节省流量，提高性能和用户体验\n3）提供安全、流控、过滤、缓存、计费、监控等API管理功能\nSpringCloud Gateway是基于Spring生态系统之上搭建的API网关，包括：Spring5， SpringBoot2和Project Reactor。Spring Cloud Gateway旨在提供一种简单有效的方法来路由到API，并为它们提供领域的关注点，例如安全性、监控/指标、限流等。\n### 2. 核心概念和原理\n#### 2.1. 核心概念\n路由（Route）：路由信息由ID、目标URL、一组断言和一组过滤器组成，如果断言路由为真，说明请求的URI和配置匹配\n断言（Predicate）：Java8中的断言函数，SpringCloud Gateway中的断言函数，允许开发者去定义匹配来自Http Request中的任何信息，比如请求头和参数等\n过滤器（Filter）：在SpringCloud Gateway中，有两种过滤器：Gateway Filter 和 Global Filter，过滤器负责对请求和响应进行处理。\n#### 2.2. 工作原理\n{% asset_img image1.png %}\n客户端向Spring Cloud Gateway发出请求，由网关处理程序Gateway Handler Mapping映射确定与请求相匹配的路由（route），将其发送到网关web处理程序Gateway Web Handler，该程序通过指定的过滤器将请求发送到实际的服务，执行业务逻辑，然后返回。\n过滤器由虚线分隔的原因是，过滤器可以在发送代理请求之前和之后运行逻辑。所有 pre过滤器逻辑均被执行。然后发出代理清求。发出代理清求后，将运行post过滤器逻辑。\n\n### 3. 入门案例\n#### 3.1. 创建普通的web项目，并测试相关接口\n创建一个maven项目，在该maven项目下，创建三个子模块，假设分别命名为gateway、app-service1、app-service2\n{% asset_img image2.png %}\n在父模块的pom.xml中，添加相关的版本管理\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n\n    <groupId>org.example</groupId>\n    <artifactId>springcloudgateway1</artifactId>\n    <packaging>pom</packaging>\n    <version>1.0-SNAPSHOT</version>\n    <modules>\n        <module>gateway</module>\n        <module>app-service1</module>\n        <module>app-service2</module>\n    </modules>\n\n    <properties>\n        <maven.compiler.source>8</maven.compiler.source>\n        <maven.compiler.target>8</maven.compiler.target>\n        <spring.boot.version>2.5.2</spring.boot.version>\n        <spring.cloud.version>2020.0.3</spring.cloud.version>\n        <spring.cloud.alibaba.version>2.2.6.RELEASE</spring.cloud.alibaba.version>\n    </properties>\n\n    <!--Spring版本-->\n    <dependencyManagement>\n        <dependencies>\n            <dependency>\n                <groupId>com.alibaba.cloud</groupId>\n                <artifactId>spring-cloud-alibaba-dependencies</artifactId>\n                <version>${spring.cloud.alibaba.version}</version>\n                <type>pom</type>\n                <scope>import</scope>\n            </dependency>\n            <dependency>\n                <groupId>org.springframework.boot</groupId>\n                <artifactId>spring-boot-dependencies</artifactId>\n                <version>${spring.boot.version}</version>\n                <type>pom</type>\n                <scope>import</scope>\n            </dependency>\n            <dependency>\n                <groupId>org.springframework.cloud</groupId>\n                <artifactId>spring-cloud-dependencies</artifactId>\n                <version>${spring.cloud.version}</version>\n                <type>pom</type>\n                <scope>import</scope>\n            </dependency>\n        </dependencies>\n    </dependencyManagement>\n\n    <build>\n        <plugins>\n            <plugin>\n                <groupId>org.springframework.boot</groupId>\n                <artifactId>spring-boot-maven-plugin</artifactId>\n            </plugin>\n        </plugins>\n    </build>\n\n</project>\n```\n在gateway模块，添加下列依赖：\n``` xml\n<dependencies>\n        <dependency>\n            <groupId>org.springframework.cloud</groupId>\n            <artifactId>spring-cloud-starter-gateway</artifactId>\n        </dependency>\n    </dependencies>\n```\napp-service1和app-service2模块，添加下列依赖：\n``` xml\n<dependencies>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-web</artifactId>\n        </dependency>\n    </dependencies>\n```\n在app-service1模块，添加启动类：\n``` java\npackage com.young;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\n\n@SpringBootApplication\npublic class Service1App {\n    public static void main(String[] args) {\n        SpringApplication.run(Service1App.class, args);\n    }\n}\n```\n添加一个controller类用于测试：\n``` java\n@RestController\n@RequestMapping(value = \"/app1\")\npublic class App1Controller {\n\n    @GetMapping(value = \"/test\")\n    public Object test() {\n        return \"app1\";\n    }\n}\n```\napplication.yml配置信息如下：\n``` yml\nserver:\n  port: 9000\nspring:\n  application:\n    name: app-service1\n```\n在app-service2中，添加启动类\n```\n@SpringBootApplication\npublic class Service2App {\n    public static void main(String[] args) {\n        SpringApplication.run(Service2App.class, args);\n    }\n}\n```\n对外controller\n``` java\n@RestController\n@RequestMapping(value = \"/app2\")\npublic class App2Controller {\n\n    @GetMapping(value = \"/test\")\n    public Object test() {\n        return \"app2\";\n    }\n}\n```\n配置文件：\n``` yml\nserver:\n  port: 9001\nspring:\n  application:\n    name: app-service2\n```\n启动app-service1和app-service2，然后访问http://localhost:9000/app1/test和http://localhost:9001/app2/test，结果如下：\n{% asset_img image3.png %}\n{% asset_img image4.png %}\n#### 3.2. 配置网关转发\n在gateway模块，添加启动类：\n```java\n@SpringBootApplication\npublic class GatewayApp {\n    public static void main(String[] args) {\n        SpringApplication.run(GatewayApp.class, args);\n    }\n}\n```\n修改配置文件，配置路由转发规则\n``` yml\nserver:\n  port: 80\nspring:\n  cloud:\n    gateway:\n      enabled: true\n      routes:\n        - id: app-service1\n          uri: http://localhost:9000\n          predicates: #断言，为真则匹配成功\n            - Path=/app1/** #配置规则Path，如果是app1开头的请求，会转发到目标URL\n        - id: app-service2\n          uri: http://localhost:9001\n          predicates:\n            - Path=/app2/**\n```\n启动gateway项目，使用gateway的端口，进行测试\n{% asset_img image5.png %}\n{% asset_img image6.png %}","slug":"SpringGateway学习1","published":1,"updated":"2024-04-03T05:45:49.186Z","_id":"cluic023d0000tsvla7f0hjfz","comments":1,"layout":"post","photos":[],"content":"<h3 id=\"1-背景\"><a href=\"#1-背景\" class=\"headerlink\" title=\"1. 背景\"></a>1. 背景</h3><p>API网关是一个服务器，是系统对外的唯一入口，对于服务数量众多、复杂度比较高、规模比较大的业务来说，引入API网关有以下好处：<br>1） 聚合接口使得服务对调用者透明，客户端与后端耦合度降低<br>2） 聚合后台服务，节省流量，提高性能和用户体验<br>3）提供安全、流控、过滤、缓存、计费、监控等API管理功能<br>SpringCloud Gateway是基于Spring生态系统之上搭建的API网关，包括：Spring5， SpringBoot2和Project Reactor。Spring Cloud Gateway旨在提供一种简单有效的方法来路由到API，并为它们提供领域的关注点，例如安全性、监控&#x2F;指标、限流等。</p>\n<h3 id=\"2-核心概念和原理\"><a href=\"#2-核心概念和原理\" class=\"headerlink\" title=\"2. 核心概念和原理\"></a>2. 核心概念和原理</h3><h4 id=\"2-1-核心概念\"><a href=\"#2-1-核心概念\" class=\"headerlink\" title=\"2.1. 核心概念\"></a>2.1. 核心概念</h4><p>路由（Route）：路由信息由ID、目标URL、一组断言和一组过滤器组成，如果断言路由为真，说明请求的URI和配置匹配<br>断言（Predicate）：Java8中的断言函数，SpringCloud Gateway中的断言函数，允许开发者去定义匹配来自Http Request中的任何信息，比如请求头和参数等<br>过滤器（Filter）：在SpringCloud Gateway中，有两种过滤器：Gateway Filter 和 Global Filter，过滤器负责对请求和响应进行处理。</p>\n<h4 id=\"2-2-工作原理\"><a href=\"#2-2-工作原理\" class=\"headerlink\" title=\"2.2. 工作原理\"></a>2.2. 工作原理</h4><img src=\"/2024/04/02/SpringGateway%E5%AD%A6%E4%B9%A01/image1.png\" class=\"\">\n<p>客户端向Spring Cloud Gateway发出请求，由网关处理程序Gateway Handler Mapping映射确定与请求相匹配的路由（route），将其发送到网关web处理程序Gateway Web Handler，该程序通过指定的过滤器将请求发送到实际的服务，执行业务逻辑，然后返回。<br>过滤器由虚线分隔的原因是，过滤器可以在发送代理请求之前和之后运行逻辑。所有 pre过滤器逻辑均被执行。然后发出代理清求。发出代理清求后，将运行post过滤器逻辑。</p>\n<h3 id=\"3-入门案例\"><a href=\"#3-入门案例\" class=\"headerlink\" title=\"3. 入门案例\"></a>3. 入门案例</h3><h4 id=\"3-1-创建普通的web项目，并测试相关接口\"><a href=\"#3-1-创建普通的web项目，并测试相关接口\" class=\"headerlink\" title=\"3.1. 创建普通的web项目，并测试相关接口\"></a>3.1. 创建普通的web项目，并测试相关接口</h4><p>创建一个maven项目，在该maven项目下，创建三个子模块，假设分别命名为gateway、app-service1、app-service2</p>\n<img src=\"/2024/04/02/SpringGateway%E5%AD%A6%E4%B9%A01/image2.png\" class=\"\">\n<p>在父模块的pom.xml中，添加相关的版本管理</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-meta\">&lt;?xml version=<span class=\"hljs-string\">&quot;1.0&quot;</span> encoding=<span class=\"hljs-string\">&quot;UTF-8&quot;</span>?&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">project</span> <span class=\"hljs-attr\">xmlns</span>=<span class=\"hljs-string\">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span><br><span class=\"hljs-tag\">         <span class=\"hljs-attr\">xmlns:xsi</span>=<span class=\"hljs-string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class=\"hljs-tag\">         <span class=\"hljs-attr\">xsi:schemaLocation</span>=<span class=\"hljs-string\">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">modelVersion</span>&gt;</span>4.0.0<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">modelVersion</span>&gt;</span><br><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.example<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>springcloudgateway1<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">packaging</span>&gt;</span>pom<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">packaging</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>1.0-SNAPSHOT<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">modules</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">module</span>&gt;</span>gateway<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">module</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">module</span>&gt;</span>app-service1<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">module</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">module</span>&gt;</span>app-service2<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">module</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">modules</span>&gt;</span><br><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">properties</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">maven.compiler.source</span>&gt;</span>8<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">maven.compiler.source</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">maven.compiler.target</span>&gt;</span>8<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">maven.compiler.target</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">spring.boot.version</span>&gt;</span>2.5.2<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">spring.boot.version</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">spring.cloud.version</span>&gt;</span>2020.0.3<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">spring.cloud.version</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">spring.cloud.alibaba.version</span>&gt;</span>2.2.6.RELEASE<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">spring.cloud.alibaba.version</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">properties</span>&gt;</span><br><br>    <span class=\"hljs-comment\">&lt;!--Spring版本--&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependencyManagement</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependencies</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span><br>                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>com.alibaba.cloud<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span><br>                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>spring-cloud-alibaba-dependencies<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span><br>                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>$&#123;spring.cloud.alibaba.version&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span><br>                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">type</span>&gt;</span>pom<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">type</span>&gt;</span><br>                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">scope</span>&gt;</span>import<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">scope</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span><br>                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span><br>                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>spring-boot-dependencies<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span><br>                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>$&#123;spring.boot.version&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span><br>                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">type</span>&gt;</span>pom<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">type</span>&gt;</span><br>                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">scope</span>&gt;</span>import<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">scope</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span><br>                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.springframework.cloud<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span><br>                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>spring-cloud-dependencies<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span><br>                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>$&#123;spring.cloud.version&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span><br>                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">type</span>&gt;</span>pom<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">type</span>&gt;</span><br>                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">scope</span>&gt;</span>import<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">scope</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependencies</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependencyManagement</span>&gt;</span><br><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">build</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">plugins</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">plugin</span>&gt;</span><br>                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span><br>                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">plugin</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">plugins</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">build</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">project</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<p>在gateway模块，添加下列依赖：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependencies</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.springframework.cloud<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>spring-cloud-starter-gateway<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<p>app-service1和app-service2模块，添加下列依赖：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependencies</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>spring-boot-starter-web<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<p>在app-service1模块，添加启动类：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> com.young;<br><br><span class=\"hljs-keyword\">import</span> org.springframework.boot.SpringApplication;<br><span class=\"hljs-keyword\">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;<br><br><span class=\"hljs-meta\">@SpringBootApplication</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Service1App</span> &#123;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> &#123;<br>        SpringApplication.run(Service1App.class, args);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>添加一个controller类用于测试：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@RestController</span><br><span class=\"hljs-meta\">@RequestMapping(value = &quot;/app1&quot;)</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">App1Controller</span> &#123;<br><br>    <span class=\"hljs-meta\">@GetMapping(value = &quot;/test&quot;)</span><br>    <span class=\"hljs-keyword\">public</span> Object <span class=\"hljs-title function_\">test</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;app1&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>application.yml配置信息如下：</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yml\"><span class=\"hljs-attr\">server:</span><br>  <span class=\"hljs-attr\">port:</span> <span class=\"hljs-number\">9000</span><br><span class=\"hljs-attr\">spring:</span><br>  <span class=\"hljs-attr\">application:</span><br>    <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">app-service1</span><br></code></pre></td></tr></table></figure>\n<p>在app-service2中，添加启动类</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs typescript\"><span class=\"hljs-meta\">@SpringBootApplication</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Service2App</span> &#123;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-built_in\">void</span> <span class=\"hljs-title function_\">main</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">String</span>[] args</span>) &#123;<br>        <span class=\"hljs-title class_\">SpringApplication</span>.<span class=\"hljs-title function_\">run</span>(<span class=\"hljs-title class_\">Service2App</span>.<span class=\"hljs-property\">class</span>, args);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>对外controller</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@RestController</span><br><span class=\"hljs-meta\">@RequestMapping(value = &quot;/app2&quot;)</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">App2Controller</span> &#123;<br><br>    <span class=\"hljs-meta\">@GetMapping(value = &quot;/test&quot;)</span><br>    <span class=\"hljs-keyword\">public</span> Object <span class=\"hljs-title function_\">test</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;app2&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>配置文件：</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yml\"><span class=\"hljs-attr\">server:</span><br>  <span class=\"hljs-attr\">port:</span> <span class=\"hljs-number\">9001</span><br><span class=\"hljs-attr\">spring:</span><br>  <span class=\"hljs-attr\">application:</span><br>    <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">app-service2</span><br></code></pre></td></tr></table></figure>\n<p>启动app-service1和app-service2，然后访问<a href=\"http://localhost:9000/app1/test%E5%92%8Chttp://localhost:9001/app2/test%EF%BC%8C%E7%BB%93%E6%9E%9C%E5%A6%82%E4%B8%8B%EF%BC%9A\">http://localhost:9000/app1/test和http://localhost:9001/app2/test，结果如下：</a></p>\n<img src=\"/2024/04/02/SpringGateway%E5%AD%A6%E4%B9%A01/image3.png\" class=\"\">\n<img src=\"/2024/04/02/SpringGateway%E5%AD%A6%E4%B9%A01/image4.png\" class=\"\">\n<h4 id=\"3-2-配置网关转发\"><a href=\"#3-2-配置网关转发\" class=\"headerlink\" title=\"3.2. 配置网关转发\"></a>3.2. 配置网关转发</h4><p>在gateway模块，添加启动类：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@SpringBootApplication</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">GatewayApp</span> &#123;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> &#123;<br>        SpringApplication.run(GatewayApp.class, args);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>修改配置文件，配置路由转发规则</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yml\"><span class=\"hljs-attr\">server:</span><br>  <span class=\"hljs-attr\">port:</span> <span class=\"hljs-number\">80</span><br><span class=\"hljs-attr\">spring:</span><br>  <span class=\"hljs-attr\">cloud:</span><br>    <span class=\"hljs-attr\">gateway:</span><br>      <span class=\"hljs-attr\">enabled:</span> <span class=\"hljs-literal\">true</span><br>      <span class=\"hljs-attr\">routes:</span><br>        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">id:</span> <span class=\"hljs-string\">app-service1</span><br>          <span class=\"hljs-attr\">uri:</span> <span class=\"hljs-string\">http://localhost:9000</span><br>          <span class=\"hljs-attr\">predicates:</span> <span class=\"hljs-comment\">#断言，为真则匹配成功</span><br>            <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">Path=/app1/**</span> <span class=\"hljs-comment\">#配置规则Path，如果是app1开头的请求，会转发到目标URL</span><br>        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">id:</span> <span class=\"hljs-string\">app-service2</span><br>          <span class=\"hljs-attr\">uri:</span> <span class=\"hljs-string\">http://localhost:9001</span><br>          <span class=\"hljs-attr\">predicates:</span><br>            <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">Path=/app2/**</span><br></code></pre></td></tr></table></figure>\n<p>启动gateway项目，使用gateway的端口，进行测试</p>\n<img src=\"/2024/04/02/SpringGateway%E5%AD%A6%E4%B9%A01/image5.png\" class=\"\">\n<img src=\"/2024/04/02/SpringGateway%E5%AD%A6%E4%B9%A01/image6.png\" class=\"\">","excerpt":"","more":"<h3 id=\"1-背景\"><a href=\"#1-背景\" class=\"headerlink\" title=\"1. 背景\"></a>1. 背景</h3><p>API网关是一个服务器，是系统对外的唯一入口，对于服务数量众多、复杂度比较高、规模比较大的业务来说，引入API网关有以下好处：<br>1） 聚合接口使得服务对调用者透明，客户端与后端耦合度降低<br>2） 聚合后台服务，节省流量，提高性能和用户体验<br>3）提供安全、流控、过滤、缓存、计费、监控等API管理功能<br>SpringCloud Gateway是基于Spring生态系统之上搭建的API网关，包括：Spring5， SpringBoot2和Project Reactor。Spring Cloud Gateway旨在提供一种简单有效的方法来路由到API，并为它们提供领域的关注点，例如安全性、监控&#x2F;指标、限流等。</p>\n<h3 id=\"2-核心概念和原理\"><a href=\"#2-核心概念和原理\" class=\"headerlink\" title=\"2. 核心概念和原理\"></a>2. 核心概念和原理</h3><h4 id=\"2-1-核心概念\"><a href=\"#2-1-核心概念\" class=\"headerlink\" title=\"2.1. 核心概念\"></a>2.1. 核心概念</h4><p>路由（Route）：路由信息由ID、目标URL、一组断言和一组过滤器组成，如果断言路由为真，说明请求的URI和配置匹配<br>断言（Predicate）：Java8中的断言函数，SpringCloud Gateway中的断言函数，允许开发者去定义匹配来自Http Request中的任何信息，比如请求头和参数等<br>过滤器（Filter）：在SpringCloud Gateway中，有两种过滤器：Gateway Filter 和 Global Filter，过滤器负责对请求和响应进行处理。</p>\n<h4 id=\"2-2-工作原理\"><a href=\"#2-2-工作原理\" class=\"headerlink\" title=\"2.2. 工作原理\"></a>2.2. 工作原理</h4><img src=\"/2024/04/02/SpringGateway%E5%AD%A6%E4%B9%A01/image1.png\" class=\"\">\n<p>客户端向Spring Cloud Gateway发出请求，由网关处理程序Gateway Handler Mapping映射确定与请求相匹配的路由（route），将其发送到网关web处理程序Gateway Web Handler，该程序通过指定的过滤器将请求发送到实际的服务，执行业务逻辑，然后返回。<br>过滤器由虚线分隔的原因是，过滤器可以在发送代理请求之前和之后运行逻辑。所有 pre过滤器逻辑均被执行。然后发出代理清求。发出代理清求后，将运行post过滤器逻辑。</p>\n<h3 id=\"3-入门案例\"><a href=\"#3-入门案例\" class=\"headerlink\" title=\"3. 入门案例\"></a>3. 入门案例</h3><h4 id=\"3-1-创建普通的web项目，并测试相关接口\"><a href=\"#3-1-创建普通的web项目，并测试相关接口\" class=\"headerlink\" title=\"3.1. 创建普通的web项目，并测试相关接口\"></a>3.1. 创建普通的web项目，并测试相关接口</h4><p>创建一个maven项目，在该maven项目下，创建三个子模块，假设分别命名为gateway、app-service1、app-service2</p>\n<img src=\"/2024/04/02/SpringGateway%E5%AD%A6%E4%B9%A01/image2.png\" class=\"\">\n<p>在父模块的pom.xml中，添加相关的版本管理</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-meta\">&lt;?xml version=<span class=\"hljs-string\">&quot;1.0&quot;</span> encoding=<span class=\"hljs-string\">&quot;UTF-8&quot;</span>?&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">project</span> <span class=\"hljs-attr\">xmlns</span>=<span class=\"hljs-string\">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span><br><span class=\"hljs-tag\">         <span class=\"hljs-attr\">xmlns:xsi</span>=<span class=\"hljs-string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class=\"hljs-tag\">         <span class=\"hljs-attr\">xsi:schemaLocation</span>=<span class=\"hljs-string\">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">modelVersion</span>&gt;</span>4.0.0<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">modelVersion</span>&gt;</span><br><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.example<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>springcloudgateway1<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">packaging</span>&gt;</span>pom<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">packaging</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>1.0-SNAPSHOT<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">modules</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">module</span>&gt;</span>gateway<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">module</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">module</span>&gt;</span>app-service1<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">module</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">module</span>&gt;</span>app-service2<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">module</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">modules</span>&gt;</span><br><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">properties</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">maven.compiler.source</span>&gt;</span>8<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">maven.compiler.source</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">maven.compiler.target</span>&gt;</span>8<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">maven.compiler.target</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">spring.boot.version</span>&gt;</span>2.5.2<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">spring.boot.version</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">spring.cloud.version</span>&gt;</span>2020.0.3<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">spring.cloud.version</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">spring.cloud.alibaba.version</span>&gt;</span>2.2.6.RELEASE<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">spring.cloud.alibaba.version</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">properties</span>&gt;</span><br><br>    <span class=\"hljs-comment\">&lt;!--Spring版本--&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependencyManagement</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependencies</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span><br>                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>com.alibaba.cloud<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span><br>                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>spring-cloud-alibaba-dependencies<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span><br>                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>$&#123;spring.cloud.alibaba.version&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span><br>                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">type</span>&gt;</span>pom<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">type</span>&gt;</span><br>                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">scope</span>&gt;</span>import<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">scope</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span><br>                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span><br>                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>spring-boot-dependencies<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span><br>                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>$&#123;spring.boot.version&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span><br>                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">type</span>&gt;</span>pom<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">type</span>&gt;</span><br>                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">scope</span>&gt;</span>import<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">scope</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span><br>                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.springframework.cloud<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span><br>                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>spring-cloud-dependencies<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span><br>                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>$&#123;spring.cloud.version&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span><br>                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">type</span>&gt;</span>pom<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">type</span>&gt;</span><br>                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">scope</span>&gt;</span>import<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">scope</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependencies</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependencyManagement</span>&gt;</span><br><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">build</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">plugins</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">plugin</span>&gt;</span><br>                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span><br>                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">plugin</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">plugins</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">build</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">project</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<p>在gateway模块，添加下列依赖：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependencies</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.springframework.cloud<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>spring-cloud-starter-gateway<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<p>app-service1和app-service2模块，添加下列依赖：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependencies</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>spring-boot-starter-web<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<p>在app-service1模块，添加启动类：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> com.young;<br><br><span class=\"hljs-keyword\">import</span> org.springframework.boot.SpringApplication;<br><span class=\"hljs-keyword\">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;<br><br><span class=\"hljs-meta\">@SpringBootApplication</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Service1App</span> &#123;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> &#123;<br>        SpringApplication.run(Service1App.class, args);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>添加一个controller类用于测试：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@RestController</span><br><span class=\"hljs-meta\">@RequestMapping(value = &quot;/app1&quot;)</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">App1Controller</span> &#123;<br><br>    <span class=\"hljs-meta\">@GetMapping(value = &quot;/test&quot;)</span><br>    <span class=\"hljs-keyword\">public</span> Object <span class=\"hljs-title function_\">test</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;app1&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>application.yml配置信息如下：</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yml\"><span class=\"hljs-attr\">server:</span><br>  <span class=\"hljs-attr\">port:</span> <span class=\"hljs-number\">9000</span><br><span class=\"hljs-attr\">spring:</span><br>  <span class=\"hljs-attr\">application:</span><br>    <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">app-service1</span><br></code></pre></td></tr></table></figure>\n<p>在app-service2中，添加启动类</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs typescript\"><span class=\"hljs-meta\">@SpringBootApplication</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Service2App</span> &#123;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-built_in\">void</span> <span class=\"hljs-title function_\">main</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">String</span>[] args</span>) &#123;<br>        <span class=\"hljs-title class_\">SpringApplication</span>.<span class=\"hljs-title function_\">run</span>(<span class=\"hljs-title class_\">Service2App</span>.<span class=\"hljs-property\">class</span>, args);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>对外controller</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@RestController</span><br><span class=\"hljs-meta\">@RequestMapping(value = &quot;/app2&quot;)</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">App2Controller</span> &#123;<br><br>    <span class=\"hljs-meta\">@GetMapping(value = &quot;/test&quot;)</span><br>    <span class=\"hljs-keyword\">public</span> Object <span class=\"hljs-title function_\">test</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;app2&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>配置文件：</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yml\"><span class=\"hljs-attr\">server:</span><br>  <span class=\"hljs-attr\">port:</span> <span class=\"hljs-number\">9001</span><br><span class=\"hljs-attr\">spring:</span><br>  <span class=\"hljs-attr\">application:</span><br>    <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">app-service2</span><br></code></pre></td></tr></table></figure>\n<p>启动app-service1和app-service2，然后访问<a href=\"http://localhost:9000/app1/test%E5%92%8Chttp://localhost:9001/app2/test%EF%BC%8C%E7%BB%93%E6%9E%9C%E5%A6%82%E4%B8%8B%EF%BC%9A\">http://localhost:9000/app1/test和http://localhost:9001/app2/test，结果如下：</a></p>\n<img src=\"/2024/04/02/SpringGateway%E5%AD%A6%E4%B9%A01/image3.png\" class=\"\">\n<img src=\"/2024/04/02/SpringGateway%E5%AD%A6%E4%B9%A01/image4.png\" class=\"\">\n<h4 id=\"3-2-配置网关转发\"><a href=\"#3-2-配置网关转发\" class=\"headerlink\" title=\"3.2. 配置网关转发\"></a>3.2. 配置网关转发</h4><p>在gateway模块，添加启动类：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@SpringBootApplication</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">GatewayApp</span> &#123;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> &#123;<br>        SpringApplication.run(GatewayApp.class, args);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>修改配置文件，配置路由转发规则</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yml\"><span class=\"hljs-attr\">server:</span><br>  <span class=\"hljs-attr\">port:</span> <span class=\"hljs-number\">80</span><br><span class=\"hljs-attr\">spring:</span><br>  <span class=\"hljs-attr\">cloud:</span><br>    <span class=\"hljs-attr\">gateway:</span><br>      <span class=\"hljs-attr\">enabled:</span> <span class=\"hljs-literal\">true</span><br>      <span class=\"hljs-attr\">routes:</span><br>        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">id:</span> <span class=\"hljs-string\">app-service1</span><br>          <span class=\"hljs-attr\">uri:</span> <span class=\"hljs-string\">http://localhost:9000</span><br>          <span class=\"hljs-attr\">predicates:</span> <span class=\"hljs-comment\">#断言，为真则匹配成功</span><br>            <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">Path=/app1/**</span> <span class=\"hljs-comment\">#配置规则Path，如果是app1开头的请求，会转发到目标URL</span><br>        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">id:</span> <span class=\"hljs-string\">app-service2</span><br>          <span class=\"hljs-attr\">uri:</span> <span class=\"hljs-string\">http://localhost:9001</span><br>          <span class=\"hljs-attr\">predicates:</span><br>            <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">Path=/app2/**</span><br></code></pre></td></tr></table></figure>\n<p>启动gateway项目，使用gateway的端口，进行测试</p>\n<img src=\"/2024/04/02/SpringGateway%E5%AD%A6%E4%B9%A01/image5.png\" class=\"\">\n<img src=\"/2024/04/02/SpringGateway%E5%AD%A6%E4%B9%A01/image6.png\" class=\"\">"},{"title":"SpringGateway学习2","date":"2024-04-02T12:08:47.000Z","_content":"### 1. 断言\n在上一节中，我们的gateway应用，它的配置文件为：\n```yml\nserver:\n  port: 80\nspring:\n  cloud:\n    gateway:\n      enabled: true\n      routes:\n        - id: app-service1\n          uri: http://localhost:9000\n          predicates: #断言，为真则匹配成功\n            - Path=/app1/** #配置规则Path，如果是app1开头的请求，会转发到目标URL\n        - id: app-service2\n          uri: http://localhost:9001\n          predicates:\n            - Path=/app2/**\n```\n这里面使用了Path断言，Path断言会根据请求的路径进行匹配，除了Path断言外，常用的断言如下图所示：\n{% asset_img image.png %}\n这里再简单介绍几个常用的断言：\n#### 1.1. After\nAfter用于匹配在指定日期时间之后发生的请求，也就是说，只有在指定日期之后的请求，才能被转发，假设我们的配置如下：\n```yml \nserver:\n  port: 80\nspring:\n  cloud:\n    gateway:\n      enabled: true\n      routes:\n        - id: app-service1\n          uri: http://localhost:9000\n          predicates: #断言，为真则匹配成功\n            - After=2025-01-20T09:08:01.000+08:00[Asia/Shanghai]\n            - Path=/app1/** #配置规则Path，如果是app1开头的请求，会转发到目标URL\n        - id: app-service2\n          uri: http://localhost:9001\n          predicates:\n            - Path=/app2/**\n```\n在1月20号9点8分之前：\n{% asset_img image1.png %}\n在1月20号9点8分之后：\n{% asset_img image2.png %}\n\n#### 1.2. Before\nBefore用于匹配在指定日期之前的请求，也就是说，只有在指定日期之前，该请求才会被匹配并转发\n假设我们的配置如下：\n```yml\nserver:\n  port: 80\nspring:\n  cloud:\n    gateway:\n      enabled: true\n      routes:\n        - id: app-service1\n          uri: http://localhost:9000\n          predicates: #断言，为真则匹配成功\n            - After=2024-01-20T09:08:01.000+08:00[Asia/Shanghai]\n            - Path=/app1/** #配置规则Path，如果是app1开头的请求，会转发到目标URL\n        - id: app-service2\n          uri: http://localhost:9001\n          predicates:\n            - Before=2024-01-20T09:17:01.000+08:00[Asia/Shanghai]\n            - Path=/app2/**\n```\n在1月20号9点17分之前：\n{% asset_img image3.png %}\n在1月20号9点17分之后：\n{% asset_img image4.png %}\n### 2. 网关过滤器\n#### 2.1. Gateway Filter\nSpringCloud Gateway的Filter分为两种类型：Gateway Filter和Global Filter，过滤器会对请求和响应进行处理，比如添加参数，URL重写等，常用的网关过滤器如下：\n{% asset_img image5.png %}\n##### 2.1.1. AddRequestHeader\nAddRequestHeader需要name和value参数\n假设我们修改gateway应用的配置如下：\n```yml \nserver:\n  port: 80\nspring:\n  cloud:\n    gateway:\n      enabled: true\n      routes:\n        - id: app-service1\n          uri: http://localhost:9000\n          predicates: #断言，为真则匹配成功\n            - Path=/app1/** #配置规则Path，如果是app1开头的请求，会转发到目标URL\n          filters:\n            - AddRequestHeader=X-Request-red,blue\n        - id: app-service2\n          uri: http://localhost:9001\n          predicates:\n            - Path=/app2/**\n          filters:\n            - AddRequestHeader=X-Request-red,blue\n```\n这里会将blue消息头添加到所有匹配请求的下游请求消息头中\n然后修改app-service1应用的controller\n```java\n@RestController\n@RequestMapping(value = \"/app1\")\npublic class App1Controller {\n\n    @GetMapping(value = \"/test\")\n    public Object test(HttpServletRequest request) {\n        System.out.println(request.getHeader(\"X-Request-red\"));\n        return \"app1\";\n    }\n}\n```\n修改app-service2应用的controller\n```java\n@RestController\n@RequestMapping(value = \"/app2\")\npublic class App2Controller {\n\n    @GetMapping(value = \"/test\")\n    public Object test(HttpServletRequest request) {\n        System.out.println(request.getHeader(\"X-Request-red\"));\n        return \"app2\";\n    }\n}\n```\n分别访问http://localhost/app1/test和http://localhost/app2/test，然后查看控制台，发现确实有添加上blue请求头\n{% asset_img image6.png %}\n{% asset_img image7.png %}\n\n##### 2.1.2. AddRequestParameter\nAddRequestParamter需要name和value参数\n我们修改gateway的配置如下：\n```yml\nserver:\n  port: 80\nspring:\n  cloud:\n    gateway:\n      enabled: true\n      routes:\n        - id: app-service1\n          uri: http://localhost:9000\n          predicates: #断言，为真则匹配成功\n            - Path=/app1/** #配置规则Path，如果是app1开头的请求，会转发到目标URL\n          filters:\n            - AddRequestHeader=X-Request-red,blue\n            - AddRequestParameter=red,blue\n        - id: app-service2\n          uri: http://localhost:9001\n          predicates:\n            - Path=/app2/**\n          filters:\n            - AddRequestHeader=X-Request-red,blue\n            - AddRequestParameter=red,blue\n```\n这里表示将red=blue添加到下游请求参数中\n我们修改app-service1和app-service2的controller代码，方便查看结果：\n```java\n@RestController\n@RequestMapping(value = \"/app1\")\npublic class App1Controller {\n\n    @GetMapping(value = \"/test\")\n    public Object test(HttpServletRequest request) {\n        System.out.println(request.getHeader(\"X-Request-red\"));\n        System.out.println(request.getParameter(\"red\"));\n        return \"app1\";\n    }\n}\n\n\n@RestController\n@RequestMapping(value = \"/app2\")\npublic class App2Controller {\n\n    @GetMapping(value = \"/test\")\n    public Object test(HttpServletRequest request) {\n        System.out.println(request.getHeader(\"X-Request-red\"));\n        System.out.println(request.getParameter(\"red\"));\n        return \"app2\";\n    }\n}\n```\n分别访问http://localhost/app1/test和http://localhost/app2/test，结果如下：\n{% asset_img image8.png %}\n{% asset_img image9.png %}\n\n#### 2.2. GlobalFilter\nGlobalFilter是应用于所有路由的特殊过滤器\n{% asset_img image10.png %}\n通过全局网关过滤器，我们可以很方便的实现统一鉴权，下面我们自定义一个全局过滤器，通过token判断用户是否登录，从而实现一个统一的鉴权。\n我们在gateway项目中，添加一个鉴权的全局网关过滤器：\n```java\npackage com.young.filter;\n\nimport com.alibaba.fastjson.JSONObject;\nimport org.springframework.cloud.gateway.filter.GatewayFilterChain;\nimport org.springframework.cloud.gateway.filter.GlobalFilter;\nimport org.springframework.core.Ordered;\nimport org.springframework.core.io.buffer.DataBuffer;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.http.server.reactive.ServerHttpRequest;\nimport org.springframework.http.server.reactive.ServerHttpResponse;\nimport org.springframework.stereotype.Component;\nimport org.springframework.util.StringUtils;\nimport org.springframework.web.server.ServerWebExchange;\nimport reactor.core.publisher.Flux;\nimport reactor.core.publisher.Mono;\n\n@Component\npublic class AuthorizeFilter implements GlobalFilter, Ordered {\n    @Override\n    public Mono<Void> filter(ServerWebExchange exchange, GatewayFilterChain chain) {\n        final ServerHttpResponse servletResponse = exchange.getResponse();\n        final ServerHttpRequest servletRequest = exchange.getRequest();\n        // 获取token参数\n        final String token = servletRequest.getHeaders().getFirst(\"token\");\n        if (StringUtils.isEmpty(token)) {\n            servletResponse.setStatusCode(HttpStatus.UNAUTHORIZED);\n            servletResponse.getHeaders().add(\"Content-Type\", \"application/json;charset=UTF-8\");\n            JSONObject jsonObject = new JSONObject();\n            jsonObject.put(\"code\", \"403\");\n            jsonObject.put(\"message\", \"token is empty\");\n            final DataBuffer dataBuffer = servletResponse.bufferFactory().wrap(jsonObject.toJSONString().getBytes());\n            return servletResponse.writeWith(Flux.just(dataBuffer));\n        }\n        return chain.filter(exchange);\n    }\n\n    @Override\n    public int getOrder() {\n        return 0;\n    }\n}\n```\n重新启动项目，然后访问http://localhost/app1/test\n{% asset_img image11.png %}\n由于没有携带token，因此被拦截住，假设我们现在在请求头上添加token，再次访问，结果如下：\n{% asset_img image12.png %}\n此时能够访问成功，这里只是为了演示，因此鉴权逻辑写的比较简单，真实情况下的鉴权，可以基于此进行扩展和补充。\n### 3. 参考文档\nhttps://blog.csdn.net/zouliping123456/article/details/116128179","source":"_posts/SpringGateway学习2.md","raw":"---\ntitle: SpringGateway学习2\ndate: 2024-04-02 20:08:47\ntags: \n    - SpringBoot\n    - SpringGateway\n---\n### 1. 断言\n在上一节中，我们的gateway应用，它的配置文件为：\n```yml\nserver:\n  port: 80\nspring:\n  cloud:\n    gateway:\n      enabled: true\n      routes:\n        - id: app-service1\n          uri: http://localhost:9000\n          predicates: #断言，为真则匹配成功\n            - Path=/app1/** #配置规则Path，如果是app1开头的请求，会转发到目标URL\n        - id: app-service2\n          uri: http://localhost:9001\n          predicates:\n            - Path=/app2/**\n```\n这里面使用了Path断言，Path断言会根据请求的路径进行匹配，除了Path断言外，常用的断言如下图所示：\n{% asset_img image.png %}\n这里再简单介绍几个常用的断言：\n#### 1.1. After\nAfter用于匹配在指定日期时间之后发生的请求，也就是说，只有在指定日期之后的请求，才能被转发，假设我们的配置如下：\n```yml \nserver:\n  port: 80\nspring:\n  cloud:\n    gateway:\n      enabled: true\n      routes:\n        - id: app-service1\n          uri: http://localhost:9000\n          predicates: #断言，为真则匹配成功\n            - After=2025-01-20T09:08:01.000+08:00[Asia/Shanghai]\n            - Path=/app1/** #配置规则Path，如果是app1开头的请求，会转发到目标URL\n        - id: app-service2\n          uri: http://localhost:9001\n          predicates:\n            - Path=/app2/**\n```\n在1月20号9点8分之前：\n{% asset_img image1.png %}\n在1月20号9点8分之后：\n{% asset_img image2.png %}\n\n#### 1.2. Before\nBefore用于匹配在指定日期之前的请求，也就是说，只有在指定日期之前，该请求才会被匹配并转发\n假设我们的配置如下：\n```yml\nserver:\n  port: 80\nspring:\n  cloud:\n    gateway:\n      enabled: true\n      routes:\n        - id: app-service1\n          uri: http://localhost:9000\n          predicates: #断言，为真则匹配成功\n            - After=2024-01-20T09:08:01.000+08:00[Asia/Shanghai]\n            - Path=/app1/** #配置规则Path，如果是app1开头的请求，会转发到目标URL\n        - id: app-service2\n          uri: http://localhost:9001\n          predicates:\n            - Before=2024-01-20T09:17:01.000+08:00[Asia/Shanghai]\n            - Path=/app2/**\n```\n在1月20号9点17分之前：\n{% asset_img image3.png %}\n在1月20号9点17分之后：\n{% asset_img image4.png %}\n### 2. 网关过滤器\n#### 2.1. Gateway Filter\nSpringCloud Gateway的Filter分为两种类型：Gateway Filter和Global Filter，过滤器会对请求和响应进行处理，比如添加参数，URL重写等，常用的网关过滤器如下：\n{% asset_img image5.png %}\n##### 2.1.1. AddRequestHeader\nAddRequestHeader需要name和value参数\n假设我们修改gateway应用的配置如下：\n```yml \nserver:\n  port: 80\nspring:\n  cloud:\n    gateway:\n      enabled: true\n      routes:\n        - id: app-service1\n          uri: http://localhost:9000\n          predicates: #断言，为真则匹配成功\n            - Path=/app1/** #配置规则Path，如果是app1开头的请求，会转发到目标URL\n          filters:\n            - AddRequestHeader=X-Request-red,blue\n        - id: app-service2\n          uri: http://localhost:9001\n          predicates:\n            - Path=/app2/**\n          filters:\n            - AddRequestHeader=X-Request-red,blue\n```\n这里会将blue消息头添加到所有匹配请求的下游请求消息头中\n然后修改app-service1应用的controller\n```java\n@RestController\n@RequestMapping(value = \"/app1\")\npublic class App1Controller {\n\n    @GetMapping(value = \"/test\")\n    public Object test(HttpServletRequest request) {\n        System.out.println(request.getHeader(\"X-Request-red\"));\n        return \"app1\";\n    }\n}\n```\n修改app-service2应用的controller\n```java\n@RestController\n@RequestMapping(value = \"/app2\")\npublic class App2Controller {\n\n    @GetMapping(value = \"/test\")\n    public Object test(HttpServletRequest request) {\n        System.out.println(request.getHeader(\"X-Request-red\"));\n        return \"app2\";\n    }\n}\n```\n分别访问http://localhost/app1/test和http://localhost/app2/test，然后查看控制台，发现确实有添加上blue请求头\n{% asset_img image6.png %}\n{% asset_img image7.png %}\n\n##### 2.1.2. AddRequestParameter\nAddRequestParamter需要name和value参数\n我们修改gateway的配置如下：\n```yml\nserver:\n  port: 80\nspring:\n  cloud:\n    gateway:\n      enabled: true\n      routes:\n        - id: app-service1\n          uri: http://localhost:9000\n          predicates: #断言，为真则匹配成功\n            - Path=/app1/** #配置规则Path，如果是app1开头的请求，会转发到目标URL\n          filters:\n            - AddRequestHeader=X-Request-red,blue\n            - AddRequestParameter=red,blue\n        - id: app-service2\n          uri: http://localhost:9001\n          predicates:\n            - Path=/app2/**\n          filters:\n            - AddRequestHeader=X-Request-red,blue\n            - AddRequestParameter=red,blue\n```\n这里表示将red=blue添加到下游请求参数中\n我们修改app-service1和app-service2的controller代码，方便查看结果：\n```java\n@RestController\n@RequestMapping(value = \"/app1\")\npublic class App1Controller {\n\n    @GetMapping(value = \"/test\")\n    public Object test(HttpServletRequest request) {\n        System.out.println(request.getHeader(\"X-Request-red\"));\n        System.out.println(request.getParameter(\"red\"));\n        return \"app1\";\n    }\n}\n\n\n@RestController\n@RequestMapping(value = \"/app2\")\npublic class App2Controller {\n\n    @GetMapping(value = \"/test\")\n    public Object test(HttpServletRequest request) {\n        System.out.println(request.getHeader(\"X-Request-red\"));\n        System.out.println(request.getParameter(\"red\"));\n        return \"app2\";\n    }\n}\n```\n分别访问http://localhost/app1/test和http://localhost/app2/test，结果如下：\n{% asset_img image8.png %}\n{% asset_img image9.png %}\n\n#### 2.2. GlobalFilter\nGlobalFilter是应用于所有路由的特殊过滤器\n{% asset_img image10.png %}\n通过全局网关过滤器，我们可以很方便的实现统一鉴权，下面我们自定义一个全局过滤器，通过token判断用户是否登录，从而实现一个统一的鉴权。\n我们在gateway项目中，添加一个鉴权的全局网关过滤器：\n```java\npackage com.young.filter;\n\nimport com.alibaba.fastjson.JSONObject;\nimport org.springframework.cloud.gateway.filter.GatewayFilterChain;\nimport org.springframework.cloud.gateway.filter.GlobalFilter;\nimport org.springframework.core.Ordered;\nimport org.springframework.core.io.buffer.DataBuffer;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.http.server.reactive.ServerHttpRequest;\nimport org.springframework.http.server.reactive.ServerHttpResponse;\nimport org.springframework.stereotype.Component;\nimport org.springframework.util.StringUtils;\nimport org.springframework.web.server.ServerWebExchange;\nimport reactor.core.publisher.Flux;\nimport reactor.core.publisher.Mono;\n\n@Component\npublic class AuthorizeFilter implements GlobalFilter, Ordered {\n    @Override\n    public Mono<Void> filter(ServerWebExchange exchange, GatewayFilterChain chain) {\n        final ServerHttpResponse servletResponse = exchange.getResponse();\n        final ServerHttpRequest servletRequest = exchange.getRequest();\n        // 获取token参数\n        final String token = servletRequest.getHeaders().getFirst(\"token\");\n        if (StringUtils.isEmpty(token)) {\n            servletResponse.setStatusCode(HttpStatus.UNAUTHORIZED);\n            servletResponse.getHeaders().add(\"Content-Type\", \"application/json;charset=UTF-8\");\n            JSONObject jsonObject = new JSONObject();\n            jsonObject.put(\"code\", \"403\");\n            jsonObject.put(\"message\", \"token is empty\");\n            final DataBuffer dataBuffer = servletResponse.bufferFactory().wrap(jsonObject.toJSONString().getBytes());\n            return servletResponse.writeWith(Flux.just(dataBuffer));\n        }\n        return chain.filter(exchange);\n    }\n\n    @Override\n    public int getOrder() {\n        return 0;\n    }\n}\n```\n重新启动项目，然后访问http://localhost/app1/test\n{% asset_img image11.png %}\n由于没有携带token，因此被拦截住，假设我们现在在请求头上添加token，再次访问，结果如下：\n{% asset_img image12.png %}\n此时能够访问成功，这里只是为了演示，因此鉴权逻辑写的比较简单，真实情况下的鉴权，可以基于此进行扩展和补充。\n### 3. 参考文档\nhttps://blog.csdn.net/zouliping123456/article/details/116128179","slug":"SpringGateway学习2","published":1,"updated":"2024-04-03T05:45:59.055Z","_id":"cluicf3tm00001kvl6htf9wbi","comments":1,"layout":"post","photos":[],"content":"<h3 id=\"1-断言\"><a href=\"#1-断言\" class=\"headerlink\" title=\"1. 断言\"></a>1. 断言</h3><p>在上一节中，我们的gateway应用，它的配置文件为：</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yml\"><span class=\"hljs-attr\">server:</span><br>  <span class=\"hljs-attr\">port:</span> <span class=\"hljs-number\">80</span><br><span class=\"hljs-attr\">spring:</span><br>  <span class=\"hljs-attr\">cloud:</span><br>    <span class=\"hljs-attr\">gateway:</span><br>      <span class=\"hljs-attr\">enabled:</span> <span class=\"hljs-literal\">true</span><br>      <span class=\"hljs-attr\">routes:</span><br>        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">id:</span> <span class=\"hljs-string\">app-service1</span><br>          <span class=\"hljs-attr\">uri:</span> <span class=\"hljs-string\">http://localhost:9000</span><br>          <span class=\"hljs-attr\">predicates:</span> <span class=\"hljs-comment\">#断言，为真则匹配成功</span><br>            <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">Path=/app1/**</span> <span class=\"hljs-comment\">#配置规则Path，如果是app1开头的请求，会转发到目标URL</span><br>        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">id:</span> <span class=\"hljs-string\">app-service2</span><br>          <span class=\"hljs-attr\">uri:</span> <span class=\"hljs-string\">http://localhost:9001</span><br>          <span class=\"hljs-attr\">predicates:</span><br>            <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">Path=/app2/**</span><br></code></pre></td></tr></table></figure>\n<p>这里面使用了Path断言，Path断言会根据请求的路径进行匹配，除了Path断言外，常用的断言如下图所示：</p>\n<img src=\"/2024/04/02/SpringGateway%E5%AD%A6%E4%B9%A02/image.png\" class=\"\">\n<p>这里再简单介绍几个常用的断言：</p>\n<h4 id=\"1-1-After\"><a href=\"#1-1-After\" class=\"headerlink\" title=\"1.1. After\"></a>1.1. After</h4><p>After用于匹配在指定日期时间之后发生的请求，也就是说，只有在指定日期之后的请求，才能被转发，假设我们的配置如下：</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yml\"><span class=\"hljs-attr\">server:</span><br>  <span class=\"hljs-attr\">port:</span> <span class=\"hljs-number\">80</span><br><span class=\"hljs-attr\">spring:</span><br>  <span class=\"hljs-attr\">cloud:</span><br>    <span class=\"hljs-attr\">gateway:</span><br>      <span class=\"hljs-attr\">enabled:</span> <span class=\"hljs-literal\">true</span><br>      <span class=\"hljs-attr\">routes:</span><br>        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">id:</span> <span class=\"hljs-string\">app-service1</span><br>          <span class=\"hljs-attr\">uri:</span> <span class=\"hljs-string\">http://localhost:9000</span><br>          <span class=\"hljs-attr\">predicates:</span> <span class=\"hljs-comment\">#断言，为真则匹配成功</span><br>            <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">After=2025-01-20T09:08:01.000+08:00[Asia/Shanghai]</span><br>            <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">Path=/app1/**</span> <span class=\"hljs-comment\">#配置规则Path，如果是app1开头的请求，会转发到目标URL</span><br>        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">id:</span> <span class=\"hljs-string\">app-service2</span><br>          <span class=\"hljs-attr\">uri:</span> <span class=\"hljs-string\">http://localhost:9001</span><br>          <span class=\"hljs-attr\">predicates:</span><br>            <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">Path=/app2/**</span><br></code></pre></td></tr></table></figure>\n<p>在1月20号9点8分之前：</p>\n<img src=\"/2024/04/02/SpringGateway%E5%AD%A6%E4%B9%A02/image1.png\" class=\"\">\n<p>在1月20号9点8分之后：</p>\n<img src=\"/2024/04/02/SpringGateway%E5%AD%A6%E4%B9%A02/image2.png\" class=\"\">\n\n<h4 id=\"1-2-Before\"><a href=\"#1-2-Before\" class=\"headerlink\" title=\"1.2. Before\"></a>1.2. Before</h4><p>Before用于匹配在指定日期之前的请求，也就是说，只有在指定日期之前，该请求才会被匹配并转发<br>假设我们的配置如下：</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yml\"><span class=\"hljs-attr\">server:</span><br>  <span class=\"hljs-attr\">port:</span> <span class=\"hljs-number\">80</span><br><span class=\"hljs-attr\">spring:</span><br>  <span class=\"hljs-attr\">cloud:</span><br>    <span class=\"hljs-attr\">gateway:</span><br>      <span class=\"hljs-attr\">enabled:</span> <span class=\"hljs-literal\">true</span><br>      <span class=\"hljs-attr\">routes:</span><br>        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">id:</span> <span class=\"hljs-string\">app-service1</span><br>          <span class=\"hljs-attr\">uri:</span> <span class=\"hljs-string\">http://localhost:9000</span><br>          <span class=\"hljs-attr\">predicates:</span> <span class=\"hljs-comment\">#断言，为真则匹配成功</span><br>            <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">After=2024-01-20T09:08:01.000+08:00[Asia/Shanghai]</span><br>            <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">Path=/app1/**</span> <span class=\"hljs-comment\">#配置规则Path，如果是app1开头的请求，会转发到目标URL</span><br>        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">id:</span> <span class=\"hljs-string\">app-service2</span><br>          <span class=\"hljs-attr\">uri:</span> <span class=\"hljs-string\">http://localhost:9001</span><br>          <span class=\"hljs-attr\">predicates:</span><br>            <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">Before=2024-01-20T09:17:01.000+08:00[Asia/Shanghai]</span><br>            <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">Path=/app2/**</span><br></code></pre></td></tr></table></figure>\n<p>在1月20号9点17分之前：</p>\n<img src=\"/2024/04/02/SpringGateway%E5%AD%A6%E4%B9%A02/image3.png\" class=\"\">\n<p>在1月20号9点17分之后：</p>\n<img src=\"/2024/04/02/SpringGateway%E5%AD%A6%E4%B9%A02/image4.png\" class=\"\">\n<h3 id=\"2-网关过滤器\"><a href=\"#2-网关过滤器\" class=\"headerlink\" title=\"2. 网关过滤器\"></a>2. 网关过滤器</h3><h4 id=\"2-1-Gateway-Filter\"><a href=\"#2-1-Gateway-Filter\" class=\"headerlink\" title=\"2.1. Gateway Filter\"></a>2.1. Gateway Filter</h4><p>SpringCloud Gateway的Filter分为两种类型：Gateway Filter和Global Filter，过滤器会对请求和响应进行处理，比如添加参数，URL重写等，常用的网关过滤器如下：</p>\n<img src=\"/2024/04/02/SpringGateway%E5%AD%A6%E4%B9%A02/image5.png\" class=\"\">\n<h5 id=\"2-1-1-AddRequestHeader\"><a href=\"#2-1-1-AddRequestHeader\" class=\"headerlink\" title=\"2.1.1. AddRequestHeader\"></a>2.1.1. AddRequestHeader</h5><p>AddRequestHeader需要name和value参数<br>假设我们修改gateway应用的配置如下：</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yml\"><span class=\"hljs-attr\">server:</span><br>  <span class=\"hljs-attr\">port:</span> <span class=\"hljs-number\">80</span><br><span class=\"hljs-attr\">spring:</span><br>  <span class=\"hljs-attr\">cloud:</span><br>    <span class=\"hljs-attr\">gateway:</span><br>      <span class=\"hljs-attr\">enabled:</span> <span class=\"hljs-literal\">true</span><br>      <span class=\"hljs-attr\">routes:</span><br>        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">id:</span> <span class=\"hljs-string\">app-service1</span><br>          <span class=\"hljs-attr\">uri:</span> <span class=\"hljs-string\">http://localhost:9000</span><br>          <span class=\"hljs-attr\">predicates:</span> <span class=\"hljs-comment\">#断言，为真则匹配成功</span><br>            <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">Path=/app1/**</span> <span class=\"hljs-comment\">#配置规则Path，如果是app1开头的请求，会转发到目标URL</span><br>          <span class=\"hljs-attr\">filters:</span><br>            <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">AddRequestHeader=X-Request-red,blue</span><br>        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">id:</span> <span class=\"hljs-string\">app-service2</span><br>          <span class=\"hljs-attr\">uri:</span> <span class=\"hljs-string\">http://localhost:9001</span><br>          <span class=\"hljs-attr\">predicates:</span><br>            <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">Path=/app2/**</span><br>          <span class=\"hljs-attr\">filters:</span><br>            <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">AddRequestHeader=X-Request-red,blue</span><br></code></pre></td></tr></table></figure>\n<p>这里会将blue消息头添加到所有匹配请求的下游请求消息头中<br>然后修改app-service1应用的controller</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@RestController</span><br><span class=\"hljs-meta\">@RequestMapping(value = &quot;/app1&quot;)</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">App1Controller</span> &#123;<br><br>    <span class=\"hljs-meta\">@GetMapping(value = &quot;/test&quot;)</span><br>    <span class=\"hljs-keyword\">public</span> Object <span class=\"hljs-title function_\">test</span><span class=\"hljs-params\">(HttpServletRequest request)</span> &#123;<br>        System.out.println(request.getHeader(<span class=\"hljs-string\">&quot;X-Request-red&quot;</span>));<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;app1&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>修改app-service2应用的controller</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@RestController</span><br><span class=\"hljs-meta\">@RequestMapping(value = &quot;/app2&quot;)</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">App2Controller</span> &#123;<br><br>    <span class=\"hljs-meta\">@GetMapping(value = &quot;/test&quot;)</span><br>    <span class=\"hljs-keyword\">public</span> Object <span class=\"hljs-title function_\">test</span><span class=\"hljs-params\">(HttpServletRequest request)</span> &#123;<br>        System.out.println(request.getHeader(<span class=\"hljs-string\">&quot;X-Request-red&quot;</span>));<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;app2&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>分别访问<a href=\"http://localhost/app1/test%E5%92%8Chttp://localhost/app2/test%EF%BC%8C%E7%84%B6%E5%90%8E%E6%9F%A5%E7%9C%8B%E6%8E%A7%E5%88%B6%E5%8F%B0%EF%BC%8C%E5%8F%91%E7%8E%B0%E7%A1%AE%E5%AE%9E%E6%9C%89%E6%B7%BB%E5%8A%A0%E4%B8%8Ablue%E8%AF%B7%E6%B1%82%E5%A4%B4\">http://localhost/app1/test和http://localhost/app2/test，然后查看控制台，发现确实有添加上blue请求头</a></p>\n<img src=\"/2024/04/02/SpringGateway%E5%AD%A6%E4%B9%A02/image6.png\" class=\"\">\n<img src=\"/2024/04/02/SpringGateway%E5%AD%A6%E4%B9%A02/image7.png\" class=\"\">\n\n<h5 id=\"2-1-2-AddRequestParameter\"><a href=\"#2-1-2-AddRequestParameter\" class=\"headerlink\" title=\"2.1.2. AddRequestParameter\"></a>2.1.2. AddRequestParameter</h5><p>AddRequestParamter需要name和value参数<br>我们修改gateway的配置如下：</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yml\"><span class=\"hljs-attr\">server:</span><br>  <span class=\"hljs-attr\">port:</span> <span class=\"hljs-number\">80</span><br><span class=\"hljs-attr\">spring:</span><br>  <span class=\"hljs-attr\">cloud:</span><br>    <span class=\"hljs-attr\">gateway:</span><br>      <span class=\"hljs-attr\">enabled:</span> <span class=\"hljs-literal\">true</span><br>      <span class=\"hljs-attr\">routes:</span><br>        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">id:</span> <span class=\"hljs-string\">app-service1</span><br>          <span class=\"hljs-attr\">uri:</span> <span class=\"hljs-string\">http://localhost:9000</span><br>          <span class=\"hljs-attr\">predicates:</span> <span class=\"hljs-comment\">#断言，为真则匹配成功</span><br>            <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">Path=/app1/**</span> <span class=\"hljs-comment\">#配置规则Path，如果是app1开头的请求，会转发到目标URL</span><br>          <span class=\"hljs-attr\">filters:</span><br>            <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">AddRequestHeader=X-Request-red,blue</span><br>            <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">AddRequestParameter=red,blue</span><br>        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">id:</span> <span class=\"hljs-string\">app-service2</span><br>          <span class=\"hljs-attr\">uri:</span> <span class=\"hljs-string\">http://localhost:9001</span><br>          <span class=\"hljs-attr\">predicates:</span><br>            <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">Path=/app2/**</span><br>          <span class=\"hljs-attr\">filters:</span><br>            <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">AddRequestHeader=X-Request-red,blue</span><br>            <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">AddRequestParameter=red,blue</span><br></code></pre></td></tr></table></figure>\n<p>这里表示将red&#x3D;blue添加到下游请求参数中<br>我们修改app-service1和app-service2的controller代码，方便查看结果：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@RestController</span><br><span class=\"hljs-meta\">@RequestMapping(value = &quot;/app1&quot;)</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">App1Controller</span> &#123;<br><br>    <span class=\"hljs-meta\">@GetMapping(value = &quot;/test&quot;)</span><br>    <span class=\"hljs-keyword\">public</span> Object <span class=\"hljs-title function_\">test</span><span class=\"hljs-params\">(HttpServletRequest request)</span> &#123;<br>        System.out.println(request.getHeader(<span class=\"hljs-string\">&quot;X-Request-red&quot;</span>));<br>        System.out.println(request.getParameter(<span class=\"hljs-string\">&quot;red&quot;</span>));<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;app1&quot;</span>;<br>    &#125;<br>&#125;<br><br><br><span class=\"hljs-meta\">@RestController</span><br><span class=\"hljs-meta\">@RequestMapping(value = &quot;/app2&quot;)</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">App2Controller</span> &#123;<br><br>    <span class=\"hljs-meta\">@GetMapping(value = &quot;/test&quot;)</span><br>    <span class=\"hljs-keyword\">public</span> Object <span class=\"hljs-title function_\">test</span><span class=\"hljs-params\">(HttpServletRequest request)</span> &#123;<br>        System.out.println(request.getHeader(<span class=\"hljs-string\">&quot;X-Request-red&quot;</span>));<br>        System.out.println(request.getParameter(<span class=\"hljs-string\">&quot;red&quot;</span>));<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;app2&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>分别访问<a href=\"http://localhost/app1/test%E5%92%8Chttp://localhost/app2/test%EF%BC%8C%E7%BB%93%E6%9E%9C%E5%A6%82%E4%B8%8B%EF%BC%9A\">http://localhost/app1/test和http://localhost/app2/test，结果如下：</a></p>\n<img src=\"/2024/04/02/SpringGateway%E5%AD%A6%E4%B9%A02/image8.png\" class=\"\">\n<img src=\"/2024/04/02/SpringGateway%E5%AD%A6%E4%B9%A02/image9.png\" class=\"\">\n\n<h4 id=\"2-2-GlobalFilter\"><a href=\"#2-2-GlobalFilter\" class=\"headerlink\" title=\"2.2. GlobalFilter\"></a>2.2. GlobalFilter</h4><p>GlobalFilter是应用于所有路由的特殊过滤器</p>\n<img src=\"/2024/04/02/SpringGateway%E5%AD%A6%E4%B9%A02/image10.png\" class=\"\">\n<p>通过全局网关过滤器，我们可以很方便的实现统一鉴权，下面我们自定义一个全局过滤器，通过token判断用户是否登录，从而实现一个统一的鉴权。<br>我们在gateway项目中，添加一个鉴权的全局网关过滤器：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> com.young.filter;<br><br><span class=\"hljs-keyword\">import</span> com.alibaba.fastjson.JSONObject;<br><span class=\"hljs-keyword\">import</span> org.springframework.cloud.gateway.filter.GatewayFilterChain;<br><span class=\"hljs-keyword\">import</span> org.springframework.cloud.gateway.filter.GlobalFilter;<br><span class=\"hljs-keyword\">import</span> org.springframework.core.Ordered;<br><span class=\"hljs-keyword\">import</span> org.springframework.core.io.buffer.DataBuffer;<br><span class=\"hljs-keyword\">import</span> org.springframework.http.HttpStatus;<br><span class=\"hljs-keyword\">import</span> org.springframework.http.server.reactive.ServerHttpRequest;<br><span class=\"hljs-keyword\">import</span> org.springframework.http.server.reactive.ServerHttpResponse;<br><span class=\"hljs-keyword\">import</span> org.springframework.stereotype.Component;<br><span class=\"hljs-keyword\">import</span> org.springframework.util.StringUtils;<br><span class=\"hljs-keyword\">import</span> org.springframework.web.server.ServerWebExchange;<br><span class=\"hljs-keyword\">import</span> reactor.core.publisher.Flux;<br><span class=\"hljs-keyword\">import</span> reactor.core.publisher.Mono;<br><br><span class=\"hljs-meta\">@Component</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">AuthorizeFilter</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">GlobalFilter</span>, Ordered &#123;<br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> Mono&lt;Void&gt; <span class=\"hljs-title function_\">filter</span><span class=\"hljs-params\">(ServerWebExchange exchange, GatewayFilterChain chain)</span> &#123;<br>        <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">ServerHttpResponse</span> <span class=\"hljs-variable\">servletResponse</span> <span class=\"hljs-operator\">=</span> exchange.getResponse();<br>        <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">ServerHttpRequest</span> <span class=\"hljs-variable\">servletRequest</span> <span class=\"hljs-operator\">=</span> exchange.getRequest();<br>        <span class=\"hljs-comment\">// 获取token参数</span><br>        <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">token</span> <span class=\"hljs-operator\">=</span> servletRequest.getHeaders().getFirst(<span class=\"hljs-string\">&quot;token&quot;</span>);<br>        <span class=\"hljs-keyword\">if</span> (StringUtils.isEmpty(token)) &#123;<br>            servletResponse.setStatusCode(HttpStatus.UNAUTHORIZED);<br>            servletResponse.getHeaders().add(<span class=\"hljs-string\">&quot;Content-Type&quot;</span>, <span class=\"hljs-string\">&quot;application/json;charset=UTF-8&quot;</span>);<br>            <span class=\"hljs-type\">JSONObject</span> <span class=\"hljs-variable\">jsonObject</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">JSONObject</span>();<br>            jsonObject.put(<span class=\"hljs-string\">&quot;code&quot;</span>, <span class=\"hljs-string\">&quot;403&quot;</span>);<br>            jsonObject.put(<span class=\"hljs-string\">&quot;message&quot;</span>, <span class=\"hljs-string\">&quot;token is empty&quot;</span>);<br>            <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">DataBuffer</span> <span class=\"hljs-variable\">dataBuffer</span> <span class=\"hljs-operator\">=</span> servletResponse.bufferFactory().wrap(jsonObject.toJSONString().getBytes());<br>            <span class=\"hljs-keyword\">return</span> servletResponse.writeWith(Flux.just(dataBuffer));<br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> chain.filter(exchange);<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">getOrder</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>重新启动项目，然后访问<a href=\"http://localhost/app1/test\">http://localhost/app1/test</a></p>\n<img src=\"/2024/04/02/SpringGateway%E5%AD%A6%E4%B9%A02/image11.png\" class=\"\">\n<p>由于没有携带token，因此被拦截住，假设我们现在在请求头上添加token，再次访问，结果如下：</p>\n<img src=\"/2024/04/02/SpringGateway%E5%AD%A6%E4%B9%A02/image12.png\" class=\"\">\n<p>此时能够访问成功，这里只是为了演示，因此鉴权逻辑写的比较简单，真实情况下的鉴权，可以基于此进行扩展和补充。</p>\n<h3 id=\"3-参考文档\"><a href=\"#3-参考文档\" class=\"headerlink\" title=\"3. 参考文档\"></a>3. 参考文档</h3><p><a href=\"https://blog.csdn.net/zouliping123456/article/details/116128179\">https://blog.csdn.net/zouliping123456/article/details/116128179</a></p>\n","excerpt":"","more":"<h3 id=\"1-断言\"><a href=\"#1-断言\" class=\"headerlink\" title=\"1. 断言\"></a>1. 断言</h3><p>在上一节中，我们的gateway应用，它的配置文件为：</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yml\"><span class=\"hljs-attr\">server:</span><br>  <span class=\"hljs-attr\">port:</span> <span class=\"hljs-number\">80</span><br><span class=\"hljs-attr\">spring:</span><br>  <span class=\"hljs-attr\">cloud:</span><br>    <span class=\"hljs-attr\">gateway:</span><br>      <span class=\"hljs-attr\">enabled:</span> <span class=\"hljs-literal\">true</span><br>      <span class=\"hljs-attr\">routes:</span><br>        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">id:</span> <span class=\"hljs-string\">app-service1</span><br>          <span class=\"hljs-attr\">uri:</span> <span class=\"hljs-string\">http://localhost:9000</span><br>          <span class=\"hljs-attr\">predicates:</span> <span class=\"hljs-comment\">#断言，为真则匹配成功</span><br>            <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">Path=/app1/**</span> <span class=\"hljs-comment\">#配置规则Path，如果是app1开头的请求，会转发到目标URL</span><br>        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">id:</span> <span class=\"hljs-string\">app-service2</span><br>          <span class=\"hljs-attr\">uri:</span> <span class=\"hljs-string\">http://localhost:9001</span><br>          <span class=\"hljs-attr\">predicates:</span><br>            <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">Path=/app2/**</span><br></code></pre></td></tr></table></figure>\n<p>这里面使用了Path断言，Path断言会根据请求的路径进行匹配，除了Path断言外，常用的断言如下图所示：</p>\n<img src=\"/2024/04/02/SpringGateway%E5%AD%A6%E4%B9%A02/image.png\" class=\"\">\n<p>这里再简单介绍几个常用的断言：</p>\n<h4 id=\"1-1-After\"><a href=\"#1-1-After\" class=\"headerlink\" title=\"1.1. After\"></a>1.1. After</h4><p>After用于匹配在指定日期时间之后发生的请求，也就是说，只有在指定日期之后的请求，才能被转发，假设我们的配置如下：</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yml\"><span class=\"hljs-attr\">server:</span><br>  <span class=\"hljs-attr\">port:</span> <span class=\"hljs-number\">80</span><br><span class=\"hljs-attr\">spring:</span><br>  <span class=\"hljs-attr\">cloud:</span><br>    <span class=\"hljs-attr\">gateway:</span><br>      <span class=\"hljs-attr\">enabled:</span> <span class=\"hljs-literal\">true</span><br>      <span class=\"hljs-attr\">routes:</span><br>        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">id:</span> <span class=\"hljs-string\">app-service1</span><br>          <span class=\"hljs-attr\">uri:</span> <span class=\"hljs-string\">http://localhost:9000</span><br>          <span class=\"hljs-attr\">predicates:</span> <span class=\"hljs-comment\">#断言，为真则匹配成功</span><br>            <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">After=2025-01-20T09:08:01.000+08:00[Asia/Shanghai]</span><br>            <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">Path=/app1/**</span> <span class=\"hljs-comment\">#配置规则Path，如果是app1开头的请求，会转发到目标URL</span><br>        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">id:</span> <span class=\"hljs-string\">app-service2</span><br>          <span class=\"hljs-attr\">uri:</span> <span class=\"hljs-string\">http://localhost:9001</span><br>          <span class=\"hljs-attr\">predicates:</span><br>            <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">Path=/app2/**</span><br></code></pre></td></tr></table></figure>\n<p>在1月20号9点8分之前：</p>\n<img src=\"/2024/04/02/SpringGateway%E5%AD%A6%E4%B9%A02/image1.png\" class=\"\">\n<p>在1月20号9点8分之后：</p>\n<img src=\"/2024/04/02/SpringGateway%E5%AD%A6%E4%B9%A02/image2.png\" class=\"\">\n\n<h4 id=\"1-2-Before\"><a href=\"#1-2-Before\" class=\"headerlink\" title=\"1.2. Before\"></a>1.2. Before</h4><p>Before用于匹配在指定日期之前的请求，也就是说，只有在指定日期之前，该请求才会被匹配并转发<br>假设我们的配置如下：</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yml\"><span class=\"hljs-attr\">server:</span><br>  <span class=\"hljs-attr\">port:</span> <span class=\"hljs-number\">80</span><br><span class=\"hljs-attr\">spring:</span><br>  <span class=\"hljs-attr\">cloud:</span><br>    <span class=\"hljs-attr\">gateway:</span><br>      <span class=\"hljs-attr\">enabled:</span> <span class=\"hljs-literal\">true</span><br>      <span class=\"hljs-attr\">routes:</span><br>        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">id:</span> <span class=\"hljs-string\">app-service1</span><br>          <span class=\"hljs-attr\">uri:</span> <span class=\"hljs-string\">http://localhost:9000</span><br>          <span class=\"hljs-attr\">predicates:</span> <span class=\"hljs-comment\">#断言，为真则匹配成功</span><br>            <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">After=2024-01-20T09:08:01.000+08:00[Asia/Shanghai]</span><br>            <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">Path=/app1/**</span> <span class=\"hljs-comment\">#配置规则Path，如果是app1开头的请求，会转发到目标URL</span><br>        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">id:</span> <span class=\"hljs-string\">app-service2</span><br>          <span class=\"hljs-attr\">uri:</span> <span class=\"hljs-string\">http://localhost:9001</span><br>          <span class=\"hljs-attr\">predicates:</span><br>            <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">Before=2024-01-20T09:17:01.000+08:00[Asia/Shanghai]</span><br>            <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">Path=/app2/**</span><br></code></pre></td></tr></table></figure>\n<p>在1月20号9点17分之前：</p>\n<img src=\"/2024/04/02/SpringGateway%E5%AD%A6%E4%B9%A02/image3.png\" class=\"\">\n<p>在1月20号9点17分之后：</p>\n<img src=\"/2024/04/02/SpringGateway%E5%AD%A6%E4%B9%A02/image4.png\" class=\"\">\n<h3 id=\"2-网关过滤器\"><a href=\"#2-网关过滤器\" class=\"headerlink\" title=\"2. 网关过滤器\"></a>2. 网关过滤器</h3><h4 id=\"2-1-Gateway-Filter\"><a href=\"#2-1-Gateway-Filter\" class=\"headerlink\" title=\"2.1. Gateway Filter\"></a>2.1. Gateway Filter</h4><p>SpringCloud Gateway的Filter分为两种类型：Gateway Filter和Global Filter，过滤器会对请求和响应进行处理，比如添加参数，URL重写等，常用的网关过滤器如下：</p>\n<img src=\"/2024/04/02/SpringGateway%E5%AD%A6%E4%B9%A02/image5.png\" class=\"\">\n<h5 id=\"2-1-1-AddRequestHeader\"><a href=\"#2-1-1-AddRequestHeader\" class=\"headerlink\" title=\"2.1.1. AddRequestHeader\"></a>2.1.1. AddRequestHeader</h5><p>AddRequestHeader需要name和value参数<br>假设我们修改gateway应用的配置如下：</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yml\"><span class=\"hljs-attr\">server:</span><br>  <span class=\"hljs-attr\">port:</span> <span class=\"hljs-number\">80</span><br><span class=\"hljs-attr\">spring:</span><br>  <span class=\"hljs-attr\">cloud:</span><br>    <span class=\"hljs-attr\">gateway:</span><br>      <span class=\"hljs-attr\">enabled:</span> <span class=\"hljs-literal\">true</span><br>      <span class=\"hljs-attr\">routes:</span><br>        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">id:</span> <span class=\"hljs-string\">app-service1</span><br>          <span class=\"hljs-attr\">uri:</span> <span class=\"hljs-string\">http://localhost:9000</span><br>          <span class=\"hljs-attr\">predicates:</span> <span class=\"hljs-comment\">#断言，为真则匹配成功</span><br>            <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">Path=/app1/**</span> <span class=\"hljs-comment\">#配置规则Path，如果是app1开头的请求，会转发到目标URL</span><br>          <span class=\"hljs-attr\">filters:</span><br>            <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">AddRequestHeader=X-Request-red,blue</span><br>        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">id:</span> <span class=\"hljs-string\">app-service2</span><br>          <span class=\"hljs-attr\">uri:</span> <span class=\"hljs-string\">http://localhost:9001</span><br>          <span class=\"hljs-attr\">predicates:</span><br>            <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">Path=/app2/**</span><br>          <span class=\"hljs-attr\">filters:</span><br>            <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">AddRequestHeader=X-Request-red,blue</span><br></code></pre></td></tr></table></figure>\n<p>这里会将blue消息头添加到所有匹配请求的下游请求消息头中<br>然后修改app-service1应用的controller</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@RestController</span><br><span class=\"hljs-meta\">@RequestMapping(value = &quot;/app1&quot;)</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">App1Controller</span> &#123;<br><br>    <span class=\"hljs-meta\">@GetMapping(value = &quot;/test&quot;)</span><br>    <span class=\"hljs-keyword\">public</span> Object <span class=\"hljs-title function_\">test</span><span class=\"hljs-params\">(HttpServletRequest request)</span> &#123;<br>        System.out.println(request.getHeader(<span class=\"hljs-string\">&quot;X-Request-red&quot;</span>));<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;app1&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>修改app-service2应用的controller</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@RestController</span><br><span class=\"hljs-meta\">@RequestMapping(value = &quot;/app2&quot;)</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">App2Controller</span> &#123;<br><br>    <span class=\"hljs-meta\">@GetMapping(value = &quot;/test&quot;)</span><br>    <span class=\"hljs-keyword\">public</span> Object <span class=\"hljs-title function_\">test</span><span class=\"hljs-params\">(HttpServletRequest request)</span> &#123;<br>        System.out.println(request.getHeader(<span class=\"hljs-string\">&quot;X-Request-red&quot;</span>));<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;app2&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>分别访问<a href=\"http://localhost/app1/test%E5%92%8Chttp://localhost/app2/test%EF%BC%8C%E7%84%B6%E5%90%8E%E6%9F%A5%E7%9C%8B%E6%8E%A7%E5%88%B6%E5%8F%B0%EF%BC%8C%E5%8F%91%E7%8E%B0%E7%A1%AE%E5%AE%9E%E6%9C%89%E6%B7%BB%E5%8A%A0%E4%B8%8Ablue%E8%AF%B7%E6%B1%82%E5%A4%B4\">http://localhost/app1/test和http://localhost/app2/test，然后查看控制台，发现确实有添加上blue请求头</a></p>\n<img src=\"/2024/04/02/SpringGateway%E5%AD%A6%E4%B9%A02/image6.png\" class=\"\">\n<img src=\"/2024/04/02/SpringGateway%E5%AD%A6%E4%B9%A02/image7.png\" class=\"\">\n\n<h5 id=\"2-1-2-AddRequestParameter\"><a href=\"#2-1-2-AddRequestParameter\" class=\"headerlink\" title=\"2.1.2. AddRequestParameter\"></a>2.1.2. AddRequestParameter</h5><p>AddRequestParamter需要name和value参数<br>我们修改gateway的配置如下：</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yml\"><span class=\"hljs-attr\">server:</span><br>  <span class=\"hljs-attr\">port:</span> <span class=\"hljs-number\">80</span><br><span class=\"hljs-attr\">spring:</span><br>  <span class=\"hljs-attr\">cloud:</span><br>    <span class=\"hljs-attr\">gateway:</span><br>      <span class=\"hljs-attr\">enabled:</span> <span class=\"hljs-literal\">true</span><br>      <span class=\"hljs-attr\">routes:</span><br>        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">id:</span> <span class=\"hljs-string\">app-service1</span><br>          <span class=\"hljs-attr\">uri:</span> <span class=\"hljs-string\">http://localhost:9000</span><br>          <span class=\"hljs-attr\">predicates:</span> <span class=\"hljs-comment\">#断言，为真则匹配成功</span><br>            <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">Path=/app1/**</span> <span class=\"hljs-comment\">#配置规则Path，如果是app1开头的请求，会转发到目标URL</span><br>          <span class=\"hljs-attr\">filters:</span><br>            <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">AddRequestHeader=X-Request-red,blue</span><br>            <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">AddRequestParameter=red,blue</span><br>        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">id:</span> <span class=\"hljs-string\">app-service2</span><br>          <span class=\"hljs-attr\">uri:</span> <span class=\"hljs-string\">http://localhost:9001</span><br>          <span class=\"hljs-attr\">predicates:</span><br>            <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">Path=/app2/**</span><br>          <span class=\"hljs-attr\">filters:</span><br>            <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">AddRequestHeader=X-Request-red,blue</span><br>            <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">AddRequestParameter=red,blue</span><br></code></pre></td></tr></table></figure>\n<p>这里表示将red&#x3D;blue添加到下游请求参数中<br>我们修改app-service1和app-service2的controller代码，方便查看结果：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@RestController</span><br><span class=\"hljs-meta\">@RequestMapping(value = &quot;/app1&quot;)</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">App1Controller</span> &#123;<br><br>    <span class=\"hljs-meta\">@GetMapping(value = &quot;/test&quot;)</span><br>    <span class=\"hljs-keyword\">public</span> Object <span class=\"hljs-title function_\">test</span><span class=\"hljs-params\">(HttpServletRequest request)</span> &#123;<br>        System.out.println(request.getHeader(<span class=\"hljs-string\">&quot;X-Request-red&quot;</span>));<br>        System.out.println(request.getParameter(<span class=\"hljs-string\">&quot;red&quot;</span>));<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;app1&quot;</span>;<br>    &#125;<br>&#125;<br><br><br><span class=\"hljs-meta\">@RestController</span><br><span class=\"hljs-meta\">@RequestMapping(value = &quot;/app2&quot;)</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">App2Controller</span> &#123;<br><br>    <span class=\"hljs-meta\">@GetMapping(value = &quot;/test&quot;)</span><br>    <span class=\"hljs-keyword\">public</span> Object <span class=\"hljs-title function_\">test</span><span class=\"hljs-params\">(HttpServletRequest request)</span> &#123;<br>        System.out.println(request.getHeader(<span class=\"hljs-string\">&quot;X-Request-red&quot;</span>));<br>        System.out.println(request.getParameter(<span class=\"hljs-string\">&quot;red&quot;</span>));<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;app2&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>分别访问<a href=\"http://localhost/app1/test%E5%92%8Chttp://localhost/app2/test%EF%BC%8C%E7%BB%93%E6%9E%9C%E5%A6%82%E4%B8%8B%EF%BC%9A\">http://localhost/app1/test和http://localhost/app2/test，结果如下：</a></p>\n<img src=\"/2024/04/02/SpringGateway%E5%AD%A6%E4%B9%A02/image8.png\" class=\"\">\n<img src=\"/2024/04/02/SpringGateway%E5%AD%A6%E4%B9%A02/image9.png\" class=\"\">\n\n<h4 id=\"2-2-GlobalFilter\"><a href=\"#2-2-GlobalFilter\" class=\"headerlink\" title=\"2.2. GlobalFilter\"></a>2.2. GlobalFilter</h4><p>GlobalFilter是应用于所有路由的特殊过滤器</p>\n<img src=\"/2024/04/02/SpringGateway%E5%AD%A6%E4%B9%A02/image10.png\" class=\"\">\n<p>通过全局网关过滤器，我们可以很方便的实现统一鉴权，下面我们自定义一个全局过滤器，通过token判断用户是否登录，从而实现一个统一的鉴权。<br>我们在gateway项目中，添加一个鉴权的全局网关过滤器：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> com.young.filter;<br><br><span class=\"hljs-keyword\">import</span> com.alibaba.fastjson.JSONObject;<br><span class=\"hljs-keyword\">import</span> org.springframework.cloud.gateway.filter.GatewayFilterChain;<br><span class=\"hljs-keyword\">import</span> org.springframework.cloud.gateway.filter.GlobalFilter;<br><span class=\"hljs-keyword\">import</span> org.springframework.core.Ordered;<br><span class=\"hljs-keyword\">import</span> org.springframework.core.io.buffer.DataBuffer;<br><span class=\"hljs-keyword\">import</span> org.springframework.http.HttpStatus;<br><span class=\"hljs-keyword\">import</span> org.springframework.http.server.reactive.ServerHttpRequest;<br><span class=\"hljs-keyword\">import</span> org.springframework.http.server.reactive.ServerHttpResponse;<br><span class=\"hljs-keyword\">import</span> org.springframework.stereotype.Component;<br><span class=\"hljs-keyword\">import</span> org.springframework.util.StringUtils;<br><span class=\"hljs-keyword\">import</span> org.springframework.web.server.ServerWebExchange;<br><span class=\"hljs-keyword\">import</span> reactor.core.publisher.Flux;<br><span class=\"hljs-keyword\">import</span> reactor.core.publisher.Mono;<br><br><span class=\"hljs-meta\">@Component</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">AuthorizeFilter</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">GlobalFilter</span>, Ordered &#123;<br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> Mono&lt;Void&gt; <span class=\"hljs-title function_\">filter</span><span class=\"hljs-params\">(ServerWebExchange exchange, GatewayFilterChain chain)</span> &#123;<br>        <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">ServerHttpResponse</span> <span class=\"hljs-variable\">servletResponse</span> <span class=\"hljs-operator\">=</span> exchange.getResponse();<br>        <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">ServerHttpRequest</span> <span class=\"hljs-variable\">servletRequest</span> <span class=\"hljs-operator\">=</span> exchange.getRequest();<br>        <span class=\"hljs-comment\">// 获取token参数</span><br>        <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">token</span> <span class=\"hljs-operator\">=</span> servletRequest.getHeaders().getFirst(<span class=\"hljs-string\">&quot;token&quot;</span>);<br>        <span class=\"hljs-keyword\">if</span> (StringUtils.isEmpty(token)) &#123;<br>            servletResponse.setStatusCode(HttpStatus.UNAUTHORIZED);<br>            servletResponse.getHeaders().add(<span class=\"hljs-string\">&quot;Content-Type&quot;</span>, <span class=\"hljs-string\">&quot;application/json;charset=UTF-8&quot;</span>);<br>            <span class=\"hljs-type\">JSONObject</span> <span class=\"hljs-variable\">jsonObject</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">JSONObject</span>();<br>            jsonObject.put(<span class=\"hljs-string\">&quot;code&quot;</span>, <span class=\"hljs-string\">&quot;403&quot;</span>);<br>            jsonObject.put(<span class=\"hljs-string\">&quot;message&quot;</span>, <span class=\"hljs-string\">&quot;token is empty&quot;</span>);<br>            <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">DataBuffer</span> <span class=\"hljs-variable\">dataBuffer</span> <span class=\"hljs-operator\">=</span> servletResponse.bufferFactory().wrap(jsonObject.toJSONString().getBytes());<br>            <span class=\"hljs-keyword\">return</span> servletResponse.writeWith(Flux.just(dataBuffer));<br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> chain.filter(exchange);<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">getOrder</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>重新启动项目，然后访问<a href=\"http://localhost/app1/test\">http://localhost/app1/test</a></p>\n<img src=\"/2024/04/02/SpringGateway%E5%AD%A6%E4%B9%A02/image11.png\" class=\"\">\n<p>由于没有携带token，因此被拦截住，假设我们现在在请求头上添加token，再次访问，结果如下：</p>\n<img src=\"/2024/04/02/SpringGateway%E5%AD%A6%E4%B9%A02/image12.png\" class=\"\">\n<p>此时能够访问成功，这里只是为了演示，因此鉴权逻辑写的比较简单，真实情况下的鉴权，可以基于此进行扩展和补充。</p>\n<h3 id=\"3-参考文档\"><a href=\"#3-参考文档\" class=\"headerlink\" title=\"3. 参考文档\"></a>3. 参考文档</h3><p><a href=\"https://blog.csdn.net/zouliping123456/article/details/116128179\">https://blog.csdn.net/zouliping123456/article/details/116128179</a></p>\n"},{"title":"Nacos学习1—介绍、配置中心","date":"2024-04-02T12:17:20.000Z","_content":"### 1. 背景\n在之前的Spring Cloud Gateway学习中，我们了解了网关相关配置，包括断言、过滤器等内容。在之前的文章中，我们是将这些配置，写到application.yml上，而一般情况下，我们Spring Cloud Gateway的网关配置，肯定不会是一成不变的，如果配置信息是在application.yml上，那么当我们需要添加其他的路由配置时，就先修改application.yml配置，然后重启服务，这不利于用户使用和产品的稳定。我们希望通过一个配置中心，来方便我们对这些路由信息进行统一的维护、管理。\n#### 1.1. 配置中心思路\n配置中心的一般思路为：\n1） 首先把项目中的各种配置全部放到一个集中的地方进行统一管理，并提供一套标准接口。\n2）当各个服务需要获取配置的时候，就来配置中心的接口拉取自己的配置。\n3）当配置中心中的各种参数有更新的时候，也能通知到各个服务实时同步最新的消息，使之动态更新。\n当加入服务配置中心后，我们的系统架构图如下：\n{% asset_img image.png %}\n#### 1.2. 常用的服务配置中心\nSpring Cloud Config:官方提供的分布式系统的外部配置中心。\nNacos:阿里开源的框架，致力于发现、配置和管理微服务。Nacos提供了一组简单易用的特性集，帮助您快速实现动态服务发现、服务配置、服务元数据及流量管理。\nApollo：携程框架部门研发的开源配置管理中心，能够集中化管理应用不同环境、不同集群的配置，配置修改后能够实时推送到应用端，并且具备规范的权限、流程治理等特性。\n{% asset_img image1.png %}\n### 2. Nacos介绍和环境搭建\n#### 2.1. Nacos介绍\nNacos是阿里巴巴推出的一个更易于构建云原生应用的动态服务发现、配置管理和服务管理平台。\nNacos的关键特性有以下几点：\n1）服务发现和服务健康检测\nNacos 提供对服务的实时的健康检查，阻止向不健康的主机或服务实例发送请求。Nacos 支持传输层 (PING 或 TCP)和应用层 (如 HTTP、MySQL、用户自定义）的健康检查。 对于复杂的云环境和网络拓扑环境中（如 VPC、边缘网络等）服务的健康检查，Nacos 提供了 agent 上报模式和服务端主动检测2种健康检查模式。\n2）动态配置服务\n动态配置服务可以让您以中心化、外部化和动态化的方式管理所有环境的应用配置和服务配置。\n动态配置消除了配置变更时重新部署应用和服务的需要，让配置管理变得更加高效和敏捷。\n配置中心化管理让实现无状态服务变得更简单，让服务按需弹性扩展变得更容易。\n3）动态DNS服务\n动态 DNS 服务支持权重路由，从而更方便地实现中间层负载均衡、更灵活的路由策略、流量控制以及数据中心内网的简单DNS解析服务。\n4）服务及其元数据管理\nNacos 能让您从微服务平台建设的视角管理数据中心的所有服务及元数据，包括管理服务的描述、生命周期、服务的静态依赖分析、服务的健康状态、服务的流量管理、路由及安全策略、服务的 SLA 以及最首要的 metrics 统计数据。\n#### 2.2. Nacos环境搭建\n进入Nacos官网：https://nacos.io\n{% asset_img image2.png %}\n点击前往github，跳转至github下载页面，然后点击tags选择要下载的版本\n{% asset_img image3.png %}\n下载完毕后解压到需要安装的目录\n{% asset_img image5.png %}\n解压完毕后，进入bin目录，修改启动文件startup.cmd，将mode由\"cluster\"改为standalone\n{% asset_img image6.png %}\n修改完毕后，双击startup.cmd启动Nacos服务\n{% asset_img image7.png %}\n访问http://localhost:8848/nacos，默认的用户名和密码为\"nacos\"。\n{% asset_img image8.png %}\n### 3. Nacos Config配置中心\n#### 3.1. 基本使用\n添加Nacos config的依赖\n{% asset_img image9.png %}\n注意，如果是在springboot2.4.x的版本之后，对于bootstrap.properties和bootstrap.yaml配置文件，需要在pom中加入依赖：\n{% asset_img image10.png %}\n然后添加配置文件，注意，不能使用application.yml，要新建一个bootstrap.yml作为配置文件\n配置文件有优先级为：\nbootstrap.properties  > bootstrap.yml > application.properties > application.yml\n假设我们当前的配置如下：\n{% asset_img image11.png %}\n然后我们添加一个controller用于测试，下面这个controller的hello方法，会返回helloWorld的值，这里我先设置了一个默认值为“defalut value”\n{% asset_img image12.png %}\n当我们的hello.world在nacos上没有进行配置时，那么我们访问http://localhost:80/test/hello，结果如下图所示：\n{% asset_img image13.png %}\n现在我进入nacos官网，新建对应的配置，如下图所示，点击左边的创建配置\n{% asset_img image14.png %}\n{% asset_img image15.png %}\n然后填写dataId,group,配置类型和配置的内容，注意，这里的data id要和我们的bootstrap.yml中配置的spring.cloud.nacos.config.name保持一致(如果不配置也可以，不配置的话，默认使用application.name的名称对应的配置）\n{% asset_img image16.png %}\n配置完毕后点击发布\n{% asset_img image17.png %}\n发布完成后，我们再次访问http://localhost:80/test/hello\n{% asset_img image18.png %}\n#### 3.2. dataId\n之所以配置spring.application.name或spring.cloud.nacos.config.name，是因为它是构成Nacos配置管理dataId字段的一部分。在Nacos 中，dataId完整格式如下：\n${prefix}-${spring.profiles.active}.${file-extension}\nprefix: 默认为spring.application.name的值，也可以通过配置项spring.cloud.nacos.config.name来配置\nspring.profiles.active:当前环境对应的profile，当spring.profiles.active为空时，对应的连接符-也不存在\nfile-extension：配置内容的数据格式，可以通过spring.cloud.nacos.config.file-extension来配置，目前只支持properties和yaml类型\n我们修改刚才的bootstrap.yaml配置文件，修改结果如下：\n{% asset_img image19.png %}\n然后在nacos添加一个配置\n{% asset_img image20.png %}\n然后重启应用，访问http://localhost:8080/test/hello，结果如下：\n{% asset_img image21.png %}\n\n#### 4. 参考文章\n使用nacos作为配置中心：https://blog.csdn.net/weixin_65211978/article/details/128102799\n","source":"_posts/Nacos学习1—介绍、配置中心.md","raw":"---\ntitle: Nacos学习1—介绍、配置中心\ndate: 2024-04-02 20:17:20\ntags: \n    - 中间件\n    - Nacos\n---\n### 1. 背景\n在之前的Spring Cloud Gateway学习中，我们了解了网关相关配置，包括断言、过滤器等内容。在之前的文章中，我们是将这些配置，写到application.yml上，而一般情况下，我们Spring Cloud Gateway的网关配置，肯定不会是一成不变的，如果配置信息是在application.yml上，那么当我们需要添加其他的路由配置时，就先修改application.yml配置，然后重启服务，这不利于用户使用和产品的稳定。我们希望通过一个配置中心，来方便我们对这些路由信息进行统一的维护、管理。\n#### 1.1. 配置中心思路\n配置中心的一般思路为：\n1） 首先把项目中的各种配置全部放到一个集中的地方进行统一管理，并提供一套标准接口。\n2）当各个服务需要获取配置的时候，就来配置中心的接口拉取自己的配置。\n3）当配置中心中的各种参数有更新的时候，也能通知到各个服务实时同步最新的消息，使之动态更新。\n当加入服务配置中心后，我们的系统架构图如下：\n{% asset_img image.png %}\n#### 1.2. 常用的服务配置中心\nSpring Cloud Config:官方提供的分布式系统的外部配置中心。\nNacos:阿里开源的框架，致力于发现、配置和管理微服务。Nacos提供了一组简单易用的特性集，帮助您快速实现动态服务发现、服务配置、服务元数据及流量管理。\nApollo：携程框架部门研发的开源配置管理中心，能够集中化管理应用不同环境、不同集群的配置，配置修改后能够实时推送到应用端，并且具备规范的权限、流程治理等特性。\n{% asset_img image1.png %}\n### 2. Nacos介绍和环境搭建\n#### 2.1. Nacos介绍\nNacos是阿里巴巴推出的一个更易于构建云原生应用的动态服务发现、配置管理和服务管理平台。\nNacos的关键特性有以下几点：\n1）服务发现和服务健康检测\nNacos 提供对服务的实时的健康检查，阻止向不健康的主机或服务实例发送请求。Nacos 支持传输层 (PING 或 TCP)和应用层 (如 HTTP、MySQL、用户自定义）的健康检查。 对于复杂的云环境和网络拓扑环境中（如 VPC、边缘网络等）服务的健康检查，Nacos 提供了 agent 上报模式和服务端主动检测2种健康检查模式。\n2）动态配置服务\n动态配置服务可以让您以中心化、外部化和动态化的方式管理所有环境的应用配置和服务配置。\n动态配置消除了配置变更时重新部署应用和服务的需要，让配置管理变得更加高效和敏捷。\n配置中心化管理让实现无状态服务变得更简单，让服务按需弹性扩展变得更容易。\n3）动态DNS服务\n动态 DNS 服务支持权重路由，从而更方便地实现中间层负载均衡、更灵活的路由策略、流量控制以及数据中心内网的简单DNS解析服务。\n4）服务及其元数据管理\nNacos 能让您从微服务平台建设的视角管理数据中心的所有服务及元数据，包括管理服务的描述、生命周期、服务的静态依赖分析、服务的健康状态、服务的流量管理、路由及安全策略、服务的 SLA 以及最首要的 metrics 统计数据。\n#### 2.2. Nacos环境搭建\n进入Nacos官网：https://nacos.io\n{% asset_img image2.png %}\n点击前往github，跳转至github下载页面，然后点击tags选择要下载的版本\n{% asset_img image3.png %}\n下载完毕后解压到需要安装的目录\n{% asset_img image5.png %}\n解压完毕后，进入bin目录，修改启动文件startup.cmd，将mode由\"cluster\"改为standalone\n{% asset_img image6.png %}\n修改完毕后，双击startup.cmd启动Nacos服务\n{% asset_img image7.png %}\n访问http://localhost:8848/nacos，默认的用户名和密码为\"nacos\"。\n{% asset_img image8.png %}\n### 3. Nacos Config配置中心\n#### 3.1. 基本使用\n添加Nacos config的依赖\n{% asset_img image9.png %}\n注意，如果是在springboot2.4.x的版本之后，对于bootstrap.properties和bootstrap.yaml配置文件，需要在pom中加入依赖：\n{% asset_img image10.png %}\n然后添加配置文件，注意，不能使用application.yml，要新建一个bootstrap.yml作为配置文件\n配置文件有优先级为：\nbootstrap.properties  > bootstrap.yml > application.properties > application.yml\n假设我们当前的配置如下：\n{% asset_img image11.png %}\n然后我们添加一个controller用于测试，下面这个controller的hello方法，会返回helloWorld的值，这里我先设置了一个默认值为“defalut value”\n{% asset_img image12.png %}\n当我们的hello.world在nacos上没有进行配置时，那么我们访问http://localhost:80/test/hello，结果如下图所示：\n{% asset_img image13.png %}\n现在我进入nacos官网，新建对应的配置，如下图所示，点击左边的创建配置\n{% asset_img image14.png %}\n{% asset_img image15.png %}\n然后填写dataId,group,配置类型和配置的内容，注意，这里的data id要和我们的bootstrap.yml中配置的spring.cloud.nacos.config.name保持一致(如果不配置也可以，不配置的话，默认使用application.name的名称对应的配置）\n{% asset_img image16.png %}\n配置完毕后点击发布\n{% asset_img image17.png %}\n发布完成后，我们再次访问http://localhost:80/test/hello\n{% asset_img image18.png %}\n#### 3.2. dataId\n之所以配置spring.application.name或spring.cloud.nacos.config.name，是因为它是构成Nacos配置管理dataId字段的一部分。在Nacos 中，dataId完整格式如下：\n${prefix}-${spring.profiles.active}.${file-extension}\nprefix: 默认为spring.application.name的值，也可以通过配置项spring.cloud.nacos.config.name来配置\nspring.profiles.active:当前环境对应的profile，当spring.profiles.active为空时，对应的连接符-也不存在\nfile-extension：配置内容的数据格式，可以通过spring.cloud.nacos.config.file-extension来配置，目前只支持properties和yaml类型\n我们修改刚才的bootstrap.yaml配置文件，修改结果如下：\n{% asset_img image19.png %}\n然后在nacos添加一个配置\n{% asset_img image20.png %}\n然后重启应用，访问http://localhost:8080/test/hello，结果如下：\n{% asset_img image21.png %}\n\n#### 4. 参考文章\n使用nacos作为配置中心：https://blog.csdn.net/weixin_65211978/article/details/128102799\n","slug":"Nacos学习1—介绍、配置中心","published":1,"updated":"2024-04-03T05:44:55.909Z","_id":"cluicrpmy000004vlhna8hb7n","comments":1,"layout":"post","photos":[],"content":"<h3 id=\"1-背景\"><a href=\"#1-背景\" class=\"headerlink\" title=\"1. 背景\"></a>1. 背景</h3><p>在之前的Spring Cloud Gateway学习中，我们了解了网关相关配置，包括断言、过滤器等内容。在之前的文章中，我们是将这些配置，写到application.yml上，而一般情况下，我们Spring Cloud Gateway的网关配置，肯定不会是一成不变的，如果配置信息是在application.yml上，那么当我们需要添加其他的路由配置时，就先修改application.yml配置，然后重启服务，这不利于用户使用和产品的稳定。我们希望通过一个配置中心，来方便我们对这些路由信息进行统一的维护、管理。</p>\n<h4 id=\"1-1-配置中心思路\"><a href=\"#1-1-配置中心思路\" class=\"headerlink\" title=\"1.1. 配置中心思路\"></a>1.1. 配置中心思路</h4><p>配置中心的一般思路为：<br>1） 首先把项目中的各种配置全部放到一个集中的地方进行统一管理，并提供一套标准接口。<br>2）当各个服务需要获取配置的时候，就来配置中心的接口拉取自己的配置。<br>3）当配置中心中的各种参数有更新的时候，也能通知到各个服务实时同步最新的消息，使之动态更新。<br>当加入服务配置中心后，我们的系统架构图如下：</p>\n<img src=\"/2024/04/02/Nacos%E5%AD%A6%E4%B9%A01%E2%80%94%E4%BB%8B%E7%BB%8D%E3%80%81%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/image.png\" class=\"\">\n<h4 id=\"1-2-常用的服务配置中心\"><a href=\"#1-2-常用的服务配置中心\" class=\"headerlink\" title=\"1.2. 常用的服务配置中心\"></a>1.2. 常用的服务配置中心</h4><p>Spring Cloud Config:官方提供的分布式系统的外部配置中心。<br>Nacos:阿里开源的框架，致力于发现、配置和管理微服务。Nacos提供了一组简单易用的特性集，帮助您快速实现动态服务发现、服务配置、服务元数据及流量管理。<br>Apollo：携程框架部门研发的开源配置管理中心，能够集中化管理应用不同环境、不同集群的配置，配置修改后能够实时推送到应用端，并且具备规范的权限、流程治理等特性。</p>\n<img src=\"/2024/04/02/Nacos%E5%AD%A6%E4%B9%A01%E2%80%94%E4%BB%8B%E7%BB%8D%E3%80%81%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/image1.png\" class=\"\">\n<h3 id=\"2-Nacos介绍和环境搭建\"><a href=\"#2-Nacos介绍和环境搭建\" class=\"headerlink\" title=\"2. Nacos介绍和环境搭建\"></a>2. Nacos介绍和环境搭建</h3><h4 id=\"2-1-Nacos介绍\"><a href=\"#2-1-Nacos介绍\" class=\"headerlink\" title=\"2.1. Nacos介绍\"></a>2.1. Nacos介绍</h4><p>Nacos是阿里巴巴推出的一个更易于构建云原生应用的动态服务发现、配置管理和服务管理平台。<br>Nacos的关键特性有以下几点：<br>1）服务发现和服务健康检测<br>Nacos 提供对服务的实时的健康检查，阻止向不健康的主机或服务实例发送请求。Nacos 支持传输层 (PING 或 TCP)和应用层 (如 HTTP、MySQL、用户自定义）的健康检查。 对于复杂的云环境和网络拓扑环境中（如 VPC、边缘网络等）服务的健康检查，Nacos 提供了 agent 上报模式和服务端主动检测2种健康检查模式。<br>2）动态配置服务<br>动态配置服务可以让您以中心化、外部化和动态化的方式管理所有环境的应用配置和服务配置。<br>动态配置消除了配置变更时重新部署应用和服务的需要，让配置管理变得更加高效和敏捷。<br>配置中心化管理让实现无状态服务变得更简单，让服务按需弹性扩展变得更容易。<br>3）动态DNS服务<br>动态 DNS 服务支持权重路由，从而更方便地实现中间层负载均衡、更灵活的路由策略、流量控制以及数据中心内网的简单DNS解析服务。<br>4）服务及其元数据管理<br>Nacos 能让您从微服务平台建设的视角管理数据中心的所有服务及元数据，包括管理服务的描述、生命周期、服务的静态依赖分析、服务的健康状态、服务的流量管理、路由及安全策略、服务的 SLA 以及最首要的 metrics 统计数据。</p>\n<h4 id=\"2-2-Nacos环境搭建\"><a href=\"#2-2-Nacos环境搭建\" class=\"headerlink\" title=\"2.2. Nacos环境搭建\"></a>2.2. Nacos环境搭建</h4><p>进入Nacos官网：<a href=\"https://nacos.io/\">https://nacos.io</a></p>\n<img src=\"/2024/04/02/Nacos%E5%AD%A6%E4%B9%A01%E2%80%94%E4%BB%8B%E7%BB%8D%E3%80%81%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/image2.png\" class=\"\">\n<p>点击前往github，跳转至github下载页面，然后点击tags选择要下载的版本</p>\n<img src=\"/2024/04/02/Nacos%E5%AD%A6%E4%B9%A01%E2%80%94%E4%BB%8B%E7%BB%8D%E3%80%81%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/image3.png\" class=\"\">\n<p>下载完毕后解压到需要安装的目录</p>\n<img src=\"/2024/04/02/Nacos%E5%AD%A6%E4%B9%A01%E2%80%94%E4%BB%8B%E7%BB%8D%E3%80%81%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/image5.png\" class=\"\">\n<p>解压完毕后，进入bin目录，修改启动文件startup.cmd，将mode由”cluster”改为standalone</p>\n<img src=\"/2024/04/02/Nacos%E5%AD%A6%E4%B9%A01%E2%80%94%E4%BB%8B%E7%BB%8D%E3%80%81%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/image6.png\" class=\"\">\n<p>修改完毕后，双击startup.cmd启动Nacos服务</p>\n<img src=\"/2024/04/02/Nacos%E5%AD%A6%E4%B9%A01%E2%80%94%E4%BB%8B%E7%BB%8D%E3%80%81%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/image7.png\" class=\"\">\n<p>访问<a href=\"http://localhost:8848/nacos%EF%BC%8C%E9%BB%98%E8%AE%A4%E7%9A%84%E7%94%A8%E6%88%B7%E5%90%8D%E5%92%8C%E5%AF%86%E7%A0%81%E4%B8%BA%22nacos%22%E3%80%82\">http://localhost:8848/nacos，默认的用户名和密码为&quot;nacos&quot;。</a></p>\n<img src=\"/2024/04/02/Nacos%E5%AD%A6%E4%B9%A01%E2%80%94%E4%BB%8B%E7%BB%8D%E3%80%81%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/image8.png\" class=\"\">\n<h3 id=\"3-Nacos-Config配置中心\"><a href=\"#3-Nacos-Config配置中心\" class=\"headerlink\" title=\"3. Nacos Config配置中心\"></a>3. Nacos Config配置中心</h3><h4 id=\"3-1-基本使用\"><a href=\"#3-1-基本使用\" class=\"headerlink\" title=\"3.1. 基本使用\"></a>3.1. 基本使用</h4><p>添加Nacos config的依赖</p>\n<img src=\"/2024/04/02/Nacos%E5%AD%A6%E4%B9%A01%E2%80%94%E4%BB%8B%E7%BB%8D%E3%80%81%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/image9.png\" class=\"\">\n<p>注意，如果是在springboot2.4.x的版本之后，对于bootstrap.properties和bootstrap.yaml配置文件，需要在pom中加入依赖：</p>\n<img src=\"/2024/04/02/Nacos%E5%AD%A6%E4%B9%A01%E2%80%94%E4%BB%8B%E7%BB%8D%E3%80%81%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/image10.png\" class=\"\">\n<p>然后添加配置文件，注意，不能使用application.yml，要新建一个bootstrap.yml作为配置文件<br>配置文件有优先级为：<br>bootstrap.properties  &gt; bootstrap.yml &gt; application.properties &gt; application.yml<br>假设我们当前的配置如下：</p>\n<img src=\"/2024/04/02/Nacos%E5%AD%A6%E4%B9%A01%E2%80%94%E4%BB%8B%E7%BB%8D%E3%80%81%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/image11.png\" class=\"\">\n<p>然后我们添加一个controller用于测试，下面这个controller的hello方法，会返回helloWorld的值，这里我先设置了一个默认值为“defalut value”</p>\n<img src=\"/2024/04/02/Nacos%E5%AD%A6%E4%B9%A01%E2%80%94%E4%BB%8B%E7%BB%8D%E3%80%81%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/image12.png\" class=\"\">\n<p>当我们的hello.world在nacos上没有进行配置时，那么我们访问<a href=\"http://localhost/test/hello%EF%BC%8C%E7%BB%93%E6%9E%9C%E5%A6%82%E4%B8%8B%E5%9B%BE%E6%89%80%E7%A4%BA%EF%BC%9A\">http://localhost:80/test/hello，结果如下图所示：</a></p>\n<img src=\"/2024/04/02/Nacos%E5%AD%A6%E4%B9%A01%E2%80%94%E4%BB%8B%E7%BB%8D%E3%80%81%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/image13.png\" class=\"\">\n<p>现在我进入nacos官网，新建对应的配置，如下图所示，点击左边的创建配置</p>\n<img src=\"/2024/04/02/Nacos%E5%AD%A6%E4%B9%A01%E2%80%94%E4%BB%8B%E7%BB%8D%E3%80%81%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/image14.png\" class=\"\">\n<img src=\"/2024/04/02/Nacos%E5%AD%A6%E4%B9%A01%E2%80%94%E4%BB%8B%E7%BB%8D%E3%80%81%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/image15.png\" class=\"\">\n<p>然后填写dataId,group,配置类型和配置的内容，注意，这里的data id要和我们的bootstrap.yml中配置的spring.cloud.nacos.config.name保持一致(如果不配置也可以，不配置的话，默认使用application.name的名称对应的配置）</p>\n<img src=\"/2024/04/02/Nacos%E5%AD%A6%E4%B9%A01%E2%80%94%E4%BB%8B%E7%BB%8D%E3%80%81%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/image16.png\" class=\"\">\n<p>配置完毕后点击发布</p>\n<img src=\"/2024/04/02/Nacos%E5%AD%A6%E4%B9%A01%E2%80%94%E4%BB%8B%E7%BB%8D%E3%80%81%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/image17.png\" class=\"\">\n<p>发布完成后，我们再次访问<a href=\"http://localhost/test/hello\">http://localhost:80/test/hello</a></p>\n<img src=\"/2024/04/02/Nacos%E5%AD%A6%E4%B9%A01%E2%80%94%E4%BB%8B%E7%BB%8D%E3%80%81%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/image18.png\" class=\"\">\n<h4 id=\"3-2-dataId\"><a href=\"#3-2-dataId\" class=\"headerlink\" title=\"3.2. dataId\"></a>3.2. dataId</h4><p>之所以配置spring.application.name或spring.cloud.nacos.config.name，是因为它是构成Nacos配置管理dataId字段的一部分。在Nacos 中，dataId完整格式如下：<br>${prefix}-${spring.profiles.active}.${file-extension}<br>prefix: 默认为spring.application.name的值，也可以通过配置项spring.cloud.nacos.config.name来配置<br>spring.profiles.active:当前环境对应的profile，当spring.profiles.active为空时，对应的连接符-也不存在<br>file-extension：配置内容的数据格式，可以通过spring.cloud.nacos.config.file-extension来配置，目前只支持properties和yaml类型<br>我们修改刚才的bootstrap.yaml配置文件，修改结果如下：</p>\n<img src=\"/2024/04/02/Nacos%E5%AD%A6%E4%B9%A01%E2%80%94%E4%BB%8B%E7%BB%8D%E3%80%81%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/image19.png\" class=\"\">\n<p>然后在nacos添加一个配置</p>\n<img src=\"/2024/04/02/Nacos%E5%AD%A6%E4%B9%A01%E2%80%94%E4%BB%8B%E7%BB%8D%E3%80%81%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/image20.png\" class=\"\">\n<p>然后重启应用，访问<a href=\"http://localhost:8080/test/hello%EF%BC%8C%E7%BB%93%E6%9E%9C%E5%A6%82%E4%B8%8B%EF%BC%9A\">http://localhost:8080/test/hello，结果如下：</a></p>\n<img src=\"/2024/04/02/Nacos%E5%AD%A6%E4%B9%A01%E2%80%94%E4%BB%8B%E7%BB%8D%E3%80%81%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/image21.png\" class=\"\">\n\n<h4 id=\"4-参考文章\"><a href=\"#4-参考文章\" class=\"headerlink\" title=\"4. 参考文章\"></a>4. 参考文章</h4><p>使用nacos作为配置中心：<a href=\"https://blog.csdn.net/weixin_65211978/article/details/128102799\">https://blog.csdn.net/weixin_65211978/article/details/128102799</a></p>\n","excerpt":"","more":"<h3 id=\"1-背景\"><a href=\"#1-背景\" class=\"headerlink\" title=\"1. 背景\"></a>1. 背景</h3><p>在之前的Spring Cloud Gateway学习中，我们了解了网关相关配置，包括断言、过滤器等内容。在之前的文章中，我们是将这些配置，写到application.yml上，而一般情况下，我们Spring Cloud Gateway的网关配置，肯定不会是一成不变的，如果配置信息是在application.yml上，那么当我们需要添加其他的路由配置时，就先修改application.yml配置，然后重启服务，这不利于用户使用和产品的稳定。我们希望通过一个配置中心，来方便我们对这些路由信息进行统一的维护、管理。</p>\n<h4 id=\"1-1-配置中心思路\"><a href=\"#1-1-配置中心思路\" class=\"headerlink\" title=\"1.1. 配置中心思路\"></a>1.1. 配置中心思路</h4><p>配置中心的一般思路为：<br>1） 首先把项目中的各种配置全部放到一个集中的地方进行统一管理，并提供一套标准接口。<br>2）当各个服务需要获取配置的时候，就来配置中心的接口拉取自己的配置。<br>3）当配置中心中的各种参数有更新的时候，也能通知到各个服务实时同步最新的消息，使之动态更新。<br>当加入服务配置中心后，我们的系统架构图如下：</p>\n<img src=\"/2024/04/02/Nacos%E5%AD%A6%E4%B9%A01%E2%80%94%E4%BB%8B%E7%BB%8D%E3%80%81%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/image.png\" class=\"\">\n<h4 id=\"1-2-常用的服务配置中心\"><a href=\"#1-2-常用的服务配置中心\" class=\"headerlink\" title=\"1.2. 常用的服务配置中心\"></a>1.2. 常用的服务配置中心</h4><p>Spring Cloud Config:官方提供的分布式系统的外部配置中心。<br>Nacos:阿里开源的框架，致力于发现、配置和管理微服务。Nacos提供了一组简单易用的特性集，帮助您快速实现动态服务发现、服务配置、服务元数据及流量管理。<br>Apollo：携程框架部门研发的开源配置管理中心，能够集中化管理应用不同环境、不同集群的配置，配置修改后能够实时推送到应用端，并且具备规范的权限、流程治理等特性。</p>\n<img src=\"/2024/04/02/Nacos%E5%AD%A6%E4%B9%A01%E2%80%94%E4%BB%8B%E7%BB%8D%E3%80%81%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/image1.png\" class=\"\">\n<h3 id=\"2-Nacos介绍和环境搭建\"><a href=\"#2-Nacos介绍和环境搭建\" class=\"headerlink\" title=\"2. Nacos介绍和环境搭建\"></a>2. Nacos介绍和环境搭建</h3><h4 id=\"2-1-Nacos介绍\"><a href=\"#2-1-Nacos介绍\" class=\"headerlink\" title=\"2.1. Nacos介绍\"></a>2.1. Nacos介绍</h4><p>Nacos是阿里巴巴推出的一个更易于构建云原生应用的动态服务发现、配置管理和服务管理平台。<br>Nacos的关键特性有以下几点：<br>1）服务发现和服务健康检测<br>Nacos 提供对服务的实时的健康检查，阻止向不健康的主机或服务实例发送请求。Nacos 支持传输层 (PING 或 TCP)和应用层 (如 HTTP、MySQL、用户自定义）的健康检查。 对于复杂的云环境和网络拓扑环境中（如 VPC、边缘网络等）服务的健康检查，Nacos 提供了 agent 上报模式和服务端主动检测2种健康检查模式。<br>2）动态配置服务<br>动态配置服务可以让您以中心化、外部化和动态化的方式管理所有环境的应用配置和服务配置。<br>动态配置消除了配置变更时重新部署应用和服务的需要，让配置管理变得更加高效和敏捷。<br>配置中心化管理让实现无状态服务变得更简单，让服务按需弹性扩展变得更容易。<br>3）动态DNS服务<br>动态 DNS 服务支持权重路由，从而更方便地实现中间层负载均衡、更灵活的路由策略、流量控制以及数据中心内网的简单DNS解析服务。<br>4）服务及其元数据管理<br>Nacos 能让您从微服务平台建设的视角管理数据中心的所有服务及元数据，包括管理服务的描述、生命周期、服务的静态依赖分析、服务的健康状态、服务的流量管理、路由及安全策略、服务的 SLA 以及最首要的 metrics 统计数据。</p>\n<h4 id=\"2-2-Nacos环境搭建\"><a href=\"#2-2-Nacos环境搭建\" class=\"headerlink\" title=\"2.2. Nacos环境搭建\"></a>2.2. Nacos环境搭建</h4><p>进入Nacos官网：<a href=\"https://nacos.io/\">https://nacos.io</a></p>\n<img src=\"/2024/04/02/Nacos%E5%AD%A6%E4%B9%A01%E2%80%94%E4%BB%8B%E7%BB%8D%E3%80%81%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/image2.png\" class=\"\">\n<p>点击前往github，跳转至github下载页面，然后点击tags选择要下载的版本</p>\n<img src=\"/2024/04/02/Nacos%E5%AD%A6%E4%B9%A01%E2%80%94%E4%BB%8B%E7%BB%8D%E3%80%81%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/image3.png\" class=\"\">\n<p>下载完毕后解压到需要安装的目录</p>\n<img src=\"/2024/04/02/Nacos%E5%AD%A6%E4%B9%A01%E2%80%94%E4%BB%8B%E7%BB%8D%E3%80%81%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/image5.png\" class=\"\">\n<p>解压完毕后，进入bin目录，修改启动文件startup.cmd，将mode由”cluster”改为standalone</p>\n<img src=\"/2024/04/02/Nacos%E5%AD%A6%E4%B9%A01%E2%80%94%E4%BB%8B%E7%BB%8D%E3%80%81%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/image6.png\" class=\"\">\n<p>修改完毕后，双击startup.cmd启动Nacos服务</p>\n<img src=\"/2024/04/02/Nacos%E5%AD%A6%E4%B9%A01%E2%80%94%E4%BB%8B%E7%BB%8D%E3%80%81%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/image7.png\" class=\"\">\n<p>访问<a href=\"http://localhost:8848/nacos%EF%BC%8C%E9%BB%98%E8%AE%A4%E7%9A%84%E7%94%A8%E6%88%B7%E5%90%8D%E5%92%8C%E5%AF%86%E7%A0%81%E4%B8%BA%22nacos%22%E3%80%82\">http://localhost:8848/nacos，默认的用户名和密码为&quot;nacos&quot;。</a></p>\n<img src=\"/2024/04/02/Nacos%E5%AD%A6%E4%B9%A01%E2%80%94%E4%BB%8B%E7%BB%8D%E3%80%81%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/image8.png\" class=\"\">\n<h3 id=\"3-Nacos-Config配置中心\"><a href=\"#3-Nacos-Config配置中心\" class=\"headerlink\" title=\"3. Nacos Config配置中心\"></a>3. Nacos Config配置中心</h3><h4 id=\"3-1-基本使用\"><a href=\"#3-1-基本使用\" class=\"headerlink\" title=\"3.1. 基本使用\"></a>3.1. 基本使用</h4><p>添加Nacos config的依赖</p>\n<img src=\"/2024/04/02/Nacos%E5%AD%A6%E4%B9%A01%E2%80%94%E4%BB%8B%E7%BB%8D%E3%80%81%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/image9.png\" class=\"\">\n<p>注意，如果是在springboot2.4.x的版本之后，对于bootstrap.properties和bootstrap.yaml配置文件，需要在pom中加入依赖：</p>\n<img src=\"/2024/04/02/Nacos%E5%AD%A6%E4%B9%A01%E2%80%94%E4%BB%8B%E7%BB%8D%E3%80%81%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/image10.png\" class=\"\">\n<p>然后添加配置文件，注意，不能使用application.yml，要新建一个bootstrap.yml作为配置文件<br>配置文件有优先级为：<br>bootstrap.properties  &gt; bootstrap.yml &gt; application.properties &gt; application.yml<br>假设我们当前的配置如下：</p>\n<img src=\"/2024/04/02/Nacos%E5%AD%A6%E4%B9%A01%E2%80%94%E4%BB%8B%E7%BB%8D%E3%80%81%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/image11.png\" class=\"\">\n<p>然后我们添加一个controller用于测试，下面这个controller的hello方法，会返回helloWorld的值，这里我先设置了一个默认值为“defalut value”</p>\n<img src=\"/2024/04/02/Nacos%E5%AD%A6%E4%B9%A01%E2%80%94%E4%BB%8B%E7%BB%8D%E3%80%81%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/image12.png\" class=\"\">\n<p>当我们的hello.world在nacos上没有进行配置时，那么我们访问<a href=\"http://localhost/test/hello%EF%BC%8C%E7%BB%93%E6%9E%9C%E5%A6%82%E4%B8%8B%E5%9B%BE%E6%89%80%E7%A4%BA%EF%BC%9A\">http://localhost:80/test/hello，结果如下图所示：</a></p>\n<img src=\"/2024/04/02/Nacos%E5%AD%A6%E4%B9%A01%E2%80%94%E4%BB%8B%E7%BB%8D%E3%80%81%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/image13.png\" class=\"\">\n<p>现在我进入nacos官网，新建对应的配置，如下图所示，点击左边的创建配置</p>\n<img src=\"/2024/04/02/Nacos%E5%AD%A6%E4%B9%A01%E2%80%94%E4%BB%8B%E7%BB%8D%E3%80%81%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/image14.png\" class=\"\">\n<img src=\"/2024/04/02/Nacos%E5%AD%A6%E4%B9%A01%E2%80%94%E4%BB%8B%E7%BB%8D%E3%80%81%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/image15.png\" class=\"\">\n<p>然后填写dataId,group,配置类型和配置的内容，注意，这里的data id要和我们的bootstrap.yml中配置的spring.cloud.nacos.config.name保持一致(如果不配置也可以，不配置的话，默认使用application.name的名称对应的配置）</p>\n<img src=\"/2024/04/02/Nacos%E5%AD%A6%E4%B9%A01%E2%80%94%E4%BB%8B%E7%BB%8D%E3%80%81%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/image16.png\" class=\"\">\n<p>配置完毕后点击发布</p>\n<img src=\"/2024/04/02/Nacos%E5%AD%A6%E4%B9%A01%E2%80%94%E4%BB%8B%E7%BB%8D%E3%80%81%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/image17.png\" class=\"\">\n<p>发布完成后，我们再次访问<a href=\"http://localhost/test/hello\">http://localhost:80/test/hello</a></p>\n<img src=\"/2024/04/02/Nacos%E5%AD%A6%E4%B9%A01%E2%80%94%E4%BB%8B%E7%BB%8D%E3%80%81%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/image18.png\" class=\"\">\n<h4 id=\"3-2-dataId\"><a href=\"#3-2-dataId\" class=\"headerlink\" title=\"3.2. dataId\"></a>3.2. dataId</h4><p>之所以配置spring.application.name或spring.cloud.nacos.config.name，是因为它是构成Nacos配置管理dataId字段的一部分。在Nacos 中，dataId完整格式如下：<br>${prefix}-${spring.profiles.active}.${file-extension}<br>prefix: 默认为spring.application.name的值，也可以通过配置项spring.cloud.nacos.config.name来配置<br>spring.profiles.active:当前环境对应的profile，当spring.profiles.active为空时，对应的连接符-也不存在<br>file-extension：配置内容的数据格式，可以通过spring.cloud.nacos.config.file-extension来配置，目前只支持properties和yaml类型<br>我们修改刚才的bootstrap.yaml配置文件，修改结果如下：</p>\n<img src=\"/2024/04/02/Nacos%E5%AD%A6%E4%B9%A01%E2%80%94%E4%BB%8B%E7%BB%8D%E3%80%81%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/image19.png\" class=\"\">\n<p>然后在nacos添加一个配置</p>\n<img src=\"/2024/04/02/Nacos%E5%AD%A6%E4%B9%A01%E2%80%94%E4%BB%8B%E7%BB%8D%E3%80%81%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/image20.png\" class=\"\">\n<p>然后重启应用，访问<a href=\"http://localhost:8080/test/hello%EF%BC%8C%E7%BB%93%E6%9E%9C%E5%A6%82%E4%B8%8B%EF%BC%9A\">http://localhost:8080/test/hello，结果如下：</a></p>\n<img src=\"/2024/04/02/Nacos%E5%AD%A6%E4%B9%A01%E2%80%94%E4%BB%8B%E7%BB%8D%E3%80%81%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/image21.png\" class=\"\">\n\n<h4 id=\"4-参考文章\"><a href=\"#4-参考文章\" class=\"headerlink\" title=\"4. 参考文章\"></a>4. 参考文章</h4><p>使用nacos作为配置中心：<a href=\"https://blog.csdn.net/weixin_65211978/article/details/128102799\">https://blog.csdn.net/weixin_65211978/article/details/128102799</a></p>\n"},{"title":"Nacos学习2—Nacos配置中心","date":"2024-04-02T12:28:45.000Z","_content":"在上一节中，介绍了Nacos配置中心的入门使用，在这一节，会讲解关于nacos配置中心的其他概念，比如命名空间、共享配置、以及如何在服务端更新nacos配置。\n### 1. nacos的基础概念\n如下图所示，在nacos配置中，namespace、group、dataId为最基础的、最重要的三个概念。\nnamespace: 命名空间可用于进行不同环境的配置隔离。一般一个环境划分到一个命名空间\ngroup： 配置分组用于将不同的服务可以归类到同一分组。一般将一个项目的配置分到一组\ndataId： 在系统中，一个配置文件通常就是一个配置集（dataId）。一般微服务的配置就是一个配置集\n{% asset_img image.png %}\n当我们没有配置namespace时，其默认值就是public；没有配置group时，默认值为DEFAULT_GROUP，dataId默认是当前应用的application.name。\n进入nacos，点击命名空间，选择新建命名空间\n{% asset_img image1.png %}\n假设我们现在是在开发环境，然后我们创建一个dev命名空间，用于开发环境的相关配置,这里的命名空间id不用填，系统会自动生成\n{% asset_img image2.png %}\n创建成功后，我们复制命名空间id\n{% asset_img image3.png %}\n将这个命名空间id，粘贴到之前bootstrap.yml配置文件的namespace中\n{% asset_img image4.png %}\n然后我们进入dev命名空间，新建一个配置\n{% asset_img image5.png %}\n{% asset_img image6.png %}\n配置完毕后，启动项目，再次访问http://localhost:8080/test/hello，结果如下：\n{% asset_img image7.png %}\n可见，此时读取到的，是dev命名空间下的配置。\n\n### 2. 共享配置\n当我们项目中的服务数量增加后，配置文件也会相应的增加，而多个配置文件中，可能存在相同的配置，因此我们可以将这些相同的配置独立出来，作为该项目各个服务的共享配置文件。\n假设我们现在有两个服务，这两个服务都共享同一个redis数据源和同一个mysql数据源，因此我们可以把这两个数据源的配置，提取成共享配置。\nservice1和service2的bootstrap.yml配置分别如下：\n{% asset_img image8.png %}\n{% asset_img image9.png %}\n这两个服务的bootstrap配置文件内容，基本一样（除了端口号和服务名），除此之外，这里共享配置中，common-redis共享配置的refresh值设置为true，而common-mysql没有设置，也就是说，这两个服务能监听到common-redis配置的变化，而不会关注到common-mysql配置的变化。\n配置完成后，这两个应用，我们都添加下面这个controller类，用于进行测试：\n{% asset_img image10.png %}\n然后，我们在nacos上添加相关的共享配置\n{% asset_img image11.png %}\n{% asset_img image12.png %}\n启动服务1和服务2，然后分别访问获取mysql配置和redis配置的接口\n{% asset_img image13.png %}\n然后我们在分别修改mysql和redis的配置\n{% asset_img image14.png %}\n{% asset_img image15.png %}\n然后再次访问相关的接口，结果如下：\n{% asset_img image16.png %}\n由上图可知，如果公共配置想要获取实时数据，需要加上refresh属性的配置。\n### 3. 扩展配置\n一般情况下，我们的配置文件一个就可以了，但有时候，如果我们的配置分散在多个配置文件时，就需要使用到扩展配置了。\n假设我们现在有两个扩展配置，一个是配置日志打印的，一个是配置消息队列，假设配置内容如下：\next-log.yaml\n{% asset_img image17.png %}\n{% asset_img image18.png %}\nbootstrap.yml内容如下：\n{% asset_img image19.png %}\n添加一个controller用于测试\n{% asset_img image20.png %}\n启动应用，结果如下：\n{% asset_img image21.png %}\n然后我们修改扩展配置\n{% asset_img image22.png %}\n{% asset_img image23.png %}\n再次访问相关的接口\n{% asset_img image24.png %}\n可见，对于扩展配置，如果要获取实时数据，那么也需要加上refresh\n### 4. 更新数据到nacos\n假设我们现在有一个数据迁移的任务，每隔一段时间，会触发这个任务一次，该任务会读取nacos配置中的起始时间和结束时间，然后查询数据库并将查询的数据进行迁移，最后会更新起始时间，然后修改nacos中的配置。\n首先我们在nacos上添加一个和数据迁移相关的配置：\n{% asset_img image25.png %}\n添加一个config，用于构造configService\n{% asset_img image26.png %}\n添加一个定时任务，用于查询nacos配置，并根据nacos配置迁移数据\n{% asset_img image27.png %}\n执行结果如下图所示，每隔十秒执行一次任务，并且将起始时间进行更新。\n{% asset_img image28.png %}\n\n### 5. 参考文档\n（超详细）关于Nacos的共享配置( shared-configs)和拓展配置(extension-config)：https://blog.csdn.net/weixin_42329623/article/details/131018680","source":"_posts/Nacos学习2—Nacos配置中心.md","raw":"---\ntitle: Nacos学习2—Nacos配置中心\ndate: 2024-04-02 20:28:45\ntags: \n    - 中间件\n    - Nacos\n---\n在上一节中，介绍了Nacos配置中心的入门使用，在这一节，会讲解关于nacos配置中心的其他概念，比如命名空间、共享配置、以及如何在服务端更新nacos配置。\n### 1. nacos的基础概念\n如下图所示，在nacos配置中，namespace、group、dataId为最基础的、最重要的三个概念。\nnamespace: 命名空间可用于进行不同环境的配置隔离。一般一个环境划分到一个命名空间\ngroup： 配置分组用于将不同的服务可以归类到同一分组。一般将一个项目的配置分到一组\ndataId： 在系统中，一个配置文件通常就是一个配置集（dataId）。一般微服务的配置就是一个配置集\n{% asset_img image.png %}\n当我们没有配置namespace时，其默认值就是public；没有配置group时，默认值为DEFAULT_GROUP，dataId默认是当前应用的application.name。\n进入nacos，点击命名空间，选择新建命名空间\n{% asset_img image1.png %}\n假设我们现在是在开发环境，然后我们创建一个dev命名空间，用于开发环境的相关配置,这里的命名空间id不用填，系统会自动生成\n{% asset_img image2.png %}\n创建成功后，我们复制命名空间id\n{% asset_img image3.png %}\n将这个命名空间id，粘贴到之前bootstrap.yml配置文件的namespace中\n{% asset_img image4.png %}\n然后我们进入dev命名空间，新建一个配置\n{% asset_img image5.png %}\n{% asset_img image6.png %}\n配置完毕后，启动项目，再次访问http://localhost:8080/test/hello，结果如下：\n{% asset_img image7.png %}\n可见，此时读取到的，是dev命名空间下的配置。\n\n### 2. 共享配置\n当我们项目中的服务数量增加后，配置文件也会相应的增加，而多个配置文件中，可能存在相同的配置，因此我们可以将这些相同的配置独立出来，作为该项目各个服务的共享配置文件。\n假设我们现在有两个服务，这两个服务都共享同一个redis数据源和同一个mysql数据源，因此我们可以把这两个数据源的配置，提取成共享配置。\nservice1和service2的bootstrap.yml配置分别如下：\n{% asset_img image8.png %}\n{% asset_img image9.png %}\n这两个服务的bootstrap配置文件内容，基本一样（除了端口号和服务名），除此之外，这里共享配置中，common-redis共享配置的refresh值设置为true，而common-mysql没有设置，也就是说，这两个服务能监听到common-redis配置的变化，而不会关注到common-mysql配置的变化。\n配置完成后，这两个应用，我们都添加下面这个controller类，用于进行测试：\n{% asset_img image10.png %}\n然后，我们在nacos上添加相关的共享配置\n{% asset_img image11.png %}\n{% asset_img image12.png %}\n启动服务1和服务2，然后分别访问获取mysql配置和redis配置的接口\n{% asset_img image13.png %}\n然后我们在分别修改mysql和redis的配置\n{% asset_img image14.png %}\n{% asset_img image15.png %}\n然后再次访问相关的接口，结果如下：\n{% asset_img image16.png %}\n由上图可知，如果公共配置想要获取实时数据，需要加上refresh属性的配置。\n### 3. 扩展配置\n一般情况下，我们的配置文件一个就可以了，但有时候，如果我们的配置分散在多个配置文件时，就需要使用到扩展配置了。\n假设我们现在有两个扩展配置，一个是配置日志打印的，一个是配置消息队列，假设配置内容如下：\next-log.yaml\n{% asset_img image17.png %}\n{% asset_img image18.png %}\nbootstrap.yml内容如下：\n{% asset_img image19.png %}\n添加一个controller用于测试\n{% asset_img image20.png %}\n启动应用，结果如下：\n{% asset_img image21.png %}\n然后我们修改扩展配置\n{% asset_img image22.png %}\n{% asset_img image23.png %}\n再次访问相关的接口\n{% asset_img image24.png %}\n可见，对于扩展配置，如果要获取实时数据，那么也需要加上refresh\n### 4. 更新数据到nacos\n假设我们现在有一个数据迁移的任务，每隔一段时间，会触发这个任务一次，该任务会读取nacos配置中的起始时间和结束时间，然后查询数据库并将查询的数据进行迁移，最后会更新起始时间，然后修改nacos中的配置。\n首先我们在nacos上添加一个和数据迁移相关的配置：\n{% asset_img image25.png %}\n添加一个config，用于构造configService\n{% asset_img image26.png %}\n添加一个定时任务，用于查询nacos配置，并根据nacos配置迁移数据\n{% asset_img image27.png %}\n执行结果如下图所示，每隔十秒执行一次任务，并且将起始时间进行更新。\n{% asset_img image28.png %}\n\n### 5. 参考文档\n（超详细）关于Nacos的共享配置( shared-configs)和拓展配置(extension-config)：https://blog.csdn.net/weixin_42329623/article/details/131018680","slug":"Nacos学习2—Nacos配置中心","published":1,"updated":"2024-04-03T05:44:47.541Z","_id":"cluid7sjg0000b0vlbrh1gj36","comments":1,"layout":"post","photos":[],"content":"<p>在上一节中，介绍了Nacos配置中心的入门使用，在这一节，会讲解关于nacos配置中心的其他概念，比如命名空间、共享配置、以及如何在服务端更新nacos配置。</p>\n<h3 id=\"1-nacos的基础概念\"><a href=\"#1-nacos的基础概念\" class=\"headerlink\" title=\"1. nacos的基础概念\"></a>1. nacos的基础概念</h3><p>如下图所示，在nacos配置中，namespace、group、dataId为最基础的、最重要的三个概念。<br>namespace: 命名空间可用于进行不同环境的配置隔离。一般一个环境划分到一个命名空间<br>group： 配置分组用于将不同的服务可以归类到同一分组。一般将一个项目的配置分到一组<br>dataId： 在系统中，一个配置文件通常就是一个配置集（dataId）。一般微服务的配置就是一个配置集</p>\n<img src=\"/2024/04/02/Nacos%E5%AD%A6%E4%B9%A02%E2%80%94Nacos%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/image.png\" class=\"\">\n<p>当我们没有配置namespace时，其默认值就是public；没有配置group时，默认值为DEFAULT_GROUP，dataId默认是当前应用的application.name。<br>进入nacos，点击命名空间，选择新建命名空间</p>\n<img src=\"/2024/04/02/Nacos%E5%AD%A6%E4%B9%A02%E2%80%94Nacos%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/image1.png\" class=\"\">\n<p>假设我们现在是在开发环境，然后我们创建一个dev命名空间，用于开发环境的相关配置,这里的命名空间id不用填，系统会自动生成</p>\n<img src=\"/2024/04/02/Nacos%E5%AD%A6%E4%B9%A02%E2%80%94Nacos%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/image2.png\" class=\"\">\n<p>创建成功后，我们复制命名空间id</p>\n<img src=\"/2024/04/02/Nacos%E5%AD%A6%E4%B9%A02%E2%80%94Nacos%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/image3.png\" class=\"\">\n<p>将这个命名空间id，粘贴到之前bootstrap.yml配置文件的namespace中</p>\n<img src=\"/2024/04/02/Nacos%E5%AD%A6%E4%B9%A02%E2%80%94Nacos%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/image4.png\" class=\"\">\n<p>然后我们进入dev命名空间，新建一个配置</p>\n<img src=\"/2024/04/02/Nacos%E5%AD%A6%E4%B9%A02%E2%80%94Nacos%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/image5.png\" class=\"\">\n<img src=\"/2024/04/02/Nacos%E5%AD%A6%E4%B9%A02%E2%80%94Nacos%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/image6.png\" class=\"\">\n<p>配置完毕后，启动项目，再次访问<a href=\"http://localhost:8080/test/hello%EF%BC%8C%E7%BB%93%E6%9E%9C%E5%A6%82%E4%B8%8B%EF%BC%9A\">http://localhost:8080/test/hello，结果如下：</a></p>\n<img src=\"/2024/04/02/Nacos%E5%AD%A6%E4%B9%A02%E2%80%94Nacos%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/image7.png\" class=\"\">\n<p>可见，此时读取到的，是dev命名空间下的配置。</p>\n<h3 id=\"2-共享配置\"><a href=\"#2-共享配置\" class=\"headerlink\" title=\"2. 共享配置\"></a>2. 共享配置</h3><p>当我们项目中的服务数量增加后，配置文件也会相应的增加，而多个配置文件中，可能存在相同的配置，因此我们可以将这些相同的配置独立出来，作为该项目各个服务的共享配置文件。<br>假设我们现在有两个服务，这两个服务都共享同一个redis数据源和同一个mysql数据源，因此我们可以把这两个数据源的配置，提取成共享配置。<br>service1和service2的bootstrap.yml配置分别如下：</p>\n<img src=\"/2024/04/02/Nacos%E5%AD%A6%E4%B9%A02%E2%80%94Nacos%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/image8.png\" class=\"\">\n<img src=\"/2024/04/02/Nacos%E5%AD%A6%E4%B9%A02%E2%80%94Nacos%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/image9.png\" class=\"\">\n<p>这两个服务的bootstrap配置文件内容，基本一样（除了端口号和服务名），除此之外，这里共享配置中，common-redis共享配置的refresh值设置为true，而common-mysql没有设置，也就是说，这两个服务能监听到common-redis配置的变化，而不会关注到common-mysql配置的变化。<br>配置完成后，这两个应用，我们都添加下面这个controller类，用于进行测试：</p>\n<img src=\"/2024/04/02/Nacos%E5%AD%A6%E4%B9%A02%E2%80%94Nacos%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/image10.png\" class=\"\">\n<p>然后，我们在nacos上添加相关的共享配置</p>\n<img src=\"/2024/04/02/Nacos%E5%AD%A6%E4%B9%A02%E2%80%94Nacos%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/image11.png\" class=\"\">\n<img src=\"/2024/04/02/Nacos%E5%AD%A6%E4%B9%A02%E2%80%94Nacos%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/image12.png\" class=\"\">\n<p>启动服务1和服务2，然后分别访问获取mysql配置和redis配置的接口</p>\n<img src=\"/2024/04/02/Nacos%E5%AD%A6%E4%B9%A02%E2%80%94Nacos%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/image13.png\" class=\"\">\n<p>然后我们在分别修改mysql和redis的配置</p>\n<img src=\"/2024/04/02/Nacos%E5%AD%A6%E4%B9%A02%E2%80%94Nacos%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/image14.png\" class=\"\">\n<img src=\"/2024/04/02/Nacos%E5%AD%A6%E4%B9%A02%E2%80%94Nacos%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/image15.png\" class=\"\">\n<p>然后再次访问相关的接口，结果如下：</p>\n<img src=\"/2024/04/02/Nacos%E5%AD%A6%E4%B9%A02%E2%80%94Nacos%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/image16.png\" class=\"\">\n<p>由上图可知，如果公共配置想要获取实时数据，需要加上refresh属性的配置。</p>\n<h3 id=\"3-扩展配置\"><a href=\"#3-扩展配置\" class=\"headerlink\" title=\"3. 扩展配置\"></a>3. 扩展配置</h3><p>一般情况下，我们的配置文件一个就可以了，但有时候，如果我们的配置分散在多个配置文件时，就需要使用到扩展配置了。<br>假设我们现在有两个扩展配置，一个是配置日志打印的，一个是配置消息队列，假设配置内容如下：<br>ext-log.yaml</p>\n<img src=\"/2024/04/02/Nacos%E5%AD%A6%E4%B9%A02%E2%80%94Nacos%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/image17.png\" class=\"\">\n<img src=\"/2024/04/02/Nacos%E5%AD%A6%E4%B9%A02%E2%80%94Nacos%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/image18.png\" class=\"\">\n<p>bootstrap.yml内容如下：</p>\n<img src=\"/2024/04/02/Nacos%E5%AD%A6%E4%B9%A02%E2%80%94Nacos%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/image19.png\" class=\"\">\n<p>添加一个controller用于测试</p>\n<img src=\"/2024/04/02/Nacos%E5%AD%A6%E4%B9%A02%E2%80%94Nacos%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/image20.png\" class=\"\">\n<p>启动应用，结果如下：</p>\n<img src=\"/2024/04/02/Nacos%E5%AD%A6%E4%B9%A02%E2%80%94Nacos%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/image21.png\" class=\"\">\n<p>然后我们修改扩展配置</p>\n<img src=\"/2024/04/02/Nacos%E5%AD%A6%E4%B9%A02%E2%80%94Nacos%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/image22.png\" class=\"\">\n<img src=\"/2024/04/02/Nacos%E5%AD%A6%E4%B9%A02%E2%80%94Nacos%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/image23.png\" class=\"\">\n<p>再次访问相关的接口</p>\n<img src=\"/2024/04/02/Nacos%E5%AD%A6%E4%B9%A02%E2%80%94Nacos%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/image24.png\" class=\"\">\n<p>可见，对于扩展配置，如果要获取实时数据，那么也需要加上refresh</p>\n<h3 id=\"4-更新数据到nacos\"><a href=\"#4-更新数据到nacos\" class=\"headerlink\" title=\"4. 更新数据到nacos\"></a>4. 更新数据到nacos</h3><p>假设我们现在有一个数据迁移的任务，每隔一段时间，会触发这个任务一次，该任务会读取nacos配置中的起始时间和结束时间，然后查询数据库并将查询的数据进行迁移，最后会更新起始时间，然后修改nacos中的配置。<br>首先我们在nacos上添加一个和数据迁移相关的配置：</p>\n<img src=\"/2024/04/02/Nacos%E5%AD%A6%E4%B9%A02%E2%80%94Nacos%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/image25.png\" class=\"\">\n<p>添加一个config，用于构造configService</p>\n<img src=\"/2024/04/02/Nacos%E5%AD%A6%E4%B9%A02%E2%80%94Nacos%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/image26.png\" class=\"\">\n<p>添加一个定时任务，用于查询nacos配置，并根据nacos配置迁移数据</p>\n<img src=\"/2024/04/02/Nacos%E5%AD%A6%E4%B9%A02%E2%80%94Nacos%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/image27.png\" class=\"\">\n<p>执行结果如下图所示，每隔十秒执行一次任务，并且将起始时间进行更新。</p>\n<img src=\"/2024/04/02/Nacos%E5%AD%A6%E4%B9%A02%E2%80%94Nacos%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/image28.png\" class=\"\">\n\n<h3 id=\"5-参考文档\"><a href=\"#5-参考文档\" class=\"headerlink\" title=\"5. 参考文档\"></a>5. 参考文档</h3><p>（超详细）关于Nacos的共享配置( shared-configs)和拓展配置(extension-config)：<a href=\"https://blog.csdn.net/weixin_42329623/article/details/131018680\">https://blog.csdn.net/weixin_42329623/article/details/131018680</a></p>\n","excerpt":"","more":"<p>在上一节中，介绍了Nacos配置中心的入门使用，在这一节，会讲解关于nacos配置中心的其他概念，比如命名空间、共享配置、以及如何在服务端更新nacos配置。</p>\n<h3 id=\"1-nacos的基础概念\"><a href=\"#1-nacos的基础概念\" class=\"headerlink\" title=\"1. nacos的基础概念\"></a>1. nacos的基础概念</h3><p>如下图所示，在nacos配置中，namespace、group、dataId为最基础的、最重要的三个概念。<br>namespace: 命名空间可用于进行不同环境的配置隔离。一般一个环境划分到一个命名空间<br>group： 配置分组用于将不同的服务可以归类到同一分组。一般将一个项目的配置分到一组<br>dataId： 在系统中，一个配置文件通常就是一个配置集（dataId）。一般微服务的配置就是一个配置集</p>\n<img src=\"/2024/04/02/Nacos%E5%AD%A6%E4%B9%A02%E2%80%94Nacos%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/image.png\" class=\"\">\n<p>当我们没有配置namespace时，其默认值就是public；没有配置group时，默认值为DEFAULT_GROUP，dataId默认是当前应用的application.name。<br>进入nacos，点击命名空间，选择新建命名空间</p>\n<img src=\"/2024/04/02/Nacos%E5%AD%A6%E4%B9%A02%E2%80%94Nacos%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/image1.png\" class=\"\">\n<p>假设我们现在是在开发环境，然后我们创建一个dev命名空间，用于开发环境的相关配置,这里的命名空间id不用填，系统会自动生成</p>\n<img src=\"/2024/04/02/Nacos%E5%AD%A6%E4%B9%A02%E2%80%94Nacos%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/image2.png\" class=\"\">\n<p>创建成功后，我们复制命名空间id</p>\n<img src=\"/2024/04/02/Nacos%E5%AD%A6%E4%B9%A02%E2%80%94Nacos%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/image3.png\" class=\"\">\n<p>将这个命名空间id，粘贴到之前bootstrap.yml配置文件的namespace中</p>\n<img src=\"/2024/04/02/Nacos%E5%AD%A6%E4%B9%A02%E2%80%94Nacos%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/image4.png\" class=\"\">\n<p>然后我们进入dev命名空间，新建一个配置</p>\n<img src=\"/2024/04/02/Nacos%E5%AD%A6%E4%B9%A02%E2%80%94Nacos%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/image5.png\" class=\"\">\n<img src=\"/2024/04/02/Nacos%E5%AD%A6%E4%B9%A02%E2%80%94Nacos%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/image6.png\" class=\"\">\n<p>配置完毕后，启动项目，再次访问<a href=\"http://localhost:8080/test/hello%EF%BC%8C%E7%BB%93%E6%9E%9C%E5%A6%82%E4%B8%8B%EF%BC%9A\">http://localhost:8080/test/hello，结果如下：</a></p>\n<img src=\"/2024/04/02/Nacos%E5%AD%A6%E4%B9%A02%E2%80%94Nacos%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/image7.png\" class=\"\">\n<p>可见，此时读取到的，是dev命名空间下的配置。</p>\n<h3 id=\"2-共享配置\"><a href=\"#2-共享配置\" class=\"headerlink\" title=\"2. 共享配置\"></a>2. 共享配置</h3><p>当我们项目中的服务数量增加后，配置文件也会相应的增加，而多个配置文件中，可能存在相同的配置，因此我们可以将这些相同的配置独立出来，作为该项目各个服务的共享配置文件。<br>假设我们现在有两个服务，这两个服务都共享同一个redis数据源和同一个mysql数据源，因此我们可以把这两个数据源的配置，提取成共享配置。<br>service1和service2的bootstrap.yml配置分别如下：</p>\n<img src=\"/2024/04/02/Nacos%E5%AD%A6%E4%B9%A02%E2%80%94Nacos%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/image8.png\" class=\"\">\n<img src=\"/2024/04/02/Nacos%E5%AD%A6%E4%B9%A02%E2%80%94Nacos%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/image9.png\" class=\"\">\n<p>这两个服务的bootstrap配置文件内容，基本一样（除了端口号和服务名），除此之外，这里共享配置中，common-redis共享配置的refresh值设置为true，而common-mysql没有设置，也就是说，这两个服务能监听到common-redis配置的变化，而不会关注到common-mysql配置的变化。<br>配置完成后，这两个应用，我们都添加下面这个controller类，用于进行测试：</p>\n<img src=\"/2024/04/02/Nacos%E5%AD%A6%E4%B9%A02%E2%80%94Nacos%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/image10.png\" class=\"\">\n<p>然后，我们在nacos上添加相关的共享配置</p>\n<img src=\"/2024/04/02/Nacos%E5%AD%A6%E4%B9%A02%E2%80%94Nacos%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/image11.png\" class=\"\">\n<img src=\"/2024/04/02/Nacos%E5%AD%A6%E4%B9%A02%E2%80%94Nacos%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/image12.png\" class=\"\">\n<p>启动服务1和服务2，然后分别访问获取mysql配置和redis配置的接口</p>\n<img src=\"/2024/04/02/Nacos%E5%AD%A6%E4%B9%A02%E2%80%94Nacos%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/image13.png\" class=\"\">\n<p>然后我们在分别修改mysql和redis的配置</p>\n<img src=\"/2024/04/02/Nacos%E5%AD%A6%E4%B9%A02%E2%80%94Nacos%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/image14.png\" class=\"\">\n<img src=\"/2024/04/02/Nacos%E5%AD%A6%E4%B9%A02%E2%80%94Nacos%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/image15.png\" class=\"\">\n<p>然后再次访问相关的接口，结果如下：</p>\n<img src=\"/2024/04/02/Nacos%E5%AD%A6%E4%B9%A02%E2%80%94Nacos%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/image16.png\" class=\"\">\n<p>由上图可知，如果公共配置想要获取实时数据，需要加上refresh属性的配置。</p>\n<h3 id=\"3-扩展配置\"><a href=\"#3-扩展配置\" class=\"headerlink\" title=\"3. 扩展配置\"></a>3. 扩展配置</h3><p>一般情况下，我们的配置文件一个就可以了，但有时候，如果我们的配置分散在多个配置文件时，就需要使用到扩展配置了。<br>假设我们现在有两个扩展配置，一个是配置日志打印的，一个是配置消息队列，假设配置内容如下：<br>ext-log.yaml</p>\n<img src=\"/2024/04/02/Nacos%E5%AD%A6%E4%B9%A02%E2%80%94Nacos%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/image17.png\" class=\"\">\n<img src=\"/2024/04/02/Nacos%E5%AD%A6%E4%B9%A02%E2%80%94Nacos%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/image18.png\" class=\"\">\n<p>bootstrap.yml内容如下：</p>\n<img src=\"/2024/04/02/Nacos%E5%AD%A6%E4%B9%A02%E2%80%94Nacos%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/image19.png\" class=\"\">\n<p>添加一个controller用于测试</p>\n<img src=\"/2024/04/02/Nacos%E5%AD%A6%E4%B9%A02%E2%80%94Nacos%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/image20.png\" class=\"\">\n<p>启动应用，结果如下：</p>\n<img src=\"/2024/04/02/Nacos%E5%AD%A6%E4%B9%A02%E2%80%94Nacos%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/image21.png\" class=\"\">\n<p>然后我们修改扩展配置</p>\n<img src=\"/2024/04/02/Nacos%E5%AD%A6%E4%B9%A02%E2%80%94Nacos%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/image22.png\" class=\"\">\n<img src=\"/2024/04/02/Nacos%E5%AD%A6%E4%B9%A02%E2%80%94Nacos%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/image23.png\" class=\"\">\n<p>再次访问相关的接口</p>\n<img src=\"/2024/04/02/Nacos%E5%AD%A6%E4%B9%A02%E2%80%94Nacos%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/image24.png\" class=\"\">\n<p>可见，对于扩展配置，如果要获取实时数据，那么也需要加上refresh</p>\n<h3 id=\"4-更新数据到nacos\"><a href=\"#4-更新数据到nacos\" class=\"headerlink\" title=\"4. 更新数据到nacos\"></a>4. 更新数据到nacos</h3><p>假设我们现在有一个数据迁移的任务，每隔一段时间，会触发这个任务一次，该任务会读取nacos配置中的起始时间和结束时间，然后查询数据库并将查询的数据进行迁移，最后会更新起始时间，然后修改nacos中的配置。<br>首先我们在nacos上添加一个和数据迁移相关的配置：</p>\n<img src=\"/2024/04/02/Nacos%E5%AD%A6%E4%B9%A02%E2%80%94Nacos%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/image25.png\" class=\"\">\n<p>添加一个config，用于构造configService</p>\n<img src=\"/2024/04/02/Nacos%E5%AD%A6%E4%B9%A02%E2%80%94Nacos%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/image26.png\" class=\"\">\n<p>添加一个定时任务，用于查询nacos配置，并根据nacos配置迁移数据</p>\n<img src=\"/2024/04/02/Nacos%E5%AD%A6%E4%B9%A02%E2%80%94Nacos%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/image27.png\" class=\"\">\n<p>执行结果如下图所示，每隔十秒执行一次任务，并且将起始时间进行更新。</p>\n<img src=\"/2024/04/02/Nacos%E5%AD%A6%E4%B9%A02%E2%80%94Nacos%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/image28.png\" class=\"\">\n\n<h3 id=\"5-参考文档\"><a href=\"#5-参考文档\" class=\"headerlink\" title=\"5. 参考文档\"></a>5. 参考文档</h3><p>（超详细）关于Nacos的共享配置( shared-configs)和拓展配置(extension-config)：<a href=\"https://blog.csdn.net/weixin_42329623/article/details/131018680\">https://blog.csdn.net/weixin_42329623/article/details/131018680</a></p>\n"},{"title":"Redis学习1-Redis简介、基础","date":"2024-04-02T12:55:26.000Z","_content":"### 1. 介绍\n#### 1.1. redis简介\nRedis(Remote Dictonary Server) 是由Salvatore Sanfilippo开发的key-value缓存数据库，基于C语言开发。目前市面上，Redis和MongoDB是当前使用最广泛的NoSQL，而就Redis技术而言，它的性能十分优越，可以支持每秒十几万此的读/写操作，其性能远超数据库，并且还支持集群、分布式、主从同步等配置，原则上可以无限扩展，让更多的数据存储在内存中，更让人欣慰的是它还支持一定的事务能力，这保证了高并发的场景下数据的安全和一致性。\n#### 1.2. redis特点\n与其他key/value缓存产品相比，redis有以下特点：\n1、Redis支持数据的持久化，可以将内存中的数据保存在磁盘中，重启的时候可以再次加载进行使用；\n2、 Redis不仅支持key-value类型的数据，还提供list，set，zset，hash等数据结构的存储；\n3、 Redis支持数据的备份，即master-slave模式的数据备份；\n### 2. Redis安装\n#### 2.1. window\nRedis Windows 下载地址：https://github.com/MicrosoftArchive/redis/releases\n#### 2.2. linux\n```\n$ wget http://download.redis.io/releases/redis-4.0.2.tar.gz\n$ tar xzf redis-4.0.2.tar.gz\n$ cd redis-4.0.2\n$ make\n```\n执行上述命令后，进入redis目录下的src目录\n启动redis服务\n```\n./redis-server\n```\n{% asset_img 1.png %}\n进入redis命令行\n```\n./redis-cli\n```\n#### 2.3. 配置项\n进入redis.conf，可以修改一些配置项，主要的配置项如下：\n|port|\t端口号|\n|---|---|\n|dir\t|本地数据库存放目录|\n|dbfilename\t|本地数据库文件名|\n|bind\t|绑定的主机地址|\n|timeout\t|设置客户端闲置多长时间后关闭连接|\n|loglevel\t|日志记录级别，有：debug，verbose，notice，warning，默认为verbose|\n|logfile\t|日志记录方式，默认为标准输出|\n\n### 3. Redis数据类型\n#### 3.1. String字符串\n最基本的数据类型，一个key对应一个value，redis的string可包含任何数据，比如jpg图片或者序列化的对象，一个键最大能存储512MB的对象\n示例如下：\n{% asset_img 2.png %}\n\n|命令\t|说明|\n|------|----|\n|SET\t|设置指定 key 的值|\n|GET\t|获取指定 key 的值|\n|MSET\t|同时设置一个或多个 key-value 对|\n|MGET\t|获取所有(一个或多个)给定 key 的值|\n|INCR\t|将 key 中储存的数字值增一|\n|INCRBY\t|将 key 所储存的值加上给定的增量值 ( increment )|\n|DECR\t|将 key 中储存的数字值减一|\n|DECRBY\t|将 key 所储存的值减去给定的减量值 ( decrement )|\n\n#### 3.2. Hash哈希\nRedis Hash是一个string类型的field和value的映射表，特别适合用于存储对象。\n常用的命令为HMSET KEY FIELD VALUE FIELD VALUE，即同时将多个field-value（域-值）对设置到哈希表key中。示例如下：\n{% asset_img 3.png %}\n其中，user:1为键\n|命令\t|说明|\n|---|---|\n|HEXISTS\t|查看哈希表 key 中，指定的字段是否存在|\n|HGET\t|获取存储在哈希表中指定字段的值|\n|HSET\t|将哈希表 key 中的字段 field 的值设为 value|\n|HMSET\t|同时将多个 field-value (域-值)对设置到哈希表 key 中|\n|HMGET\t|获取所有给定字段的值|\n|HDEL\t|删除一个或多个哈希表字段|\n\n#### 3.3. List列表\nRedis List为最简单的字符串列表，按照插入顺序排序，可以添加一个元素到列表的头部（左边）或尾部（右边）。\n常用的命令有lpush，rpush，lrange，示例如下：\n{% asset_img 4.png %}\n|命令\t|说明|\n|--|--|\n|LINDEX\t|通过索引获取列表中的元素|\n|LINSERT\t|在列表的元素前或者后插入元素|\n|LLEN\t|获取列表长度|\n|LPOP\t|移出并获取列表的第一个元素|\n|LPUSH\t|将一个或多个值插入到列表头部|\n|RPOP\t|移除并获取列表最后一个元素|\n|RPUSH\t|在列表中添加一个或多个值|\n|LSET\t|通过索引设置列表元素的值|\n|LRANGE\t|获取列表指定范围内的元素|\n\n#### 3.4. set集合\nRedis是string类型的无序集合，通过哈希表实现，元素具有唯一性。\n常用命令有sadd，smembers\n{% asset_img 5.png %}\n\n|命令\t|说明|\n|--|--|\n|SADD   |向集合添加一个或多个成员|\n|SCARD\t|获取集合的成员数|\n|SDIFF\t|返回给定所有集合的差集|\n|SINTER\t|返回给定所有集合的交集|\n|SISMEMBER\t|判断 member 元素是否是集合 key 的成员|\n|SMEMBERS\t|返回集合中的所有成员|\n|SUNION\t|返回所有给定集合的并集|\n|SREM\t|移除集合中一个或多个成员|\n\n#### 3.5. zset（sorted set）有序集合\n和set一样是string类型元素的集合，不同的是每个元素会关联一个double类型的分数，通过分数为集合中的成员进行从小到大的排序，zset的成员是唯一的，但分数可以重复。\n常用命令有：zadd，zrangeByscore\n{% asset_img 6.png %}\n\n|命令\t|说明|\n|--|--|\n|ZADD\t|向有序集合添加一个或多个成员，或者更新已存在成员的分数|\n|ZCARD\t|获取有序集合的成员数|\n|ZCOUNT\t|计算在有序集合中指定区间分数的成员数|\n|ZRANGE\t|通过索引区间返回有序集合成指定区间内的成员|\n|ZRANGEBYSCORE\t|通过分数返回有序集合指定区间内的成员|\n|ZRANK\t|返回有序集合中指定成员的索引|\n|ZSCORE\t|返回有序集中，成员的分数值|\n\n#### 3.6. Redis Bitmap 位图\n通过类似map结构存放0或1（bit位）作为值，可以用来统计状态，如日活，是否浏览过某个东西\n{% asset_img 7.png %}\n\n#### 3.7. HyperLogLogs基数统计\n可以接受多个元素作为输入，并给出输入元素的基数估算值\n● 基数：集合中不同元素的数量，比如 {’apple’, ‘banana’, ‘cherry’, ‘banana’, ‘apple’} 的基数就是 3\n● 估算值：算法给出的基数并不是精确的，可能会比实际稍微多一些或者稍微少一些，但会控制在合 理的范围之内\nHyperLogLog 的优点是即使输入元素的数量或体积非常大，计算基数所需空间总是固定的，并且是很小的。\n在Redis 里面，每个 HyperLogLog 键只需要花费 12 KB 内存，就可以计算接近 2^64 个不同元素的基数\n这和计算基数时，元素越多耗费内存就越多的集合形成鲜明对比\n因为HyperLogLog 只会根据输入元素来计算基数，而不会储存输入元素本身，所以 HyperLogLog 不能像集合那样，返回输入的各个元素\n{% asset_img 8.png %}\n|命令\t|说明|\n|--|--|\n|PFADD\t|添加指定元素到 HyperLogLog 中|\n|PFCOUNT\t|返回给定 HyperLogLog 的基数估算值|\n|PFMERGE\t|将多个 HyperLogLog 合并为一个 HyperLogLog|\n","source":"_posts/Redis学习1-Redis简介、基础.md","raw":"---\ntitle: Redis学习1-Redis简介、基础\ndate: 2024-04-02 20:55:26\ntags: \n    - 中间件\n    - Redis\n---\n### 1. 介绍\n#### 1.1. redis简介\nRedis(Remote Dictonary Server) 是由Salvatore Sanfilippo开发的key-value缓存数据库，基于C语言开发。目前市面上，Redis和MongoDB是当前使用最广泛的NoSQL，而就Redis技术而言，它的性能十分优越，可以支持每秒十几万此的读/写操作，其性能远超数据库，并且还支持集群、分布式、主从同步等配置，原则上可以无限扩展，让更多的数据存储在内存中，更让人欣慰的是它还支持一定的事务能力，这保证了高并发的场景下数据的安全和一致性。\n#### 1.2. redis特点\n与其他key/value缓存产品相比，redis有以下特点：\n1、Redis支持数据的持久化，可以将内存中的数据保存在磁盘中，重启的时候可以再次加载进行使用；\n2、 Redis不仅支持key-value类型的数据，还提供list，set，zset，hash等数据结构的存储；\n3、 Redis支持数据的备份，即master-slave模式的数据备份；\n### 2. Redis安装\n#### 2.1. window\nRedis Windows 下载地址：https://github.com/MicrosoftArchive/redis/releases\n#### 2.2. linux\n```\n$ wget http://download.redis.io/releases/redis-4.0.2.tar.gz\n$ tar xzf redis-4.0.2.tar.gz\n$ cd redis-4.0.2\n$ make\n```\n执行上述命令后，进入redis目录下的src目录\n启动redis服务\n```\n./redis-server\n```\n{% asset_img 1.png %}\n进入redis命令行\n```\n./redis-cli\n```\n#### 2.3. 配置项\n进入redis.conf，可以修改一些配置项，主要的配置项如下：\n|port|\t端口号|\n|---|---|\n|dir\t|本地数据库存放目录|\n|dbfilename\t|本地数据库文件名|\n|bind\t|绑定的主机地址|\n|timeout\t|设置客户端闲置多长时间后关闭连接|\n|loglevel\t|日志记录级别，有：debug，verbose，notice，warning，默认为verbose|\n|logfile\t|日志记录方式，默认为标准输出|\n\n### 3. Redis数据类型\n#### 3.1. String字符串\n最基本的数据类型，一个key对应一个value，redis的string可包含任何数据，比如jpg图片或者序列化的对象，一个键最大能存储512MB的对象\n示例如下：\n{% asset_img 2.png %}\n\n|命令\t|说明|\n|------|----|\n|SET\t|设置指定 key 的值|\n|GET\t|获取指定 key 的值|\n|MSET\t|同时设置一个或多个 key-value 对|\n|MGET\t|获取所有(一个或多个)给定 key 的值|\n|INCR\t|将 key 中储存的数字值增一|\n|INCRBY\t|将 key 所储存的值加上给定的增量值 ( increment )|\n|DECR\t|将 key 中储存的数字值减一|\n|DECRBY\t|将 key 所储存的值减去给定的减量值 ( decrement )|\n\n#### 3.2. Hash哈希\nRedis Hash是一个string类型的field和value的映射表，特别适合用于存储对象。\n常用的命令为HMSET KEY FIELD VALUE FIELD VALUE，即同时将多个field-value（域-值）对设置到哈希表key中。示例如下：\n{% asset_img 3.png %}\n其中，user:1为键\n|命令\t|说明|\n|---|---|\n|HEXISTS\t|查看哈希表 key 中，指定的字段是否存在|\n|HGET\t|获取存储在哈希表中指定字段的值|\n|HSET\t|将哈希表 key 中的字段 field 的值设为 value|\n|HMSET\t|同时将多个 field-value (域-值)对设置到哈希表 key 中|\n|HMGET\t|获取所有给定字段的值|\n|HDEL\t|删除一个或多个哈希表字段|\n\n#### 3.3. List列表\nRedis List为最简单的字符串列表，按照插入顺序排序，可以添加一个元素到列表的头部（左边）或尾部（右边）。\n常用的命令有lpush，rpush，lrange，示例如下：\n{% asset_img 4.png %}\n|命令\t|说明|\n|--|--|\n|LINDEX\t|通过索引获取列表中的元素|\n|LINSERT\t|在列表的元素前或者后插入元素|\n|LLEN\t|获取列表长度|\n|LPOP\t|移出并获取列表的第一个元素|\n|LPUSH\t|将一个或多个值插入到列表头部|\n|RPOP\t|移除并获取列表最后一个元素|\n|RPUSH\t|在列表中添加一个或多个值|\n|LSET\t|通过索引设置列表元素的值|\n|LRANGE\t|获取列表指定范围内的元素|\n\n#### 3.4. set集合\nRedis是string类型的无序集合，通过哈希表实现，元素具有唯一性。\n常用命令有sadd，smembers\n{% asset_img 5.png %}\n\n|命令\t|说明|\n|--|--|\n|SADD   |向集合添加一个或多个成员|\n|SCARD\t|获取集合的成员数|\n|SDIFF\t|返回给定所有集合的差集|\n|SINTER\t|返回给定所有集合的交集|\n|SISMEMBER\t|判断 member 元素是否是集合 key 的成员|\n|SMEMBERS\t|返回集合中的所有成员|\n|SUNION\t|返回所有给定集合的并集|\n|SREM\t|移除集合中一个或多个成员|\n\n#### 3.5. zset（sorted set）有序集合\n和set一样是string类型元素的集合，不同的是每个元素会关联一个double类型的分数，通过分数为集合中的成员进行从小到大的排序，zset的成员是唯一的，但分数可以重复。\n常用命令有：zadd，zrangeByscore\n{% asset_img 6.png %}\n\n|命令\t|说明|\n|--|--|\n|ZADD\t|向有序集合添加一个或多个成员，或者更新已存在成员的分数|\n|ZCARD\t|获取有序集合的成员数|\n|ZCOUNT\t|计算在有序集合中指定区间分数的成员数|\n|ZRANGE\t|通过索引区间返回有序集合成指定区间内的成员|\n|ZRANGEBYSCORE\t|通过分数返回有序集合指定区间内的成员|\n|ZRANK\t|返回有序集合中指定成员的索引|\n|ZSCORE\t|返回有序集中，成员的分数值|\n\n#### 3.6. Redis Bitmap 位图\n通过类似map结构存放0或1（bit位）作为值，可以用来统计状态，如日活，是否浏览过某个东西\n{% asset_img 7.png %}\n\n#### 3.7. HyperLogLogs基数统计\n可以接受多个元素作为输入，并给出输入元素的基数估算值\n● 基数：集合中不同元素的数量，比如 {’apple’, ‘banana’, ‘cherry’, ‘banana’, ‘apple’} 的基数就是 3\n● 估算值：算法给出的基数并不是精确的，可能会比实际稍微多一些或者稍微少一些，但会控制在合 理的范围之内\nHyperLogLog 的优点是即使输入元素的数量或体积非常大，计算基数所需空间总是固定的，并且是很小的。\n在Redis 里面，每个 HyperLogLog 键只需要花费 12 KB 内存，就可以计算接近 2^64 个不同元素的基数\n这和计算基数时，元素越多耗费内存就越多的集合形成鲜明对比\n因为HyperLogLog 只会根据输入元素来计算基数，而不会储存输入元素本身，所以 HyperLogLog 不能像集合那样，返回输入的各个元素\n{% asset_img 8.png %}\n|命令\t|说明|\n|--|--|\n|PFADD\t|添加指定元素到 HyperLogLog 中|\n|PFCOUNT\t|返回给定 HyperLogLog 的基数估算值|\n|PFMERGE\t|将多个 HyperLogLog 合并为一个 HyperLogLog|\n","slug":"Redis学习1-Redis简介、基础","published":1,"updated":"2024-04-03T05:44:35.288Z","_id":"cluie8bfg0000h0vlgd9m6hpw","comments":1,"layout":"post","photos":[],"content":"<h3 id=\"1-介绍\"><a href=\"#1-介绍\" class=\"headerlink\" title=\"1. 介绍\"></a>1. 介绍</h3><h4 id=\"1-1-redis简介\"><a href=\"#1-1-redis简介\" class=\"headerlink\" title=\"1.1. redis简介\"></a>1.1. redis简介</h4><p>Redis(Remote Dictonary Server) 是由Salvatore Sanfilippo开发的key-value缓存数据库，基于C语言开发。目前市面上，Redis和MongoDB是当前使用最广泛的NoSQL，而就Redis技术而言，它的性能十分优越，可以支持每秒十几万此的读&#x2F;写操作，其性能远超数据库，并且还支持集群、分布式、主从同步等配置，原则上可以无限扩展，让更多的数据存储在内存中，更让人欣慰的是它还支持一定的事务能力，这保证了高并发的场景下数据的安全和一致性。</p>\n<h4 id=\"1-2-redis特点\"><a href=\"#1-2-redis特点\" class=\"headerlink\" title=\"1.2. redis特点\"></a>1.2. redis特点</h4><p>与其他key&#x2F;value缓存产品相比，redis有以下特点：<br>1、Redis支持数据的持久化，可以将内存中的数据保存在磁盘中，重启的时候可以再次加载进行使用；<br>2、 Redis不仅支持key-value类型的数据，还提供list，set，zset，hash等数据结构的存储；<br>3、 Redis支持数据的备份，即master-slave模式的数据备份；</p>\n<h3 id=\"2-Redis安装\"><a href=\"#2-Redis安装\" class=\"headerlink\" title=\"2. Redis安装\"></a>2. Redis安装</h3><h4 id=\"2-1-window\"><a href=\"#2-1-window\" class=\"headerlink\" title=\"2.1. window\"></a>2.1. window</h4><p>Redis Windows 下载地址：<a href=\"https://github.com/MicrosoftArchive/redis/releases\">https://github.com/MicrosoftArchive/redis/releases</a></p>\n<h4 id=\"2-2-linux\"><a href=\"#2-2-linux\" class=\"headerlink\" title=\"2.2. linux\"></a>2.2. linux</h4><figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs powershell\"><span class=\"hljs-variable\">$</span> <span class=\"hljs-built_in\">wget</span> http://download.redis.io/releases/redis<span class=\"hljs-literal\">-4</span>.<span class=\"hljs-number\">0.2</span>.tar.gz<br><span class=\"hljs-variable\">$</span> tar xzf redis<span class=\"hljs-literal\">-4</span>.<span class=\"hljs-number\">0.2</span>.tar.gz<br><span class=\"hljs-variable\">$</span> <span class=\"hljs-built_in\">cd</span> redis<span class=\"hljs-literal\">-4</span>.<span class=\"hljs-number\">0.2</span><br><span class=\"hljs-variable\">$</span> make<br></code></pre></td></tr></table></figure>\n<p>执行上述命令后，进入redis目录下的src目录<br>启动redis服务</p>\n<figure class=\"highlight axapta\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs axapta\">./redis-<span class=\"hljs-keyword\">server</span><br></code></pre></td></tr></table></figure>\n<img src=\"/2024/04/02/Redis%E5%AD%A6%E4%B9%A01-Redis%E7%AE%80%E4%BB%8B%E3%80%81%E5%9F%BA%E7%A1%80/1.png\" class=\"\">\n<p>进入redis命令行</p>\n<figure class=\"highlight avrasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs avrasm\">./redis-<span class=\"hljs-keyword\">cli</span><br></code></pre></td></tr></table></figure>\n<h4 id=\"2-3-配置项\"><a href=\"#2-3-配置项\" class=\"headerlink\" title=\"2.3. 配置项\"></a>2.3. 配置项</h4><p>进入redis.conf，可以修改一些配置项，主要的配置项如下：</p>\n<table>\n<thead>\n<tr>\n<th>port</th>\n<th>端口号</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>dir</td>\n<td>本地数据库存放目录</td>\n</tr>\n<tr>\n<td>dbfilename</td>\n<td>本地数据库文件名</td>\n</tr>\n<tr>\n<td>bind</td>\n<td>绑定的主机地址</td>\n</tr>\n<tr>\n<td>timeout</td>\n<td>设置客户端闲置多长时间后关闭连接</td>\n</tr>\n<tr>\n<td>loglevel</td>\n<td>日志记录级别，有：debug，verbose，notice，warning，默认为verbose</td>\n</tr>\n<tr>\n<td>logfile</td>\n<td>日志记录方式，默认为标准输出</td>\n</tr>\n</tbody></table>\n<h3 id=\"3-Redis数据类型\"><a href=\"#3-Redis数据类型\" class=\"headerlink\" title=\"3. Redis数据类型\"></a>3. Redis数据类型</h3><h4 id=\"3-1-String字符串\"><a href=\"#3-1-String字符串\" class=\"headerlink\" title=\"3.1. String字符串\"></a>3.1. String字符串</h4><p>最基本的数据类型，一个key对应一个value，redis的string可包含任何数据，比如jpg图片或者序列化的对象，一个键最大能存储512MB的对象<br>示例如下：</p>\n<img src=\"/2024/04/02/Redis%E5%AD%A6%E4%B9%A01-Redis%E7%AE%80%E4%BB%8B%E3%80%81%E5%9F%BA%E7%A1%80/2.png\" class=\"\">\n\n<table>\n<thead>\n<tr>\n<th>命令</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>SET</td>\n<td>设置指定 key 的值</td>\n</tr>\n<tr>\n<td>GET</td>\n<td>获取指定 key 的值</td>\n</tr>\n<tr>\n<td>MSET</td>\n<td>同时设置一个或多个 key-value 对</td>\n</tr>\n<tr>\n<td>MGET</td>\n<td>获取所有(一个或多个)给定 key 的值</td>\n</tr>\n<tr>\n<td>INCR</td>\n<td>将 key 中储存的数字值增一</td>\n</tr>\n<tr>\n<td>INCRBY</td>\n<td>将 key 所储存的值加上给定的增量值 ( increment )</td>\n</tr>\n<tr>\n<td>DECR</td>\n<td>将 key 中储存的数字值减一</td>\n</tr>\n<tr>\n<td>DECRBY</td>\n<td>将 key 所储存的值减去给定的减量值 ( decrement )</td>\n</tr>\n</tbody></table>\n<h4 id=\"3-2-Hash哈希\"><a href=\"#3-2-Hash哈希\" class=\"headerlink\" title=\"3.2. Hash哈希\"></a>3.2. Hash哈希</h4><p>Redis Hash是一个string类型的field和value的映射表，特别适合用于存储对象。<br>常用的命令为HMSET KEY FIELD VALUE FIELD VALUE，即同时将多个field-value（域-值）对设置到哈希表key中。示例如下：</p>\n<img src=\"/2024/04/02/Redis%E5%AD%A6%E4%B9%A01-Redis%E7%AE%80%E4%BB%8B%E3%80%81%E5%9F%BA%E7%A1%80/3.png\" class=\"\">\n<p>其中，user:1为键</p>\n<table>\n<thead>\n<tr>\n<th>命令</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>HEXISTS</td>\n<td>查看哈希表 key 中，指定的字段是否存在</td>\n</tr>\n<tr>\n<td>HGET</td>\n<td>获取存储在哈希表中指定字段的值</td>\n</tr>\n<tr>\n<td>HSET</td>\n<td>将哈希表 key 中的字段 field 的值设为 value</td>\n</tr>\n<tr>\n<td>HMSET</td>\n<td>同时将多个 field-value (域-值)对设置到哈希表 key 中</td>\n</tr>\n<tr>\n<td>HMGET</td>\n<td>获取所有给定字段的值</td>\n</tr>\n<tr>\n<td>HDEL</td>\n<td>删除一个或多个哈希表字段</td>\n</tr>\n</tbody></table>\n<h4 id=\"3-3-List列表\"><a href=\"#3-3-List列表\" class=\"headerlink\" title=\"3.3. List列表\"></a>3.3. List列表</h4><p>Redis List为最简单的字符串列表，按照插入顺序排序，可以添加一个元素到列表的头部（左边）或尾部（右边）。<br>常用的命令有lpush，rpush，lrange，示例如下：</p>\n<img src=\"/2024/04/02/Redis%E5%AD%A6%E4%B9%A01-Redis%E7%AE%80%E4%BB%8B%E3%80%81%E5%9F%BA%E7%A1%80/4.png\" class=\"\">\n<table>\n<thead>\n<tr>\n<th>命令</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>LINDEX</td>\n<td>通过索引获取列表中的元素</td>\n</tr>\n<tr>\n<td>LINSERT</td>\n<td>在列表的元素前或者后插入元素</td>\n</tr>\n<tr>\n<td>LLEN</td>\n<td>获取列表长度</td>\n</tr>\n<tr>\n<td>LPOP</td>\n<td>移出并获取列表的第一个元素</td>\n</tr>\n<tr>\n<td>LPUSH</td>\n<td>将一个或多个值插入到列表头部</td>\n</tr>\n<tr>\n<td>RPOP</td>\n<td>移除并获取列表最后一个元素</td>\n</tr>\n<tr>\n<td>RPUSH</td>\n<td>在列表中添加一个或多个值</td>\n</tr>\n<tr>\n<td>LSET</td>\n<td>通过索引设置列表元素的值</td>\n</tr>\n<tr>\n<td>LRANGE</td>\n<td>获取列表指定范围内的元素</td>\n</tr>\n</tbody></table>\n<h4 id=\"3-4-set集合\"><a href=\"#3-4-set集合\" class=\"headerlink\" title=\"3.4. set集合\"></a>3.4. set集合</h4><p>Redis是string类型的无序集合，通过哈希表实现，元素具有唯一性。<br>常用命令有sadd，smembers</p>\n<img src=\"/2024/04/02/Redis%E5%AD%A6%E4%B9%A01-Redis%E7%AE%80%E4%BB%8B%E3%80%81%E5%9F%BA%E7%A1%80/5.png\" class=\"\">\n\n<table>\n<thead>\n<tr>\n<th>命令</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>SADD</td>\n<td>向集合添加一个或多个成员</td>\n</tr>\n<tr>\n<td>SCARD</td>\n<td>获取集合的成员数</td>\n</tr>\n<tr>\n<td>SDIFF</td>\n<td>返回给定所有集合的差集</td>\n</tr>\n<tr>\n<td>SINTER</td>\n<td>返回给定所有集合的交集</td>\n</tr>\n<tr>\n<td>SISMEMBER</td>\n<td>判断 member 元素是否是集合 key 的成员</td>\n</tr>\n<tr>\n<td>SMEMBERS</td>\n<td>返回集合中的所有成员</td>\n</tr>\n<tr>\n<td>SUNION</td>\n<td>返回所有给定集合的并集</td>\n</tr>\n<tr>\n<td>SREM</td>\n<td>移除集合中一个或多个成员</td>\n</tr>\n</tbody></table>\n<h4 id=\"3-5-zset（sorted-set）有序集合\"><a href=\"#3-5-zset（sorted-set）有序集合\" class=\"headerlink\" title=\"3.5. zset（sorted set）有序集合\"></a>3.5. zset（sorted set）有序集合</h4><p>和set一样是string类型元素的集合，不同的是每个元素会关联一个double类型的分数，通过分数为集合中的成员进行从小到大的排序，zset的成员是唯一的，但分数可以重复。<br>常用命令有：zadd，zrangeByscore</p>\n<img src=\"/2024/04/02/Redis%E5%AD%A6%E4%B9%A01-Redis%E7%AE%80%E4%BB%8B%E3%80%81%E5%9F%BA%E7%A1%80/6.png\" class=\"\">\n\n<table>\n<thead>\n<tr>\n<th>命令</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>ZADD</td>\n<td>向有序集合添加一个或多个成员，或者更新已存在成员的分数</td>\n</tr>\n<tr>\n<td>ZCARD</td>\n<td>获取有序集合的成员数</td>\n</tr>\n<tr>\n<td>ZCOUNT</td>\n<td>计算在有序集合中指定区间分数的成员数</td>\n</tr>\n<tr>\n<td>ZRANGE</td>\n<td>通过索引区间返回有序集合成指定区间内的成员</td>\n</tr>\n<tr>\n<td>ZRANGEBYSCORE</td>\n<td>通过分数返回有序集合指定区间内的成员</td>\n</tr>\n<tr>\n<td>ZRANK</td>\n<td>返回有序集合中指定成员的索引</td>\n</tr>\n<tr>\n<td>ZSCORE</td>\n<td>返回有序集中，成员的分数值</td>\n</tr>\n</tbody></table>\n<h4 id=\"3-6-Redis-Bitmap-位图\"><a href=\"#3-6-Redis-Bitmap-位图\" class=\"headerlink\" title=\"3.6. Redis Bitmap 位图\"></a>3.6. Redis Bitmap 位图</h4><p>通过类似map结构存放0或1（bit位）作为值，可以用来统计状态，如日活，是否浏览过某个东西</p>\n<img src=\"/2024/04/02/Redis%E5%AD%A6%E4%B9%A01-Redis%E7%AE%80%E4%BB%8B%E3%80%81%E5%9F%BA%E7%A1%80/7.png\" class=\"\">\n\n<h4 id=\"3-7-HyperLogLogs基数统计\"><a href=\"#3-7-HyperLogLogs基数统计\" class=\"headerlink\" title=\"3.7. HyperLogLogs基数统计\"></a>3.7. HyperLogLogs基数统计</h4><p>可以接受多个元素作为输入，并给出输入元素的基数估算值<br>● 基数：集合中不同元素的数量，比如 {’apple’, ‘banana’, ‘cherry’, ‘banana’, ‘apple’} 的基数就是 3<br>● 估算值：算法给出的基数并不是精确的，可能会比实际稍微多一些或者稍微少一些，但会控制在合 理的范围之内<br>HyperLogLog 的优点是即使输入元素的数量或体积非常大，计算基数所需空间总是固定的，并且是很小的。<br>在Redis 里面，每个 HyperLogLog 键只需要花费 12 KB 内存，就可以计算接近 2^64 个不同元素的基数<br>这和计算基数时，元素越多耗费内存就越多的集合形成鲜明对比<br>因为HyperLogLog 只会根据输入元素来计算基数，而不会储存输入元素本身，所以 HyperLogLog 不能像集合那样，返回输入的各个元素</p>\n<img src=\"/2024/04/02/Redis%E5%AD%A6%E4%B9%A01-Redis%E7%AE%80%E4%BB%8B%E3%80%81%E5%9F%BA%E7%A1%80/8.png\" class=\"\">\n<table>\n<thead>\n<tr>\n<th>命令</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>PFADD</td>\n<td>添加指定元素到 HyperLogLog 中</td>\n</tr>\n<tr>\n<td>PFCOUNT</td>\n<td>返回给定 HyperLogLog 的基数估算值</td>\n</tr>\n<tr>\n<td>PFMERGE</td>\n<td>将多个 HyperLogLog 合并为一个 HyperLogLog</td>\n</tr>\n</tbody></table>\n","excerpt":"","more":"<h3 id=\"1-介绍\"><a href=\"#1-介绍\" class=\"headerlink\" title=\"1. 介绍\"></a>1. 介绍</h3><h4 id=\"1-1-redis简介\"><a href=\"#1-1-redis简介\" class=\"headerlink\" title=\"1.1. redis简介\"></a>1.1. redis简介</h4><p>Redis(Remote Dictonary Server) 是由Salvatore Sanfilippo开发的key-value缓存数据库，基于C语言开发。目前市面上，Redis和MongoDB是当前使用最广泛的NoSQL，而就Redis技术而言，它的性能十分优越，可以支持每秒十几万此的读&#x2F;写操作，其性能远超数据库，并且还支持集群、分布式、主从同步等配置，原则上可以无限扩展，让更多的数据存储在内存中，更让人欣慰的是它还支持一定的事务能力，这保证了高并发的场景下数据的安全和一致性。</p>\n<h4 id=\"1-2-redis特点\"><a href=\"#1-2-redis特点\" class=\"headerlink\" title=\"1.2. redis特点\"></a>1.2. redis特点</h4><p>与其他key&#x2F;value缓存产品相比，redis有以下特点：<br>1、Redis支持数据的持久化，可以将内存中的数据保存在磁盘中，重启的时候可以再次加载进行使用；<br>2、 Redis不仅支持key-value类型的数据，还提供list，set，zset，hash等数据结构的存储；<br>3、 Redis支持数据的备份，即master-slave模式的数据备份；</p>\n<h3 id=\"2-Redis安装\"><a href=\"#2-Redis安装\" class=\"headerlink\" title=\"2. Redis安装\"></a>2. Redis安装</h3><h4 id=\"2-1-window\"><a href=\"#2-1-window\" class=\"headerlink\" title=\"2.1. window\"></a>2.1. window</h4><p>Redis Windows 下载地址：<a href=\"https://github.com/MicrosoftArchive/redis/releases\">https://github.com/MicrosoftArchive/redis/releases</a></p>\n<h4 id=\"2-2-linux\"><a href=\"#2-2-linux\" class=\"headerlink\" title=\"2.2. linux\"></a>2.2. linux</h4><figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs powershell\"><span class=\"hljs-variable\">$</span> <span class=\"hljs-built_in\">wget</span> http://download.redis.io/releases/redis<span class=\"hljs-literal\">-4</span>.<span class=\"hljs-number\">0.2</span>.tar.gz<br><span class=\"hljs-variable\">$</span> tar xzf redis<span class=\"hljs-literal\">-4</span>.<span class=\"hljs-number\">0.2</span>.tar.gz<br><span class=\"hljs-variable\">$</span> <span class=\"hljs-built_in\">cd</span> redis<span class=\"hljs-literal\">-4</span>.<span class=\"hljs-number\">0.2</span><br><span class=\"hljs-variable\">$</span> make<br></code></pre></td></tr></table></figure>\n<p>执行上述命令后，进入redis目录下的src目录<br>启动redis服务</p>\n<figure class=\"highlight axapta\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs axapta\">./redis-<span class=\"hljs-keyword\">server</span><br></code></pre></td></tr></table></figure>\n<img src=\"/2024/04/02/Redis%E5%AD%A6%E4%B9%A01-Redis%E7%AE%80%E4%BB%8B%E3%80%81%E5%9F%BA%E7%A1%80/1.png\" class=\"\">\n<p>进入redis命令行</p>\n<figure class=\"highlight avrasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs avrasm\">./redis-<span class=\"hljs-keyword\">cli</span><br></code></pre></td></tr></table></figure>\n<h4 id=\"2-3-配置项\"><a href=\"#2-3-配置项\" class=\"headerlink\" title=\"2.3. 配置项\"></a>2.3. 配置项</h4><p>进入redis.conf，可以修改一些配置项，主要的配置项如下：</p>\n<table>\n<thead>\n<tr>\n<th>port</th>\n<th>端口号</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>dir</td>\n<td>本地数据库存放目录</td>\n</tr>\n<tr>\n<td>dbfilename</td>\n<td>本地数据库文件名</td>\n</tr>\n<tr>\n<td>bind</td>\n<td>绑定的主机地址</td>\n</tr>\n<tr>\n<td>timeout</td>\n<td>设置客户端闲置多长时间后关闭连接</td>\n</tr>\n<tr>\n<td>loglevel</td>\n<td>日志记录级别，有：debug，verbose，notice，warning，默认为verbose</td>\n</tr>\n<tr>\n<td>logfile</td>\n<td>日志记录方式，默认为标准输出</td>\n</tr>\n</tbody></table>\n<h3 id=\"3-Redis数据类型\"><a href=\"#3-Redis数据类型\" class=\"headerlink\" title=\"3. Redis数据类型\"></a>3. Redis数据类型</h3><h4 id=\"3-1-String字符串\"><a href=\"#3-1-String字符串\" class=\"headerlink\" title=\"3.1. String字符串\"></a>3.1. String字符串</h4><p>最基本的数据类型，一个key对应一个value，redis的string可包含任何数据，比如jpg图片或者序列化的对象，一个键最大能存储512MB的对象<br>示例如下：</p>\n<img src=\"/2024/04/02/Redis%E5%AD%A6%E4%B9%A01-Redis%E7%AE%80%E4%BB%8B%E3%80%81%E5%9F%BA%E7%A1%80/2.png\" class=\"\">\n\n<table>\n<thead>\n<tr>\n<th>命令</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>SET</td>\n<td>设置指定 key 的值</td>\n</tr>\n<tr>\n<td>GET</td>\n<td>获取指定 key 的值</td>\n</tr>\n<tr>\n<td>MSET</td>\n<td>同时设置一个或多个 key-value 对</td>\n</tr>\n<tr>\n<td>MGET</td>\n<td>获取所有(一个或多个)给定 key 的值</td>\n</tr>\n<tr>\n<td>INCR</td>\n<td>将 key 中储存的数字值增一</td>\n</tr>\n<tr>\n<td>INCRBY</td>\n<td>将 key 所储存的值加上给定的增量值 ( increment )</td>\n</tr>\n<tr>\n<td>DECR</td>\n<td>将 key 中储存的数字值减一</td>\n</tr>\n<tr>\n<td>DECRBY</td>\n<td>将 key 所储存的值减去给定的减量值 ( decrement )</td>\n</tr>\n</tbody></table>\n<h4 id=\"3-2-Hash哈希\"><a href=\"#3-2-Hash哈希\" class=\"headerlink\" title=\"3.2. Hash哈希\"></a>3.2. Hash哈希</h4><p>Redis Hash是一个string类型的field和value的映射表，特别适合用于存储对象。<br>常用的命令为HMSET KEY FIELD VALUE FIELD VALUE，即同时将多个field-value（域-值）对设置到哈希表key中。示例如下：</p>\n<img src=\"/2024/04/02/Redis%E5%AD%A6%E4%B9%A01-Redis%E7%AE%80%E4%BB%8B%E3%80%81%E5%9F%BA%E7%A1%80/3.png\" class=\"\">\n<p>其中，user:1为键</p>\n<table>\n<thead>\n<tr>\n<th>命令</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>HEXISTS</td>\n<td>查看哈希表 key 中，指定的字段是否存在</td>\n</tr>\n<tr>\n<td>HGET</td>\n<td>获取存储在哈希表中指定字段的值</td>\n</tr>\n<tr>\n<td>HSET</td>\n<td>将哈希表 key 中的字段 field 的值设为 value</td>\n</tr>\n<tr>\n<td>HMSET</td>\n<td>同时将多个 field-value (域-值)对设置到哈希表 key 中</td>\n</tr>\n<tr>\n<td>HMGET</td>\n<td>获取所有给定字段的值</td>\n</tr>\n<tr>\n<td>HDEL</td>\n<td>删除一个或多个哈希表字段</td>\n</tr>\n</tbody></table>\n<h4 id=\"3-3-List列表\"><a href=\"#3-3-List列表\" class=\"headerlink\" title=\"3.3. List列表\"></a>3.3. List列表</h4><p>Redis List为最简单的字符串列表，按照插入顺序排序，可以添加一个元素到列表的头部（左边）或尾部（右边）。<br>常用的命令有lpush，rpush，lrange，示例如下：</p>\n<img src=\"/2024/04/02/Redis%E5%AD%A6%E4%B9%A01-Redis%E7%AE%80%E4%BB%8B%E3%80%81%E5%9F%BA%E7%A1%80/4.png\" class=\"\">\n<table>\n<thead>\n<tr>\n<th>命令</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>LINDEX</td>\n<td>通过索引获取列表中的元素</td>\n</tr>\n<tr>\n<td>LINSERT</td>\n<td>在列表的元素前或者后插入元素</td>\n</tr>\n<tr>\n<td>LLEN</td>\n<td>获取列表长度</td>\n</tr>\n<tr>\n<td>LPOP</td>\n<td>移出并获取列表的第一个元素</td>\n</tr>\n<tr>\n<td>LPUSH</td>\n<td>将一个或多个值插入到列表头部</td>\n</tr>\n<tr>\n<td>RPOP</td>\n<td>移除并获取列表最后一个元素</td>\n</tr>\n<tr>\n<td>RPUSH</td>\n<td>在列表中添加一个或多个值</td>\n</tr>\n<tr>\n<td>LSET</td>\n<td>通过索引设置列表元素的值</td>\n</tr>\n<tr>\n<td>LRANGE</td>\n<td>获取列表指定范围内的元素</td>\n</tr>\n</tbody></table>\n<h4 id=\"3-4-set集合\"><a href=\"#3-4-set集合\" class=\"headerlink\" title=\"3.4. set集合\"></a>3.4. set集合</h4><p>Redis是string类型的无序集合，通过哈希表实现，元素具有唯一性。<br>常用命令有sadd，smembers</p>\n<img src=\"/2024/04/02/Redis%E5%AD%A6%E4%B9%A01-Redis%E7%AE%80%E4%BB%8B%E3%80%81%E5%9F%BA%E7%A1%80/5.png\" class=\"\">\n\n<table>\n<thead>\n<tr>\n<th>命令</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>SADD</td>\n<td>向集合添加一个或多个成员</td>\n</tr>\n<tr>\n<td>SCARD</td>\n<td>获取集合的成员数</td>\n</tr>\n<tr>\n<td>SDIFF</td>\n<td>返回给定所有集合的差集</td>\n</tr>\n<tr>\n<td>SINTER</td>\n<td>返回给定所有集合的交集</td>\n</tr>\n<tr>\n<td>SISMEMBER</td>\n<td>判断 member 元素是否是集合 key 的成员</td>\n</tr>\n<tr>\n<td>SMEMBERS</td>\n<td>返回集合中的所有成员</td>\n</tr>\n<tr>\n<td>SUNION</td>\n<td>返回所有给定集合的并集</td>\n</tr>\n<tr>\n<td>SREM</td>\n<td>移除集合中一个或多个成员</td>\n</tr>\n</tbody></table>\n<h4 id=\"3-5-zset（sorted-set）有序集合\"><a href=\"#3-5-zset（sorted-set）有序集合\" class=\"headerlink\" title=\"3.5. zset（sorted set）有序集合\"></a>3.5. zset（sorted set）有序集合</h4><p>和set一样是string类型元素的集合，不同的是每个元素会关联一个double类型的分数，通过分数为集合中的成员进行从小到大的排序，zset的成员是唯一的，但分数可以重复。<br>常用命令有：zadd，zrangeByscore</p>\n<img src=\"/2024/04/02/Redis%E5%AD%A6%E4%B9%A01-Redis%E7%AE%80%E4%BB%8B%E3%80%81%E5%9F%BA%E7%A1%80/6.png\" class=\"\">\n\n<table>\n<thead>\n<tr>\n<th>命令</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>ZADD</td>\n<td>向有序集合添加一个或多个成员，或者更新已存在成员的分数</td>\n</tr>\n<tr>\n<td>ZCARD</td>\n<td>获取有序集合的成员数</td>\n</tr>\n<tr>\n<td>ZCOUNT</td>\n<td>计算在有序集合中指定区间分数的成员数</td>\n</tr>\n<tr>\n<td>ZRANGE</td>\n<td>通过索引区间返回有序集合成指定区间内的成员</td>\n</tr>\n<tr>\n<td>ZRANGEBYSCORE</td>\n<td>通过分数返回有序集合指定区间内的成员</td>\n</tr>\n<tr>\n<td>ZRANK</td>\n<td>返回有序集合中指定成员的索引</td>\n</tr>\n<tr>\n<td>ZSCORE</td>\n<td>返回有序集中，成员的分数值</td>\n</tr>\n</tbody></table>\n<h4 id=\"3-6-Redis-Bitmap-位图\"><a href=\"#3-6-Redis-Bitmap-位图\" class=\"headerlink\" title=\"3.6. Redis Bitmap 位图\"></a>3.6. Redis Bitmap 位图</h4><p>通过类似map结构存放0或1（bit位）作为值，可以用来统计状态，如日活，是否浏览过某个东西</p>\n<img src=\"/2024/04/02/Redis%E5%AD%A6%E4%B9%A01-Redis%E7%AE%80%E4%BB%8B%E3%80%81%E5%9F%BA%E7%A1%80/7.png\" class=\"\">\n\n<h4 id=\"3-7-HyperLogLogs基数统计\"><a href=\"#3-7-HyperLogLogs基数统计\" class=\"headerlink\" title=\"3.7. HyperLogLogs基数统计\"></a>3.7. HyperLogLogs基数统计</h4><p>可以接受多个元素作为输入，并给出输入元素的基数估算值<br>● 基数：集合中不同元素的数量，比如 {’apple’, ‘banana’, ‘cherry’, ‘banana’, ‘apple’} 的基数就是 3<br>● 估算值：算法给出的基数并不是精确的，可能会比实际稍微多一些或者稍微少一些，但会控制在合 理的范围之内<br>HyperLogLog 的优点是即使输入元素的数量或体积非常大，计算基数所需空间总是固定的，并且是很小的。<br>在Redis 里面，每个 HyperLogLog 键只需要花费 12 KB 内存，就可以计算接近 2^64 个不同元素的基数<br>这和计算基数时，元素越多耗费内存就越多的集合形成鲜明对比<br>因为HyperLogLog 只会根据输入元素来计算基数，而不会储存输入元素本身，所以 HyperLogLog 不能像集合那样，返回输入的各个元素</p>\n<img src=\"/2024/04/02/Redis%E5%AD%A6%E4%B9%A01-Redis%E7%AE%80%E4%BB%8B%E3%80%81%E5%9F%BA%E7%A1%80/8.png\" class=\"\">\n<table>\n<thead>\n<tr>\n<th>命令</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>PFADD</td>\n<td>添加指定元素到 HyperLogLog 中</td>\n</tr>\n<tr>\n<td>PFCOUNT</td>\n<td>返回给定 HyperLogLog 的基数估算值</td>\n</tr>\n<tr>\n<td>PFMERGE</td>\n<td>将多个 HyperLogLog 合并为一个 HyperLogLog</td>\n</tr>\n</tbody></table>\n"},{"title":"Redis学习2—SpringBoot整合Redis、Redis工具类","date":"2024-04-02T13:08:13.000Z","_content":"### 1. 依赖和配置\n#### 1.1. pom.xml\nSpringBoot整合Redis，需要引入spring-boot-starter-data-redis依赖\n```xml\n  <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-data-redis</artifactId>\n        </dependency>\n```\n当我们需要配置redis的连接池时，还需要引入commons-pool2依赖\n```xml\n <dependency>\n            <groupId>org.apache.commons</groupId>\n            <artifactId>commons-pool2</artifactId>\n        </dependency>\n```\napplication.yml配置\n```yml\nspring:\n  redis:\n    host: 127.0.0.1\n    port: 6379\n    database: 0\n    jedis:\n      pool:\n        max-idle: 8\n        max-active: 8\n        min-idle: 0\n```\n这里的jedis指的是使用jedis客户端，这里也可以将jedis改为lettuce，表示使用lettuce客户端，客户端下面的pool表示的是连接池的相关配置。\n上述的配置针对的是单机redis配置，如果使用的是集群，配置如下：\n```yml\nspring:\n  redis:\n    password: 123456\n    cluster:\n      nodes: 10.255.144.115:7001,10.255.144.115:7002,10.255.144.115:7003,10.255.144.115:7004,10.255.144.115:7005,10.255.144.115:7006\n      max-redirects: 3\n```\n### 2. RedisTemplate\n上述的配置完毕后，我们就可以在项目中操作redis了，操作的时候，可以直接使用spring-boot-starter-data-redis为我们提供的RedisTemplate这个类，也可以使用StringRedisTemplate，两者的方法基本一致，后者可以看作RedisTemplate<String, String> 。\n在上一节中，提到，Redis有多种数据类型，比如string、list、hash、set、zset等，这些类型的操作在RedisTemplate分别对应opsForValue(), opsForList(), opsForHash(), opsForSet(), opsForZSet()。\n具体的操作演示如下：\n```java\n@SpringBootTest\npublic class RedisAppTest {\n    @Autowired\n    private RedisTemplate<String, String> redisTemplate;\n\n    @Test\n    public void testGet() {\n        System.out.println(\"字符串操作=================\");\n        redisTemplate.opsForValue().set(\"name\", \"cxy\");\n        System.out.println(redisTemplate.opsForValue().get(\"name\"));\n\n        System.out.println(\"列表操作\");\n        redisTemplate.opsForList().leftPush(\"school\", \"华南理工大学\");\n        redisTemplate.opsForList().leftPush(\"school\", \"中山大学\");\n        redisTemplate.opsForList().leftPush(\"school\", \"华南农业大学\");\n        List<String> school = redisTemplate.opsForList().range(\"school\", 0, 5);\n        for (String s : school) {\n            System.out.print(s + \" \");\n        }\n        System.out.println();\n\n        System.out.println(\"hash操作\");\n        redisTemplate.opsForHash().put(\"student\", \"name\", \"cxy\");\n        redisTemplate.opsForHash().put(\"student\", \"age\", \"21\");\n        redisTemplate.opsForHash().put(\"student\", \"sex\", \"male\");\n        System.out.println(redisTemplate.opsForHash().get(\"student\", \"name\"));\n        System.out.println(redisTemplate.opsForHash().get(\"student\", \"age\"));\n        System.out.println(redisTemplate.opsForHash().get(\"student\", \"sex\"));\n\n        System.out.println(\"set操作\");\n        redisTemplate.opsForSet().add(\"project\", \"软件工程\", \"计算机技术\", \"通信工程\", \"软件工程\");\n        Set<String> project = redisTemplate.opsForSet().members(\"project\");\n        for (String s : project) {\n            System.out.print(s + \" \");\n        }\n        System.out.println();\n\n        System.out.println(\"zset操作\");\n        redisTemplate.opsForZSet().add(\"movie\", \"热辣滚烫\", 2.7d);\n        redisTemplate.opsForZSet().add(\"movie\", \"飞驰人生\", 9.1d);\n        redisTemplate.opsForZSet().add(\"movie\", \"熊出没之逆转时空\", 9.3d);\n        redisTemplate.opsForZSet().add(\"movie\", \"二十一条\", 8.2d);\n        Set<String> movie = redisTemplate.opsForZSet().rangeByScore(\"movie\", 3.0d, 9.3d);\n        for (String s : movie) {\n            System.out.print(s + \" \");\n        }\n        System.out.println();\n\n        System.out.println(\"基数操作\");\n        redisTemplate.opsForHyperLogLog().add(\"accessIp\", \"127.0.0.1\");\n        redisTemplate.opsForHyperLogLog().add(\"accessIp\", \"192.168.10.1\");\n        redisTemplate.opsForHyperLogLog().add(\"accessIp\", \"192.168.0.1\");\n        redisTemplate.opsForHyperLogLog().add(\"accessIp\", \"33.45.23.1\");\n        System.out.println(redisTemplate.opsForHyperLogLog().size(\"accessIp\"));\n\n    }\n\n}\n```\n运行结果如下：\n{% asset_img 1.png %}\n### 3. RedisUtils工具类\n虽然RedisTemplate提供的redis操作很全面，但对于不了解redis的开发同学来说，直接看RedisTemplate的方法不够见名知义，因此一般情况下，我们都会单独封装一个工具类，将常用的一些方法进行抽象，以方便后续使用。\n创建Redis配置类，配置RedisTemplate\n```java\n@Configuration\npublic class RedisConfiguration {\n    @Bean\n    public RedisTemplate<String, Object> redisTemplate(RedisConnectionFactory redisConnectionFactory) {\n        RedisTemplate<String, Object> redisTemplate = new RedisTemplate<>();\n        redisTemplate.setConnectionFactory(redisConnectionFactory);\n        return redisTemplate;\n    }\n}\n```\n工具类代码如下：\n```java\npackage org.example.util;\n\nimport org.apache.commons.lang3.StringUtils;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.data.redis.core.RedisTemplate;\nimport org.springframework.data.redis.core.ZSetOperations;\nimport org.springframework.stereotype.Component;\n\nimport java.util.*;\nimport java.util.concurrent.TimeUnit;\n\n@Component\npublic class RedisUtils {\n    @Autowired\n    private RedisTemplate<String, Object> redisTemplate;\n\n    public boolean removeKey(String key) {\n        return redisTemplate.delete(key);\n    }\n\n    public boolean hasKey(String key) {\n        if (StringUtils.isEmpty(key)) {\n            return false;\n        }\n        return redisTemplate.hasKey(key);\n    }\n\n    public boolean expire(String key, long time) {\n        return expire(key, time, TimeUnit.SECONDS);\n    }\n\n    public boolean expire(String key, long time, TimeUnit timeUnit) {\n        if (StringUtils.isEmpty(key)) {\n            return false;\n        }\n        return redisTemplate.expire(key, time, timeUnit);\n    }\n\n    public void addKey(String key, Object value, long time) {\n        addKey(key, value, time, TimeUnit.SECONDS);\n    }\n\n    public void addKey(String key, Object value, long time, TimeUnit timeUnit) {\n        if (StringUtils.isEmpty(key)) {\n            return;\n        }\n        redisTemplate.opsForValue().set(key, value, time, timeUnit);\n    }\n\n    public void addKey(String key, Object value) {\n        redisTemplate.opsForValue().set(key, value);\n    }\n\n    public Object getKey(String key) {\n        if (StringUtils.isEmpty(key)) {\n            return null;\n        }\n        return redisTemplate.opsForValue().get(key);\n    }\n\n    public void increment(String key) {\n        increment(key, 1L);\n    }\n\n    public void increment(String key, long delta) {\n        if (StringUtils.isEmpty(key)) {\n            return;\n        }\n        redisTemplate.opsForValue().increment(key, delta);\n    }\n\n    public void decrement(String key) {\n        decrement(key, 1L);\n    }\n\n    public void decrement(String key, long delta) {\n        if (StringUtils.isEmpty(key)) {\n            return;\n        }\n        redisTemplate.opsForValue().decrement(key, delta);\n    }\n\n    public void leftPush(String key, List<Object> values) {\n        if (StringUtils.isEmpty(key)) {\n            return;\n        }\n        redisTemplate.opsForList().leftPushAll(key, values);\n    }\n\n    public void leftPush(String key, Object... value) {\n        if (StringUtils.isEmpty(key)) {\n            return;\n        }\n        redisTemplate.opsForList().leftPushAll(key, value);\n    }\n\n    public Object leftPop(String key) {\n        if (StringUtils.isEmpty(key)) {\n            return null;\n        }\n        return redisTemplate.opsForList().leftPop(key);\n    }\n\n    public List<Object> range(String key, long start, long end) {\n        if (StringUtils.isEmpty(key)) {\n            return new ArrayList<>();\n        }\n        return redisTemplate.opsForList().range(key, start, end);\n    }\n\n    public Object indexOfList(String key, int index) {\n        if (StringUtils.isEmpty(key)) {\n            return null;\n        }\n        return redisTemplate.opsForList().index(key, index);\n    }\n\n    public void addHash(String key, Map<String, Object> map) {\n        if (StringUtils.isEmpty(key)) {\n            return;\n        }\n        if (map == null || map.isEmpty()) {\n            return;\n        }\n        map.forEach((field, value) -> {\n            redisTemplate.opsForHash().put(key, field, value);\n        });\n    }\n\n    public void addField(String key, String field, Object value) {\n        if (StringUtils.isEmpty(key) || StringUtils.isEmpty(field)) {\n            return;\n        }\n        redisTemplate.opsForHash().put(key, field, value);\n    }\n\n     public void removeField(String key, String field) {\n        if (StringUtils.isEmpty(key) || StringUtils.isEmpty(field)) {\n            return;\n        }\n        redisTemplate.opsForHash().delete(key, field);\n    }\n\n    public Map<String, Object> getEntries(String key) {\n        if (StringUtils.isEmpty(key)) {\n            return new HashMap<>();\n        }\n        Map<Object, Object> entries = redisTemplate.opsForHash().entries(key);\n        Map<String, Object> result = new HashMap<>();\n        entries.forEach((k, v) -> {\n            result.put(k.toString(), v);\n        });\n        return result;\n    }\n\n    public Object getField(String key, String field) {\n        if (StringUtils.isEmpty(key) || StringUtils.isEmpty(field)) {\n            return null;\n        }\n        return redisTemplate.opsForHash().get(key, field);\n    }\n\n    public Boolean hasField(String key, String field) {\n        if (StringUtils.isEmpty(key) || StringUtils.isEmpty(field)) {\n            return false;\n        }\n        return redisTemplate.opsForHash().hasKey(key, field);\n    }\n\n    public void addSet(String key, String... value) {\n        if (StringUtils.isEmpty(key)) {\n            return;\n        }\n        redisTemplate.opsForSet().add(key, value);\n    }\n\n    public Set<Object> members(String key) {\n        if (StringUtils.isEmpty(key)) {\n            return new HashSet<>();\n        }\n        return redisTemplate.opsForSet().members(key);\n    }\n\n    public Boolean isMember(String key, Object value) {\n        if (StringUtils.isEmpty(key)) {\n            return false;\n        }\n        return redisTemplate.opsForSet().isMember(key, value);\n    }\n\n    public void addZSet(String key, Object value, Double score) {\n        if (StringUtils.isEmpty(key)) {\n            return;\n        }\n        redisTemplate.opsForZSet().add(key, value, score);\n    }\n\n    public Set<Object> rangeByScore(String key, Double min, Double max) {\n        if (StringUtils.isEmpty(key)) {\n            return new HashSet<>();\n        }\n        return redisTemplate.opsForZSet().rangeByScore(key, min, max);\n    }\n\n    public Set<ZSetOperations.TypedTuple<Object>> rangeByScoreWithScore(String key, Double min, Double max) {\n        if (StringUtils.isEmpty(key)) {\n            return new HashSet<>();\n        }\n       return redisTemplate.opsForZSet().rangeByScoreWithScores(key, min, max);\n    }\n\n    public void addHyperLogLog(String key, Object... value) {\n        if (StringUtils.isEmpty(key)) {\n            return;\n        }\n        redisTemplate.opsForHyperLogLog().add(key, value);\n    }\n\n    public void addHyperLogLog(String key, List value) {\n        if (StringUtils.isEmpty(key)) {\n            return;\n        }\n        redisTemplate.opsForHyperLogLog().add(key, value);\n    }\n\n    public Long countHyperLogLog(String key) {\n        if (StringUtils.isEmpty(key)) {\n            return 0L;\n        }\n        return redisTemplate.opsForHyperLogLog().size(key);\n    }\n}\n```\n修改之前的测试代码，将redisTemplate，改为我们的工具类\n```java\n@Autowired\n    private RedisUtils redisUtils;\n\n    @Test\n    public void testRedisUtils() {\n        System.out.println(\"字符串操作=================\");\n       redisUtils.addKey(\"name\", \"cxy\");\n        System.out.println(redisUtils.getKey(\"name\"));\n\n        System.out.println(\"列表操作\");\n        redisUtils.leftPush(\"school\", \"华南理工大学\");\n        redisUtils.leftPush(\"school\", \"中山大学\");\n        redisUtils.leftPush(\"school\", \"华南农业大学\");\n        List<Object> school = redisUtils.range(\"school\", 0, 5);\n        for (Object s : school) {\n            System.out.print(s + \" \");\n        }\n        System.out.println();\n\n        System.out.println(\"hash操作\");\n        redisUtils.addField(\"student\", \"name\", \"cxy\");\n        redisUtils.addField(\"student\", \"age\", \"21\");\n        redisUtils.addField(\"student\", \"sex\", \"male\");\n        System.out.println(redisUtils.getField(\"student\", \"name\"));\n        System.out.println(redisUtils.getField(\"student\", \"age\"));\n        System.out.println(redisUtils.getField(\"student\", \"sex\"));\n\n        System.out.println(\"set操作\");\n        redisUtils.addSet(\"project\", \"软件工程\", \"计算机技术\", \"通信工程\", \"软件工程\");\n        Set<Object> project = redisUtils.members(\"project\");\n        for (Object s : project) {\n            System.out.print(s + \" \");\n        }\n        System.out.println();\n\n        System.out.println(\"zset操作\");\n        redisUtils.addZSet(\"movie\", \"热辣滚烫\", 2.7d);\n        redisUtils.addZSet(\"movie\", \"飞驰人生\", 9.1d);\n        redisUtils.addZSet(\"movie\", \"熊出没之逆转时空\", 9.3d);\n        redisUtils.addZSet(\"movie\", \"二十一条\", 8.2d);\n        Set<Object> movie = redisUtils.rangeByScore(\"movie\", 3.0d, 9.3d);\n        for (Object s : movie) {\n            System.out.print(s + \" \");\n        }\n        System.out.println();\n\n        System.out.println(\"基数操作\");\n        redisUtils.addHyperLogLog(\"accessIp\", \"127.0.0.1\");\n        redisUtils.addHyperLogLog(\"accessIp\", \"192.168.10.1\");\n        redisUtils.addHyperLogLog(\"accessIp\", \"192.168.0.1\");\n        redisUtils.addHyperLogLog(\"accessIp\", \"33.45.23.1\");\n        System.out.println(redisUtils.countHyperLogLog(\"accessIp\"));\n    }\n```\n在测试之前，先删除之前添加的数据\n{% asset_img 2.png %}\n测试结果如下：\n{% asset_img 3.png %}","source":"_posts/Redis学习2—SpringBoot整合Redis、Redis工具类.md","raw":"---\ntitle: Redis学习2—SpringBoot整合Redis、Redis工具类\ndate: 2024-04-02 21:08:13\ntags: \n    - 中间件\n    - Redis\n---\n### 1. 依赖和配置\n#### 1.1. pom.xml\nSpringBoot整合Redis，需要引入spring-boot-starter-data-redis依赖\n```xml\n  <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-data-redis</artifactId>\n        </dependency>\n```\n当我们需要配置redis的连接池时，还需要引入commons-pool2依赖\n```xml\n <dependency>\n            <groupId>org.apache.commons</groupId>\n            <artifactId>commons-pool2</artifactId>\n        </dependency>\n```\napplication.yml配置\n```yml\nspring:\n  redis:\n    host: 127.0.0.1\n    port: 6379\n    database: 0\n    jedis:\n      pool:\n        max-idle: 8\n        max-active: 8\n        min-idle: 0\n```\n这里的jedis指的是使用jedis客户端，这里也可以将jedis改为lettuce，表示使用lettuce客户端，客户端下面的pool表示的是连接池的相关配置。\n上述的配置针对的是单机redis配置，如果使用的是集群，配置如下：\n```yml\nspring:\n  redis:\n    password: 123456\n    cluster:\n      nodes: 10.255.144.115:7001,10.255.144.115:7002,10.255.144.115:7003,10.255.144.115:7004,10.255.144.115:7005,10.255.144.115:7006\n      max-redirects: 3\n```\n### 2. RedisTemplate\n上述的配置完毕后，我们就可以在项目中操作redis了，操作的时候，可以直接使用spring-boot-starter-data-redis为我们提供的RedisTemplate这个类，也可以使用StringRedisTemplate，两者的方法基本一致，后者可以看作RedisTemplate<String, String> 。\n在上一节中，提到，Redis有多种数据类型，比如string、list、hash、set、zset等，这些类型的操作在RedisTemplate分别对应opsForValue(), opsForList(), opsForHash(), opsForSet(), opsForZSet()。\n具体的操作演示如下：\n```java\n@SpringBootTest\npublic class RedisAppTest {\n    @Autowired\n    private RedisTemplate<String, String> redisTemplate;\n\n    @Test\n    public void testGet() {\n        System.out.println(\"字符串操作=================\");\n        redisTemplate.opsForValue().set(\"name\", \"cxy\");\n        System.out.println(redisTemplate.opsForValue().get(\"name\"));\n\n        System.out.println(\"列表操作\");\n        redisTemplate.opsForList().leftPush(\"school\", \"华南理工大学\");\n        redisTemplate.opsForList().leftPush(\"school\", \"中山大学\");\n        redisTemplate.opsForList().leftPush(\"school\", \"华南农业大学\");\n        List<String> school = redisTemplate.opsForList().range(\"school\", 0, 5);\n        for (String s : school) {\n            System.out.print(s + \" \");\n        }\n        System.out.println();\n\n        System.out.println(\"hash操作\");\n        redisTemplate.opsForHash().put(\"student\", \"name\", \"cxy\");\n        redisTemplate.opsForHash().put(\"student\", \"age\", \"21\");\n        redisTemplate.opsForHash().put(\"student\", \"sex\", \"male\");\n        System.out.println(redisTemplate.opsForHash().get(\"student\", \"name\"));\n        System.out.println(redisTemplate.opsForHash().get(\"student\", \"age\"));\n        System.out.println(redisTemplate.opsForHash().get(\"student\", \"sex\"));\n\n        System.out.println(\"set操作\");\n        redisTemplate.opsForSet().add(\"project\", \"软件工程\", \"计算机技术\", \"通信工程\", \"软件工程\");\n        Set<String> project = redisTemplate.opsForSet().members(\"project\");\n        for (String s : project) {\n            System.out.print(s + \" \");\n        }\n        System.out.println();\n\n        System.out.println(\"zset操作\");\n        redisTemplate.opsForZSet().add(\"movie\", \"热辣滚烫\", 2.7d);\n        redisTemplate.opsForZSet().add(\"movie\", \"飞驰人生\", 9.1d);\n        redisTemplate.opsForZSet().add(\"movie\", \"熊出没之逆转时空\", 9.3d);\n        redisTemplate.opsForZSet().add(\"movie\", \"二十一条\", 8.2d);\n        Set<String> movie = redisTemplate.opsForZSet().rangeByScore(\"movie\", 3.0d, 9.3d);\n        for (String s : movie) {\n            System.out.print(s + \" \");\n        }\n        System.out.println();\n\n        System.out.println(\"基数操作\");\n        redisTemplate.opsForHyperLogLog().add(\"accessIp\", \"127.0.0.1\");\n        redisTemplate.opsForHyperLogLog().add(\"accessIp\", \"192.168.10.1\");\n        redisTemplate.opsForHyperLogLog().add(\"accessIp\", \"192.168.0.1\");\n        redisTemplate.opsForHyperLogLog().add(\"accessIp\", \"33.45.23.1\");\n        System.out.println(redisTemplate.opsForHyperLogLog().size(\"accessIp\"));\n\n    }\n\n}\n```\n运行结果如下：\n{% asset_img 1.png %}\n### 3. RedisUtils工具类\n虽然RedisTemplate提供的redis操作很全面，但对于不了解redis的开发同学来说，直接看RedisTemplate的方法不够见名知义，因此一般情况下，我们都会单独封装一个工具类，将常用的一些方法进行抽象，以方便后续使用。\n创建Redis配置类，配置RedisTemplate\n```java\n@Configuration\npublic class RedisConfiguration {\n    @Bean\n    public RedisTemplate<String, Object> redisTemplate(RedisConnectionFactory redisConnectionFactory) {\n        RedisTemplate<String, Object> redisTemplate = new RedisTemplate<>();\n        redisTemplate.setConnectionFactory(redisConnectionFactory);\n        return redisTemplate;\n    }\n}\n```\n工具类代码如下：\n```java\npackage org.example.util;\n\nimport org.apache.commons.lang3.StringUtils;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.data.redis.core.RedisTemplate;\nimport org.springframework.data.redis.core.ZSetOperations;\nimport org.springframework.stereotype.Component;\n\nimport java.util.*;\nimport java.util.concurrent.TimeUnit;\n\n@Component\npublic class RedisUtils {\n    @Autowired\n    private RedisTemplate<String, Object> redisTemplate;\n\n    public boolean removeKey(String key) {\n        return redisTemplate.delete(key);\n    }\n\n    public boolean hasKey(String key) {\n        if (StringUtils.isEmpty(key)) {\n            return false;\n        }\n        return redisTemplate.hasKey(key);\n    }\n\n    public boolean expire(String key, long time) {\n        return expire(key, time, TimeUnit.SECONDS);\n    }\n\n    public boolean expire(String key, long time, TimeUnit timeUnit) {\n        if (StringUtils.isEmpty(key)) {\n            return false;\n        }\n        return redisTemplate.expire(key, time, timeUnit);\n    }\n\n    public void addKey(String key, Object value, long time) {\n        addKey(key, value, time, TimeUnit.SECONDS);\n    }\n\n    public void addKey(String key, Object value, long time, TimeUnit timeUnit) {\n        if (StringUtils.isEmpty(key)) {\n            return;\n        }\n        redisTemplate.opsForValue().set(key, value, time, timeUnit);\n    }\n\n    public void addKey(String key, Object value) {\n        redisTemplate.opsForValue().set(key, value);\n    }\n\n    public Object getKey(String key) {\n        if (StringUtils.isEmpty(key)) {\n            return null;\n        }\n        return redisTemplate.opsForValue().get(key);\n    }\n\n    public void increment(String key) {\n        increment(key, 1L);\n    }\n\n    public void increment(String key, long delta) {\n        if (StringUtils.isEmpty(key)) {\n            return;\n        }\n        redisTemplate.opsForValue().increment(key, delta);\n    }\n\n    public void decrement(String key) {\n        decrement(key, 1L);\n    }\n\n    public void decrement(String key, long delta) {\n        if (StringUtils.isEmpty(key)) {\n            return;\n        }\n        redisTemplate.opsForValue().decrement(key, delta);\n    }\n\n    public void leftPush(String key, List<Object> values) {\n        if (StringUtils.isEmpty(key)) {\n            return;\n        }\n        redisTemplate.opsForList().leftPushAll(key, values);\n    }\n\n    public void leftPush(String key, Object... value) {\n        if (StringUtils.isEmpty(key)) {\n            return;\n        }\n        redisTemplate.opsForList().leftPushAll(key, value);\n    }\n\n    public Object leftPop(String key) {\n        if (StringUtils.isEmpty(key)) {\n            return null;\n        }\n        return redisTemplate.opsForList().leftPop(key);\n    }\n\n    public List<Object> range(String key, long start, long end) {\n        if (StringUtils.isEmpty(key)) {\n            return new ArrayList<>();\n        }\n        return redisTemplate.opsForList().range(key, start, end);\n    }\n\n    public Object indexOfList(String key, int index) {\n        if (StringUtils.isEmpty(key)) {\n            return null;\n        }\n        return redisTemplate.opsForList().index(key, index);\n    }\n\n    public void addHash(String key, Map<String, Object> map) {\n        if (StringUtils.isEmpty(key)) {\n            return;\n        }\n        if (map == null || map.isEmpty()) {\n            return;\n        }\n        map.forEach((field, value) -> {\n            redisTemplate.opsForHash().put(key, field, value);\n        });\n    }\n\n    public void addField(String key, String field, Object value) {\n        if (StringUtils.isEmpty(key) || StringUtils.isEmpty(field)) {\n            return;\n        }\n        redisTemplate.opsForHash().put(key, field, value);\n    }\n\n     public void removeField(String key, String field) {\n        if (StringUtils.isEmpty(key) || StringUtils.isEmpty(field)) {\n            return;\n        }\n        redisTemplate.opsForHash().delete(key, field);\n    }\n\n    public Map<String, Object> getEntries(String key) {\n        if (StringUtils.isEmpty(key)) {\n            return new HashMap<>();\n        }\n        Map<Object, Object> entries = redisTemplate.opsForHash().entries(key);\n        Map<String, Object> result = new HashMap<>();\n        entries.forEach((k, v) -> {\n            result.put(k.toString(), v);\n        });\n        return result;\n    }\n\n    public Object getField(String key, String field) {\n        if (StringUtils.isEmpty(key) || StringUtils.isEmpty(field)) {\n            return null;\n        }\n        return redisTemplate.opsForHash().get(key, field);\n    }\n\n    public Boolean hasField(String key, String field) {\n        if (StringUtils.isEmpty(key) || StringUtils.isEmpty(field)) {\n            return false;\n        }\n        return redisTemplate.opsForHash().hasKey(key, field);\n    }\n\n    public void addSet(String key, String... value) {\n        if (StringUtils.isEmpty(key)) {\n            return;\n        }\n        redisTemplate.opsForSet().add(key, value);\n    }\n\n    public Set<Object> members(String key) {\n        if (StringUtils.isEmpty(key)) {\n            return new HashSet<>();\n        }\n        return redisTemplate.opsForSet().members(key);\n    }\n\n    public Boolean isMember(String key, Object value) {\n        if (StringUtils.isEmpty(key)) {\n            return false;\n        }\n        return redisTemplate.opsForSet().isMember(key, value);\n    }\n\n    public void addZSet(String key, Object value, Double score) {\n        if (StringUtils.isEmpty(key)) {\n            return;\n        }\n        redisTemplate.opsForZSet().add(key, value, score);\n    }\n\n    public Set<Object> rangeByScore(String key, Double min, Double max) {\n        if (StringUtils.isEmpty(key)) {\n            return new HashSet<>();\n        }\n        return redisTemplate.opsForZSet().rangeByScore(key, min, max);\n    }\n\n    public Set<ZSetOperations.TypedTuple<Object>> rangeByScoreWithScore(String key, Double min, Double max) {\n        if (StringUtils.isEmpty(key)) {\n            return new HashSet<>();\n        }\n       return redisTemplate.opsForZSet().rangeByScoreWithScores(key, min, max);\n    }\n\n    public void addHyperLogLog(String key, Object... value) {\n        if (StringUtils.isEmpty(key)) {\n            return;\n        }\n        redisTemplate.opsForHyperLogLog().add(key, value);\n    }\n\n    public void addHyperLogLog(String key, List value) {\n        if (StringUtils.isEmpty(key)) {\n            return;\n        }\n        redisTemplate.opsForHyperLogLog().add(key, value);\n    }\n\n    public Long countHyperLogLog(String key) {\n        if (StringUtils.isEmpty(key)) {\n            return 0L;\n        }\n        return redisTemplate.opsForHyperLogLog().size(key);\n    }\n}\n```\n修改之前的测试代码，将redisTemplate，改为我们的工具类\n```java\n@Autowired\n    private RedisUtils redisUtils;\n\n    @Test\n    public void testRedisUtils() {\n        System.out.println(\"字符串操作=================\");\n       redisUtils.addKey(\"name\", \"cxy\");\n        System.out.println(redisUtils.getKey(\"name\"));\n\n        System.out.println(\"列表操作\");\n        redisUtils.leftPush(\"school\", \"华南理工大学\");\n        redisUtils.leftPush(\"school\", \"中山大学\");\n        redisUtils.leftPush(\"school\", \"华南农业大学\");\n        List<Object> school = redisUtils.range(\"school\", 0, 5);\n        for (Object s : school) {\n            System.out.print(s + \" \");\n        }\n        System.out.println();\n\n        System.out.println(\"hash操作\");\n        redisUtils.addField(\"student\", \"name\", \"cxy\");\n        redisUtils.addField(\"student\", \"age\", \"21\");\n        redisUtils.addField(\"student\", \"sex\", \"male\");\n        System.out.println(redisUtils.getField(\"student\", \"name\"));\n        System.out.println(redisUtils.getField(\"student\", \"age\"));\n        System.out.println(redisUtils.getField(\"student\", \"sex\"));\n\n        System.out.println(\"set操作\");\n        redisUtils.addSet(\"project\", \"软件工程\", \"计算机技术\", \"通信工程\", \"软件工程\");\n        Set<Object> project = redisUtils.members(\"project\");\n        for (Object s : project) {\n            System.out.print(s + \" \");\n        }\n        System.out.println();\n\n        System.out.println(\"zset操作\");\n        redisUtils.addZSet(\"movie\", \"热辣滚烫\", 2.7d);\n        redisUtils.addZSet(\"movie\", \"飞驰人生\", 9.1d);\n        redisUtils.addZSet(\"movie\", \"熊出没之逆转时空\", 9.3d);\n        redisUtils.addZSet(\"movie\", \"二十一条\", 8.2d);\n        Set<Object> movie = redisUtils.rangeByScore(\"movie\", 3.0d, 9.3d);\n        for (Object s : movie) {\n            System.out.print(s + \" \");\n        }\n        System.out.println();\n\n        System.out.println(\"基数操作\");\n        redisUtils.addHyperLogLog(\"accessIp\", \"127.0.0.1\");\n        redisUtils.addHyperLogLog(\"accessIp\", \"192.168.10.1\");\n        redisUtils.addHyperLogLog(\"accessIp\", \"192.168.0.1\");\n        redisUtils.addHyperLogLog(\"accessIp\", \"33.45.23.1\");\n        System.out.println(redisUtils.countHyperLogLog(\"accessIp\"));\n    }\n```\n在测试之前，先删除之前添加的数据\n{% asset_img 2.png %}\n测试结果如下：\n{% asset_img 3.png %}","slug":"Redis学习2—SpringBoot整合Redis、Redis工具类","published":1,"updated":"2024-04-03T05:44:29.086Z","_id":"cluifpieg00005svladbt69um","comments":1,"layout":"post","photos":[],"content":"<h3 id=\"1-依赖和配置\"><a href=\"#1-依赖和配置\" class=\"headerlink\" title=\"1. 依赖和配置\"></a>1. 依赖和配置</h3><h4 id=\"1-1-pom-xml\"><a href=\"#1-1-pom-xml\" class=\"headerlink\" title=\"1.1. pom.xml\"></a>1.1. pom.xml</h4><p>SpringBoot整合Redis，需要引入spring-boot-starter-data-redis依赖</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span><br>          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span><br>          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<p>当我们需要配置redis的连接池时，还需要引入commons-pool2依赖</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span><br>           <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.apache.commons<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span><br>           <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>commons-pool2<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span><br>       <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<p>application.yml配置</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yml\"><span class=\"hljs-attr\">spring:</span><br>  <span class=\"hljs-attr\">redis:</span><br>    <span class=\"hljs-attr\">host:</span> <span class=\"hljs-number\">127.0</span><span class=\"hljs-number\">.0</span><span class=\"hljs-number\">.1</span><br>    <span class=\"hljs-attr\">port:</span> <span class=\"hljs-number\">6379</span><br>    <span class=\"hljs-attr\">database:</span> <span class=\"hljs-number\">0</span><br>    <span class=\"hljs-attr\">jedis:</span><br>      <span class=\"hljs-attr\">pool:</span><br>        <span class=\"hljs-attr\">max-idle:</span> <span class=\"hljs-number\">8</span><br>        <span class=\"hljs-attr\">max-active:</span> <span class=\"hljs-number\">8</span><br>        <span class=\"hljs-attr\">min-idle:</span> <span class=\"hljs-number\">0</span><br></code></pre></td></tr></table></figure>\n<p>这里的jedis指的是使用jedis客户端，这里也可以将jedis改为lettuce，表示使用lettuce客户端，客户端下面的pool表示的是连接池的相关配置。<br>上述的配置针对的是单机redis配置，如果使用的是集群，配置如下：</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yml\"><span class=\"hljs-attr\">spring:</span><br>  <span class=\"hljs-attr\">redis:</span><br>    <span class=\"hljs-attr\">password:</span> <span class=\"hljs-number\">123456</span><br>    <span class=\"hljs-attr\">cluster:</span><br>      <span class=\"hljs-attr\">nodes:</span> <span class=\"hljs-number\">10.255</span><span class=\"hljs-number\">.144</span><span class=\"hljs-number\">.115</span><span class=\"hljs-string\">:7001,10.255.144.115:7002,10.255.144.115:7003,10.255.144.115:7004,10.255.144.115:7005,10.255.144.115:7006</span><br>      <span class=\"hljs-attr\">max-redirects:</span> <span class=\"hljs-number\">3</span><br></code></pre></td></tr></table></figure>\n<h3 id=\"2-RedisTemplate\"><a href=\"#2-RedisTemplate\" class=\"headerlink\" title=\"2. RedisTemplate\"></a>2. RedisTemplate</h3><p>上述的配置完毕后，我们就可以在项目中操作redis了，操作的时候，可以直接使用spring-boot-starter-data-redis为我们提供的RedisTemplate这个类，也可以使用StringRedisTemplate，两者的方法基本一致，后者可以看作RedisTemplate&lt;String, String&gt; 。<br>在上一节中，提到，Redis有多种数据类型，比如string、list、hash、set、zset等，这些类型的操作在RedisTemplate分别对应opsForValue(), opsForList(), opsForHash(), opsForSet(), opsForZSet()。<br>具体的操作演示如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@SpringBootTest</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">RedisAppTest</span> &#123;<br>    <span class=\"hljs-meta\">@Autowired</span><br>    <span class=\"hljs-keyword\">private</span> RedisTemplate&lt;String, String&gt; redisTemplate;<br><br>    <span class=\"hljs-meta\">@Test</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">testGet</span><span class=\"hljs-params\">()</span> &#123;<br>        System.out.println(<span class=\"hljs-string\">&quot;字符串操作=================&quot;</span>);<br>        redisTemplate.opsForValue().set(<span class=\"hljs-string\">&quot;name&quot;</span>, <span class=\"hljs-string\">&quot;cxy&quot;</span>);<br>        System.out.println(redisTemplate.opsForValue().get(<span class=\"hljs-string\">&quot;name&quot;</span>));<br><br>        System.out.println(<span class=\"hljs-string\">&quot;列表操作&quot;</span>);<br>        redisTemplate.opsForList().leftPush(<span class=\"hljs-string\">&quot;school&quot;</span>, <span class=\"hljs-string\">&quot;华南理工大学&quot;</span>);<br>        redisTemplate.opsForList().leftPush(<span class=\"hljs-string\">&quot;school&quot;</span>, <span class=\"hljs-string\">&quot;中山大学&quot;</span>);<br>        redisTemplate.opsForList().leftPush(<span class=\"hljs-string\">&quot;school&quot;</span>, <span class=\"hljs-string\">&quot;华南农业大学&quot;</span>);<br>        List&lt;String&gt; school = redisTemplate.opsForList().range(<span class=\"hljs-string\">&quot;school&quot;</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">5</span>);<br>        <span class=\"hljs-keyword\">for</span> (String s : school) &#123;<br>            System.out.print(s + <span class=\"hljs-string\">&quot; &quot;</span>);<br>        &#125;<br>        System.out.println();<br><br>        System.out.println(<span class=\"hljs-string\">&quot;hash操作&quot;</span>);<br>        redisTemplate.opsForHash().put(<span class=\"hljs-string\">&quot;student&quot;</span>, <span class=\"hljs-string\">&quot;name&quot;</span>, <span class=\"hljs-string\">&quot;cxy&quot;</span>);<br>        redisTemplate.opsForHash().put(<span class=\"hljs-string\">&quot;student&quot;</span>, <span class=\"hljs-string\">&quot;age&quot;</span>, <span class=\"hljs-string\">&quot;21&quot;</span>);<br>        redisTemplate.opsForHash().put(<span class=\"hljs-string\">&quot;student&quot;</span>, <span class=\"hljs-string\">&quot;sex&quot;</span>, <span class=\"hljs-string\">&quot;male&quot;</span>);<br>        System.out.println(redisTemplate.opsForHash().get(<span class=\"hljs-string\">&quot;student&quot;</span>, <span class=\"hljs-string\">&quot;name&quot;</span>));<br>        System.out.println(redisTemplate.opsForHash().get(<span class=\"hljs-string\">&quot;student&quot;</span>, <span class=\"hljs-string\">&quot;age&quot;</span>));<br>        System.out.println(redisTemplate.opsForHash().get(<span class=\"hljs-string\">&quot;student&quot;</span>, <span class=\"hljs-string\">&quot;sex&quot;</span>));<br><br>        System.out.println(<span class=\"hljs-string\">&quot;set操作&quot;</span>);<br>        redisTemplate.opsForSet().add(<span class=\"hljs-string\">&quot;project&quot;</span>, <span class=\"hljs-string\">&quot;软件工程&quot;</span>, <span class=\"hljs-string\">&quot;计算机技术&quot;</span>, <span class=\"hljs-string\">&quot;通信工程&quot;</span>, <span class=\"hljs-string\">&quot;软件工程&quot;</span>);<br>        Set&lt;String&gt; project = redisTemplate.opsForSet().members(<span class=\"hljs-string\">&quot;project&quot;</span>);<br>        <span class=\"hljs-keyword\">for</span> (String s : project) &#123;<br>            System.out.print(s + <span class=\"hljs-string\">&quot; &quot;</span>);<br>        &#125;<br>        System.out.println();<br><br>        System.out.println(<span class=\"hljs-string\">&quot;zset操作&quot;</span>);<br>        redisTemplate.opsForZSet().add(<span class=\"hljs-string\">&quot;movie&quot;</span>, <span class=\"hljs-string\">&quot;热辣滚烫&quot;</span>, <span class=\"hljs-number\">2.7d</span>);<br>        redisTemplate.opsForZSet().add(<span class=\"hljs-string\">&quot;movie&quot;</span>, <span class=\"hljs-string\">&quot;飞驰人生&quot;</span>, <span class=\"hljs-number\">9.1d</span>);<br>        redisTemplate.opsForZSet().add(<span class=\"hljs-string\">&quot;movie&quot;</span>, <span class=\"hljs-string\">&quot;熊出没之逆转时空&quot;</span>, <span class=\"hljs-number\">9.3d</span>);<br>        redisTemplate.opsForZSet().add(<span class=\"hljs-string\">&quot;movie&quot;</span>, <span class=\"hljs-string\">&quot;二十一条&quot;</span>, <span class=\"hljs-number\">8.2d</span>);<br>        Set&lt;String&gt; movie = redisTemplate.opsForZSet().rangeByScore(<span class=\"hljs-string\">&quot;movie&quot;</span>, <span class=\"hljs-number\">3.0d</span>, <span class=\"hljs-number\">9.3d</span>);<br>        <span class=\"hljs-keyword\">for</span> (String s : movie) &#123;<br>            System.out.print(s + <span class=\"hljs-string\">&quot; &quot;</span>);<br>        &#125;<br>        System.out.println();<br><br>        System.out.println(<span class=\"hljs-string\">&quot;基数操作&quot;</span>);<br>        redisTemplate.opsForHyperLogLog().add(<span class=\"hljs-string\">&quot;accessIp&quot;</span>, <span class=\"hljs-string\">&quot;127.0.0.1&quot;</span>);<br>        redisTemplate.opsForHyperLogLog().add(<span class=\"hljs-string\">&quot;accessIp&quot;</span>, <span class=\"hljs-string\">&quot;192.168.10.1&quot;</span>);<br>        redisTemplate.opsForHyperLogLog().add(<span class=\"hljs-string\">&quot;accessIp&quot;</span>, <span class=\"hljs-string\">&quot;192.168.0.1&quot;</span>);<br>        redisTemplate.opsForHyperLogLog().add(<span class=\"hljs-string\">&quot;accessIp&quot;</span>, <span class=\"hljs-string\">&quot;33.45.23.1&quot;</span>);<br>        System.out.println(redisTemplate.opsForHyperLogLog().size(<span class=\"hljs-string\">&quot;accessIp&quot;</span>));<br><br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>\n<p>运行结果如下：</p>\n<img src=\"/2024/04/02/Redis%E5%AD%A6%E4%B9%A02%E2%80%94SpringBoot%E6%95%B4%E5%90%88Redis%E3%80%81Redis%E5%B7%A5%E5%85%B7%E7%B1%BB/1.png\" class=\"\">\n<h3 id=\"3-RedisUtils工具类\"><a href=\"#3-RedisUtils工具类\" class=\"headerlink\" title=\"3. RedisUtils工具类\"></a>3. RedisUtils工具类</h3><p>虽然RedisTemplate提供的redis操作很全面，但对于不了解redis的开发同学来说，直接看RedisTemplate的方法不够见名知义，因此一般情况下，我们都会单独封装一个工具类，将常用的一些方法进行抽象，以方便后续使用。<br>创建Redis配置类，配置RedisTemplate</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Configuration</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">RedisConfiguration</span> &#123;<br>    <span class=\"hljs-meta\">@Bean</span><br>    <span class=\"hljs-keyword\">public</span> RedisTemplate&lt;String, Object&gt; <span class=\"hljs-title function_\">redisTemplate</span><span class=\"hljs-params\">(RedisConnectionFactory redisConnectionFactory)</span> &#123;<br>        RedisTemplate&lt;String, Object&gt; redisTemplate = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">RedisTemplate</span>&lt;&gt;();<br>        redisTemplate.setConnectionFactory(redisConnectionFactory);<br>        <span class=\"hljs-keyword\">return</span> redisTemplate;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>工具类代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> org.example.util;<br><br><span class=\"hljs-keyword\">import</span> org.apache.commons.lang3.StringUtils;<br><span class=\"hljs-keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class=\"hljs-keyword\">import</span> org.springframework.data.redis.core.RedisTemplate;<br><span class=\"hljs-keyword\">import</span> org.springframework.data.redis.core.ZSetOperations;<br><span class=\"hljs-keyword\">import</span> org.springframework.stereotype.Component;<br><br><span class=\"hljs-keyword\">import</span> java.util.*;<br><span class=\"hljs-keyword\">import</span> java.util.concurrent.TimeUnit;<br><br><span class=\"hljs-meta\">@Component</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">RedisUtils</span> &#123;<br>    <span class=\"hljs-meta\">@Autowired</span><br>    <span class=\"hljs-keyword\">private</span> RedisTemplate&lt;String, Object&gt; redisTemplate;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">removeKey</span><span class=\"hljs-params\">(String key)</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> redisTemplate.delete(key);<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">hasKey</span><span class=\"hljs-params\">(String key)</span> &#123;<br>        <span class=\"hljs-keyword\">if</span> (StringUtils.isEmpty(key)) &#123;<br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;<br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> redisTemplate.hasKey(key);<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">expire</span><span class=\"hljs-params\">(String key, <span class=\"hljs-type\">long</span> time)</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> expire(key, time, TimeUnit.SECONDS);<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">expire</span><span class=\"hljs-params\">(String key, <span class=\"hljs-type\">long</span> time, TimeUnit timeUnit)</span> &#123;<br>        <span class=\"hljs-keyword\">if</span> (StringUtils.isEmpty(key)) &#123;<br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;<br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> redisTemplate.expire(key, time, timeUnit);<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">addKey</span><span class=\"hljs-params\">(String key, Object value, <span class=\"hljs-type\">long</span> time)</span> &#123;<br>        addKey(key, value, time, TimeUnit.SECONDS);<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">addKey</span><span class=\"hljs-params\">(String key, Object value, <span class=\"hljs-type\">long</span> time, TimeUnit timeUnit)</span> &#123;<br>        <span class=\"hljs-keyword\">if</span> (StringUtils.isEmpty(key)) &#123;<br>            <span class=\"hljs-keyword\">return</span>;<br>        &#125;<br>        redisTemplate.opsForValue().set(key, value, time, timeUnit);<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">addKey</span><span class=\"hljs-params\">(String key, Object value)</span> &#123;<br>        redisTemplate.opsForValue().set(key, value);<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> Object <span class=\"hljs-title function_\">getKey</span><span class=\"hljs-params\">(String key)</span> &#123;<br>        <span class=\"hljs-keyword\">if</span> (StringUtils.isEmpty(key)) &#123;<br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>;<br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> redisTemplate.opsForValue().get(key);<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">increment</span><span class=\"hljs-params\">(String key)</span> &#123;<br>        increment(key, <span class=\"hljs-number\">1L</span>);<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">increment</span><span class=\"hljs-params\">(String key, <span class=\"hljs-type\">long</span> delta)</span> &#123;<br>        <span class=\"hljs-keyword\">if</span> (StringUtils.isEmpty(key)) &#123;<br>            <span class=\"hljs-keyword\">return</span>;<br>        &#125;<br>        redisTemplate.opsForValue().increment(key, delta);<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">decrement</span><span class=\"hljs-params\">(String key)</span> &#123;<br>        decrement(key, <span class=\"hljs-number\">1L</span>);<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">decrement</span><span class=\"hljs-params\">(String key, <span class=\"hljs-type\">long</span> delta)</span> &#123;<br>        <span class=\"hljs-keyword\">if</span> (StringUtils.isEmpty(key)) &#123;<br>            <span class=\"hljs-keyword\">return</span>;<br>        &#125;<br>        redisTemplate.opsForValue().decrement(key, delta);<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">leftPush</span><span class=\"hljs-params\">(String key, List&lt;Object&gt; values)</span> &#123;<br>        <span class=\"hljs-keyword\">if</span> (StringUtils.isEmpty(key)) &#123;<br>            <span class=\"hljs-keyword\">return</span>;<br>        &#125;<br>        redisTemplate.opsForList().leftPushAll(key, values);<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">leftPush</span><span class=\"hljs-params\">(String key, Object... value)</span> &#123;<br>        <span class=\"hljs-keyword\">if</span> (StringUtils.isEmpty(key)) &#123;<br>            <span class=\"hljs-keyword\">return</span>;<br>        &#125;<br>        redisTemplate.opsForList().leftPushAll(key, value);<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> Object <span class=\"hljs-title function_\">leftPop</span><span class=\"hljs-params\">(String key)</span> &#123;<br>        <span class=\"hljs-keyword\">if</span> (StringUtils.isEmpty(key)) &#123;<br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>;<br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> redisTemplate.opsForList().leftPop(key);<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> List&lt;Object&gt; <span class=\"hljs-title function_\">range</span><span class=\"hljs-params\">(String key, <span class=\"hljs-type\">long</span> start, <span class=\"hljs-type\">long</span> end)</span> &#123;<br>        <span class=\"hljs-keyword\">if</span> (StringUtils.isEmpty(key)) &#123;<br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayList</span>&lt;&gt;();<br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> redisTemplate.opsForList().range(key, start, end);<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> Object <span class=\"hljs-title function_\">indexOfList</span><span class=\"hljs-params\">(String key, <span class=\"hljs-type\">int</span> index)</span> &#123;<br>        <span class=\"hljs-keyword\">if</span> (StringUtils.isEmpty(key)) &#123;<br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>;<br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> redisTemplate.opsForList().index(key, index);<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">addHash</span><span class=\"hljs-params\">(String key, Map&lt;String, Object&gt; map)</span> &#123;<br>        <span class=\"hljs-keyword\">if</span> (StringUtils.isEmpty(key)) &#123;<br>            <span class=\"hljs-keyword\">return</span>;<br>        &#125;<br>        <span class=\"hljs-keyword\">if</span> (map == <span class=\"hljs-literal\">null</span> || map.isEmpty()) &#123;<br>            <span class=\"hljs-keyword\">return</span>;<br>        &#125;<br>        map.forEach((field, value) -&gt; &#123;<br>            redisTemplate.opsForHash().put(key, field, value);<br>        &#125;);<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">addField</span><span class=\"hljs-params\">(String key, String field, Object value)</span> &#123;<br>        <span class=\"hljs-keyword\">if</span> (StringUtils.isEmpty(key) || StringUtils.isEmpty(field)) &#123;<br>            <span class=\"hljs-keyword\">return</span>;<br>        &#125;<br>        redisTemplate.opsForHash().put(key, field, value);<br>    &#125;<br><br>     <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">removeField</span><span class=\"hljs-params\">(String key, String field)</span> &#123;<br>        <span class=\"hljs-keyword\">if</span> (StringUtils.isEmpty(key) || StringUtils.isEmpty(field)) &#123;<br>            <span class=\"hljs-keyword\">return</span>;<br>        &#125;<br>        redisTemplate.opsForHash().delete(key, field);<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> Map&lt;String, Object&gt; <span class=\"hljs-title function_\">getEntries</span><span class=\"hljs-params\">(String key)</span> &#123;<br>        <span class=\"hljs-keyword\">if</span> (StringUtils.isEmpty(key)) &#123;<br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">HashMap</span>&lt;&gt;();<br>        &#125;<br>        Map&lt;Object, Object&gt; entries = redisTemplate.opsForHash().entries(key);<br>        Map&lt;String, Object&gt; result = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">HashMap</span>&lt;&gt;();<br>        entries.forEach((k, v) -&gt; &#123;<br>            result.put(k.toString(), v);<br>        &#125;);<br>        <span class=\"hljs-keyword\">return</span> result;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> Object <span class=\"hljs-title function_\">getField</span><span class=\"hljs-params\">(String key, String field)</span> &#123;<br>        <span class=\"hljs-keyword\">if</span> (StringUtils.isEmpty(key) || StringUtils.isEmpty(field)) &#123;<br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>;<br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> redisTemplate.opsForHash().get(key, field);<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> Boolean <span class=\"hljs-title function_\">hasField</span><span class=\"hljs-params\">(String key, String field)</span> &#123;<br>        <span class=\"hljs-keyword\">if</span> (StringUtils.isEmpty(key) || StringUtils.isEmpty(field)) &#123;<br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;<br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> redisTemplate.opsForHash().hasKey(key, field);<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">addSet</span><span class=\"hljs-params\">(String key, String... value)</span> &#123;<br>        <span class=\"hljs-keyword\">if</span> (StringUtils.isEmpty(key)) &#123;<br>            <span class=\"hljs-keyword\">return</span>;<br>        &#125;<br>        redisTemplate.opsForSet().add(key, value);<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> Set&lt;Object&gt; <span class=\"hljs-title function_\">members</span><span class=\"hljs-params\">(String key)</span> &#123;<br>        <span class=\"hljs-keyword\">if</span> (StringUtils.isEmpty(key)) &#123;<br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">HashSet</span>&lt;&gt;();<br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> redisTemplate.opsForSet().members(key);<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> Boolean <span class=\"hljs-title function_\">isMember</span><span class=\"hljs-params\">(String key, Object value)</span> &#123;<br>        <span class=\"hljs-keyword\">if</span> (StringUtils.isEmpty(key)) &#123;<br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;<br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> redisTemplate.opsForSet().isMember(key, value);<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">addZSet</span><span class=\"hljs-params\">(String key, Object value, Double score)</span> &#123;<br>        <span class=\"hljs-keyword\">if</span> (StringUtils.isEmpty(key)) &#123;<br>            <span class=\"hljs-keyword\">return</span>;<br>        &#125;<br>        redisTemplate.opsForZSet().add(key, value, score);<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> Set&lt;Object&gt; <span class=\"hljs-title function_\">rangeByScore</span><span class=\"hljs-params\">(String key, Double min, Double max)</span> &#123;<br>        <span class=\"hljs-keyword\">if</span> (StringUtils.isEmpty(key)) &#123;<br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">HashSet</span>&lt;&gt;();<br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> redisTemplate.opsForZSet().rangeByScore(key, min, max);<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> Set&lt;ZSetOperations.TypedTuple&lt;Object&gt;&gt; rangeByScoreWithScore(String key, Double min, Double max) &#123;<br>        <span class=\"hljs-keyword\">if</span> (StringUtils.isEmpty(key)) &#123;<br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">HashSet</span>&lt;&gt;();<br>        &#125;<br>       <span class=\"hljs-keyword\">return</span> redisTemplate.opsForZSet().rangeByScoreWithScores(key, min, max);<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">addHyperLogLog</span><span class=\"hljs-params\">(String key, Object... value)</span> &#123;<br>        <span class=\"hljs-keyword\">if</span> (StringUtils.isEmpty(key)) &#123;<br>            <span class=\"hljs-keyword\">return</span>;<br>        &#125;<br>        redisTemplate.opsForHyperLogLog().add(key, value);<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">addHyperLogLog</span><span class=\"hljs-params\">(String key, List value)</span> &#123;<br>        <span class=\"hljs-keyword\">if</span> (StringUtils.isEmpty(key)) &#123;<br>            <span class=\"hljs-keyword\">return</span>;<br>        &#125;<br>        redisTemplate.opsForHyperLogLog().add(key, value);<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> Long <span class=\"hljs-title function_\">countHyperLogLog</span><span class=\"hljs-params\">(String key)</span> &#123;<br>        <span class=\"hljs-keyword\">if</span> (StringUtils.isEmpty(key)) &#123;<br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0L</span>;<br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> redisTemplate.opsForHyperLogLog().size(key);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>修改之前的测试代码，将redisTemplate，改为我们的工具类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Autowired</span><br>    <span class=\"hljs-keyword\">private</span> RedisUtils redisUtils;<br><br>    <span class=\"hljs-meta\">@Test</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">testRedisUtils</span><span class=\"hljs-params\">()</span> &#123;<br>        System.out.println(<span class=\"hljs-string\">&quot;字符串操作=================&quot;</span>);<br>       redisUtils.addKey(<span class=\"hljs-string\">&quot;name&quot;</span>, <span class=\"hljs-string\">&quot;cxy&quot;</span>);<br>        System.out.println(redisUtils.getKey(<span class=\"hljs-string\">&quot;name&quot;</span>));<br><br>        System.out.println(<span class=\"hljs-string\">&quot;列表操作&quot;</span>);<br>        redisUtils.leftPush(<span class=\"hljs-string\">&quot;school&quot;</span>, <span class=\"hljs-string\">&quot;华南理工大学&quot;</span>);<br>        redisUtils.leftPush(<span class=\"hljs-string\">&quot;school&quot;</span>, <span class=\"hljs-string\">&quot;中山大学&quot;</span>);<br>        redisUtils.leftPush(<span class=\"hljs-string\">&quot;school&quot;</span>, <span class=\"hljs-string\">&quot;华南农业大学&quot;</span>);<br>        List&lt;Object&gt; school = redisUtils.range(<span class=\"hljs-string\">&quot;school&quot;</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">5</span>);<br>        <span class=\"hljs-keyword\">for</span> (Object s : school) &#123;<br>            System.out.print(s + <span class=\"hljs-string\">&quot; &quot;</span>);<br>        &#125;<br>        System.out.println();<br><br>        System.out.println(<span class=\"hljs-string\">&quot;hash操作&quot;</span>);<br>        redisUtils.addField(<span class=\"hljs-string\">&quot;student&quot;</span>, <span class=\"hljs-string\">&quot;name&quot;</span>, <span class=\"hljs-string\">&quot;cxy&quot;</span>);<br>        redisUtils.addField(<span class=\"hljs-string\">&quot;student&quot;</span>, <span class=\"hljs-string\">&quot;age&quot;</span>, <span class=\"hljs-string\">&quot;21&quot;</span>);<br>        redisUtils.addField(<span class=\"hljs-string\">&quot;student&quot;</span>, <span class=\"hljs-string\">&quot;sex&quot;</span>, <span class=\"hljs-string\">&quot;male&quot;</span>);<br>        System.out.println(redisUtils.getField(<span class=\"hljs-string\">&quot;student&quot;</span>, <span class=\"hljs-string\">&quot;name&quot;</span>));<br>        System.out.println(redisUtils.getField(<span class=\"hljs-string\">&quot;student&quot;</span>, <span class=\"hljs-string\">&quot;age&quot;</span>));<br>        System.out.println(redisUtils.getField(<span class=\"hljs-string\">&quot;student&quot;</span>, <span class=\"hljs-string\">&quot;sex&quot;</span>));<br><br>        System.out.println(<span class=\"hljs-string\">&quot;set操作&quot;</span>);<br>        redisUtils.addSet(<span class=\"hljs-string\">&quot;project&quot;</span>, <span class=\"hljs-string\">&quot;软件工程&quot;</span>, <span class=\"hljs-string\">&quot;计算机技术&quot;</span>, <span class=\"hljs-string\">&quot;通信工程&quot;</span>, <span class=\"hljs-string\">&quot;软件工程&quot;</span>);<br>        Set&lt;Object&gt; project = redisUtils.members(<span class=\"hljs-string\">&quot;project&quot;</span>);<br>        <span class=\"hljs-keyword\">for</span> (Object s : project) &#123;<br>            System.out.print(s + <span class=\"hljs-string\">&quot; &quot;</span>);<br>        &#125;<br>        System.out.println();<br><br>        System.out.println(<span class=\"hljs-string\">&quot;zset操作&quot;</span>);<br>        redisUtils.addZSet(<span class=\"hljs-string\">&quot;movie&quot;</span>, <span class=\"hljs-string\">&quot;热辣滚烫&quot;</span>, <span class=\"hljs-number\">2.7d</span>);<br>        redisUtils.addZSet(<span class=\"hljs-string\">&quot;movie&quot;</span>, <span class=\"hljs-string\">&quot;飞驰人生&quot;</span>, <span class=\"hljs-number\">9.1d</span>);<br>        redisUtils.addZSet(<span class=\"hljs-string\">&quot;movie&quot;</span>, <span class=\"hljs-string\">&quot;熊出没之逆转时空&quot;</span>, <span class=\"hljs-number\">9.3d</span>);<br>        redisUtils.addZSet(<span class=\"hljs-string\">&quot;movie&quot;</span>, <span class=\"hljs-string\">&quot;二十一条&quot;</span>, <span class=\"hljs-number\">8.2d</span>);<br>        Set&lt;Object&gt; movie = redisUtils.rangeByScore(<span class=\"hljs-string\">&quot;movie&quot;</span>, <span class=\"hljs-number\">3.0d</span>, <span class=\"hljs-number\">9.3d</span>);<br>        <span class=\"hljs-keyword\">for</span> (Object s : movie) &#123;<br>            System.out.print(s + <span class=\"hljs-string\">&quot; &quot;</span>);<br>        &#125;<br>        System.out.println();<br><br>        System.out.println(<span class=\"hljs-string\">&quot;基数操作&quot;</span>);<br>        redisUtils.addHyperLogLog(<span class=\"hljs-string\">&quot;accessIp&quot;</span>, <span class=\"hljs-string\">&quot;127.0.0.1&quot;</span>);<br>        redisUtils.addHyperLogLog(<span class=\"hljs-string\">&quot;accessIp&quot;</span>, <span class=\"hljs-string\">&quot;192.168.10.1&quot;</span>);<br>        redisUtils.addHyperLogLog(<span class=\"hljs-string\">&quot;accessIp&quot;</span>, <span class=\"hljs-string\">&quot;192.168.0.1&quot;</span>);<br>        redisUtils.addHyperLogLog(<span class=\"hljs-string\">&quot;accessIp&quot;</span>, <span class=\"hljs-string\">&quot;33.45.23.1&quot;</span>);<br>        System.out.println(redisUtils.countHyperLogLog(<span class=\"hljs-string\">&quot;accessIp&quot;</span>));<br>    &#125;<br></code></pre></td></tr></table></figure>\n<p>在测试之前，先删除之前添加的数据</p>\n<img src=\"/2024/04/02/Redis%E5%AD%A6%E4%B9%A02%E2%80%94SpringBoot%E6%95%B4%E5%90%88Redis%E3%80%81Redis%E5%B7%A5%E5%85%B7%E7%B1%BB/2.png\" class=\"\">\n<p>测试结果如下：</p>\n<img src=\"/2024/04/02/Redis%E5%AD%A6%E4%B9%A02%E2%80%94SpringBoot%E6%95%B4%E5%90%88Redis%E3%80%81Redis%E5%B7%A5%E5%85%B7%E7%B1%BB/3.png\" class=\"\">","excerpt":"","more":"<h3 id=\"1-依赖和配置\"><a href=\"#1-依赖和配置\" class=\"headerlink\" title=\"1. 依赖和配置\"></a>1. 依赖和配置</h3><h4 id=\"1-1-pom-xml\"><a href=\"#1-1-pom-xml\" class=\"headerlink\" title=\"1.1. pom.xml\"></a>1.1. pom.xml</h4><p>SpringBoot整合Redis，需要引入spring-boot-starter-data-redis依赖</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span><br>          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span><br>          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<p>当我们需要配置redis的连接池时，还需要引入commons-pool2依赖</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span><br>           <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.apache.commons<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span><br>           <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>commons-pool2<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span><br>       <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<p>application.yml配置</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yml\"><span class=\"hljs-attr\">spring:</span><br>  <span class=\"hljs-attr\">redis:</span><br>    <span class=\"hljs-attr\">host:</span> <span class=\"hljs-number\">127.0</span><span class=\"hljs-number\">.0</span><span class=\"hljs-number\">.1</span><br>    <span class=\"hljs-attr\">port:</span> <span class=\"hljs-number\">6379</span><br>    <span class=\"hljs-attr\">database:</span> <span class=\"hljs-number\">0</span><br>    <span class=\"hljs-attr\">jedis:</span><br>      <span class=\"hljs-attr\">pool:</span><br>        <span class=\"hljs-attr\">max-idle:</span> <span class=\"hljs-number\">8</span><br>        <span class=\"hljs-attr\">max-active:</span> <span class=\"hljs-number\">8</span><br>        <span class=\"hljs-attr\">min-idle:</span> <span class=\"hljs-number\">0</span><br></code></pre></td></tr></table></figure>\n<p>这里的jedis指的是使用jedis客户端，这里也可以将jedis改为lettuce，表示使用lettuce客户端，客户端下面的pool表示的是连接池的相关配置。<br>上述的配置针对的是单机redis配置，如果使用的是集群，配置如下：</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yml\"><span class=\"hljs-attr\">spring:</span><br>  <span class=\"hljs-attr\">redis:</span><br>    <span class=\"hljs-attr\">password:</span> <span class=\"hljs-number\">123456</span><br>    <span class=\"hljs-attr\">cluster:</span><br>      <span class=\"hljs-attr\">nodes:</span> <span class=\"hljs-number\">10.255</span><span class=\"hljs-number\">.144</span><span class=\"hljs-number\">.115</span><span class=\"hljs-string\">:7001,10.255.144.115:7002,10.255.144.115:7003,10.255.144.115:7004,10.255.144.115:7005,10.255.144.115:7006</span><br>      <span class=\"hljs-attr\">max-redirects:</span> <span class=\"hljs-number\">3</span><br></code></pre></td></tr></table></figure>\n<h3 id=\"2-RedisTemplate\"><a href=\"#2-RedisTemplate\" class=\"headerlink\" title=\"2. RedisTemplate\"></a>2. RedisTemplate</h3><p>上述的配置完毕后，我们就可以在项目中操作redis了，操作的时候，可以直接使用spring-boot-starter-data-redis为我们提供的RedisTemplate这个类，也可以使用StringRedisTemplate，两者的方法基本一致，后者可以看作RedisTemplate&lt;String, String&gt; 。<br>在上一节中，提到，Redis有多种数据类型，比如string、list、hash、set、zset等，这些类型的操作在RedisTemplate分别对应opsForValue(), opsForList(), opsForHash(), opsForSet(), opsForZSet()。<br>具体的操作演示如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@SpringBootTest</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">RedisAppTest</span> &#123;<br>    <span class=\"hljs-meta\">@Autowired</span><br>    <span class=\"hljs-keyword\">private</span> RedisTemplate&lt;String, String&gt; redisTemplate;<br><br>    <span class=\"hljs-meta\">@Test</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">testGet</span><span class=\"hljs-params\">()</span> &#123;<br>        System.out.println(<span class=\"hljs-string\">&quot;字符串操作=================&quot;</span>);<br>        redisTemplate.opsForValue().set(<span class=\"hljs-string\">&quot;name&quot;</span>, <span class=\"hljs-string\">&quot;cxy&quot;</span>);<br>        System.out.println(redisTemplate.opsForValue().get(<span class=\"hljs-string\">&quot;name&quot;</span>));<br><br>        System.out.println(<span class=\"hljs-string\">&quot;列表操作&quot;</span>);<br>        redisTemplate.opsForList().leftPush(<span class=\"hljs-string\">&quot;school&quot;</span>, <span class=\"hljs-string\">&quot;华南理工大学&quot;</span>);<br>        redisTemplate.opsForList().leftPush(<span class=\"hljs-string\">&quot;school&quot;</span>, <span class=\"hljs-string\">&quot;中山大学&quot;</span>);<br>        redisTemplate.opsForList().leftPush(<span class=\"hljs-string\">&quot;school&quot;</span>, <span class=\"hljs-string\">&quot;华南农业大学&quot;</span>);<br>        List&lt;String&gt; school = redisTemplate.opsForList().range(<span class=\"hljs-string\">&quot;school&quot;</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">5</span>);<br>        <span class=\"hljs-keyword\">for</span> (String s : school) &#123;<br>            System.out.print(s + <span class=\"hljs-string\">&quot; &quot;</span>);<br>        &#125;<br>        System.out.println();<br><br>        System.out.println(<span class=\"hljs-string\">&quot;hash操作&quot;</span>);<br>        redisTemplate.opsForHash().put(<span class=\"hljs-string\">&quot;student&quot;</span>, <span class=\"hljs-string\">&quot;name&quot;</span>, <span class=\"hljs-string\">&quot;cxy&quot;</span>);<br>        redisTemplate.opsForHash().put(<span class=\"hljs-string\">&quot;student&quot;</span>, <span class=\"hljs-string\">&quot;age&quot;</span>, <span class=\"hljs-string\">&quot;21&quot;</span>);<br>        redisTemplate.opsForHash().put(<span class=\"hljs-string\">&quot;student&quot;</span>, <span class=\"hljs-string\">&quot;sex&quot;</span>, <span class=\"hljs-string\">&quot;male&quot;</span>);<br>        System.out.println(redisTemplate.opsForHash().get(<span class=\"hljs-string\">&quot;student&quot;</span>, <span class=\"hljs-string\">&quot;name&quot;</span>));<br>        System.out.println(redisTemplate.opsForHash().get(<span class=\"hljs-string\">&quot;student&quot;</span>, <span class=\"hljs-string\">&quot;age&quot;</span>));<br>        System.out.println(redisTemplate.opsForHash().get(<span class=\"hljs-string\">&quot;student&quot;</span>, <span class=\"hljs-string\">&quot;sex&quot;</span>));<br><br>        System.out.println(<span class=\"hljs-string\">&quot;set操作&quot;</span>);<br>        redisTemplate.opsForSet().add(<span class=\"hljs-string\">&quot;project&quot;</span>, <span class=\"hljs-string\">&quot;软件工程&quot;</span>, <span class=\"hljs-string\">&quot;计算机技术&quot;</span>, <span class=\"hljs-string\">&quot;通信工程&quot;</span>, <span class=\"hljs-string\">&quot;软件工程&quot;</span>);<br>        Set&lt;String&gt; project = redisTemplate.opsForSet().members(<span class=\"hljs-string\">&quot;project&quot;</span>);<br>        <span class=\"hljs-keyword\">for</span> (String s : project) &#123;<br>            System.out.print(s + <span class=\"hljs-string\">&quot; &quot;</span>);<br>        &#125;<br>        System.out.println();<br><br>        System.out.println(<span class=\"hljs-string\">&quot;zset操作&quot;</span>);<br>        redisTemplate.opsForZSet().add(<span class=\"hljs-string\">&quot;movie&quot;</span>, <span class=\"hljs-string\">&quot;热辣滚烫&quot;</span>, <span class=\"hljs-number\">2.7d</span>);<br>        redisTemplate.opsForZSet().add(<span class=\"hljs-string\">&quot;movie&quot;</span>, <span class=\"hljs-string\">&quot;飞驰人生&quot;</span>, <span class=\"hljs-number\">9.1d</span>);<br>        redisTemplate.opsForZSet().add(<span class=\"hljs-string\">&quot;movie&quot;</span>, <span class=\"hljs-string\">&quot;熊出没之逆转时空&quot;</span>, <span class=\"hljs-number\">9.3d</span>);<br>        redisTemplate.opsForZSet().add(<span class=\"hljs-string\">&quot;movie&quot;</span>, <span class=\"hljs-string\">&quot;二十一条&quot;</span>, <span class=\"hljs-number\">8.2d</span>);<br>        Set&lt;String&gt; movie = redisTemplate.opsForZSet().rangeByScore(<span class=\"hljs-string\">&quot;movie&quot;</span>, <span class=\"hljs-number\">3.0d</span>, <span class=\"hljs-number\">9.3d</span>);<br>        <span class=\"hljs-keyword\">for</span> (String s : movie) &#123;<br>            System.out.print(s + <span class=\"hljs-string\">&quot; &quot;</span>);<br>        &#125;<br>        System.out.println();<br><br>        System.out.println(<span class=\"hljs-string\">&quot;基数操作&quot;</span>);<br>        redisTemplate.opsForHyperLogLog().add(<span class=\"hljs-string\">&quot;accessIp&quot;</span>, <span class=\"hljs-string\">&quot;127.0.0.1&quot;</span>);<br>        redisTemplate.opsForHyperLogLog().add(<span class=\"hljs-string\">&quot;accessIp&quot;</span>, <span class=\"hljs-string\">&quot;192.168.10.1&quot;</span>);<br>        redisTemplate.opsForHyperLogLog().add(<span class=\"hljs-string\">&quot;accessIp&quot;</span>, <span class=\"hljs-string\">&quot;192.168.0.1&quot;</span>);<br>        redisTemplate.opsForHyperLogLog().add(<span class=\"hljs-string\">&quot;accessIp&quot;</span>, <span class=\"hljs-string\">&quot;33.45.23.1&quot;</span>);<br>        System.out.println(redisTemplate.opsForHyperLogLog().size(<span class=\"hljs-string\">&quot;accessIp&quot;</span>));<br><br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>\n<p>运行结果如下：</p>\n<img src=\"/2024/04/02/Redis%E5%AD%A6%E4%B9%A02%E2%80%94SpringBoot%E6%95%B4%E5%90%88Redis%E3%80%81Redis%E5%B7%A5%E5%85%B7%E7%B1%BB/1.png\" class=\"\">\n<h3 id=\"3-RedisUtils工具类\"><a href=\"#3-RedisUtils工具类\" class=\"headerlink\" title=\"3. RedisUtils工具类\"></a>3. RedisUtils工具类</h3><p>虽然RedisTemplate提供的redis操作很全面，但对于不了解redis的开发同学来说，直接看RedisTemplate的方法不够见名知义，因此一般情况下，我们都会单独封装一个工具类，将常用的一些方法进行抽象，以方便后续使用。<br>创建Redis配置类，配置RedisTemplate</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Configuration</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">RedisConfiguration</span> &#123;<br>    <span class=\"hljs-meta\">@Bean</span><br>    <span class=\"hljs-keyword\">public</span> RedisTemplate&lt;String, Object&gt; <span class=\"hljs-title function_\">redisTemplate</span><span class=\"hljs-params\">(RedisConnectionFactory redisConnectionFactory)</span> &#123;<br>        RedisTemplate&lt;String, Object&gt; redisTemplate = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">RedisTemplate</span>&lt;&gt;();<br>        redisTemplate.setConnectionFactory(redisConnectionFactory);<br>        <span class=\"hljs-keyword\">return</span> redisTemplate;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>工具类代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> org.example.util;<br><br><span class=\"hljs-keyword\">import</span> org.apache.commons.lang3.StringUtils;<br><span class=\"hljs-keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class=\"hljs-keyword\">import</span> org.springframework.data.redis.core.RedisTemplate;<br><span class=\"hljs-keyword\">import</span> org.springframework.data.redis.core.ZSetOperations;<br><span class=\"hljs-keyword\">import</span> org.springframework.stereotype.Component;<br><br><span class=\"hljs-keyword\">import</span> java.util.*;<br><span class=\"hljs-keyword\">import</span> java.util.concurrent.TimeUnit;<br><br><span class=\"hljs-meta\">@Component</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">RedisUtils</span> &#123;<br>    <span class=\"hljs-meta\">@Autowired</span><br>    <span class=\"hljs-keyword\">private</span> RedisTemplate&lt;String, Object&gt; redisTemplate;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">removeKey</span><span class=\"hljs-params\">(String key)</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> redisTemplate.delete(key);<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">hasKey</span><span class=\"hljs-params\">(String key)</span> &#123;<br>        <span class=\"hljs-keyword\">if</span> (StringUtils.isEmpty(key)) &#123;<br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;<br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> redisTemplate.hasKey(key);<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">expire</span><span class=\"hljs-params\">(String key, <span class=\"hljs-type\">long</span> time)</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> expire(key, time, TimeUnit.SECONDS);<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">expire</span><span class=\"hljs-params\">(String key, <span class=\"hljs-type\">long</span> time, TimeUnit timeUnit)</span> &#123;<br>        <span class=\"hljs-keyword\">if</span> (StringUtils.isEmpty(key)) &#123;<br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;<br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> redisTemplate.expire(key, time, timeUnit);<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">addKey</span><span class=\"hljs-params\">(String key, Object value, <span class=\"hljs-type\">long</span> time)</span> &#123;<br>        addKey(key, value, time, TimeUnit.SECONDS);<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">addKey</span><span class=\"hljs-params\">(String key, Object value, <span class=\"hljs-type\">long</span> time, TimeUnit timeUnit)</span> &#123;<br>        <span class=\"hljs-keyword\">if</span> (StringUtils.isEmpty(key)) &#123;<br>            <span class=\"hljs-keyword\">return</span>;<br>        &#125;<br>        redisTemplate.opsForValue().set(key, value, time, timeUnit);<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">addKey</span><span class=\"hljs-params\">(String key, Object value)</span> &#123;<br>        redisTemplate.opsForValue().set(key, value);<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> Object <span class=\"hljs-title function_\">getKey</span><span class=\"hljs-params\">(String key)</span> &#123;<br>        <span class=\"hljs-keyword\">if</span> (StringUtils.isEmpty(key)) &#123;<br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>;<br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> redisTemplate.opsForValue().get(key);<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">increment</span><span class=\"hljs-params\">(String key)</span> &#123;<br>        increment(key, <span class=\"hljs-number\">1L</span>);<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">increment</span><span class=\"hljs-params\">(String key, <span class=\"hljs-type\">long</span> delta)</span> &#123;<br>        <span class=\"hljs-keyword\">if</span> (StringUtils.isEmpty(key)) &#123;<br>            <span class=\"hljs-keyword\">return</span>;<br>        &#125;<br>        redisTemplate.opsForValue().increment(key, delta);<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">decrement</span><span class=\"hljs-params\">(String key)</span> &#123;<br>        decrement(key, <span class=\"hljs-number\">1L</span>);<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">decrement</span><span class=\"hljs-params\">(String key, <span class=\"hljs-type\">long</span> delta)</span> &#123;<br>        <span class=\"hljs-keyword\">if</span> (StringUtils.isEmpty(key)) &#123;<br>            <span class=\"hljs-keyword\">return</span>;<br>        &#125;<br>        redisTemplate.opsForValue().decrement(key, delta);<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">leftPush</span><span class=\"hljs-params\">(String key, List&lt;Object&gt; values)</span> &#123;<br>        <span class=\"hljs-keyword\">if</span> (StringUtils.isEmpty(key)) &#123;<br>            <span class=\"hljs-keyword\">return</span>;<br>        &#125;<br>        redisTemplate.opsForList().leftPushAll(key, values);<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">leftPush</span><span class=\"hljs-params\">(String key, Object... value)</span> &#123;<br>        <span class=\"hljs-keyword\">if</span> (StringUtils.isEmpty(key)) &#123;<br>            <span class=\"hljs-keyword\">return</span>;<br>        &#125;<br>        redisTemplate.opsForList().leftPushAll(key, value);<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> Object <span class=\"hljs-title function_\">leftPop</span><span class=\"hljs-params\">(String key)</span> &#123;<br>        <span class=\"hljs-keyword\">if</span> (StringUtils.isEmpty(key)) &#123;<br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>;<br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> redisTemplate.opsForList().leftPop(key);<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> List&lt;Object&gt; <span class=\"hljs-title function_\">range</span><span class=\"hljs-params\">(String key, <span class=\"hljs-type\">long</span> start, <span class=\"hljs-type\">long</span> end)</span> &#123;<br>        <span class=\"hljs-keyword\">if</span> (StringUtils.isEmpty(key)) &#123;<br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayList</span>&lt;&gt;();<br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> redisTemplate.opsForList().range(key, start, end);<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> Object <span class=\"hljs-title function_\">indexOfList</span><span class=\"hljs-params\">(String key, <span class=\"hljs-type\">int</span> index)</span> &#123;<br>        <span class=\"hljs-keyword\">if</span> (StringUtils.isEmpty(key)) &#123;<br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>;<br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> redisTemplate.opsForList().index(key, index);<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">addHash</span><span class=\"hljs-params\">(String key, Map&lt;String, Object&gt; map)</span> &#123;<br>        <span class=\"hljs-keyword\">if</span> (StringUtils.isEmpty(key)) &#123;<br>            <span class=\"hljs-keyword\">return</span>;<br>        &#125;<br>        <span class=\"hljs-keyword\">if</span> (map == <span class=\"hljs-literal\">null</span> || map.isEmpty()) &#123;<br>            <span class=\"hljs-keyword\">return</span>;<br>        &#125;<br>        map.forEach((field, value) -&gt; &#123;<br>            redisTemplate.opsForHash().put(key, field, value);<br>        &#125;);<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">addField</span><span class=\"hljs-params\">(String key, String field, Object value)</span> &#123;<br>        <span class=\"hljs-keyword\">if</span> (StringUtils.isEmpty(key) || StringUtils.isEmpty(field)) &#123;<br>            <span class=\"hljs-keyword\">return</span>;<br>        &#125;<br>        redisTemplate.opsForHash().put(key, field, value);<br>    &#125;<br><br>     <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">removeField</span><span class=\"hljs-params\">(String key, String field)</span> &#123;<br>        <span class=\"hljs-keyword\">if</span> (StringUtils.isEmpty(key) || StringUtils.isEmpty(field)) &#123;<br>            <span class=\"hljs-keyword\">return</span>;<br>        &#125;<br>        redisTemplate.opsForHash().delete(key, field);<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> Map&lt;String, Object&gt; <span class=\"hljs-title function_\">getEntries</span><span class=\"hljs-params\">(String key)</span> &#123;<br>        <span class=\"hljs-keyword\">if</span> (StringUtils.isEmpty(key)) &#123;<br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">HashMap</span>&lt;&gt;();<br>        &#125;<br>        Map&lt;Object, Object&gt; entries = redisTemplate.opsForHash().entries(key);<br>        Map&lt;String, Object&gt; result = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">HashMap</span>&lt;&gt;();<br>        entries.forEach((k, v) -&gt; &#123;<br>            result.put(k.toString(), v);<br>        &#125;);<br>        <span class=\"hljs-keyword\">return</span> result;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> Object <span class=\"hljs-title function_\">getField</span><span class=\"hljs-params\">(String key, String field)</span> &#123;<br>        <span class=\"hljs-keyword\">if</span> (StringUtils.isEmpty(key) || StringUtils.isEmpty(field)) &#123;<br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>;<br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> redisTemplate.opsForHash().get(key, field);<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> Boolean <span class=\"hljs-title function_\">hasField</span><span class=\"hljs-params\">(String key, String field)</span> &#123;<br>        <span class=\"hljs-keyword\">if</span> (StringUtils.isEmpty(key) || StringUtils.isEmpty(field)) &#123;<br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;<br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> redisTemplate.opsForHash().hasKey(key, field);<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">addSet</span><span class=\"hljs-params\">(String key, String... value)</span> &#123;<br>        <span class=\"hljs-keyword\">if</span> (StringUtils.isEmpty(key)) &#123;<br>            <span class=\"hljs-keyword\">return</span>;<br>        &#125;<br>        redisTemplate.opsForSet().add(key, value);<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> Set&lt;Object&gt; <span class=\"hljs-title function_\">members</span><span class=\"hljs-params\">(String key)</span> &#123;<br>        <span class=\"hljs-keyword\">if</span> (StringUtils.isEmpty(key)) &#123;<br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">HashSet</span>&lt;&gt;();<br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> redisTemplate.opsForSet().members(key);<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> Boolean <span class=\"hljs-title function_\">isMember</span><span class=\"hljs-params\">(String key, Object value)</span> &#123;<br>        <span class=\"hljs-keyword\">if</span> (StringUtils.isEmpty(key)) &#123;<br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;<br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> redisTemplate.opsForSet().isMember(key, value);<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">addZSet</span><span class=\"hljs-params\">(String key, Object value, Double score)</span> &#123;<br>        <span class=\"hljs-keyword\">if</span> (StringUtils.isEmpty(key)) &#123;<br>            <span class=\"hljs-keyword\">return</span>;<br>        &#125;<br>        redisTemplate.opsForZSet().add(key, value, score);<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> Set&lt;Object&gt; <span class=\"hljs-title function_\">rangeByScore</span><span class=\"hljs-params\">(String key, Double min, Double max)</span> &#123;<br>        <span class=\"hljs-keyword\">if</span> (StringUtils.isEmpty(key)) &#123;<br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">HashSet</span>&lt;&gt;();<br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> redisTemplate.opsForZSet().rangeByScore(key, min, max);<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> Set&lt;ZSetOperations.TypedTuple&lt;Object&gt;&gt; rangeByScoreWithScore(String key, Double min, Double max) &#123;<br>        <span class=\"hljs-keyword\">if</span> (StringUtils.isEmpty(key)) &#123;<br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">HashSet</span>&lt;&gt;();<br>        &#125;<br>       <span class=\"hljs-keyword\">return</span> redisTemplate.opsForZSet().rangeByScoreWithScores(key, min, max);<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">addHyperLogLog</span><span class=\"hljs-params\">(String key, Object... value)</span> &#123;<br>        <span class=\"hljs-keyword\">if</span> (StringUtils.isEmpty(key)) &#123;<br>            <span class=\"hljs-keyword\">return</span>;<br>        &#125;<br>        redisTemplate.opsForHyperLogLog().add(key, value);<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">addHyperLogLog</span><span class=\"hljs-params\">(String key, List value)</span> &#123;<br>        <span class=\"hljs-keyword\">if</span> (StringUtils.isEmpty(key)) &#123;<br>            <span class=\"hljs-keyword\">return</span>;<br>        &#125;<br>        redisTemplate.opsForHyperLogLog().add(key, value);<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> Long <span class=\"hljs-title function_\">countHyperLogLog</span><span class=\"hljs-params\">(String key)</span> &#123;<br>        <span class=\"hljs-keyword\">if</span> (StringUtils.isEmpty(key)) &#123;<br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0L</span>;<br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> redisTemplate.opsForHyperLogLog().size(key);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>修改之前的测试代码，将redisTemplate，改为我们的工具类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Autowired</span><br>    <span class=\"hljs-keyword\">private</span> RedisUtils redisUtils;<br><br>    <span class=\"hljs-meta\">@Test</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">testRedisUtils</span><span class=\"hljs-params\">()</span> &#123;<br>        System.out.println(<span class=\"hljs-string\">&quot;字符串操作=================&quot;</span>);<br>       redisUtils.addKey(<span class=\"hljs-string\">&quot;name&quot;</span>, <span class=\"hljs-string\">&quot;cxy&quot;</span>);<br>        System.out.println(redisUtils.getKey(<span class=\"hljs-string\">&quot;name&quot;</span>));<br><br>        System.out.println(<span class=\"hljs-string\">&quot;列表操作&quot;</span>);<br>        redisUtils.leftPush(<span class=\"hljs-string\">&quot;school&quot;</span>, <span class=\"hljs-string\">&quot;华南理工大学&quot;</span>);<br>        redisUtils.leftPush(<span class=\"hljs-string\">&quot;school&quot;</span>, <span class=\"hljs-string\">&quot;中山大学&quot;</span>);<br>        redisUtils.leftPush(<span class=\"hljs-string\">&quot;school&quot;</span>, <span class=\"hljs-string\">&quot;华南农业大学&quot;</span>);<br>        List&lt;Object&gt; school = redisUtils.range(<span class=\"hljs-string\">&quot;school&quot;</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">5</span>);<br>        <span class=\"hljs-keyword\">for</span> (Object s : school) &#123;<br>            System.out.print(s + <span class=\"hljs-string\">&quot; &quot;</span>);<br>        &#125;<br>        System.out.println();<br><br>        System.out.println(<span class=\"hljs-string\">&quot;hash操作&quot;</span>);<br>        redisUtils.addField(<span class=\"hljs-string\">&quot;student&quot;</span>, <span class=\"hljs-string\">&quot;name&quot;</span>, <span class=\"hljs-string\">&quot;cxy&quot;</span>);<br>        redisUtils.addField(<span class=\"hljs-string\">&quot;student&quot;</span>, <span class=\"hljs-string\">&quot;age&quot;</span>, <span class=\"hljs-string\">&quot;21&quot;</span>);<br>        redisUtils.addField(<span class=\"hljs-string\">&quot;student&quot;</span>, <span class=\"hljs-string\">&quot;sex&quot;</span>, <span class=\"hljs-string\">&quot;male&quot;</span>);<br>        System.out.println(redisUtils.getField(<span class=\"hljs-string\">&quot;student&quot;</span>, <span class=\"hljs-string\">&quot;name&quot;</span>));<br>        System.out.println(redisUtils.getField(<span class=\"hljs-string\">&quot;student&quot;</span>, <span class=\"hljs-string\">&quot;age&quot;</span>));<br>        System.out.println(redisUtils.getField(<span class=\"hljs-string\">&quot;student&quot;</span>, <span class=\"hljs-string\">&quot;sex&quot;</span>));<br><br>        System.out.println(<span class=\"hljs-string\">&quot;set操作&quot;</span>);<br>        redisUtils.addSet(<span class=\"hljs-string\">&quot;project&quot;</span>, <span class=\"hljs-string\">&quot;软件工程&quot;</span>, <span class=\"hljs-string\">&quot;计算机技术&quot;</span>, <span class=\"hljs-string\">&quot;通信工程&quot;</span>, <span class=\"hljs-string\">&quot;软件工程&quot;</span>);<br>        Set&lt;Object&gt; project = redisUtils.members(<span class=\"hljs-string\">&quot;project&quot;</span>);<br>        <span class=\"hljs-keyword\">for</span> (Object s : project) &#123;<br>            System.out.print(s + <span class=\"hljs-string\">&quot; &quot;</span>);<br>        &#125;<br>        System.out.println();<br><br>        System.out.println(<span class=\"hljs-string\">&quot;zset操作&quot;</span>);<br>        redisUtils.addZSet(<span class=\"hljs-string\">&quot;movie&quot;</span>, <span class=\"hljs-string\">&quot;热辣滚烫&quot;</span>, <span class=\"hljs-number\">2.7d</span>);<br>        redisUtils.addZSet(<span class=\"hljs-string\">&quot;movie&quot;</span>, <span class=\"hljs-string\">&quot;飞驰人生&quot;</span>, <span class=\"hljs-number\">9.1d</span>);<br>        redisUtils.addZSet(<span class=\"hljs-string\">&quot;movie&quot;</span>, <span class=\"hljs-string\">&quot;熊出没之逆转时空&quot;</span>, <span class=\"hljs-number\">9.3d</span>);<br>        redisUtils.addZSet(<span class=\"hljs-string\">&quot;movie&quot;</span>, <span class=\"hljs-string\">&quot;二十一条&quot;</span>, <span class=\"hljs-number\">8.2d</span>);<br>        Set&lt;Object&gt; movie = redisUtils.rangeByScore(<span class=\"hljs-string\">&quot;movie&quot;</span>, <span class=\"hljs-number\">3.0d</span>, <span class=\"hljs-number\">9.3d</span>);<br>        <span class=\"hljs-keyword\">for</span> (Object s : movie) &#123;<br>            System.out.print(s + <span class=\"hljs-string\">&quot; &quot;</span>);<br>        &#125;<br>        System.out.println();<br><br>        System.out.println(<span class=\"hljs-string\">&quot;基数操作&quot;</span>);<br>        redisUtils.addHyperLogLog(<span class=\"hljs-string\">&quot;accessIp&quot;</span>, <span class=\"hljs-string\">&quot;127.0.0.1&quot;</span>);<br>        redisUtils.addHyperLogLog(<span class=\"hljs-string\">&quot;accessIp&quot;</span>, <span class=\"hljs-string\">&quot;192.168.10.1&quot;</span>);<br>        redisUtils.addHyperLogLog(<span class=\"hljs-string\">&quot;accessIp&quot;</span>, <span class=\"hljs-string\">&quot;192.168.0.1&quot;</span>);<br>        redisUtils.addHyperLogLog(<span class=\"hljs-string\">&quot;accessIp&quot;</span>, <span class=\"hljs-string\">&quot;33.45.23.1&quot;</span>);<br>        System.out.println(redisUtils.countHyperLogLog(<span class=\"hljs-string\">&quot;accessIp&quot;</span>));<br>    &#125;<br></code></pre></td></tr></table></figure>\n<p>在测试之前，先删除之前添加的数据</p>\n<img src=\"/2024/04/02/Redis%E5%AD%A6%E4%B9%A02%E2%80%94SpringBoot%E6%95%B4%E5%90%88Redis%E3%80%81Redis%E5%B7%A5%E5%85%B7%E7%B1%BB/2.png\" class=\"\">\n<p>测试结果如下：</p>\n<img src=\"/2024/04/02/Redis%E5%AD%A6%E4%B9%A02%E2%80%94SpringBoot%E6%95%B4%E5%90%88Redis%E3%80%81Redis%E5%B7%A5%E5%85%B7%E7%B1%BB/3.png\" class=\"\">"},{"title":"Redis学习5-Redis应用之签到","date":"2024-04-02T13:34:00.000Z","_content":"### 1. Redis位图bitMap\n位图由一系列二进制位组成，每个位可以被设置为1或0，当我们在处理需要高效存储和操作大量二进制位数据的适合，位图是一个非常有用的工具。\n位图操作命令有：\n1. SETBIT：设置位图中指定位置的位的值。可以将位设置为 0 或 1。\n2. GETBIT：获取位图中指定位置的位的值。\n3. BITCOUNT：计算位图中置为 1 的位的数量。\n4. BITOP：对多个位图执行逻辑运算（AND、OR、XOR、NOT）。\n5. BITFIELD：执行复杂的位字段操作，允许你在位图上进行位级别的读写操作。\n其中，用的最多的是前三个操作，示例如下：\n{% asset_img 1.png %}\n位图的应用十分广泛，包括但不限于以下几方面：\n● 统计用户活跃度：可以使用位图追踪用户的登录活动，每个用户对应一个位图，每天的登录状态可以用一个二进制位表示，通过 BITOP 命令可以计算多个用户的交集，从而得到活跃用户的统计信息。\n● 数据压缩：位图可以高效地存储大量的二进制数据，比如布隆过滤器（Bloom Filter）就是基于位图实现的一种数据结构，用于快速判断元素是否存在。\n● 事件计数：可以使用位图记录每天不同时间段的事件发生情况，比如网站的访问量，每个时间段对应一个位图，每次事件发生时将对应的位设置为 1，通过 BITCOUNT 命令可以计算出每个时间段的事件数量。\n● 权限管理：可以使用位图来管理用户的权限，每个用户对应一个位图，每个权限对应一个二进制位，通过 BITOP 命令可以进行权限的并集、交集等操作。\n### 2. RedisTemplate操作位图\n在之前的几篇文章中，我们总结了一个Redis工具类，但是那个工具类中，并没有和位图相关的操作，这里添加和位图操作相关的方法：\n```java\n   // value: true为1， false为0\n    public boolean setBit(String key, int offset, boolean value) {\n        return redisTemplate.opsForValue().setBit(key, offset, value);\n    }\n\n    public boolean getBit(String key, int offset) {\n        return redisTemplate.opsForValue().getBit(key, offset);\n    }\n\n    /**\n     * 统计对应值为1 的数量\n     * @param key\n     * @return\n     */\n    public long bitCount(String key) {\n        if (StringUtils.isEmpty(key)) {\n            return 0L;\n        }\n        return redisTemplate.execute((RedisCallback<Long>) con -> con.bitCount(key.getBytes()));\n    }\n\n    /**\n     * 统计在字节范围内，对应值为1的数量\n     * @param key\n     * @param start\n     * @param end\n     * @return\n     */\n    public Long bitCount(String key, long start, long end) {\n        return redisTemplate.execute((RedisCallback<Long>) con -> con.bitCount(key.getBytes(), start, end));\n    }\n```\n添加测试类，用于测试位图操作：\n```java\npackage org.example;\n\nimport org.example.util.RedisUtils;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.test.context.SpringBootTest;\n\n@SpringBootTest\npublic class RedisBitMapTest {\n    @Autowired\n    private RedisUtils redisUtils;\n\n    @Test\n    public void testBitMap() {\n        redisUtils.setBit(\"bit\", 0, true);\n        redisUtils.setBit(\"bit\", 1, true);\n        redisUtils.setBit(\"bit\", 3, true);\n        redisUtils.setBit(\"bit\", 7, true);\n        System.out.println(redisUtils.bitCount(\"bit\"));\n\n    }\n}\n```\n执行结果如下：\n{% asset_img 2.png %}\n我们通过Redis可视化工具，查看bit的值，可以看出其二进制值与我们操作的一致\n{% asset_img 3.png %}\n### 3. 位图应用之签到\n在很多时候，我们遇到用户签到的场景，用户进入应用时，获取用户当天的签到情况，如果没有签到，用户可以签到，一般这种功能，可以通过set数据结构或bitMap来实现，但bitMap和set相比，其占用的空间更小，因此我们选择使用bitMap来实现签到的功能。\nSignService：\n```java\npackage org.example.util;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.data.redis.connection.BitFieldSubCommands;\nimport org.springframework.data.redis.core.RedisTemplate;\nimport org.springframework.stereotype.Service;\n\nimport java.time.LocalDate;\nimport java.util.List;\n\n@Service\npublic class SignService {\n    @Autowired\n    private RedisUtils redisUtils;\n\n    @Autowired\n    private RedisTemplate<String, Object> redisTemplate;\n\n    /**\n     * 签到\n     * @param id\n     */\n    public void sign(Integer id) {\n        LocalDate now = LocalDate.now();\n        String key = buildCacheKey(id, now);\n        int dayOfMonth = now.getDayOfMonth();\n\n        // 签到\n        redisUtils.setBit(key, dayOfMonth, true);\n    }\n\n    /**\n     * 判断是否签到\n     */\n    public boolean isSign(Integer id) {\n        LocalDate now = LocalDate.now();\n        String key = buildCacheKey(id, now);\n        int dayOfMonth = now.getDayOfMonth();\n        return redisUtils.getBit(key, dayOfMonth);\n    }\n\n    /**\n     * 获取当月的签到次数\n     * @param id\n     * @return\n     */\n    public Long getSignCountOfThisMonth(Integer id) {\n        LocalDate now = LocalDate.now();\n        String key = buildCacheKey(id, now);\n        int dayOfMonth = now.getDayOfMonth();\n        List<Long> result = redisTemplate.opsForValue().bitField(key,\n                BitFieldSubCommands.create()\n                        .get(BitFieldSubCommands.BitFieldType.unsigned(dayOfMonth)).valueAt(1));\n        if (result == null || result.isEmpty()) {\n            return 0L;\n        }\n        Long num = result.get(0);\n        if (num == null || num == 0) {\n            return 0L;\n        }\n\n        String binaryStr = Long.toString(num, 2);\n\n        long count = 0;\n        for (int i = 0; i < binaryStr.length(); i++) {\n            char ch = binaryStr.charAt(i);\n            if (ch == '1') {\n                count ++;\n            }\n        }\n        return count;\n    }\n\n    /**\n     * 获取本月连续签到次数\n     * @param id\n     * @return\n     */\n    public Long getContinuousSignCountOfThisMonth(Integer id) {\n        LocalDate now = LocalDate.now();\n        String key = buildCacheKey(id, now);\n        int dayOfMonth = now.getDayOfMonth();\n        List<Long> result = redisTemplate.opsForValue().bitField(key,\n                BitFieldSubCommands.create()\n                        .get(BitFieldSubCommands.BitFieldType.unsigned(dayOfMonth)).valueAt(1));\n        if (result == null || result.isEmpty()) {\n            return 0L;\n        }\n        Long num = result.get(0);\n        if (num == null || num == 0) {\n            return 0L;\n        }\n\n        long count = 0;\n        while (true) {\n            if ((num & 1) == 0) {\n                break;\n            } else {\n                count ++;\n            }\n            num >>>= 1;\n        }\n        return count;\n    }\n\n    private String buildCacheKey(Integer id, LocalDate localDate) {\n        int year = localDate.getYear();\n        int monthValue = localDate.getMonthValue();\n        String key = \"sign:\" + year + \":\" + monthValue + \":\" + id;\n        return key;\n    }\n}\n```\n测试代码如下：\n```java\n@Autowired\n    private SignService signService;\n\n    @Test\n    public void testSign() {\n        // 签到\n        signService.sign(1);\n\n        // 判断是否签到\n        System.out.println(\"是否签到：\" + signService.isSign(1));\n\n        // 获取当月的签到次数\n        System.out.println(\"当月的签到次数：\" + signService.getSignCountOfThisMonth(1));\n\n        // 获取当月的连续签到次数\n        System.out.println(\"当月连续签到次数：\" + signService.getContinuousSignCountOfThisMonth(1));\n    }\n```\n运行结果如下：\n{% asset_img 4.png %}","source":"_posts/Redis学习5-Redis应用之签到.md","raw":"---\ntitle: Redis学习5-Redis应用之签到\ndate: 2024-04-02 21:34:00\ntags: \n    - 中间件\n    - Redis\n---\n### 1. Redis位图bitMap\n位图由一系列二进制位组成，每个位可以被设置为1或0，当我们在处理需要高效存储和操作大量二进制位数据的适合，位图是一个非常有用的工具。\n位图操作命令有：\n1. SETBIT：设置位图中指定位置的位的值。可以将位设置为 0 或 1。\n2. GETBIT：获取位图中指定位置的位的值。\n3. BITCOUNT：计算位图中置为 1 的位的数量。\n4. BITOP：对多个位图执行逻辑运算（AND、OR、XOR、NOT）。\n5. BITFIELD：执行复杂的位字段操作，允许你在位图上进行位级别的读写操作。\n其中，用的最多的是前三个操作，示例如下：\n{% asset_img 1.png %}\n位图的应用十分广泛，包括但不限于以下几方面：\n● 统计用户活跃度：可以使用位图追踪用户的登录活动，每个用户对应一个位图，每天的登录状态可以用一个二进制位表示，通过 BITOP 命令可以计算多个用户的交集，从而得到活跃用户的统计信息。\n● 数据压缩：位图可以高效地存储大量的二进制数据，比如布隆过滤器（Bloom Filter）就是基于位图实现的一种数据结构，用于快速判断元素是否存在。\n● 事件计数：可以使用位图记录每天不同时间段的事件发生情况，比如网站的访问量，每个时间段对应一个位图，每次事件发生时将对应的位设置为 1，通过 BITCOUNT 命令可以计算出每个时间段的事件数量。\n● 权限管理：可以使用位图来管理用户的权限，每个用户对应一个位图，每个权限对应一个二进制位，通过 BITOP 命令可以进行权限的并集、交集等操作。\n### 2. RedisTemplate操作位图\n在之前的几篇文章中，我们总结了一个Redis工具类，但是那个工具类中，并没有和位图相关的操作，这里添加和位图操作相关的方法：\n```java\n   // value: true为1， false为0\n    public boolean setBit(String key, int offset, boolean value) {\n        return redisTemplate.opsForValue().setBit(key, offset, value);\n    }\n\n    public boolean getBit(String key, int offset) {\n        return redisTemplate.opsForValue().getBit(key, offset);\n    }\n\n    /**\n     * 统计对应值为1 的数量\n     * @param key\n     * @return\n     */\n    public long bitCount(String key) {\n        if (StringUtils.isEmpty(key)) {\n            return 0L;\n        }\n        return redisTemplate.execute((RedisCallback<Long>) con -> con.bitCount(key.getBytes()));\n    }\n\n    /**\n     * 统计在字节范围内，对应值为1的数量\n     * @param key\n     * @param start\n     * @param end\n     * @return\n     */\n    public Long bitCount(String key, long start, long end) {\n        return redisTemplate.execute((RedisCallback<Long>) con -> con.bitCount(key.getBytes(), start, end));\n    }\n```\n添加测试类，用于测试位图操作：\n```java\npackage org.example;\n\nimport org.example.util.RedisUtils;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.test.context.SpringBootTest;\n\n@SpringBootTest\npublic class RedisBitMapTest {\n    @Autowired\n    private RedisUtils redisUtils;\n\n    @Test\n    public void testBitMap() {\n        redisUtils.setBit(\"bit\", 0, true);\n        redisUtils.setBit(\"bit\", 1, true);\n        redisUtils.setBit(\"bit\", 3, true);\n        redisUtils.setBit(\"bit\", 7, true);\n        System.out.println(redisUtils.bitCount(\"bit\"));\n\n    }\n}\n```\n执行结果如下：\n{% asset_img 2.png %}\n我们通过Redis可视化工具，查看bit的值，可以看出其二进制值与我们操作的一致\n{% asset_img 3.png %}\n### 3. 位图应用之签到\n在很多时候，我们遇到用户签到的场景，用户进入应用时，获取用户当天的签到情况，如果没有签到，用户可以签到，一般这种功能，可以通过set数据结构或bitMap来实现，但bitMap和set相比，其占用的空间更小，因此我们选择使用bitMap来实现签到的功能。\nSignService：\n```java\npackage org.example.util;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.data.redis.connection.BitFieldSubCommands;\nimport org.springframework.data.redis.core.RedisTemplate;\nimport org.springframework.stereotype.Service;\n\nimport java.time.LocalDate;\nimport java.util.List;\n\n@Service\npublic class SignService {\n    @Autowired\n    private RedisUtils redisUtils;\n\n    @Autowired\n    private RedisTemplate<String, Object> redisTemplate;\n\n    /**\n     * 签到\n     * @param id\n     */\n    public void sign(Integer id) {\n        LocalDate now = LocalDate.now();\n        String key = buildCacheKey(id, now);\n        int dayOfMonth = now.getDayOfMonth();\n\n        // 签到\n        redisUtils.setBit(key, dayOfMonth, true);\n    }\n\n    /**\n     * 判断是否签到\n     */\n    public boolean isSign(Integer id) {\n        LocalDate now = LocalDate.now();\n        String key = buildCacheKey(id, now);\n        int dayOfMonth = now.getDayOfMonth();\n        return redisUtils.getBit(key, dayOfMonth);\n    }\n\n    /**\n     * 获取当月的签到次数\n     * @param id\n     * @return\n     */\n    public Long getSignCountOfThisMonth(Integer id) {\n        LocalDate now = LocalDate.now();\n        String key = buildCacheKey(id, now);\n        int dayOfMonth = now.getDayOfMonth();\n        List<Long> result = redisTemplate.opsForValue().bitField(key,\n                BitFieldSubCommands.create()\n                        .get(BitFieldSubCommands.BitFieldType.unsigned(dayOfMonth)).valueAt(1));\n        if (result == null || result.isEmpty()) {\n            return 0L;\n        }\n        Long num = result.get(0);\n        if (num == null || num == 0) {\n            return 0L;\n        }\n\n        String binaryStr = Long.toString(num, 2);\n\n        long count = 0;\n        for (int i = 0; i < binaryStr.length(); i++) {\n            char ch = binaryStr.charAt(i);\n            if (ch == '1') {\n                count ++;\n            }\n        }\n        return count;\n    }\n\n    /**\n     * 获取本月连续签到次数\n     * @param id\n     * @return\n     */\n    public Long getContinuousSignCountOfThisMonth(Integer id) {\n        LocalDate now = LocalDate.now();\n        String key = buildCacheKey(id, now);\n        int dayOfMonth = now.getDayOfMonth();\n        List<Long> result = redisTemplate.opsForValue().bitField(key,\n                BitFieldSubCommands.create()\n                        .get(BitFieldSubCommands.BitFieldType.unsigned(dayOfMonth)).valueAt(1));\n        if (result == null || result.isEmpty()) {\n            return 0L;\n        }\n        Long num = result.get(0);\n        if (num == null || num == 0) {\n            return 0L;\n        }\n\n        long count = 0;\n        while (true) {\n            if ((num & 1) == 0) {\n                break;\n            } else {\n                count ++;\n            }\n            num >>>= 1;\n        }\n        return count;\n    }\n\n    private String buildCacheKey(Integer id, LocalDate localDate) {\n        int year = localDate.getYear();\n        int monthValue = localDate.getMonthValue();\n        String key = \"sign:\" + year + \":\" + monthValue + \":\" + id;\n        return key;\n    }\n}\n```\n测试代码如下：\n```java\n@Autowired\n    private SignService signService;\n\n    @Test\n    public void testSign() {\n        // 签到\n        signService.sign(1);\n\n        // 判断是否签到\n        System.out.println(\"是否签到：\" + signService.isSign(1));\n\n        // 获取当月的签到次数\n        System.out.println(\"当月的签到次数：\" + signService.getSignCountOfThisMonth(1));\n\n        // 获取当月的连续签到次数\n        System.out.println(\"当月连续签到次数：\" + signService.getContinuousSignCountOfThisMonth(1));\n    }\n```\n运行结果如下：\n{% asset_img 4.png %}","slug":"Redis学习5-Redis应用之签到","published":1,"updated":"2024-04-03T05:44:07.646Z","_id":"cluifpiej00015svl88oz0d1q","comments":1,"layout":"post","photos":[],"content":"<h3 id=\"1-Redis位图bitMap\"><a href=\"#1-Redis位图bitMap\" class=\"headerlink\" title=\"1. Redis位图bitMap\"></a>1. Redis位图bitMap</h3><p>位图由一系列二进制位组成，每个位可以被设置为1或0，当我们在处理需要高效存储和操作大量二进制位数据的适合，位图是一个非常有用的工具。<br>位图操作命令有：</p>\n<ol>\n<li>SETBIT：设置位图中指定位置的位的值。可以将位设置为 0 或 1。</li>\n<li>GETBIT：获取位图中指定位置的位的值。</li>\n<li>BITCOUNT：计算位图中置为 1 的位的数量。</li>\n<li>BITOP：对多个位图执行逻辑运算（AND、OR、XOR、NOT）。</li>\n<li>BITFIELD：执行复杂的位字段操作，允许你在位图上进行位级别的读写操作。<br>其中，用的最多的是前三个操作，示例如下：<img src=\"/2024/04/02/Redis%E5%AD%A6%E4%B9%A05-Redis%E5%BA%94%E7%94%A8%E4%B9%8B%E7%AD%BE%E5%88%B0/1.png\" class=\"\">\n位图的应用十分广泛，包括但不限于以下几方面：<br>● 统计用户活跃度：可以使用位图追踪用户的登录活动，每个用户对应一个位图，每天的登录状态可以用一个二进制位表示，通过 BITOP 命令可以计算多个用户的交集，从而得到活跃用户的统计信息。<br>● 数据压缩：位图可以高效地存储大量的二进制数据，比如布隆过滤器（Bloom Filter）就是基于位图实现的一种数据结构，用于快速判断元素是否存在。<br>● 事件计数：可以使用位图记录每天不同时间段的事件发生情况，比如网站的访问量，每个时间段对应一个位图，每次事件发生时将对应的位设置为 1，通过 BITCOUNT 命令可以计算出每个时间段的事件数量。<br>● 权限管理：可以使用位图来管理用户的权限，每个用户对应一个位图，每个权限对应一个二进制位，通过 BITOP 命令可以进行权限的并集、交集等操作。</li>\n</ol>\n<h3 id=\"2-RedisTemplate操作位图\"><a href=\"#2-RedisTemplate操作位图\" class=\"headerlink\" title=\"2. RedisTemplate操作位图\"></a>2. RedisTemplate操作位图</h3><p>在之前的几篇文章中，我们总结了一个Redis工具类，但是那个工具类中，并没有和位图相关的操作，这里添加和位图操作相关的方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">// value: true为1， false为0</span><br> <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">setBit</span><span class=\"hljs-params\">(String key, <span class=\"hljs-type\">int</span> offset, <span class=\"hljs-type\">boolean</span> value)</span> &#123;<br>     <span class=\"hljs-keyword\">return</span> redisTemplate.opsForValue().setBit(key, offset, value);<br> &#125;<br><br> <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">getBit</span><span class=\"hljs-params\">(String key, <span class=\"hljs-type\">int</span> offset)</span> &#123;<br>     <span class=\"hljs-keyword\">return</span> redisTemplate.opsForValue().getBit(key, offset);<br> &#125;<br><br> <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">  * 统计对应值为1 的数量</span><br><span class=\"hljs-comment\">  * <span class=\"hljs-doctag\">@param</span> key</span><br><span class=\"hljs-comment\">  * <span class=\"hljs-doctag\">@return</span></span><br><span class=\"hljs-comment\">  */</span><br> <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">long</span> <span class=\"hljs-title function_\">bitCount</span><span class=\"hljs-params\">(String key)</span> &#123;<br>     <span class=\"hljs-keyword\">if</span> (StringUtils.isEmpty(key)) &#123;<br>         <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0L</span>;<br>     &#125;<br>     <span class=\"hljs-keyword\">return</span> redisTemplate.execute((RedisCallback&lt;Long&gt;) con -&gt; con.bitCount(key.getBytes()));<br> &#125;<br><br> <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">  * 统计在字节范围内，对应值为1的数量</span><br><span class=\"hljs-comment\">  * <span class=\"hljs-doctag\">@param</span> key</span><br><span class=\"hljs-comment\">  * <span class=\"hljs-doctag\">@param</span> start</span><br><span class=\"hljs-comment\">  * <span class=\"hljs-doctag\">@param</span> end</span><br><span class=\"hljs-comment\">  * <span class=\"hljs-doctag\">@return</span></span><br><span class=\"hljs-comment\">  */</span><br> <span class=\"hljs-keyword\">public</span> Long <span class=\"hljs-title function_\">bitCount</span><span class=\"hljs-params\">(String key, <span class=\"hljs-type\">long</span> start, <span class=\"hljs-type\">long</span> end)</span> &#123;<br>     <span class=\"hljs-keyword\">return</span> redisTemplate.execute((RedisCallback&lt;Long&gt;) con -&gt; con.bitCount(key.getBytes(), start, end));<br> &#125;<br></code></pre></td></tr></table></figure>\n<p>添加测试类，用于测试位图操作：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> org.example;<br><br><span class=\"hljs-keyword\">import</span> org.example.util.RedisUtils;<br><span class=\"hljs-keyword\">import</span> org.junit.jupiter.api.Test;<br><span class=\"hljs-keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class=\"hljs-keyword\">import</span> org.springframework.boot.test.context.SpringBootTest;<br><br><span class=\"hljs-meta\">@SpringBootTest</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">RedisBitMapTest</span> &#123;<br>    <span class=\"hljs-meta\">@Autowired</span><br>    <span class=\"hljs-keyword\">private</span> RedisUtils redisUtils;<br><br>    <span class=\"hljs-meta\">@Test</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">testBitMap</span><span class=\"hljs-params\">()</span> &#123;<br>        redisUtils.setBit(<span class=\"hljs-string\">&quot;bit&quot;</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-literal\">true</span>);<br>        redisUtils.setBit(<span class=\"hljs-string\">&quot;bit&quot;</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-literal\">true</span>);<br>        redisUtils.setBit(<span class=\"hljs-string\">&quot;bit&quot;</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-literal\">true</span>);<br>        redisUtils.setBit(<span class=\"hljs-string\">&quot;bit&quot;</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-literal\">true</span>);<br>        System.out.println(redisUtils.bitCount(<span class=\"hljs-string\">&quot;bit&quot;</span>));<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>执行结果如下：</p>\n<img src=\"/2024/04/02/Redis%E5%AD%A6%E4%B9%A05-Redis%E5%BA%94%E7%94%A8%E4%B9%8B%E7%AD%BE%E5%88%B0/2.png\" class=\"\">\n<p>我们通过Redis可视化工具，查看bit的值，可以看出其二进制值与我们操作的一致</p>\n<img src=\"/2024/04/02/Redis%E5%AD%A6%E4%B9%A05-Redis%E5%BA%94%E7%94%A8%E4%B9%8B%E7%AD%BE%E5%88%B0/3.png\" class=\"\">\n<h3 id=\"3-位图应用之签到\"><a href=\"#3-位图应用之签到\" class=\"headerlink\" title=\"3. 位图应用之签到\"></a>3. 位图应用之签到</h3><p>在很多时候，我们遇到用户签到的场景，用户进入应用时，获取用户当天的签到情况，如果没有签到，用户可以签到，一般这种功能，可以通过set数据结构或bitMap来实现，但bitMap和set相比，其占用的空间更小，因此我们选择使用bitMap来实现签到的功能。<br>SignService：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> org.example.util;<br><br><span class=\"hljs-keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class=\"hljs-keyword\">import</span> org.springframework.data.redis.connection.BitFieldSubCommands;<br><span class=\"hljs-keyword\">import</span> org.springframework.data.redis.core.RedisTemplate;<br><span class=\"hljs-keyword\">import</span> org.springframework.stereotype.Service;<br><br><span class=\"hljs-keyword\">import</span> java.time.LocalDate;<br><span class=\"hljs-keyword\">import</span> java.util.List;<br><br><span class=\"hljs-meta\">@Service</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">SignService</span> &#123;<br>    <span class=\"hljs-meta\">@Autowired</span><br>    <span class=\"hljs-keyword\">private</span> RedisUtils redisUtils;<br><br>    <span class=\"hljs-meta\">@Autowired</span><br>    <span class=\"hljs-keyword\">private</span> RedisTemplate&lt;String, Object&gt; redisTemplate;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 签到</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@param</span> id</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">sign</span><span class=\"hljs-params\">(Integer id)</span> &#123;<br>        <span class=\"hljs-type\">LocalDate</span> <span class=\"hljs-variable\">now</span> <span class=\"hljs-operator\">=</span> LocalDate.now();<br>        <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">key</span> <span class=\"hljs-operator\">=</span> buildCacheKey(id, now);<br>        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">dayOfMonth</span> <span class=\"hljs-operator\">=</span> now.getDayOfMonth();<br><br>        <span class=\"hljs-comment\">// 签到</span><br>        redisUtils.setBit(key, dayOfMonth, <span class=\"hljs-literal\">true</span>);<br>    &#125;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 判断是否签到</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">isSign</span><span class=\"hljs-params\">(Integer id)</span> &#123;<br>        <span class=\"hljs-type\">LocalDate</span> <span class=\"hljs-variable\">now</span> <span class=\"hljs-operator\">=</span> LocalDate.now();<br>        <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">key</span> <span class=\"hljs-operator\">=</span> buildCacheKey(id, now);<br>        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">dayOfMonth</span> <span class=\"hljs-operator\">=</span> now.getDayOfMonth();<br>        <span class=\"hljs-keyword\">return</span> redisUtils.getBit(key, dayOfMonth);<br>    &#125;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 获取当月的签到次数</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@param</span> id</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@return</span></span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-keyword\">public</span> Long <span class=\"hljs-title function_\">getSignCountOfThisMonth</span><span class=\"hljs-params\">(Integer id)</span> &#123;<br>        <span class=\"hljs-type\">LocalDate</span> <span class=\"hljs-variable\">now</span> <span class=\"hljs-operator\">=</span> LocalDate.now();<br>        <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">key</span> <span class=\"hljs-operator\">=</span> buildCacheKey(id, now);<br>        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">dayOfMonth</span> <span class=\"hljs-operator\">=</span> now.getDayOfMonth();<br>        List&lt;Long&gt; result = redisTemplate.opsForValue().bitField(key,<br>                BitFieldSubCommands.create()<br>                        .get(BitFieldSubCommands.BitFieldType.unsigned(dayOfMonth)).valueAt(<span class=\"hljs-number\">1</span>));<br>        <span class=\"hljs-keyword\">if</span> (result == <span class=\"hljs-literal\">null</span> || result.isEmpty()) &#123;<br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0L</span>;<br>        &#125;<br>        <span class=\"hljs-type\">Long</span> <span class=\"hljs-variable\">num</span> <span class=\"hljs-operator\">=</span> result.get(<span class=\"hljs-number\">0</span>);<br>        <span class=\"hljs-keyword\">if</span> (num == <span class=\"hljs-literal\">null</span> || num == <span class=\"hljs-number\">0</span>) &#123;<br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0L</span>;<br>        &#125;<br><br>        <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">binaryStr</span> <span class=\"hljs-operator\">=</span> Long.toString(num, <span class=\"hljs-number\">2</span>);<br><br>        <span class=\"hljs-type\">long</span> <span class=\"hljs-variable\">count</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>;<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; binaryStr.length(); i++) &#123;<br>            <span class=\"hljs-type\">char</span> <span class=\"hljs-variable\">ch</span> <span class=\"hljs-operator\">=</span> binaryStr.charAt(i);<br>            <span class=\"hljs-keyword\">if</span> (ch == <span class=\"hljs-string\">&#x27;1&#x27;</span>) &#123;<br>                count ++;<br>            &#125;<br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> count;<br>    &#125;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 获取本月连续签到次数</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@param</span> id</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@return</span></span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-keyword\">public</span> Long <span class=\"hljs-title function_\">getContinuousSignCountOfThisMonth</span><span class=\"hljs-params\">(Integer id)</span> &#123;<br>        <span class=\"hljs-type\">LocalDate</span> <span class=\"hljs-variable\">now</span> <span class=\"hljs-operator\">=</span> LocalDate.now();<br>        <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">key</span> <span class=\"hljs-operator\">=</span> buildCacheKey(id, now);<br>        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">dayOfMonth</span> <span class=\"hljs-operator\">=</span> now.getDayOfMonth();<br>        List&lt;Long&gt; result = redisTemplate.opsForValue().bitField(key,<br>                BitFieldSubCommands.create()<br>                        .get(BitFieldSubCommands.BitFieldType.unsigned(dayOfMonth)).valueAt(<span class=\"hljs-number\">1</span>));<br>        <span class=\"hljs-keyword\">if</span> (result == <span class=\"hljs-literal\">null</span> || result.isEmpty()) &#123;<br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0L</span>;<br>        &#125;<br>        <span class=\"hljs-type\">Long</span> <span class=\"hljs-variable\">num</span> <span class=\"hljs-operator\">=</span> result.get(<span class=\"hljs-number\">0</span>);<br>        <span class=\"hljs-keyword\">if</span> (num == <span class=\"hljs-literal\">null</span> || num == <span class=\"hljs-number\">0</span>) &#123;<br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0L</span>;<br>        &#125;<br><br>        <span class=\"hljs-type\">long</span> <span class=\"hljs-variable\">count</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>;<br>        <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-literal\">true</span>) &#123;<br>            <span class=\"hljs-keyword\">if</span> ((num &amp; <span class=\"hljs-number\">1</span>) == <span class=\"hljs-number\">0</span>) &#123;<br>                <span class=\"hljs-keyword\">break</span>;<br>            &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>                count ++;<br>            &#125;<br>            num &gt;&gt;&gt;= <span class=\"hljs-number\">1</span>;<br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> count;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">private</span> String <span class=\"hljs-title function_\">buildCacheKey</span><span class=\"hljs-params\">(Integer id, LocalDate localDate)</span> &#123;<br>        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">year</span> <span class=\"hljs-operator\">=</span> localDate.getYear();<br>        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">monthValue</span> <span class=\"hljs-operator\">=</span> localDate.getMonthValue();<br>        <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">key</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;sign:&quot;</span> + year + <span class=\"hljs-string\">&quot;:&quot;</span> + monthValue + <span class=\"hljs-string\">&quot;:&quot;</span> + id;<br>        <span class=\"hljs-keyword\">return</span> key;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>测试代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Autowired</span><br>    <span class=\"hljs-keyword\">private</span> SignService signService;<br><br>    <span class=\"hljs-meta\">@Test</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">testSign</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-comment\">// 签到</span><br>        signService.sign(<span class=\"hljs-number\">1</span>);<br><br>        <span class=\"hljs-comment\">// 判断是否签到</span><br>        System.out.println(<span class=\"hljs-string\">&quot;是否签到：&quot;</span> + signService.isSign(<span class=\"hljs-number\">1</span>));<br><br>        <span class=\"hljs-comment\">// 获取当月的签到次数</span><br>        System.out.println(<span class=\"hljs-string\">&quot;当月的签到次数：&quot;</span> + signService.getSignCountOfThisMonth(<span class=\"hljs-number\">1</span>));<br><br>        <span class=\"hljs-comment\">// 获取当月的连续签到次数</span><br>        System.out.println(<span class=\"hljs-string\">&quot;当月连续签到次数：&quot;</span> + signService.getContinuousSignCountOfThisMonth(<span class=\"hljs-number\">1</span>));<br>    &#125;<br></code></pre></td></tr></table></figure>\n<p>运行结果如下：</p>\n<img src=\"/2024/04/02/Redis%E5%AD%A6%E4%B9%A05-Redis%E5%BA%94%E7%94%A8%E4%B9%8B%E7%AD%BE%E5%88%B0/4.png\" class=\"\">","excerpt":"","more":"<h3 id=\"1-Redis位图bitMap\"><a href=\"#1-Redis位图bitMap\" class=\"headerlink\" title=\"1. Redis位图bitMap\"></a>1. Redis位图bitMap</h3><p>位图由一系列二进制位组成，每个位可以被设置为1或0，当我们在处理需要高效存储和操作大量二进制位数据的适合，位图是一个非常有用的工具。<br>位图操作命令有：</p>\n<ol>\n<li>SETBIT：设置位图中指定位置的位的值。可以将位设置为 0 或 1。</li>\n<li>GETBIT：获取位图中指定位置的位的值。</li>\n<li>BITCOUNT：计算位图中置为 1 的位的数量。</li>\n<li>BITOP：对多个位图执行逻辑运算（AND、OR、XOR、NOT）。</li>\n<li>BITFIELD：执行复杂的位字段操作，允许你在位图上进行位级别的读写操作。<br>其中，用的最多的是前三个操作，示例如下：<img src=\"/2024/04/02/Redis%E5%AD%A6%E4%B9%A05-Redis%E5%BA%94%E7%94%A8%E4%B9%8B%E7%AD%BE%E5%88%B0/1.png\" class=\"\">\n位图的应用十分广泛，包括但不限于以下几方面：<br>● 统计用户活跃度：可以使用位图追踪用户的登录活动，每个用户对应一个位图，每天的登录状态可以用一个二进制位表示，通过 BITOP 命令可以计算多个用户的交集，从而得到活跃用户的统计信息。<br>● 数据压缩：位图可以高效地存储大量的二进制数据，比如布隆过滤器（Bloom Filter）就是基于位图实现的一种数据结构，用于快速判断元素是否存在。<br>● 事件计数：可以使用位图记录每天不同时间段的事件发生情况，比如网站的访问量，每个时间段对应一个位图，每次事件发生时将对应的位设置为 1，通过 BITCOUNT 命令可以计算出每个时间段的事件数量。<br>● 权限管理：可以使用位图来管理用户的权限，每个用户对应一个位图，每个权限对应一个二进制位，通过 BITOP 命令可以进行权限的并集、交集等操作。</li>\n</ol>\n<h3 id=\"2-RedisTemplate操作位图\"><a href=\"#2-RedisTemplate操作位图\" class=\"headerlink\" title=\"2. RedisTemplate操作位图\"></a>2. RedisTemplate操作位图</h3><p>在之前的几篇文章中，我们总结了一个Redis工具类，但是那个工具类中，并没有和位图相关的操作，这里添加和位图操作相关的方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">// value: true为1， false为0</span><br> <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">setBit</span><span class=\"hljs-params\">(String key, <span class=\"hljs-type\">int</span> offset, <span class=\"hljs-type\">boolean</span> value)</span> &#123;<br>     <span class=\"hljs-keyword\">return</span> redisTemplate.opsForValue().setBit(key, offset, value);<br> &#125;<br><br> <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">getBit</span><span class=\"hljs-params\">(String key, <span class=\"hljs-type\">int</span> offset)</span> &#123;<br>     <span class=\"hljs-keyword\">return</span> redisTemplate.opsForValue().getBit(key, offset);<br> &#125;<br><br> <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">  * 统计对应值为1 的数量</span><br><span class=\"hljs-comment\">  * <span class=\"hljs-doctag\">@param</span> key</span><br><span class=\"hljs-comment\">  * <span class=\"hljs-doctag\">@return</span></span><br><span class=\"hljs-comment\">  */</span><br> <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">long</span> <span class=\"hljs-title function_\">bitCount</span><span class=\"hljs-params\">(String key)</span> &#123;<br>     <span class=\"hljs-keyword\">if</span> (StringUtils.isEmpty(key)) &#123;<br>         <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0L</span>;<br>     &#125;<br>     <span class=\"hljs-keyword\">return</span> redisTemplate.execute((RedisCallback&lt;Long&gt;) con -&gt; con.bitCount(key.getBytes()));<br> &#125;<br><br> <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">  * 统计在字节范围内，对应值为1的数量</span><br><span class=\"hljs-comment\">  * <span class=\"hljs-doctag\">@param</span> key</span><br><span class=\"hljs-comment\">  * <span class=\"hljs-doctag\">@param</span> start</span><br><span class=\"hljs-comment\">  * <span class=\"hljs-doctag\">@param</span> end</span><br><span class=\"hljs-comment\">  * <span class=\"hljs-doctag\">@return</span></span><br><span class=\"hljs-comment\">  */</span><br> <span class=\"hljs-keyword\">public</span> Long <span class=\"hljs-title function_\">bitCount</span><span class=\"hljs-params\">(String key, <span class=\"hljs-type\">long</span> start, <span class=\"hljs-type\">long</span> end)</span> &#123;<br>     <span class=\"hljs-keyword\">return</span> redisTemplate.execute((RedisCallback&lt;Long&gt;) con -&gt; con.bitCount(key.getBytes(), start, end));<br> &#125;<br></code></pre></td></tr></table></figure>\n<p>添加测试类，用于测试位图操作：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> org.example;<br><br><span class=\"hljs-keyword\">import</span> org.example.util.RedisUtils;<br><span class=\"hljs-keyword\">import</span> org.junit.jupiter.api.Test;<br><span class=\"hljs-keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class=\"hljs-keyword\">import</span> org.springframework.boot.test.context.SpringBootTest;<br><br><span class=\"hljs-meta\">@SpringBootTest</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">RedisBitMapTest</span> &#123;<br>    <span class=\"hljs-meta\">@Autowired</span><br>    <span class=\"hljs-keyword\">private</span> RedisUtils redisUtils;<br><br>    <span class=\"hljs-meta\">@Test</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">testBitMap</span><span class=\"hljs-params\">()</span> &#123;<br>        redisUtils.setBit(<span class=\"hljs-string\">&quot;bit&quot;</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-literal\">true</span>);<br>        redisUtils.setBit(<span class=\"hljs-string\">&quot;bit&quot;</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-literal\">true</span>);<br>        redisUtils.setBit(<span class=\"hljs-string\">&quot;bit&quot;</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-literal\">true</span>);<br>        redisUtils.setBit(<span class=\"hljs-string\">&quot;bit&quot;</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-literal\">true</span>);<br>        System.out.println(redisUtils.bitCount(<span class=\"hljs-string\">&quot;bit&quot;</span>));<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>执行结果如下：</p>\n<img src=\"/2024/04/02/Redis%E5%AD%A6%E4%B9%A05-Redis%E5%BA%94%E7%94%A8%E4%B9%8B%E7%AD%BE%E5%88%B0/2.png\" class=\"\">\n<p>我们通过Redis可视化工具，查看bit的值，可以看出其二进制值与我们操作的一致</p>\n<img src=\"/2024/04/02/Redis%E5%AD%A6%E4%B9%A05-Redis%E5%BA%94%E7%94%A8%E4%B9%8B%E7%AD%BE%E5%88%B0/3.png\" class=\"\">\n<h3 id=\"3-位图应用之签到\"><a href=\"#3-位图应用之签到\" class=\"headerlink\" title=\"3. 位图应用之签到\"></a>3. 位图应用之签到</h3><p>在很多时候，我们遇到用户签到的场景，用户进入应用时，获取用户当天的签到情况，如果没有签到，用户可以签到，一般这种功能，可以通过set数据结构或bitMap来实现，但bitMap和set相比，其占用的空间更小，因此我们选择使用bitMap来实现签到的功能。<br>SignService：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> org.example.util;<br><br><span class=\"hljs-keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class=\"hljs-keyword\">import</span> org.springframework.data.redis.connection.BitFieldSubCommands;<br><span class=\"hljs-keyword\">import</span> org.springframework.data.redis.core.RedisTemplate;<br><span class=\"hljs-keyword\">import</span> org.springframework.stereotype.Service;<br><br><span class=\"hljs-keyword\">import</span> java.time.LocalDate;<br><span class=\"hljs-keyword\">import</span> java.util.List;<br><br><span class=\"hljs-meta\">@Service</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">SignService</span> &#123;<br>    <span class=\"hljs-meta\">@Autowired</span><br>    <span class=\"hljs-keyword\">private</span> RedisUtils redisUtils;<br><br>    <span class=\"hljs-meta\">@Autowired</span><br>    <span class=\"hljs-keyword\">private</span> RedisTemplate&lt;String, Object&gt; redisTemplate;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 签到</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@param</span> id</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">sign</span><span class=\"hljs-params\">(Integer id)</span> &#123;<br>        <span class=\"hljs-type\">LocalDate</span> <span class=\"hljs-variable\">now</span> <span class=\"hljs-operator\">=</span> LocalDate.now();<br>        <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">key</span> <span class=\"hljs-operator\">=</span> buildCacheKey(id, now);<br>        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">dayOfMonth</span> <span class=\"hljs-operator\">=</span> now.getDayOfMonth();<br><br>        <span class=\"hljs-comment\">// 签到</span><br>        redisUtils.setBit(key, dayOfMonth, <span class=\"hljs-literal\">true</span>);<br>    &#125;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 判断是否签到</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">isSign</span><span class=\"hljs-params\">(Integer id)</span> &#123;<br>        <span class=\"hljs-type\">LocalDate</span> <span class=\"hljs-variable\">now</span> <span class=\"hljs-operator\">=</span> LocalDate.now();<br>        <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">key</span> <span class=\"hljs-operator\">=</span> buildCacheKey(id, now);<br>        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">dayOfMonth</span> <span class=\"hljs-operator\">=</span> now.getDayOfMonth();<br>        <span class=\"hljs-keyword\">return</span> redisUtils.getBit(key, dayOfMonth);<br>    &#125;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 获取当月的签到次数</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@param</span> id</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@return</span></span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-keyword\">public</span> Long <span class=\"hljs-title function_\">getSignCountOfThisMonth</span><span class=\"hljs-params\">(Integer id)</span> &#123;<br>        <span class=\"hljs-type\">LocalDate</span> <span class=\"hljs-variable\">now</span> <span class=\"hljs-operator\">=</span> LocalDate.now();<br>        <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">key</span> <span class=\"hljs-operator\">=</span> buildCacheKey(id, now);<br>        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">dayOfMonth</span> <span class=\"hljs-operator\">=</span> now.getDayOfMonth();<br>        List&lt;Long&gt; result = redisTemplate.opsForValue().bitField(key,<br>                BitFieldSubCommands.create()<br>                        .get(BitFieldSubCommands.BitFieldType.unsigned(dayOfMonth)).valueAt(<span class=\"hljs-number\">1</span>));<br>        <span class=\"hljs-keyword\">if</span> (result == <span class=\"hljs-literal\">null</span> || result.isEmpty()) &#123;<br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0L</span>;<br>        &#125;<br>        <span class=\"hljs-type\">Long</span> <span class=\"hljs-variable\">num</span> <span class=\"hljs-operator\">=</span> result.get(<span class=\"hljs-number\">0</span>);<br>        <span class=\"hljs-keyword\">if</span> (num == <span class=\"hljs-literal\">null</span> || num == <span class=\"hljs-number\">0</span>) &#123;<br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0L</span>;<br>        &#125;<br><br>        <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">binaryStr</span> <span class=\"hljs-operator\">=</span> Long.toString(num, <span class=\"hljs-number\">2</span>);<br><br>        <span class=\"hljs-type\">long</span> <span class=\"hljs-variable\">count</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>;<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; binaryStr.length(); i++) &#123;<br>            <span class=\"hljs-type\">char</span> <span class=\"hljs-variable\">ch</span> <span class=\"hljs-operator\">=</span> binaryStr.charAt(i);<br>            <span class=\"hljs-keyword\">if</span> (ch == <span class=\"hljs-string\">&#x27;1&#x27;</span>) &#123;<br>                count ++;<br>            &#125;<br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> count;<br>    &#125;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 获取本月连续签到次数</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@param</span> id</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@return</span></span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-keyword\">public</span> Long <span class=\"hljs-title function_\">getContinuousSignCountOfThisMonth</span><span class=\"hljs-params\">(Integer id)</span> &#123;<br>        <span class=\"hljs-type\">LocalDate</span> <span class=\"hljs-variable\">now</span> <span class=\"hljs-operator\">=</span> LocalDate.now();<br>        <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">key</span> <span class=\"hljs-operator\">=</span> buildCacheKey(id, now);<br>        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">dayOfMonth</span> <span class=\"hljs-operator\">=</span> now.getDayOfMonth();<br>        List&lt;Long&gt; result = redisTemplate.opsForValue().bitField(key,<br>                BitFieldSubCommands.create()<br>                        .get(BitFieldSubCommands.BitFieldType.unsigned(dayOfMonth)).valueAt(<span class=\"hljs-number\">1</span>));<br>        <span class=\"hljs-keyword\">if</span> (result == <span class=\"hljs-literal\">null</span> || result.isEmpty()) &#123;<br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0L</span>;<br>        &#125;<br>        <span class=\"hljs-type\">Long</span> <span class=\"hljs-variable\">num</span> <span class=\"hljs-operator\">=</span> result.get(<span class=\"hljs-number\">0</span>);<br>        <span class=\"hljs-keyword\">if</span> (num == <span class=\"hljs-literal\">null</span> || num == <span class=\"hljs-number\">0</span>) &#123;<br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0L</span>;<br>        &#125;<br><br>        <span class=\"hljs-type\">long</span> <span class=\"hljs-variable\">count</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>;<br>        <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-literal\">true</span>) &#123;<br>            <span class=\"hljs-keyword\">if</span> ((num &amp; <span class=\"hljs-number\">1</span>) == <span class=\"hljs-number\">0</span>) &#123;<br>                <span class=\"hljs-keyword\">break</span>;<br>            &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>                count ++;<br>            &#125;<br>            num &gt;&gt;&gt;= <span class=\"hljs-number\">1</span>;<br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> count;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">private</span> String <span class=\"hljs-title function_\">buildCacheKey</span><span class=\"hljs-params\">(Integer id, LocalDate localDate)</span> &#123;<br>        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">year</span> <span class=\"hljs-operator\">=</span> localDate.getYear();<br>        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">monthValue</span> <span class=\"hljs-operator\">=</span> localDate.getMonthValue();<br>        <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">key</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;sign:&quot;</span> + year + <span class=\"hljs-string\">&quot;:&quot;</span> + monthValue + <span class=\"hljs-string\">&quot;:&quot;</span> + id;<br>        <span class=\"hljs-keyword\">return</span> key;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>测试代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Autowired</span><br>    <span class=\"hljs-keyword\">private</span> SignService signService;<br><br>    <span class=\"hljs-meta\">@Test</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">testSign</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-comment\">// 签到</span><br>        signService.sign(<span class=\"hljs-number\">1</span>);<br><br>        <span class=\"hljs-comment\">// 判断是否签到</span><br>        System.out.println(<span class=\"hljs-string\">&quot;是否签到：&quot;</span> + signService.isSign(<span class=\"hljs-number\">1</span>));<br><br>        <span class=\"hljs-comment\">// 获取当月的签到次数</span><br>        System.out.println(<span class=\"hljs-string\">&quot;当月的签到次数：&quot;</span> + signService.getSignCountOfThisMonth(<span class=\"hljs-number\">1</span>));<br><br>        <span class=\"hljs-comment\">// 获取当月的连续签到次数</span><br>        System.out.println(<span class=\"hljs-string\">&quot;当月连续签到次数：&quot;</span> + signService.getContinuousSignCountOfThisMonth(<span class=\"hljs-number\">1</span>));<br>    &#125;<br></code></pre></td></tr></table></figure>\n<p>运行结果如下：</p>\n<img src=\"/2024/04/02/Redis%E5%AD%A6%E4%B9%A05-Redis%E5%BA%94%E7%94%A8%E4%B9%8B%E7%AD%BE%E5%88%B0/4.png\" class=\"\">"},{"title":"Redis学习6—Redis分布式锁","date":"2024-04-02T13:37:06.000Z","_content":"### 1. 引言\n#### 1.1. 分布式锁\n分布式锁（Distributed Lock）是一种用于分布式系统中实现互斥访问的机制，在分布式系统中，多个节点同时访问共享资源可能导致数据不一致或竞态条件的问题，分布式锁通过协调多个节点之间的访问，确保在同一时间只有一个节点能获得对共享资源的独占访问权限，从而解决并发访问问题。\n#### 1.2. 分布式锁实现方式\n常用的分布式锁实现方式有：\n1）基于数据库的分布式锁（乐观锁)：使用数据库的事务特性和唯一约束来实现分布式锁。通过在数据库中创建一个特定的表或记录来表示锁的状态，节点可以通过获取或释放该记录来获取或释放锁。\n2）基于缓存的分布式锁：使用分布式缓存系统（如Redis）的原子操作来实现分布式锁，节点可以通过在缓存中设置一个特定的键值对来获取锁，并利用缓存的原子性操作来保证锁的互斥性。\n3）基于zookeeper的分布式锁：zookeeper是一个分布式协调服务，可以用于实现分布式锁，节点可以通过在zookeeper中创建一个临时有序节点来表示锁的占用状态，通过比较节点 的序号来确定锁的拥有权。\n\n### 2. 基于数据库的分布式锁（乐观锁）\n基于数据库的分布式锁实现方案，一般是在表中加一个字段，用于表示版本号，当读取数据时，会读取对应的版本号，在更新数据的时候，也会相应的更新版本号（比如版本号递增），且在更新数据的时候，会判断当前版本号是否正确，以账户余额修改为例，具体流程如下：\n1）查询账户信息（此时从数据库中查出的版本号为version1)\n2）根据请求对账户对象进行操作\n3）更新数据库(update t_account set 字段=新值, version = version + 1 where id = #{accountId} and version = version1的值)\n在这个过程中，最重要的就是更新sql的语句，也就是在更新的时候，判断版本号是否被修改过，只有没有被修改过，我们才能更新成功。\n示例如下：\n首先，我们创建一个账户表：\n{% asset_img 1.png %}\n然后在账户表上插入一条数据，假设账户中有1000元\n{% asset_img 2.png %}\n对应的实体类和mapper：\n```java\n@TableName(value = \"t_account\")\n@Data\npublic class Account implements Serializable {\n    @TableId(type = IdType.AUTO)\n    private Integer id;\n\n    private Integer userId;\n\n    private Integer balance;\n\n    private Date createTime;\n\n    private Date updateTime;\n\n    private Integer version;\n}\n\n\n\n@Mapper\npublic interface AccountMapper extends BaseMapper<Account> {\n}\n```\n然后我们创建一个AccountService，先演示没有乐观锁时，会造成的问题\n```java\npackage org.example.service;\n\nimport org.example.mapper.AccountMapper;\nimport org.example.pojo.Account;\nimport org.example.request.account.TakeOutMoneyRequest;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\n\nimport java.util.Date;\n\n@Service\npublic class AccountService {\n    @Autowired\n    private AccountMapper accountMapper;\n\n    public boolean takeOutMoneyWithoutOpLock(TakeOutMoneyRequest request) throws InterruptedException {\n        Integer accountId = request.getAccountId();\n        Account account = accountMapper.selectById(accountId);\n        if (account.getBalance() - request.getMoney() < 0) {\n            System.out.println(\"余额不足==============\");\n            return false;\n        }\n        Thread.sleep(1000);\n\n        account.setBalance(account.getBalance() - request.getMoney());\n        account.setUpdateTime(new Date());\n        return accountMapper.updateById(account) > 0;\n    }\n}\n```\n添加一个测试类，用于演示并发情况下，账户余额的减少\n```java\npackage org.example.service;\n\nimport org.example.mapper.AccountMapper;\nimport org.example.pojo.Account;\nimport org.example.request.account.TakeOutMoneyRequest;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\n\nimport java.util.Date;\n\n@Service\npublic class AccountService {\n    @Autowired\n    private AccountMapper accountMapper;\n\n    public boolean takeOutMoneyWithoutOpLock(TakeOutMoneyRequest request) throws InterruptedException {\n        Integer accountId = request.getAccountId();\n        Account account = accountMapper.selectById(accountId);\n        if (account.getBalance() - request.getMoney() < 0) {\n            System.out.println(\"余额不足==============\");\n            return false;\n        }\n        Thread.sleep(1000);\n\n        account.setBalance(account.getBalance() - request.getMoney());\n        account.setUpdateTime(new Date());\n        return accountMapper.updateById(account) > 0;\n    }\n}\n```\n运行测试方法，结果如下图所示，说明都更新成功了\n{% asset_img 3.png %}\n然后查看数据库：\n{% asset_img 4.png %}\n如上图所示，原先我们的账户余额是1000元，每次扣除100元，经过10次扣减后，账户余额应该为0，但是因为并发问题，导致查询的时候，有多个请求查询到同一个值，最后导致数据不一致。\n我们修改Account，添加使用乐观锁进行扣减余额的方法：\n```java\n   public boolean takeOutMoneyWithOpLock(TakeOutMoneyRequest request) throws InterruptedException {\n        Integer accountId = request.getAccountId();\n        Account account = accountMapper.selectById(accountId);\n        if (account.getBalance() - request.getMoney() < 0) {\n            System.out.println(\"余额不足==============\");\n            return false;\n        }\n        Thread.sleep(1000);\n\n        LambdaUpdateWrapper<Account> lambdaUpdateWrapper = new LambdaUpdateWrapper<>();\n        lambdaUpdateWrapper.set(Account::getVersion, account.getVersion() + 1)\n                .set(Account::getUpdateTime, new Date())\n                        .set(Account::getBalance, account.getBalance() - request.getMoney())\n                                .eq(Account::getVersion, account.getVersion())\n                                        .eq(Account::getId, request.getAccountId());\n        return accountMapper.update(account, lambdaUpdateWrapper) > 0;\n    }\n```\n我们把金额修改回1000，然后添加测试方法：\n```java\n @Test\n    public void testTakeoutMoneyWithOpLock() throws ExecutionException, InterruptedException {\n        ExecutorService executorService = Executors.newFixedThreadPool(5);\n        Callable<Boolean> takeoutTask = () -> {\n            TakeOutMoneyRequest request = new TakeOutMoneyRequest();\n            request.setAccountId(1);\n            request.setMoney(100);\n            try {\n                return accountService.takeOutMoneyWithOpLock(request);\n            } catch (InterruptedException e) {\n                return false;\n            }\n        };\n        List<Future<Boolean>> futureList = new ArrayList<>();\n        for (int i = 0; i < 10; i++) {\n            Future<Boolean> future = executorService.submit(takeoutTask);\n            futureList.add(future);\n        }\n\n        for (Future<Boolean> future : futureList) {\n            System.out.println(future.get());\n        }\n    }\n```\n运行测试方法，结果如下，说明只有两次更新成功了，其余的更新，都以为乐观锁被修改了，导致更新失败\n{% asset_img 5.png %}\n然后我们查看数据库，结果如下，因为扣减了两次，所有余额为800，这个数据对的上。\n{% asset_img 6.png %}\n乐观锁的实现思路，是基于对并发更新的乐观假设，也就是认为冲突的概率较低，因此在读取和提交数据时进行版本号或时间戳的比较，而不是在数据访问阶段进行加锁操作，避免了显示的锁竞争，提高了并发性能。但乐观锁并不能完全消除并发冲突，只是在提交数据时进行冲突检测和处理，如果系统中的并发冲突非常频繁，乐观锁的效率可能会下降。\n### 3. 基于Redis的分布式锁\n#### 3.1. 基于Redis的SETNX实现分布式锁\nSETNX指的是set if not exist，也就是当key不存在的时候，设置key的值，存在的话，什么都不做, 其语法为:\n```\nset key value nx\n```\n如果我们要设置过期时间的话，可以使用\n```\nset key value ex 时间 nx\n```\n如下图所示，在使用nx指令的时候，只有在该key不存在的时候，才能设置成功\n{% asset_img 7.png %}\n我们修改之前的RedisUtils工具类，添加上和这两条指令相关的方法：\n```java\n public boolean setIfAbsent(String key, Object value) {\n        return redisTemplate.opsForValue().setIfAbsent(key, value);\n    }\n\n    /**\n     * 不存在时设置值，适用与分布式锁的场景\n     * @param key\n     * @param value\n     * @param time\n     * @return\n     */\n    public boolean setIfAbsent(String key, Object value, long time) {\n        return setIfAbsent(key, value, time, TimeUnit.SECONDS);\n    }\n\n    public boolean setIfAbsent(String key, Object value, long time, TimeUnit timeUnit) {\n        return redisTemplate.opsForValue().setIfAbsent(key, value, time, timeUnit);\n    }\n```\n##### 3.1.1. 通过setnx实现分布式锁\n具体流程如下：\n{% asset_img 24.png %}\n我们修改AccountService，添加和该指令相关的方法：\n```java\n  @Autowired\n    private RedisUtils redisUtils;\n\n    public boolean takeOutMoneyWithSetnx(TakeOutMoneyRequest request) {\n        Integer accountId = request.getAccountId();\n        String key = \"lock::\" + accountId;\n\n        boolean lock = redisUtils.setIfAbsent(key, request.getAccountId());\n        if (!lock) {\n            // 加锁失败，返回\n            return false;\n        }\n        // 加锁成功\n        try {\n            Account account = accountMapper.selectById(accountId);\n            account.setBalance(account.getBalance() - request.getMoney());\n            account.setUpdateTime(new Date());\n            return accountMapper.updateById(account) > 0;\n        } finally {\n            // 释放锁\n            redisUtils.removeKey(key);\n        }\n    }\n```\n添加测试方法：\n```java\n@Test\n    public void testTakeoutMoneyWithSetnx() throws ExecutionException, InterruptedException {\n        ExecutorService executorService = Executors.newFixedThreadPool(5);\n        Callable<Boolean> takeoutTask = () -> {\n            TakeOutMoneyRequest request = new TakeOutMoneyRequest();\n            request.setAccountId(1);\n            request.setMoney(100);\n            return accountService.takeOutMoneyWithSetnx(request);\n        };\n        List<Future<Boolean>> futureList = new ArrayList<>();\n        for (int i = 0; i < 10; i++) {\n            Future<Boolean> future = executorService.submit(takeoutTask);\n            futureList.add(future);\n        }\n\n        for (Future<Boolean> future : futureList) {\n            System.out.println(future.get());\n        }\n    }\n```\n测试结果如下：\n{% asset_img 8.png %}\n我们查看数据库，确实只扣减了100\n{% asset_img 9.png %}\n这里冲突次数比较多，因此更新的效率有点低，我们可以将对应的方法修改一下，加上重试，修改代码如下：\n```java\n  @Autowired\n    private RedisUtils redisUtils;\n\n    public boolean takeOutMoneyWithSetnx(TakeOutMoneyRequest request) {\n        Integer accountId = request.getAccountId();\n        String key = \"lock::\" + accountId;\n\n        boolean lock = redisUtils.setIfAbsent(key, request.getAccountId());\n        if (lock) {\n            // 加锁成功\n            try {\n                Account account = accountMapper.selectById(accountId);\n                account.setBalance(account.getBalance() - request.getMoney());\n                account.setUpdateTime(new Date());\n                return accountMapper.updateById(account) > 0;\n            } finally {\n                // 释放锁\n                redisUtils.removeKey(key);\n            }\n        }\n        // 加锁失败，进行重试\n        try {\n            Thread.sleep(100);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n        return takeOutMoneyWithSetnx(request);\n    }\n```\n这里休眠了一段时间，是因为要涉及到递归调用，可能会导致栈空间溢出，我们再次执行测试代码，结果如下，经过重试后，执行成功率变高。\n{% asset_img 10.png %}\n查看数据库，确实扣减了10次。\n{% asset_img 11.png %}\n但是，使用set key value nx存在一个问题，如果setnx占锁成功，但是服务器宕机了，没有执行删除锁的逻辑，那么就会造成这个锁一直没有被释放，最终导致死锁。\n##### 3.1.2. setnx with expire\n为解决setnx造成的死锁问题，我们在setnx的基础上，加上过期时间，来解决上述问题。我们给AccountService添加上对应的方法如下：\n```java\n public boolean takeOutMoneyWithSetnxExpire(TakeOutMoneyRequest request) {\n        Integer accountId = request.getAccountId();\n        String key = \"lock::\" + accountId;\n        \n        // 占有锁并设置过期时间\n        boolean lock = redisUtils.setIfAbsent(key, request.getAccountId(), TTL);\n        if (lock) {\n            // 加锁成功\n            try {\n                Account account = accountMapper.selectById(accountId);\n                account.setBalance(account.getBalance() - request.getMoney());\n                account.setUpdateTime(new Date());\n                return accountMapper.updateById(account) > 0;\n            } finally {\n                // 释放锁\n                redisUtils.removeKey(key);\n            }\n        }\n        // 加锁失败，进行重试\n        try {\n            Thread.sleep(100);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n        return takeOutMoneyWithSetnx(request);\n    }\n```\n添加上对应的测试方法：\n```java\n@Test\n    public void testTakeoutMoneyWithSetnxExpire() throws ExecutionException, InterruptedException {\n        ExecutorService executorService = Executors.newFixedThreadPool(5);\n        Callable<Boolean> takeoutTask = () -> {\n            TakeOutMoneyRequest request = new TakeOutMoneyRequest();\n            request.setAccountId(1);\n            request.setMoney(100);\n            return accountService.takeOutMoneyWithSetnxExpire(request);\n        };\n        List<Future<Boolean>> futureList = new ArrayList<>();\n        for (int i = 0; i < 10; i++) {\n            Future<Boolean> future = executorService.submit(takeoutTask);\n            futureList.add(future);\n        }\n\n        for (Future<Boolean> future : futureList) {\n            System.out.println(future.get());\n        }\n    }\n```\n测试结果如下：\n{% asset_img 12.png %}\n我们 查看数据库，数据库也确实扣减了10次\n{% asset_img 13.png %}\n但是，这个方案还是有一定缺陷，因为我们设置的这个过期时间，是根据我们的经验设置的，而业务代码的执行时长，是不确定的，那么可能存在这种情况，假设我们现在有三个请求过来，我们设置的过期时间是100ms\n1）请求A占锁成功，执行业务代码\n2）请求A执行100ms后，锁过期，但此时请求A的业务代码还未执行完毕\n3）请求B占锁成功，执行业务代码\n4）请求A执行完毕，执行释放锁的逻辑，导致把B占有的锁打开了\n5）请求C占锁成功，执行业务代码\n6）请求B执行完毕，执行释放锁的逻辑，导致把C占有的锁打开了\n这里是因为，这三个请求占有的锁的key都是相同的，而我们在释放锁的时候，只是执行删除key的命令，并不在意这个锁是谁占有的。\n这种情况，我们可以通过lua脚本来解决，思路如下：\n1）占锁的时候，设置value值为用户标识\n2）释放锁的时候，通过lua脚本，判断此时key对应的value值，与传入值是否相同，只有相同的时候，我们才执行删除key的逻辑。\n我们修改刚才的方法，如下，在占锁的时候，我们设置value值为当前的线程id（这里是为了演示，实际业务场景中，应该是多个用户抢占同一个资源，因此可以将vlaue值设置为用户的标识，比如用户id），然后在释放资源的时候，执行lua脚本，判断value值是否相同，相同则执行删除操作。\n```java\n  @Autowired\n    private RedisTemplate<String, Object> redisTemplate;\n    \n   public boolean takeOutMoneyWithSetnxExpire(TakeOutMoneyRequest request) {\n        Integer accountId = request.getAccountId();\n        String key = \"lock::\" + accountId;\n\n        long threadId = Thread.currentThread().getId();\n        // 占有锁并设置过期时间\n        boolean lock = redisUtils.setIfAbsent(key, threadId, TTL);\n        if (lock) {\n            // 加锁成功\n            try {\n                Account account = accountMapper.selectById(accountId);\n                account.setBalance(account.getBalance() - request.getMoney());\n                account.setUpdateTime(new Date());\n                return accountMapper.updateById(account) > 0;\n            } finally {\n                // 释放锁\n                // lua脚本\n                String script = \"if redis.call('get', KEYS[1]) == ARGV[1] then return redis.call('del', KEYS[1]) else return 0 end\";\n                redisTemplate.execute(new DefaultRedisScript<Long>(script, Long.class), Arrays.asList(key), threadId);\n            }\n        }\n        // 加锁失败，进行重试\n        try {\n            Thread.sleep(100);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n        return takeOutMoneyWithSetnx(request);\n    }\n```\n再次执行测试代码：\n{% asset_img 14.png %}\n查看数据库，确实减少10次\n{% asset_img 15.png %}\n但这里还有一个问题没有解决，因为我们设置的TTL，是我们的经验值，不准确，所以还是会存在，某个请求占有锁后，还没执行完毕，锁过期了，被另外一个请求占有，此时会出现两个请求都认为自己占有锁的情况。\n#### 3.2. Redisson\n##### 3.2.1. 简介\nRedisson是一个在Redis基础上实现的Java驻内存数据网络，它不仅提供一系列的分布式java常用对象，还提供许多分布式服务，其宗旨是促进使用者对Redis的关注分离（Separation of Concern），从而让使用者能将精力更多集中在处理业务逻辑上。\n{% asset_img 16.png %}\n##### 3.2.2. SpringBoot 整合Redisson\n引入redisson的maven依赖：\n```xml\n<dependency>\n            <groupId>org.redisson</groupId>\n            <artifactId>redisson</artifactId>\n            <version>3.15.5</version>\n        </dependency>\n```\n然后自定义配置类（这里使用的是单节点Redis配置）\n```java\npackage org.example.config;\n\nimport org.redisson.Redisson;\nimport org.redisson.api.RedissonClient;\nimport org.redisson.config.Config;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\n@Configuration\npublic class RedissonConfiguration {\n    \n    @Bean\n    public RedissonClient redisson() {\n        // 1. 创建配置\n        Config config = new Config();\n        // 集群模式\n//        config.useClusterServers().addNodeAddress(\"集群ip1\", \"集群id2\");\n        // 2. 根据Config创建出RedissonClient示例\n        config.useSingleServer().setAddress(\"redis://127.0.0.1:6379\");\n        return Redisson.create(config);\n    }\n}\n```\n我们添加测试方法，来测试redisson的一些基本操作：\n```java\npackage org.example;\n\nimport com.alibaba.fastjson.JSONObject;\nimport org.junit.jupiter.api.Test;\nimport org.redisson.api.*;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.test.context.SpringBootTest;\n\nimport java.util.concurrent.TimeUnit;\n\n@SpringBootTest\npublic class RedissonTest {\n    @Autowired\n    private RedissonClient redissonClient;\n\n    @Test\n    public void testRedisson() {\n        // 字符串操作\n        RBucket<Object> rBuck = redissonClient.getBucket(\"name\");\n        rBuck.set(\"cxy\", 30, TimeUnit.SECONDS);\n        System.out.println(redissonClient.getBucket(\"name\").get());\n\n        // 哈希操作\n        RMap<Object, Object> student = redissonClient.getMap(\"student\");\n        student.put(\"id\", 1);\n        student.put(\"name\", \"cxy\");\n        student.put(\"age\", 20);\n        student.expire(30, TimeUnit.SECONDS);\n\n        System.out.println(redissonClient.getMap(\"student\").get(\"name\"));\n\n        // 列表操作\n        RList<Object> schools = redissonClient.getList(\"schools\");\n        schools.add(\"华南理工大学\");\n        schools.add(\"中山大学\");\n        schools.add(\"暨南大学\");\n        System.out.println(JSONObject.toJSONString(redissonClient.getList(\"schools\")));\n\n        // 集合操作\n        RSet<Object> schoolSet = redissonClient.getSet(\"schoolSet\");\n        schoolSet.add(\"华南理工大学\");\n        schoolSet.add(\"中山大学\");\n        schoolSet.add(\"暨南大学\");\n        System.out.println(JSONObject.toJSONString(redissonClient.getSet(\"schoolSet\")));\n\n        // ZSet操作\n        RScoredSortedSet<Object> schoolScoreSet = redissonClient.getScoredSortedSet(\"schoolScoreSet\");\n        schoolScoreSet.add(100d, \"华南理工大学\");\n        schoolScoreSet.add(90d, \"中山大学\");\n        schoolScoreSet.add(80d, \"暨南大学\");\n        System.out.println(JSONObject.toJSONString(redissonClient.getScoredSortedSet(\"schoolScoreSet\")));\n    }\n}\n```\n结果如下：\n{% asset_img 17.png %}\n##### 3.2.3. Redisson分布式锁\nredisson加锁，可以使用lock方法，注意，在加锁的时候，处理完业务逻辑后要记得释放锁，测试代码如下：\n```java\n  @Test\n    public void testLock() throws ExecutionException, InterruptedException {\n        ExecutorService executorService = Executors.newFixedThreadPool(2);\n        Runnable lockTask = () -> {\n            try {\n                lock();\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        };\n        List< Future> futureList = new ArrayList<>();\n        for (int i = 0; i < 2; i++) {\n            futureList.add(executorService.submit(lockTask));\n        }\n        for (Future future : futureList) {\n            future.get();\n        }\n    }\n\n    private void lock() throws InterruptedException {\n        RLock myLock = redissonClient.getLock(\"myLock\");\n        myLock.lock();\n        try {\n            System.out.println(\"currentTime:\" + System.currentTimeMillis());\n            Thread.sleep(2000);\n            System.out.println(\"执行业务代码\");\n        } finally {\n            myLock.unlock();\n        }\n    }\n```\n测试结果如下，从执行结果可以看出，当多个线程抢占锁时，后面的锁，需要等待，即这个锁是阻塞的。\n{% asset_img 18.png %}\n如果不想阻塞的话，我们可以使用tryLock来上锁，结合刚才的accountService，我们先修改accountService，加上对应的方法\n```java\n @Autowired\n    private RedissonClient redissonClient;\n\n    public boolean takeoutMoneyWithRedissonTryLock(TakeOutMoneyRequest request) throws InterruptedException {\n        Integer accountId = request.getAccountId();\n        String key = \"lock::\" + accountId;\n\n        RLock lock = redissonClient.getLock(key);\n        if (lock.tryLock(2, 4, TimeUnit.SECONDS)) { // 过期时间为2秒，最长存活时间为4秒\n            // 上锁成功\n            try {\n                Thread.sleep(1000);\n                Account account = accountMapper.selectById(accountId);\n                account.setBalance(account.getBalance() - request.getMoney());\n                account.setUpdateTime(new Date());\n                return accountMapper.updateById(account) > 0;\n            } finally {\n                // 释放锁\n                lock.unlock();\n            }\n        }\n        return false;\n    }\n```\n添加测试方法：\n```java\n   @Test\n    public void testTakeoutMoneyWithRedissonTryLock() throws ExecutionException, InterruptedException {\n        ExecutorService executorService = Executors.newFixedThreadPool(5);\n        Callable<Boolean> takeoutTask = () -> {\n            TakeOutMoneyRequest request = new TakeOutMoneyRequest();\n            request.setAccountId(1);\n            request.setMoney(100);\n            return accountService.takeoutMoneyWithRedissonTryLock(request);\n        };\n        List<Future<Boolean>> futureList = new ArrayList<>();\n        for (int i = 0; i < 10; i++) {\n            Future<Boolean> future = executorService.submit(takeoutTask);\n            futureList.add(future);\n        }\n\n        for (Future<Boolean> future : futureList) {\n            System.out.println(future.get());\n        }\n    }\n```\n测试结果如下:\n{% asset_img 19.png %}\n查看数据库，减少的次数与上面的次数一致\n{% asset_img 20.png %}\n不过上面这种，成功率比较低，因此我们可以将tryLock改为lock方法，来上锁，我们修改accountService，添加相关方法：\n```java\n  public boolean takeoutMoneyWithRedissonLock(TakeOutMoneyRequest request) throws InterruptedException {\n        Integer accountId = request.getAccountId();\n        String key = \"lock::\" + accountId;\n\n        RLock lock = redissonClient.getLock(key);\n        lock.lock(2, TimeUnit.SECONDS);\n        // 上锁成功\n        try {\n            Thread.sleep(1000);\n            Account account = accountMapper.selectById(accountId);\n            account.setBalance(account.getBalance() - request.getMoney());\n            account.setUpdateTime(new Date());\n            return accountMapper.updateById(account) > 0;\n        } finally {\n            // 释放锁\n            lock.unlock();\n        }\n    }\n```\n添加测试方法：\n```java\n @Test\n    public void testTakeoutMoneyWithRedissonLock() throws ExecutionException, InterruptedException {\n        ExecutorService executorService = Executors.newFixedThreadPool(5);\n        Callable<Boolean> takeoutTask = () -> {\n            TakeOutMoneyRequest request = new TakeOutMoneyRequest();\n            request.setAccountId(1);\n            request.setMoney(100);\n            return accountService.takeoutMoneyWithRedissonLock(request);\n        };\n        List<Future<Boolean>> futureList = new ArrayList<>();\n        for (int i = 0; i < 10; i++) {\n            Future<Boolean> future = executorService.submit(takeoutTask);\n            futureList.add(future);\n        }\n\n        for (Future<Boolean> future : futureList) {\n            System.out.println(future.get());\n        }\n    }\n```\n测试结果如下：\n{% asset_img 21.png %}\n查看数据库，扣减次数确实为10次。\n{% asset_img 22.png %}\n##### 3.2.4. watch dog 看门狗机制\n{% asset_img 23.png %}\nRedisson中的分布式锁自带自动续期机制，其提供了一个专门用来监控和续期锁的Watch Dog（看门狗），如果操作共享资源的线程还没有执行完成的话，Watch Dog会不断延长锁的过期时间，从而保证锁不会因为超时而被释放。\n### 4. 参考文章\nhttps://zhuanlan.zhihu.com/p/374306005\nhttps://my.oschina.net/u/4499317/blog/5039486\nhttps://blog.csdn.net/qq_15071263/article/details/101277474\nhttps://www.cnblogs.com/jelly12345/p/14699492.html","source":"_posts/Redis学习6—Redis分布式锁.md","raw":"---\ntitle: Redis学习6—Redis分布式锁\ndate: 2024-04-02 21:37:06\ntags: \n    - 中间件\n    - Redis\n---\n### 1. 引言\n#### 1.1. 分布式锁\n分布式锁（Distributed Lock）是一种用于分布式系统中实现互斥访问的机制，在分布式系统中，多个节点同时访问共享资源可能导致数据不一致或竞态条件的问题，分布式锁通过协调多个节点之间的访问，确保在同一时间只有一个节点能获得对共享资源的独占访问权限，从而解决并发访问问题。\n#### 1.2. 分布式锁实现方式\n常用的分布式锁实现方式有：\n1）基于数据库的分布式锁（乐观锁)：使用数据库的事务特性和唯一约束来实现分布式锁。通过在数据库中创建一个特定的表或记录来表示锁的状态，节点可以通过获取或释放该记录来获取或释放锁。\n2）基于缓存的分布式锁：使用分布式缓存系统（如Redis）的原子操作来实现分布式锁，节点可以通过在缓存中设置一个特定的键值对来获取锁，并利用缓存的原子性操作来保证锁的互斥性。\n3）基于zookeeper的分布式锁：zookeeper是一个分布式协调服务，可以用于实现分布式锁，节点可以通过在zookeeper中创建一个临时有序节点来表示锁的占用状态，通过比较节点 的序号来确定锁的拥有权。\n\n### 2. 基于数据库的分布式锁（乐观锁）\n基于数据库的分布式锁实现方案，一般是在表中加一个字段，用于表示版本号，当读取数据时，会读取对应的版本号，在更新数据的时候，也会相应的更新版本号（比如版本号递增），且在更新数据的时候，会判断当前版本号是否正确，以账户余额修改为例，具体流程如下：\n1）查询账户信息（此时从数据库中查出的版本号为version1)\n2）根据请求对账户对象进行操作\n3）更新数据库(update t_account set 字段=新值, version = version + 1 where id = #{accountId} and version = version1的值)\n在这个过程中，最重要的就是更新sql的语句，也就是在更新的时候，判断版本号是否被修改过，只有没有被修改过，我们才能更新成功。\n示例如下：\n首先，我们创建一个账户表：\n{% asset_img 1.png %}\n然后在账户表上插入一条数据，假设账户中有1000元\n{% asset_img 2.png %}\n对应的实体类和mapper：\n```java\n@TableName(value = \"t_account\")\n@Data\npublic class Account implements Serializable {\n    @TableId(type = IdType.AUTO)\n    private Integer id;\n\n    private Integer userId;\n\n    private Integer balance;\n\n    private Date createTime;\n\n    private Date updateTime;\n\n    private Integer version;\n}\n\n\n\n@Mapper\npublic interface AccountMapper extends BaseMapper<Account> {\n}\n```\n然后我们创建一个AccountService，先演示没有乐观锁时，会造成的问题\n```java\npackage org.example.service;\n\nimport org.example.mapper.AccountMapper;\nimport org.example.pojo.Account;\nimport org.example.request.account.TakeOutMoneyRequest;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\n\nimport java.util.Date;\n\n@Service\npublic class AccountService {\n    @Autowired\n    private AccountMapper accountMapper;\n\n    public boolean takeOutMoneyWithoutOpLock(TakeOutMoneyRequest request) throws InterruptedException {\n        Integer accountId = request.getAccountId();\n        Account account = accountMapper.selectById(accountId);\n        if (account.getBalance() - request.getMoney() < 0) {\n            System.out.println(\"余额不足==============\");\n            return false;\n        }\n        Thread.sleep(1000);\n\n        account.setBalance(account.getBalance() - request.getMoney());\n        account.setUpdateTime(new Date());\n        return accountMapper.updateById(account) > 0;\n    }\n}\n```\n添加一个测试类，用于演示并发情况下，账户余额的减少\n```java\npackage org.example.service;\n\nimport org.example.mapper.AccountMapper;\nimport org.example.pojo.Account;\nimport org.example.request.account.TakeOutMoneyRequest;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\n\nimport java.util.Date;\n\n@Service\npublic class AccountService {\n    @Autowired\n    private AccountMapper accountMapper;\n\n    public boolean takeOutMoneyWithoutOpLock(TakeOutMoneyRequest request) throws InterruptedException {\n        Integer accountId = request.getAccountId();\n        Account account = accountMapper.selectById(accountId);\n        if (account.getBalance() - request.getMoney() < 0) {\n            System.out.println(\"余额不足==============\");\n            return false;\n        }\n        Thread.sleep(1000);\n\n        account.setBalance(account.getBalance() - request.getMoney());\n        account.setUpdateTime(new Date());\n        return accountMapper.updateById(account) > 0;\n    }\n}\n```\n运行测试方法，结果如下图所示，说明都更新成功了\n{% asset_img 3.png %}\n然后查看数据库：\n{% asset_img 4.png %}\n如上图所示，原先我们的账户余额是1000元，每次扣除100元，经过10次扣减后，账户余额应该为0，但是因为并发问题，导致查询的时候，有多个请求查询到同一个值，最后导致数据不一致。\n我们修改Account，添加使用乐观锁进行扣减余额的方法：\n```java\n   public boolean takeOutMoneyWithOpLock(TakeOutMoneyRequest request) throws InterruptedException {\n        Integer accountId = request.getAccountId();\n        Account account = accountMapper.selectById(accountId);\n        if (account.getBalance() - request.getMoney() < 0) {\n            System.out.println(\"余额不足==============\");\n            return false;\n        }\n        Thread.sleep(1000);\n\n        LambdaUpdateWrapper<Account> lambdaUpdateWrapper = new LambdaUpdateWrapper<>();\n        lambdaUpdateWrapper.set(Account::getVersion, account.getVersion() + 1)\n                .set(Account::getUpdateTime, new Date())\n                        .set(Account::getBalance, account.getBalance() - request.getMoney())\n                                .eq(Account::getVersion, account.getVersion())\n                                        .eq(Account::getId, request.getAccountId());\n        return accountMapper.update(account, lambdaUpdateWrapper) > 0;\n    }\n```\n我们把金额修改回1000，然后添加测试方法：\n```java\n @Test\n    public void testTakeoutMoneyWithOpLock() throws ExecutionException, InterruptedException {\n        ExecutorService executorService = Executors.newFixedThreadPool(5);\n        Callable<Boolean> takeoutTask = () -> {\n            TakeOutMoneyRequest request = new TakeOutMoneyRequest();\n            request.setAccountId(1);\n            request.setMoney(100);\n            try {\n                return accountService.takeOutMoneyWithOpLock(request);\n            } catch (InterruptedException e) {\n                return false;\n            }\n        };\n        List<Future<Boolean>> futureList = new ArrayList<>();\n        for (int i = 0; i < 10; i++) {\n            Future<Boolean> future = executorService.submit(takeoutTask);\n            futureList.add(future);\n        }\n\n        for (Future<Boolean> future : futureList) {\n            System.out.println(future.get());\n        }\n    }\n```\n运行测试方法，结果如下，说明只有两次更新成功了，其余的更新，都以为乐观锁被修改了，导致更新失败\n{% asset_img 5.png %}\n然后我们查看数据库，结果如下，因为扣减了两次，所有余额为800，这个数据对的上。\n{% asset_img 6.png %}\n乐观锁的实现思路，是基于对并发更新的乐观假设，也就是认为冲突的概率较低，因此在读取和提交数据时进行版本号或时间戳的比较，而不是在数据访问阶段进行加锁操作，避免了显示的锁竞争，提高了并发性能。但乐观锁并不能完全消除并发冲突，只是在提交数据时进行冲突检测和处理，如果系统中的并发冲突非常频繁，乐观锁的效率可能会下降。\n### 3. 基于Redis的分布式锁\n#### 3.1. 基于Redis的SETNX实现分布式锁\nSETNX指的是set if not exist，也就是当key不存在的时候，设置key的值，存在的话，什么都不做, 其语法为:\n```\nset key value nx\n```\n如果我们要设置过期时间的话，可以使用\n```\nset key value ex 时间 nx\n```\n如下图所示，在使用nx指令的时候，只有在该key不存在的时候，才能设置成功\n{% asset_img 7.png %}\n我们修改之前的RedisUtils工具类，添加上和这两条指令相关的方法：\n```java\n public boolean setIfAbsent(String key, Object value) {\n        return redisTemplate.opsForValue().setIfAbsent(key, value);\n    }\n\n    /**\n     * 不存在时设置值，适用与分布式锁的场景\n     * @param key\n     * @param value\n     * @param time\n     * @return\n     */\n    public boolean setIfAbsent(String key, Object value, long time) {\n        return setIfAbsent(key, value, time, TimeUnit.SECONDS);\n    }\n\n    public boolean setIfAbsent(String key, Object value, long time, TimeUnit timeUnit) {\n        return redisTemplate.opsForValue().setIfAbsent(key, value, time, timeUnit);\n    }\n```\n##### 3.1.1. 通过setnx实现分布式锁\n具体流程如下：\n{% asset_img 24.png %}\n我们修改AccountService，添加和该指令相关的方法：\n```java\n  @Autowired\n    private RedisUtils redisUtils;\n\n    public boolean takeOutMoneyWithSetnx(TakeOutMoneyRequest request) {\n        Integer accountId = request.getAccountId();\n        String key = \"lock::\" + accountId;\n\n        boolean lock = redisUtils.setIfAbsent(key, request.getAccountId());\n        if (!lock) {\n            // 加锁失败，返回\n            return false;\n        }\n        // 加锁成功\n        try {\n            Account account = accountMapper.selectById(accountId);\n            account.setBalance(account.getBalance() - request.getMoney());\n            account.setUpdateTime(new Date());\n            return accountMapper.updateById(account) > 0;\n        } finally {\n            // 释放锁\n            redisUtils.removeKey(key);\n        }\n    }\n```\n添加测试方法：\n```java\n@Test\n    public void testTakeoutMoneyWithSetnx() throws ExecutionException, InterruptedException {\n        ExecutorService executorService = Executors.newFixedThreadPool(5);\n        Callable<Boolean> takeoutTask = () -> {\n            TakeOutMoneyRequest request = new TakeOutMoneyRequest();\n            request.setAccountId(1);\n            request.setMoney(100);\n            return accountService.takeOutMoneyWithSetnx(request);\n        };\n        List<Future<Boolean>> futureList = new ArrayList<>();\n        for (int i = 0; i < 10; i++) {\n            Future<Boolean> future = executorService.submit(takeoutTask);\n            futureList.add(future);\n        }\n\n        for (Future<Boolean> future : futureList) {\n            System.out.println(future.get());\n        }\n    }\n```\n测试结果如下：\n{% asset_img 8.png %}\n我们查看数据库，确实只扣减了100\n{% asset_img 9.png %}\n这里冲突次数比较多，因此更新的效率有点低，我们可以将对应的方法修改一下，加上重试，修改代码如下：\n```java\n  @Autowired\n    private RedisUtils redisUtils;\n\n    public boolean takeOutMoneyWithSetnx(TakeOutMoneyRequest request) {\n        Integer accountId = request.getAccountId();\n        String key = \"lock::\" + accountId;\n\n        boolean lock = redisUtils.setIfAbsent(key, request.getAccountId());\n        if (lock) {\n            // 加锁成功\n            try {\n                Account account = accountMapper.selectById(accountId);\n                account.setBalance(account.getBalance() - request.getMoney());\n                account.setUpdateTime(new Date());\n                return accountMapper.updateById(account) > 0;\n            } finally {\n                // 释放锁\n                redisUtils.removeKey(key);\n            }\n        }\n        // 加锁失败，进行重试\n        try {\n            Thread.sleep(100);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n        return takeOutMoneyWithSetnx(request);\n    }\n```\n这里休眠了一段时间，是因为要涉及到递归调用，可能会导致栈空间溢出，我们再次执行测试代码，结果如下，经过重试后，执行成功率变高。\n{% asset_img 10.png %}\n查看数据库，确实扣减了10次。\n{% asset_img 11.png %}\n但是，使用set key value nx存在一个问题，如果setnx占锁成功，但是服务器宕机了，没有执行删除锁的逻辑，那么就会造成这个锁一直没有被释放，最终导致死锁。\n##### 3.1.2. setnx with expire\n为解决setnx造成的死锁问题，我们在setnx的基础上，加上过期时间，来解决上述问题。我们给AccountService添加上对应的方法如下：\n```java\n public boolean takeOutMoneyWithSetnxExpire(TakeOutMoneyRequest request) {\n        Integer accountId = request.getAccountId();\n        String key = \"lock::\" + accountId;\n        \n        // 占有锁并设置过期时间\n        boolean lock = redisUtils.setIfAbsent(key, request.getAccountId(), TTL);\n        if (lock) {\n            // 加锁成功\n            try {\n                Account account = accountMapper.selectById(accountId);\n                account.setBalance(account.getBalance() - request.getMoney());\n                account.setUpdateTime(new Date());\n                return accountMapper.updateById(account) > 0;\n            } finally {\n                // 释放锁\n                redisUtils.removeKey(key);\n            }\n        }\n        // 加锁失败，进行重试\n        try {\n            Thread.sleep(100);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n        return takeOutMoneyWithSetnx(request);\n    }\n```\n添加上对应的测试方法：\n```java\n@Test\n    public void testTakeoutMoneyWithSetnxExpire() throws ExecutionException, InterruptedException {\n        ExecutorService executorService = Executors.newFixedThreadPool(5);\n        Callable<Boolean> takeoutTask = () -> {\n            TakeOutMoneyRequest request = new TakeOutMoneyRequest();\n            request.setAccountId(1);\n            request.setMoney(100);\n            return accountService.takeOutMoneyWithSetnxExpire(request);\n        };\n        List<Future<Boolean>> futureList = new ArrayList<>();\n        for (int i = 0; i < 10; i++) {\n            Future<Boolean> future = executorService.submit(takeoutTask);\n            futureList.add(future);\n        }\n\n        for (Future<Boolean> future : futureList) {\n            System.out.println(future.get());\n        }\n    }\n```\n测试结果如下：\n{% asset_img 12.png %}\n我们 查看数据库，数据库也确实扣减了10次\n{% asset_img 13.png %}\n但是，这个方案还是有一定缺陷，因为我们设置的这个过期时间，是根据我们的经验设置的，而业务代码的执行时长，是不确定的，那么可能存在这种情况，假设我们现在有三个请求过来，我们设置的过期时间是100ms\n1）请求A占锁成功，执行业务代码\n2）请求A执行100ms后，锁过期，但此时请求A的业务代码还未执行完毕\n3）请求B占锁成功，执行业务代码\n4）请求A执行完毕，执行释放锁的逻辑，导致把B占有的锁打开了\n5）请求C占锁成功，执行业务代码\n6）请求B执行完毕，执行释放锁的逻辑，导致把C占有的锁打开了\n这里是因为，这三个请求占有的锁的key都是相同的，而我们在释放锁的时候，只是执行删除key的命令，并不在意这个锁是谁占有的。\n这种情况，我们可以通过lua脚本来解决，思路如下：\n1）占锁的时候，设置value值为用户标识\n2）释放锁的时候，通过lua脚本，判断此时key对应的value值，与传入值是否相同，只有相同的时候，我们才执行删除key的逻辑。\n我们修改刚才的方法，如下，在占锁的时候，我们设置value值为当前的线程id（这里是为了演示，实际业务场景中，应该是多个用户抢占同一个资源，因此可以将vlaue值设置为用户的标识，比如用户id），然后在释放资源的时候，执行lua脚本，判断value值是否相同，相同则执行删除操作。\n```java\n  @Autowired\n    private RedisTemplate<String, Object> redisTemplate;\n    \n   public boolean takeOutMoneyWithSetnxExpire(TakeOutMoneyRequest request) {\n        Integer accountId = request.getAccountId();\n        String key = \"lock::\" + accountId;\n\n        long threadId = Thread.currentThread().getId();\n        // 占有锁并设置过期时间\n        boolean lock = redisUtils.setIfAbsent(key, threadId, TTL);\n        if (lock) {\n            // 加锁成功\n            try {\n                Account account = accountMapper.selectById(accountId);\n                account.setBalance(account.getBalance() - request.getMoney());\n                account.setUpdateTime(new Date());\n                return accountMapper.updateById(account) > 0;\n            } finally {\n                // 释放锁\n                // lua脚本\n                String script = \"if redis.call('get', KEYS[1]) == ARGV[1] then return redis.call('del', KEYS[1]) else return 0 end\";\n                redisTemplate.execute(new DefaultRedisScript<Long>(script, Long.class), Arrays.asList(key), threadId);\n            }\n        }\n        // 加锁失败，进行重试\n        try {\n            Thread.sleep(100);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n        return takeOutMoneyWithSetnx(request);\n    }\n```\n再次执行测试代码：\n{% asset_img 14.png %}\n查看数据库，确实减少10次\n{% asset_img 15.png %}\n但这里还有一个问题没有解决，因为我们设置的TTL，是我们的经验值，不准确，所以还是会存在，某个请求占有锁后，还没执行完毕，锁过期了，被另外一个请求占有，此时会出现两个请求都认为自己占有锁的情况。\n#### 3.2. Redisson\n##### 3.2.1. 简介\nRedisson是一个在Redis基础上实现的Java驻内存数据网络，它不仅提供一系列的分布式java常用对象，还提供许多分布式服务，其宗旨是促进使用者对Redis的关注分离（Separation of Concern），从而让使用者能将精力更多集中在处理业务逻辑上。\n{% asset_img 16.png %}\n##### 3.2.2. SpringBoot 整合Redisson\n引入redisson的maven依赖：\n```xml\n<dependency>\n            <groupId>org.redisson</groupId>\n            <artifactId>redisson</artifactId>\n            <version>3.15.5</version>\n        </dependency>\n```\n然后自定义配置类（这里使用的是单节点Redis配置）\n```java\npackage org.example.config;\n\nimport org.redisson.Redisson;\nimport org.redisson.api.RedissonClient;\nimport org.redisson.config.Config;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\n@Configuration\npublic class RedissonConfiguration {\n    \n    @Bean\n    public RedissonClient redisson() {\n        // 1. 创建配置\n        Config config = new Config();\n        // 集群模式\n//        config.useClusterServers().addNodeAddress(\"集群ip1\", \"集群id2\");\n        // 2. 根据Config创建出RedissonClient示例\n        config.useSingleServer().setAddress(\"redis://127.0.0.1:6379\");\n        return Redisson.create(config);\n    }\n}\n```\n我们添加测试方法，来测试redisson的一些基本操作：\n```java\npackage org.example;\n\nimport com.alibaba.fastjson.JSONObject;\nimport org.junit.jupiter.api.Test;\nimport org.redisson.api.*;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.test.context.SpringBootTest;\n\nimport java.util.concurrent.TimeUnit;\n\n@SpringBootTest\npublic class RedissonTest {\n    @Autowired\n    private RedissonClient redissonClient;\n\n    @Test\n    public void testRedisson() {\n        // 字符串操作\n        RBucket<Object> rBuck = redissonClient.getBucket(\"name\");\n        rBuck.set(\"cxy\", 30, TimeUnit.SECONDS);\n        System.out.println(redissonClient.getBucket(\"name\").get());\n\n        // 哈希操作\n        RMap<Object, Object> student = redissonClient.getMap(\"student\");\n        student.put(\"id\", 1);\n        student.put(\"name\", \"cxy\");\n        student.put(\"age\", 20);\n        student.expire(30, TimeUnit.SECONDS);\n\n        System.out.println(redissonClient.getMap(\"student\").get(\"name\"));\n\n        // 列表操作\n        RList<Object> schools = redissonClient.getList(\"schools\");\n        schools.add(\"华南理工大学\");\n        schools.add(\"中山大学\");\n        schools.add(\"暨南大学\");\n        System.out.println(JSONObject.toJSONString(redissonClient.getList(\"schools\")));\n\n        // 集合操作\n        RSet<Object> schoolSet = redissonClient.getSet(\"schoolSet\");\n        schoolSet.add(\"华南理工大学\");\n        schoolSet.add(\"中山大学\");\n        schoolSet.add(\"暨南大学\");\n        System.out.println(JSONObject.toJSONString(redissonClient.getSet(\"schoolSet\")));\n\n        // ZSet操作\n        RScoredSortedSet<Object> schoolScoreSet = redissonClient.getScoredSortedSet(\"schoolScoreSet\");\n        schoolScoreSet.add(100d, \"华南理工大学\");\n        schoolScoreSet.add(90d, \"中山大学\");\n        schoolScoreSet.add(80d, \"暨南大学\");\n        System.out.println(JSONObject.toJSONString(redissonClient.getScoredSortedSet(\"schoolScoreSet\")));\n    }\n}\n```\n结果如下：\n{% asset_img 17.png %}\n##### 3.2.3. Redisson分布式锁\nredisson加锁，可以使用lock方法，注意，在加锁的时候，处理完业务逻辑后要记得释放锁，测试代码如下：\n```java\n  @Test\n    public void testLock() throws ExecutionException, InterruptedException {\n        ExecutorService executorService = Executors.newFixedThreadPool(2);\n        Runnable lockTask = () -> {\n            try {\n                lock();\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        };\n        List< Future> futureList = new ArrayList<>();\n        for (int i = 0; i < 2; i++) {\n            futureList.add(executorService.submit(lockTask));\n        }\n        for (Future future : futureList) {\n            future.get();\n        }\n    }\n\n    private void lock() throws InterruptedException {\n        RLock myLock = redissonClient.getLock(\"myLock\");\n        myLock.lock();\n        try {\n            System.out.println(\"currentTime:\" + System.currentTimeMillis());\n            Thread.sleep(2000);\n            System.out.println(\"执行业务代码\");\n        } finally {\n            myLock.unlock();\n        }\n    }\n```\n测试结果如下，从执行结果可以看出，当多个线程抢占锁时，后面的锁，需要等待，即这个锁是阻塞的。\n{% asset_img 18.png %}\n如果不想阻塞的话，我们可以使用tryLock来上锁，结合刚才的accountService，我们先修改accountService，加上对应的方法\n```java\n @Autowired\n    private RedissonClient redissonClient;\n\n    public boolean takeoutMoneyWithRedissonTryLock(TakeOutMoneyRequest request) throws InterruptedException {\n        Integer accountId = request.getAccountId();\n        String key = \"lock::\" + accountId;\n\n        RLock lock = redissonClient.getLock(key);\n        if (lock.tryLock(2, 4, TimeUnit.SECONDS)) { // 过期时间为2秒，最长存活时间为4秒\n            // 上锁成功\n            try {\n                Thread.sleep(1000);\n                Account account = accountMapper.selectById(accountId);\n                account.setBalance(account.getBalance() - request.getMoney());\n                account.setUpdateTime(new Date());\n                return accountMapper.updateById(account) > 0;\n            } finally {\n                // 释放锁\n                lock.unlock();\n            }\n        }\n        return false;\n    }\n```\n添加测试方法：\n```java\n   @Test\n    public void testTakeoutMoneyWithRedissonTryLock() throws ExecutionException, InterruptedException {\n        ExecutorService executorService = Executors.newFixedThreadPool(5);\n        Callable<Boolean> takeoutTask = () -> {\n            TakeOutMoneyRequest request = new TakeOutMoneyRequest();\n            request.setAccountId(1);\n            request.setMoney(100);\n            return accountService.takeoutMoneyWithRedissonTryLock(request);\n        };\n        List<Future<Boolean>> futureList = new ArrayList<>();\n        for (int i = 0; i < 10; i++) {\n            Future<Boolean> future = executorService.submit(takeoutTask);\n            futureList.add(future);\n        }\n\n        for (Future<Boolean> future : futureList) {\n            System.out.println(future.get());\n        }\n    }\n```\n测试结果如下:\n{% asset_img 19.png %}\n查看数据库，减少的次数与上面的次数一致\n{% asset_img 20.png %}\n不过上面这种，成功率比较低，因此我们可以将tryLock改为lock方法，来上锁，我们修改accountService，添加相关方法：\n```java\n  public boolean takeoutMoneyWithRedissonLock(TakeOutMoneyRequest request) throws InterruptedException {\n        Integer accountId = request.getAccountId();\n        String key = \"lock::\" + accountId;\n\n        RLock lock = redissonClient.getLock(key);\n        lock.lock(2, TimeUnit.SECONDS);\n        // 上锁成功\n        try {\n            Thread.sleep(1000);\n            Account account = accountMapper.selectById(accountId);\n            account.setBalance(account.getBalance() - request.getMoney());\n            account.setUpdateTime(new Date());\n            return accountMapper.updateById(account) > 0;\n        } finally {\n            // 释放锁\n            lock.unlock();\n        }\n    }\n```\n添加测试方法：\n```java\n @Test\n    public void testTakeoutMoneyWithRedissonLock() throws ExecutionException, InterruptedException {\n        ExecutorService executorService = Executors.newFixedThreadPool(5);\n        Callable<Boolean> takeoutTask = () -> {\n            TakeOutMoneyRequest request = new TakeOutMoneyRequest();\n            request.setAccountId(1);\n            request.setMoney(100);\n            return accountService.takeoutMoneyWithRedissonLock(request);\n        };\n        List<Future<Boolean>> futureList = new ArrayList<>();\n        for (int i = 0; i < 10; i++) {\n            Future<Boolean> future = executorService.submit(takeoutTask);\n            futureList.add(future);\n        }\n\n        for (Future<Boolean> future : futureList) {\n            System.out.println(future.get());\n        }\n    }\n```\n测试结果如下：\n{% asset_img 21.png %}\n查看数据库，扣减次数确实为10次。\n{% asset_img 22.png %}\n##### 3.2.4. watch dog 看门狗机制\n{% asset_img 23.png %}\nRedisson中的分布式锁自带自动续期机制，其提供了一个专门用来监控和续期锁的Watch Dog（看门狗），如果操作共享资源的线程还没有执行完成的话，Watch Dog会不断延长锁的过期时间，从而保证锁不会因为超时而被释放。\n### 4. 参考文章\nhttps://zhuanlan.zhihu.com/p/374306005\nhttps://my.oschina.net/u/4499317/blog/5039486\nhttps://blog.csdn.net/qq_15071263/article/details/101277474\nhttps://www.cnblogs.com/jelly12345/p/14699492.html","slug":"Redis学习6—Redis分布式锁","published":1,"updated":"2024-04-03T05:43:49.958Z","_id":"cluifpiel00025svla6o3ga56","comments":1,"layout":"post","photos":[],"content":"<h3 id=\"1-引言\"><a href=\"#1-引言\" class=\"headerlink\" title=\"1. 引言\"></a>1. 引言</h3><h4 id=\"1-1-分布式锁\"><a href=\"#1-1-分布式锁\" class=\"headerlink\" title=\"1.1. 分布式锁\"></a>1.1. 分布式锁</h4><p>分布式锁（Distributed Lock）是一种用于分布式系统中实现互斥访问的机制，在分布式系统中，多个节点同时访问共享资源可能导致数据不一致或竞态条件的问题，分布式锁通过协调多个节点之间的访问，确保在同一时间只有一个节点能获得对共享资源的独占访问权限，从而解决并发访问问题。</p>\n<h4 id=\"1-2-分布式锁实现方式\"><a href=\"#1-2-分布式锁实现方式\" class=\"headerlink\" title=\"1.2. 分布式锁实现方式\"></a>1.2. 分布式锁实现方式</h4><p>常用的分布式锁实现方式有：<br>1）基于数据库的分布式锁（乐观锁)：使用数据库的事务特性和唯一约束来实现分布式锁。通过在数据库中创建一个特定的表或记录来表示锁的状态，节点可以通过获取或释放该记录来获取或释放锁。<br>2）基于缓存的分布式锁：使用分布式缓存系统（如Redis）的原子操作来实现分布式锁，节点可以通过在缓存中设置一个特定的键值对来获取锁，并利用缓存的原子性操作来保证锁的互斥性。<br>3）基于zookeeper的分布式锁：zookeeper是一个分布式协调服务，可以用于实现分布式锁，节点可以通过在zookeeper中创建一个临时有序节点来表示锁的占用状态，通过比较节点 的序号来确定锁的拥有权。</p>\n<h3 id=\"2-基于数据库的分布式锁（乐观锁）\"><a href=\"#2-基于数据库的分布式锁（乐观锁）\" class=\"headerlink\" title=\"2. 基于数据库的分布式锁（乐观锁）\"></a>2. 基于数据库的分布式锁（乐观锁）</h3><p>基于数据库的分布式锁实现方案，一般是在表中加一个字段，用于表示版本号，当读取数据时，会读取对应的版本号，在更新数据的时候，也会相应的更新版本号（比如版本号递增），且在更新数据的时候，会判断当前版本号是否正确，以账户余额修改为例，具体流程如下：<br>1）查询账户信息（此时从数据库中查出的版本号为version1)<br>2）根据请求对账户对象进行操作<br>3）更新数据库(update t_account set 字段&#x3D;新值, version &#x3D; version + 1 where id &#x3D; #{accountId} and version &#x3D; version1的值)<br>在这个过程中，最重要的就是更新sql的语句，也就是在更新的时候，判断版本号是否被修改过，只有没有被修改过，我们才能更新成功。<br>示例如下：<br>首先，我们创建一个账户表：</p>\n<img src=\"/2024/04/02/Redis%E5%AD%A6%E4%B9%A06%E2%80%94Redis%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/1.png\" class=\"\">\n<p>然后在账户表上插入一条数据，假设账户中有1000元</p>\n<img src=\"/2024/04/02/Redis%E5%AD%A6%E4%B9%A06%E2%80%94Redis%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/2.png\" class=\"\">\n<p>对应的实体类和mapper：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@TableName(value = &quot;t_account&quot;)</span><br><span class=\"hljs-meta\">@Data</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Account</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">Serializable</span> &#123;<br>    <span class=\"hljs-meta\">@TableId(type = IdType.AUTO)</span><br>    <span class=\"hljs-keyword\">private</span> Integer id;<br><br>    <span class=\"hljs-keyword\">private</span> Integer userId;<br><br>    <span class=\"hljs-keyword\">private</span> Integer balance;<br><br>    <span class=\"hljs-keyword\">private</span> Date createTime;<br><br>    <span class=\"hljs-keyword\">private</span> Date updateTime;<br><br>    <span class=\"hljs-keyword\">private</span> Integer version;<br>&#125;<br><br><br><br><span class=\"hljs-meta\">@Mapper</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">AccountMapper</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">BaseMapper</span>&lt;Account&gt; &#123;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>然后我们创建一个AccountService，先演示没有乐观锁时，会造成的问题</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> org.example.service;<br><br><span class=\"hljs-keyword\">import</span> org.example.mapper.AccountMapper;<br><span class=\"hljs-keyword\">import</span> org.example.pojo.Account;<br><span class=\"hljs-keyword\">import</span> org.example.request.account.TakeOutMoneyRequest;<br><span class=\"hljs-keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class=\"hljs-keyword\">import</span> org.springframework.stereotype.Service;<br><br><span class=\"hljs-keyword\">import</span> java.util.Date;<br><br><span class=\"hljs-meta\">@Service</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">AccountService</span> &#123;<br>    <span class=\"hljs-meta\">@Autowired</span><br>    <span class=\"hljs-keyword\">private</span> AccountMapper accountMapper;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">takeOutMoneyWithoutOpLock</span><span class=\"hljs-params\">(TakeOutMoneyRequest request)</span> <span class=\"hljs-keyword\">throws</span> InterruptedException &#123;<br>        <span class=\"hljs-type\">Integer</span> <span class=\"hljs-variable\">accountId</span> <span class=\"hljs-operator\">=</span> request.getAccountId();<br>        <span class=\"hljs-type\">Account</span> <span class=\"hljs-variable\">account</span> <span class=\"hljs-operator\">=</span> accountMapper.selectById(accountId);<br>        <span class=\"hljs-keyword\">if</span> (account.getBalance() - request.getMoney() &lt; <span class=\"hljs-number\">0</span>) &#123;<br>            System.out.println(<span class=\"hljs-string\">&quot;余额不足==============&quot;</span>);<br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;<br>        &#125;<br>        Thread.sleep(<span class=\"hljs-number\">1000</span>);<br><br>        account.setBalance(account.getBalance() - request.getMoney());<br>        account.setUpdateTime(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Date</span>());<br>        <span class=\"hljs-keyword\">return</span> accountMapper.updateById(account) &gt; <span class=\"hljs-number\">0</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>添加一个测试类，用于演示并发情况下，账户余额的减少</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> org.example.service;<br><br><span class=\"hljs-keyword\">import</span> org.example.mapper.AccountMapper;<br><span class=\"hljs-keyword\">import</span> org.example.pojo.Account;<br><span class=\"hljs-keyword\">import</span> org.example.request.account.TakeOutMoneyRequest;<br><span class=\"hljs-keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class=\"hljs-keyword\">import</span> org.springframework.stereotype.Service;<br><br><span class=\"hljs-keyword\">import</span> java.util.Date;<br><br><span class=\"hljs-meta\">@Service</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">AccountService</span> &#123;<br>    <span class=\"hljs-meta\">@Autowired</span><br>    <span class=\"hljs-keyword\">private</span> AccountMapper accountMapper;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">takeOutMoneyWithoutOpLock</span><span class=\"hljs-params\">(TakeOutMoneyRequest request)</span> <span class=\"hljs-keyword\">throws</span> InterruptedException &#123;<br>        <span class=\"hljs-type\">Integer</span> <span class=\"hljs-variable\">accountId</span> <span class=\"hljs-operator\">=</span> request.getAccountId();<br>        <span class=\"hljs-type\">Account</span> <span class=\"hljs-variable\">account</span> <span class=\"hljs-operator\">=</span> accountMapper.selectById(accountId);<br>        <span class=\"hljs-keyword\">if</span> (account.getBalance() - request.getMoney() &lt; <span class=\"hljs-number\">0</span>) &#123;<br>            System.out.println(<span class=\"hljs-string\">&quot;余额不足==============&quot;</span>);<br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;<br>        &#125;<br>        Thread.sleep(<span class=\"hljs-number\">1000</span>);<br><br>        account.setBalance(account.getBalance() - request.getMoney());<br>        account.setUpdateTime(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Date</span>());<br>        <span class=\"hljs-keyword\">return</span> accountMapper.updateById(account) &gt; <span class=\"hljs-number\">0</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>运行测试方法，结果如下图所示，说明都更新成功了</p>\n<img src=\"/2024/04/02/Redis%E5%AD%A6%E4%B9%A06%E2%80%94Redis%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/3.png\" class=\"\">\n<p>然后查看数据库：</p>\n<img src=\"/2024/04/02/Redis%E5%AD%A6%E4%B9%A06%E2%80%94Redis%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/4.png\" class=\"\">\n<p>如上图所示，原先我们的账户余额是1000元，每次扣除100元，经过10次扣减后，账户余额应该为0，但是因为并发问题，导致查询的时候，有多个请求查询到同一个值，最后导致数据不一致。<br>我们修改Account，添加使用乐观锁进行扣减余额的方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">takeOutMoneyWithOpLock</span><span class=\"hljs-params\">(TakeOutMoneyRequest request)</span> <span class=\"hljs-keyword\">throws</span> InterruptedException &#123;<br>     <span class=\"hljs-type\">Integer</span> <span class=\"hljs-variable\">accountId</span> <span class=\"hljs-operator\">=</span> request.getAccountId();<br>     <span class=\"hljs-type\">Account</span> <span class=\"hljs-variable\">account</span> <span class=\"hljs-operator\">=</span> accountMapper.selectById(accountId);<br>     <span class=\"hljs-keyword\">if</span> (account.getBalance() - request.getMoney() &lt; <span class=\"hljs-number\">0</span>) &#123;<br>         System.out.println(<span class=\"hljs-string\">&quot;余额不足==============&quot;</span>);<br>         <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;<br>     &#125;<br>     Thread.sleep(<span class=\"hljs-number\">1000</span>);<br><br>     LambdaUpdateWrapper&lt;Account&gt; lambdaUpdateWrapper = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">LambdaUpdateWrapper</span>&lt;&gt;();<br>     lambdaUpdateWrapper.set(Account::getVersion, account.getVersion() + <span class=\"hljs-number\">1</span>)<br>             .set(Account::getUpdateTime, <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Date</span>())<br>                     .set(Account::getBalance, account.getBalance() - request.getMoney())<br>                             .eq(Account::getVersion, account.getVersion())<br>                                     .eq(Account::getId, request.getAccountId());<br>     <span class=\"hljs-keyword\">return</span> accountMapper.update(account, lambdaUpdateWrapper) &gt; <span class=\"hljs-number\">0</span>;<br> &#125;<br></code></pre></td></tr></table></figure>\n<p>我们把金额修改回1000，然后添加测试方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Test</span><br>   <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">testTakeoutMoneyWithOpLock</span><span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">throws</span> ExecutionException, InterruptedException &#123;<br>       <span class=\"hljs-type\">ExecutorService</span> <span class=\"hljs-variable\">executorService</span> <span class=\"hljs-operator\">=</span> Executors.newFixedThreadPool(<span class=\"hljs-number\">5</span>);<br>       Callable&lt;Boolean&gt; takeoutTask = () -&gt; &#123;<br>           <span class=\"hljs-type\">TakeOutMoneyRequest</span> <span class=\"hljs-variable\">request</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">TakeOutMoneyRequest</span>();<br>           request.setAccountId(<span class=\"hljs-number\">1</span>);<br>           request.setMoney(<span class=\"hljs-number\">100</span>);<br>           <span class=\"hljs-keyword\">try</span> &#123;<br>               <span class=\"hljs-keyword\">return</span> accountService.takeOutMoneyWithOpLock(request);<br>           &#125; <span class=\"hljs-keyword\">catch</span> (InterruptedException e) &#123;<br>               <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;<br>           &#125;<br>       &#125;;<br>       List&lt;Future&lt;Boolean&gt;&gt; futureList = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayList</span>&lt;&gt;();<br>       <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">10</span>; i++) &#123;<br>           Future&lt;Boolean&gt; future = executorService.submit(takeoutTask);<br>           futureList.add(future);<br>       &#125;<br><br>       <span class=\"hljs-keyword\">for</span> (Future&lt;Boolean&gt; future : futureList) &#123;<br>           System.out.println(future.get());<br>       &#125;<br>   &#125;<br></code></pre></td></tr></table></figure>\n<p>运行测试方法，结果如下，说明只有两次更新成功了，其余的更新，都以为乐观锁被修改了，导致更新失败</p>\n<img src=\"/2024/04/02/Redis%E5%AD%A6%E4%B9%A06%E2%80%94Redis%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/5.png\" class=\"\">\n<p>然后我们查看数据库，结果如下，因为扣减了两次，所有余额为800，这个数据对的上。</p>\n<img src=\"/2024/04/02/Redis%E5%AD%A6%E4%B9%A06%E2%80%94Redis%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/6.png\" class=\"\">\n<p>乐观锁的实现思路，是基于对并发更新的乐观假设，也就是认为冲突的概率较低，因此在读取和提交数据时进行版本号或时间戳的比较，而不是在数据访问阶段进行加锁操作，避免了显示的锁竞争，提高了并发性能。但乐观锁并不能完全消除并发冲突，只是在提交数据时进行冲突检测和处理，如果系统中的并发冲突非常频繁，乐观锁的效率可能会下降。</p>\n<h3 id=\"3-基于Redis的分布式锁\"><a href=\"#3-基于Redis的分布式锁\" class=\"headerlink\" title=\"3. 基于Redis的分布式锁\"></a>3. 基于Redis的分布式锁</h3><h4 id=\"3-1-基于Redis的SETNX实现分布式锁\"><a href=\"#3-1-基于Redis的SETNX实现分布式锁\" class=\"headerlink\" title=\"3.1. 基于Redis的SETNX实现分布式锁\"></a>3.1. 基于Redis的SETNX实现分布式锁</h4><p>SETNX指的是set if not exist，也就是当key不存在的时候，设置key的值，存在的话，什么都不做, 其语法为:</p>\n<figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs gams\"><span class=\"hljs-keyword\">set</span> key <span class=\"hljs-comment\">value nx</span><br></code></pre></td></tr></table></figure>\n<p>如果我们要设置过期时间的话，可以使用</p>\n<figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs gams\"><span class=\"hljs-keyword\">set</span> key <span class=\"hljs-comment\">value ex</span> 时间 <span class=\"hljs-comment\">nx</span><br></code></pre></td></tr></table></figure>\n<p>如下图所示，在使用nx指令的时候，只有在该key不存在的时候，才能设置成功</p>\n<img src=\"/2024/04/02/Redis%E5%AD%A6%E4%B9%A06%E2%80%94Redis%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/7.png\" class=\"\">\n<p>我们修改之前的RedisUtils工具类，添加上和这两条指令相关的方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">setIfAbsent</span><span class=\"hljs-params\">(String key, Object value)</span> &#123;<br>       <span class=\"hljs-keyword\">return</span> redisTemplate.opsForValue().setIfAbsent(key, value);<br>   &#125;<br><br>   <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">    * 不存在时设置值，适用与分布式锁的场景</span><br><span class=\"hljs-comment\">    * <span class=\"hljs-doctag\">@param</span> key</span><br><span class=\"hljs-comment\">    * <span class=\"hljs-doctag\">@param</span> value</span><br><span class=\"hljs-comment\">    * <span class=\"hljs-doctag\">@param</span> time</span><br><span class=\"hljs-comment\">    * <span class=\"hljs-doctag\">@return</span></span><br><span class=\"hljs-comment\">    */</span><br>   <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">setIfAbsent</span><span class=\"hljs-params\">(String key, Object value, <span class=\"hljs-type\">long</span> time)</span> &#123;<br>       <span class=\"hljs-keyword\">return</span> setIfAbsent(key, value, time, TimeUnit.SECONDS);<br>   &#125;<br><br>   <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">setIfAbsent</span><span class=\"hljs-params\">(String key, Object value, <span class=\"hljs-type\">long</span> time, TimeUnit timeUnit)</span> &#123;<br>       <span class=\"hljs-keyword\">return</span> redisTemplate.opsForValue().setIfAbsent(key, value, time, timeUnit);<br>   &#125;<br></code></pre></td></tr></table></figure>\n<h5 id=\"3-1-1-通过setnx实现分布式锁\"><a href=\"#3-1-1-通过setnx实现分布式锁\" class=\"headerlink\" title=\"3.1.1. 通过setnx实现分布式锁\"></a>3.1.1. 通过setnx实现分布式锁</h5><p>具体流程如下：</p>\n<img src=\"/2024/04/02/Redis%E5%AD%A6%E4%B9%A06%E2%80%94Redis%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/24.png\" class=\"\">\n<p>我们修改AccountService，添加和该指令相关的方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Autowired</span><br>  <span class=\"hljs-keyword\">private</span> RedisUtils redisUtils;<br><br>  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">takeOutMoneyWithSetnx</span><span class=\"hljs-params\">(TakeOutMoneyRequest request)</span> &#123;<br>      <span class=\"hljs-type\">Integer</span> <span class=\"hljs-variable\">accountId</span> <span class=\"hljs-operator\">=</span> request.getAccountId();<br>      <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">key</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;lock::&quot;</span> + accountId;<br><br>      <span class=\"hljs-type\">boolean</span> <span class=\"hljs-variable\">lock</span> <span class=\"hljs-operator\">=</span> redisUtils.setIfAbsent(key, request.getAccountId());<br>      <span class=\"hljs-keyword\">if</span> (!lock) &#123;<br>          <span class=\"hljs-comment\">// 加锁失败，返回</span><br>          <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;<br>      &#125;<br>      <span class=\"hljs-comment\">// 加锁成功</span><br>      <span class=\"hljs-keyword\">try</span> &#123;<br>          <span class=\"hljs-type\">Account</span> <span class=\"hljs-variable\">account</span> <span class=\"hljs-operator\">=</span> accountMapper.selectById(accountId);<br>          account.setBalance(account.getBalance() - request.getMoney());<br>          account.setUpdateTime(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Date</span>());<br>          <span class=\"hljs-keyword\">return</span> accountMapper.updateById(account) &gt; <span class=\"hljs-number\">0</span>;<br>      &#125; <span class=\"hljs-keyword\">finally</span> &#123;<br>          <span class=\"hljs-comment\">// 释放锁</span><br>          redisUtils.removeKey(key);<br>      &#125;<br>  &#125;<br></code></pre></td></tr></table></figure>\n<p>添加测试方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Test</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">testTakeoutMoneyWithSetnx</span><span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">throws</span> ExecutionException, InterruptedException &#123;<br>        <span class=\"hljs-type\">ExecutorService</span> <span class=\"hljs-variable\">executorService</span> <span class=\"hljs-operator\">=</span> Executors.newFixedThreadPool(<span class=\"hljs-number\">5</span>);<br>        Callable&lt;Boolean&gt; takeoutTask = () -&gt; &#123;<br>            <span class=\"hljs-type\">TakeOutMoneyRequest</span> <span class=\"hljs-variable\">request</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">TakeOutMoneyRequest</span>();<br>            request.setAccountId(<span class=\"hljs-number\">1</span>);<br>            request.setMoney(<span class=\"hljs-number\">100</span>);<br>            <span class=\"hljs-keyword\">return</span> accountService.takeOutMoneyWithSetnx(request);<br>        &#125;;<br>        List&lt;Future&lt;Boolean&gt;&gt; futureList = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayList</span>&lt;&gt;();<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">10</span>; i++) &#123;<br>            Future&lt;Boolean&gt; future = executorService.submit(takeoutTask);<br>            futureList.add(future);<br>        &#125;<br><br>        <span class=\"hljs-keyword\">for</span> (Future&lt;Boolean&gt; future : futureList) &#123;<br>            System.out.println(future.get());<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure>\n<p>测试结果如下：</p>\n<img src=\"/2024/04/02/Redis%E5%AD%A6%E4%B9%A06%E2%80%94Redis%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/8.png\" class=\"\">\n<p>我们查看数据库，确实只扣减了100</p>\n<img src=\"/2024/04/02/Redis%E5%AD%A6%E4%B9%A06%E2%80%94Redis%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/9.png\" class=\"\">\n<p>这里冲突次数比较多，因此更新的效率有点低，我们可以将对应的方法修改一下，加上重试，修改代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Autowired</span><br>  <span class=\"hljs-keyword\">private</span> RedisUtils redisUtils;<br><br>  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">takeOutMoneyWithSetnx</span><span class=\"hljs-params\">(TakeOutMoneyRequest request)</span> &#123;<br>      <span class=\"hljs-type\">Integer</span> <span class=\"hljs-variable\">accountId</span> <span class=\"hljs-operator\">=</span> request.getAccountId();<br>      <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">key</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;lock::&quot;</span> + accountId;<br><br>      <span class=\"hljs-type\">boolean</span> <span class=\"hljs-variable\">lock</span> <span class=\"hljs-operator\">=</span> redisUtils.setIfAbsent(key, request.getAccountId());<br>      <span class=\"hljs-keyword\">if</span> (lock) &#123;<br>          <span class=\"hljs-comment\">// 加锁成功</span><br>          <span class=\"hljs-keyword\">try</span> &#123;<br>              <span class=\"hljs-type\">Account</span> <span class=\"hljs-variable\">account</span> <span class=\"hljs-operator\">=</span> accountMapper.selectById(accountId);<br>              account.setBalance(account.getBalance() - request.getMoney());<br>              account.setUpdateTime(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Date</span>());<br>              <span class=\"hljs-keyword\">return</span> accountMapper.updateById(account) &gt; <span class=\"hljs-number\">0</span>;<br>          &#125; <span class=\"hljs-keyword\">finally</span> &#123;<br>              <span class=\"hljs-comment\">// 释放锁</span><br>              redisUtils.removeKey(key);<br>          &#125;<br>      &#125;<br>      <span class=\"hljs-comment\">// 加锁失败，进行重试</span><br>      <span class=\"hljs-keyword\">try</span> &#123;<br>          Thread.sleep(<span class=\"hljs-number\">100</span>);<br>      &#125; <span class=\"hljs-keyword\">catch</span> (InterruptedException e) &#123;<br>          e.printStackTrace();<br>      &#125;<br>      <span class=\"hljs-keyword\">return</span> takeOutMoneyWithSetnx(request);<br>  &#125;<br></code></pre></td></tr></table></figure>\n<p>这里休眠了一段时间，是因为要涉及到递归调用，可能会导致栈空间溢出，我们再次执行测试代码，结果如下，经过重试后，执行成功率变高。</p>\n<img src=\"/2024/04/02/Redis%E5%AD%A6%E4%B9%A06%E2%80%94Redis%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/10.png\" class=\"\">\n<p>查看数据库，确实扣减了10次。</p>\n<img src=\"/2024/04/02/Redis%E5%AD%A6%E4%B9%A06%E2%80%94Redis%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/11.png\" class=\"\">\n<p>但是，使用set key value nx存在一个问题，如果setnx占锁成功，但是服务器宕机了，没有执行删除锁的逻辑，那么就会造成这个锁一直没有被释放，最终导致死锁。</p>\n<h5 id=\"3-1-2-setnx-with-expire\"><a href=\"#3-1-2-setnx-with-expire\" class=\"headerlink\" title=\"3.1.2. setnx with expire\"></a>3.1.2. setnx with expire</h5><p>为解决setnx造成的死锁问题，我们在setnx的基础上，加上过期时间，来解决上述问题。我们给AccountService添加上对应的方法如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">takeOutMoneyWithSetnxExpire</span><span class=\"hljs-params\">(TakeOutMoneyRequest request)</span> &#123;<br>       <span class=\"hljs-type\">Integer</span> <span class=\"hljs-variable\">accountId</span> <span class=\"hljs-operator\">=</span> request.getAccountId();<br>       <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">key</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;lock::&quot;</span> + accountId;<br>       <br>       <span class=\"hljs-comment\">// 占有锁并设置过期时间</span><br>       <span class=\"hljs-type\">boolean</span> <span class=\"hljs-variable\">lock</span> <span class=\"hljs-operator\">=</span> redisUtils.setIfAbsent(key, request.getAccountId(), TTL);<br>       <span class=\"hljs-keyword\">if</span> (lock) &#123;<br>           <span class=\"hljs-comment\">// 加锁成功</span><br>           <span class=\"hljs-keyword\">try</span> &#123;<br>               <span class=\"hljs-type\">Account</span> <span class=\"hljs-variable\">account</span> <span class=\"hljs-operator\">=</span> accountMapper.selectById(accountId);<br>               account.setBalance(account.getBalance() - request.getMoney());<br>               account.setUpdateTime(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Date</span>());<br>               <span class=\"hljs-keyword\">return</span> accountMapper.updateById(account) &gt; <span class=\"hljs-number\">0</span>;<br>           &#125; <span class=\"hljs-keyword\">finally</span> &#123;<br>               <span class=\"hljs-comment\">// 释放锁</span><br>               redisUtils.removeKey(key);<br>           &#125;<br>       &#125;<br>       <span class=\"hljs-comment\">// 加锁失败，进行重试</span><br>       <span class=\"hljs-keyword\">try</span> &#123;<br>           Thread.sleep(<span class=\"hljs-number\">100</span>);<br>       &#125; <span class=\"hljs-keyword\">catch</span> (InterruptedException e) &#123;<br>           e.printStackTrace();<br>       &#125;<br>       <span class=\"hljs-keyword\">return</span> takeOutMoneyWithSetnx(request);<br>   &#125;<br></code></pre></td></tr></table></figure>\n<p>添加上对应的测试方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Test</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">testTakeoutMoneyWithSetnxExpire</span><span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">throws</span> ExecutionException, InterruptedException &#123;<br>        <span class=\"hljs-type\">ExecutorService</span> <span class=\"hljs-variable\">executorService</span> <span class=\"hljs-operator\">=</span> Executors.newFixedThreadPool(<span class=\"hljs-number\">5</span>);<br>        Callable&lt;Boolean&gt; takeoutTask = () -&gt; &#123;<br>            <span class=\"hljs-type\">TakeOutMoneyRequest</span> <span class=\"hljs-variable\">request</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">TakeOutMoneyRequest</span>();<br>            request.setAccountId(<span class=\"hljs-number\">1</span>);<br>            request.setMoney(<span class=\"hljs-number\">100</span>);<br>            <span class=\"hljs-keyword\">return</span> accountService.takeOutMoneyWithSetnxExpire(request);<br>        &#125;;<br>        List&lt;Future&lt;Boolean&gt;&gt; futureList = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayList</span>&lt;&gt;();<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">10</span>; i++) &#123;<br>            Future&lt;Boolean&gt; future = executorService.submit(takeoutTask);<br>            futureList.add(future);<br>        &#125;<br><br>        <span class=\"hljs-keyword\">for</span> (Future&lt;Boolean&gt; future : futureList) &#123;<br>            System.out.println(future.get());<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure>\n<p>测试结果如下：</p>\n<img src=\"/2024/04/02/Redis%E5%AD%A6%E4%B9%A06%E2%80%94Redis%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/12.png\" class=\"\">\n<p>我们 查看数据库，数据库也确实扣减了10次</p>\n<img src=\"/2024/04/02/Redis%E5%AD%A6%E4%B9%A06%E2%80%94Redis%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/13.png\" class=\"\">\n<p>但是，这个方案还是有一定缺陷，因为我们设置的这个过期时间，是根据我们的经验设置的，而业务代码的执行时长，是不确定的，那么可能存在这种情况，假设我们现在有三个请求过来，我们设置的过期时间是100ms<br>1）请求A占锁成功，执行业务代码<br>2）请求A执行100ms后，锁过期，但此时请求A的业务代码还未执行完毕<br>3）请求B占锁成功，执行业务代码<br>4）请求A执行完毕，执行释放锁的逻辑，导致把B占有的锁打开了<br>5）请求C占锁成功，执行业务代码<br>6）请求B执行完毕，执行释放锁的逻辑，导致把C占有的锁打开了<br>这里是因为，这三个请求占有的锁的key都是相同的，而我们在释放锁的时候，只是执行删除key的命令，并不在意这个锁是谁占有的。<br>这种情况，我们可以通过lua脚本来解决，思路如下：<br>1）占锁的时候，设置value值为用户标识<br>2）释放锁的时候，通过lua脚本，判断此时key对应的value值，与传入值是否相同，只有相同的时候，我们才执行删除key的逻辑。<br>我们修改刚才的方法，如下，在占锁的时候，我们设置value值为当前的线程id（这里是为了演示，实际业务场景中，应该是多个用户抢占同一个资源，因此可以将vlaue值设置为用户的标识，比如用户id），然后在释放资源的时候，执行lua脚本，判断value值是否相同，相同则执行删除操作。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Autowired</span><br>  <span class=\"hljs-keyword\">private</span> RedisTemplate&lt;String, Object&gt; redisTemplate;<br>  <br> <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">takeOutMoneyWithSetnxExpire</span><span class=\"hljs-params\">(TakeOutMoneyRequest request)</span> &#123;<br>      <span class=\"hljs-type\">Integer</span> <span class=\"hljs-variable\">accountId</span> <span class=\"hljs-operator\">=</span> request.getAccountId();<br>      <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">key</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;lock::&quot;</span> + accountId;<br><br>      <span class=\"hljs-type\">long</span> <span class=\"hljs-variable\">threadId</span> <span class=\"hljs-operator\">=</span> Thread.currentThread().getId();<br>      <span class=\"hljs-comment\">// 占有锁并设置过期时间</span><br>      <span class=\"hljs-type\">boolean</span> <span class=\"hljs-variable\">lock</span> <span class=\"hljs-operator\">=</span> redisUtils.setIfAbsent(key, threadId, TTL);<br>      <span class=\"hljs-keyword\">if</span> (lock) &#123;<br>          <span class=\"hljs-comment\">// 加锁成功</span><br>          <span class=\"hljs-keyword\">try</span> &#123;<br>              <span class=\"hljs-type\">Account</span> <span class=\"hljs-variable\">account</span> <span class=\"hljs-operator\">=</span> accountMapper.selectById(accountId);<br>              account.setBalance(account.getBalance() - request.getMoney());<br>              account.setUpdateTime(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Date</span>());<br>              <span class=\"hljs-keyword\">return</span> accountMapper.updateById(account) &gt; <span class=\"hljs-number\">0</span>;<br>          &#125; <span class=\"hljs-keyword\">finally</span> &#123;<br>              <span class=\"hljs-comment\">// 释放锁</span><br>              <span class=\"hljs-comment\">// lua脚本</span><br>              <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">script</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;if redis.call(&#x27;get&#x27;, KEYS[1]) == ARGV[1] then return redis.call(&#x27;del&#x27;, KEYS[1]) else return 0 end&quot;</span>;<br>              redisTemplate.execute(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">DefaultRedisScript</span>&lt;Long&gt;(script, Long.class), Arrays.asList(key), threadId);<br>          &#125;<br>      &#125;<br>      <span class=\"hljs-comment\">// 加锁失败，进行重试</span><br>      <span class=\"hljs-keyword\">try</span> &#123;<br>          Thread.sleep(<span class=\"hljs-number\">100</span>);<br>      &#125; <span class=\"hljs-keyword\">catch</span> (InterruptedException e) &#123;<br>          e.printStackTrace();<br>      &#125;<br>      <span class=\"hljs-keyword\">return</span> takeOutMoneyWithSetnx(request);<br>  &#125;<br></code></pre></td></tr></table></figure>\n<p>再次执行测试代码：</p>\n<img src=\"/2024/04/02/Redis%E5%AD%A6%E4%B9%A06%E2%80%94Redis%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/14.png\" class=\"\">\n<p>查看数据库，确实减少10次</p>\n<img src=\"/2024/04/02/Redis%E5%AD%A6%E4%B9%A06%E2%80%94Redis%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/15.png\" class=\"\">\n<p>但这里还有一个问题没有解决，因为我们设置的TTL，是我们的经验值，不准确，所以还是会存在，某个请求占有锁后，还没执行完毕，锁过期了，被另外一个请求占有，此时会出现两个请求都认为自己占有锁的情况。</p>\n<h4 id=\"3-2-Redisson\"><a href=\"#3-2-Redisson\" class=\"headerlink\" title=\"3.2. Redisson\"></a>3.2. Redisson</h4><h5 id=\"3-2-1-简介\"><a href=\"#3-2-1-简介\" class=\"headerlink\" title=\"3.2.1. 简介\"></a>3.2.1. 简介</h5><p>Redisson是一个在Redis基础上实现的Java驻内存数据网络，它不仅提供一系列的分布式java常用对象，还提供许多分布式服务，其宗旨是促进使用者对Redis的关注分离（Separation of Concern），从而让使用者能将精力更多集中在处理业务逻辑上。</p>\n<img src=\"/2024/04/02/Redis%E5%AD%A6%E4%B9%A06%E2%80%94Redis%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/16.png\" class=\"\">\n<h5 id=\"3-2-2-SpringBoot-整合Redisson\"><a href=\"#3-2-2-SpringBoot-整合Redisson\" class=\"headerlink\" title=\"3.2.2. SpringBoot 整合Redisson\"></a>3.2.2. SpringBoot 整合Redisson</h5><p>引入redisson的maven依赖：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.redisson<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>redisson<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>3.15.5<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<p>然后自定义配置类（这里使用的是单节点Redis配置）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> org.example.config;<br><br><span class=\"hljs-keyword\">import</span> org.redisson.Redisson;<br><span class=\"hljs-keyword\">import</span> org.redisson.api.RedissonClient;<br><span class=\"hljs-keyword\">import</span> org.redisson.config.Config;<br><span class=\"hljs-keyword\">import</span> org.springframework.context.annotation.Bean;<br><span class=\"hljs-keyword\">import</span> org.springframework.context.annotation.Configuration;<br><br><span class=\"hljs-meta\">@Configuration</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">RedissonConfiguration</span> &#123;<br>    <br>    <span class=\"hljs-meta\">@Bean</span><br>    <span class=\"hljs-keyword\">public</span> RedissonClient <span class=\"hljs-title function_\">redisson</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-comment\">// 1. 创建配置</span><br>        <span class=\"hljs-type\">Config</span> <span class=\"hljs-variable\">config</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Config</span>();<br>        <span class=\"hljs-comment\">// 集群模式</span><br><span class=\"hljs-comment\">//        config.useClusterServers().addNodeAddress(&quot;集群ip1&quot;, &quot;集群id2&quot;);</span><br>        <span class=\"hljs-comment\">// 2. 根据Config创建出RedissonClient示例</span><br>        config.useSingleServer().setAddress(<span class=\"hljs-string\">&quot;redis://127.0.0.1:6379&quot;</span>);<br>        <span class=\"hljs-keyword\">return</span> Redisson.create(config);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>我们添加测试方法，来测试redisson的一些基本操作：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> org.example;<br><br><span class=\"hljs-keyword\">import</span> com.alibaba.fastjson.JSONObject;<br><span class=\"hljs-keyword\">import</span> org.junit.jupiter.api.Test;<br><span class=\"hljs-keyword\">import</span> org.redisson.api.*;<br><span class=\"hljs-keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class=\"hljs-keyword\">import</span> org.springframework.boot.test.context.SpringBootTest;<br><br><span class=\"hljs-keyword\">import</span> java.util.concurrent.TimeUnit;<br><br><span class=\"hljs-meta\">@SpringBootTest</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">RedissonTest</span> &#123;<br>    <span class=\"hljs-meta\">@Autowired</span><br>    <span class=\"hljs-keyword\">private</span> RedissonClient redissonClient;<br><br>    <span class=\"hljs-meta\">@Test</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">testRedisson</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-comment\">// 字符串操作</span><br>        RBucket&lt;Object&gt; rBuck = redissonClient.getBucket(<span class=\"hljs-string\">&quot;name&quot;</span>);<br>        rBuck.set(<span class=\"hljs-string\">&quot;cxy&quot;</span>, <span class=\"hljs-number\">30</span>, TimeUnit.SECONDS);<br>        System.out.println(redissonClient.getBucket(<span class=\"hljs-string\">&quot;name&quot;</span>).get());<br><br>        <span class=\"hljs-comment\">// 哈希操作</span><br>        RMap&lt;Object, Object&gt; student = redissonClient.getMap(<span class=\"hljs-string\">&quot;student&quot;</span>);<br>        student.put(<span class=\"hljs-string\">&quot;id&quot;</span>, <span class=\"hljs-number\">1</span>);<br>        student.put(<span class=\"hljs-string\">&quot;name&quot;</span>, <span class=\"hljs-string\">&quot;cxy&quot;</span>);<br>        student.put(<span class=\"hljs-string\">&quot;age&quot;</span>, <span class=\"hljs-number\">20</span>);<br>        student.expire(<span class=\"hljs-number\">30</span>, TimeUnit.SECONDS);<br><br>        System.out.println(redissonClient.getMap(<span class=\"hljs-string\">&quot;student&quot;</span>).get(<span class=\"hljs-string\">&quot;name&quot;</span>));<br><br>        <span class=\"hljs-comment\">// 列表操作</span><br>        RList&lt;Object&gt; schools = redissonClient.getList(<span class=\"hljs-string\">&quot;schools&quot;</span>);<br>        schools.add(<span class=\"hljs-string\">&quot;华南理工大学&quot;</span>);<br>        schools.add(<span class=\"hljs-string\">&quot;中山大学&quot;</span>);<br>        schools.add(<span class=\"hljs-string\">&quot;暨南大学&quot;</span>);<br>        System.out.println(JSONObject.toJSONString(redissonClient.getList(<span class=\"hljs-string\">&quot;schools&quot;</span>)));<br><br>        <span class=\"hljs-comment\">// 集合操作</span><br>        RSet&lt;Object&gt; schoolSet = redissonClient.getSet(<span class=\"hljs-string\">&quot;schoolSet&quot;</span>);<br>        schoolSet.add(<span class=\"hljs-string\">&quot;华南理工大学&quot;</span>);<br>        schoolSet.add(<span class=\"hljs-string\">&quot;中山大学&quot;</span>);<br>        schoolSet.add(<span class=\"hljs-string\">&quot;暨南大学&quot;</span>);<br>        System.out.println(JSONObject.toJSONString(redissonClient.getSet(<span class=\"hljs-string\">&quot;schoolSet&quot;</span>)));<br><br>        <span class=\"hljs-comment\">// ZSet操作</span><br>        RScoredSortedSet&lt;Object&gt; schoolScoreSet = redissonClient.getScoredSortedSet(<span class=\"hljs-string\">&quot;schoolScoreSet&quot;</span>);<br>        schoolScoreSet.add(<span class=\"hljs-number\">100d</span>, <span class=\"hljs-string\">&quot;华南理工大学&quot;</span>);<br>        schoolScoreSet.add(<span class=\"hljs-number\">90d</span>, <span class=\"hljs-string\">&quot;中山大学&quot;</span>);<br>        schoolScoreSet.add(<span class=\"hljs-number\">80d</span>, <span class=\"hljs-string\">&quot;暨南大学&quot;</span>);<br>        System.out.println(JSONObject.toJSONString(redissonClient.getScoredSortedSet(<span class=\"hljs-string\">&quot;schoolScoreSet&quot;</span>)));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>结果如下：</p>\n<img src=\"/2024/04/02/Redis%E5%AD%A6%E4%B9%A06%E2%80%94Redis%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/17.png\" class=\"\">\n<h5 id=\"3-2-3-Redisson分布式锁\"><a href=\"#3-2-3-Redisson分布式锁\" class=\"headerlink\" title=\"3.2.3. Redisson分布式锁\"></a>3.2.3. Redisson分布式锁</h5><p>redisson加锁，可以使用lock方法，注意，在加锁的时候，处理完业务逻辑后要记得释放锁，测试代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Test</span><br>  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">testLock</span><span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">throws</span> ExecutionException, InterruptedException &#123;<br>      <span class=\"hljs-type\">ExecutorService</span> <span class=\"hljs-variable\">executorService</span> <span class=\"hljs-operator\">=</span> Executors.newFixedThreadPool(<span class=\"hljs-number\">2</span>);<br>      <span class=\"hljs-type\">Runnable</span> <span class=\"hljs-variable\">lockTask</span> <span class=\"hljs-operator\">=</span> () -&gt; &#123;<br>          <span class=\"hljs-keyword\">try</span> &#123;<br>              lock();<br>          &#125; <span class=\"hljs-keyword\">catch</span> (InterruptedException e) &#123;<br>              e.printStackTrace();<br>          &#125;<br>      &#125;;<br>      List&lt; Future&gt; futureList = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayList</span>&lt;&gt;();<br>      <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">2</span>; i++) &#123;<br>          futureList.add(executorService.submit(lockTask));<br>      &#125;<br>      <span class=\"hljs-keyword\">for</span> (Future future : futureList) &#123;<br>          future.get();<br>      &#125;<br>  &#125;<br><br>  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">lock</span><span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">throws</span> InterruptedException &#123;<br>      <span class=\"hljs-type\">RLock</span> <span class=\"hljs-variable\">myLock</span> <span class=\"hljs-operator\">=</span> redissonClient.getLock(<span class=\"hljs-string\">&quot;myLock&quot;</span>);<br>      myLock.lock();<br>      <span class=\"hljs-keyword\">try</span> &#123;<br>          System.out.println(<span class=\"hljs-string\">&quot;currentTime:&quot;</span> + System.currentTimeMillis());<br>          Thread.sleep(<span class=\"hljs-number\">2000</span>);<br>          System.out.println(<span class=\"hljs-string\">&quot;执行业务代码&quot;</span>);<br>      &#125; <span class=\"hljs-keyword\">finally</span> &#123;<br>          myLock.unlock();<br>      &#125;<br>  &#125;<br></code></pre></td></tr></table></figure>\n<p>测试结果如下，从执行结果可以看出，当多个线程抢占锁时，后面的锁，需要等待，即这个锁是阻塞的。</p>\n<img src=\"/2024/04/02/Redis%E5%AD%A6%E4%B9%A06%E2%80%94Redis%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/18.png\" class=\"\">\n<p>如果不想阻塞的话，我们可以使用tryLock来上锁，结合刚才的accountService，我们先修改accountService，加上对应的方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Autowired</span><br>   <span class=\"hljs-keyword\">private</span> RedissonClient redissonClient;<br><br>   <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">takeoutMoneyWithRedissonTryLock</span><span class=\"hljs-params\">(TakeOutMoneyRequest request)</span> <span class=\"hljs-keyword\">throws</span> InterruptedException &#123;<br>       <span class=\"hljs-type\">Integer</span> <span class=\"hljs-variable\">accountId</span> <span class=\"hljs-operator\">=</span> request.getAccountId();<br>       <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">key</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;lock::&quot;</span> + accountId;<br><br>       <span class=\"hljs-type\">RLock</span> <span class=\"hljs-variable\">lock</span> <span class=\"hljs-operator\">=</span> redissonClient.getLock(key);<br>       <span class=\"hljs-keyword\">if</span> (lock.tryLock(<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">4</span>, TimeUnit.SECONDS)) &#123; <span class=\"hljs-comment\">// 过期时间为2秒，最长存活时间为4秒</span><br>           <span class=\"hljs-comment\">// 上锁成功</span><br>           <span class=\"hljs-keyword\">try</span> &#123;<br>               Thread.sleep(<span class=\"hljs-number\">1000</span>);<br>               <span class=\"hljs-type\">Account</span> <span class=\"hljs-variable\">account</span> <span class=\"hljs-operator\">=</span> accountMapper.selectById(accountId);<br>               account.setBalance(account.getBalance() - request.getMoney());<br>               account.setUpdateTime(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Date</span>());<br>               <span class=\"hljs-keyword\">return</span> accountMapper.updateById(account) &gt; <span class=\"hljs-number\">0</span>;<br>           &#125; <span class=\"hljs-keyword\">finally</span> &#123;<br>               <span class=\"hljs-comment\">// 释放锁</span><br>               lock.unlock();<br>           &#125;<br>       &#125;<br>       <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;<br>   &#125;<br></code></pre></td></tr></table></figure>\n<p>添加测试方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Test</span><br> <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">testTakeoutMoneyWithRedissonTryLock</span><span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">throws</span> ExecutionException, InterruptedException &#123;<br>     <span class=\"hljs-type\">ExecutorService</span> <span class=\"hljs-variable\">executorService</span> <span class=\"hljs-operator\">=</span> Executors.newFixedThreadPool(<span class=\"hljs-number\">5</span>);<br>     Callable&lt;Boolean&gt; takeoutTask = () -&gt; &#123;<br>         <span class=\"hljs-type\">TakeOutMoneyRequest</span> <span class=\"hljs-variable\">request</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">TakeOutMoneyRequest</span>();<br>         request.setAccountId(<span class=\"hljs-number\">1</span>);<br>         request.setMoney(<span class=\"hljs-number\">100</span>);<br>         <span class=\"hljs-keyword\">return</span> accountService.takeoutMoneyWithRedissonTryLock(request);<br>     &#125;;<br>     List&lt;Future&lt;Boolean&gt;&gt; futureList = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayList</span>&lt;&gt;();<br>     <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">10</span>; i++) &#123;<br>         Future&lt;Boolean&gt; future = executorService.submit(takeoutTask);<br>         futureList.add(future);<br>     &#125;<br><br>     <span class=\"hljs-keyword\">for</span> (Future&lt;Boolean&gt; future : futureList) &#123;<br>         System.out.println(future.get());<br>     &#125;<br> &#125;<br></code></pre></td></tr></table></figure>\n<p>测试结果如下:</p>\n<img src=\"/2024/04/02/Redis%E5%AD%A6%E4%B9%A06%E2%80%94Redis%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/19.png\" class=\"\">\n<p>查看数据库，减少的次数与上面的次数一致</p>\n<img src=\"/2024/04/02/Redis%E5%AD%A6%E4%B9%A06%E2%80%94Redis%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/20.png\" class=\"\">\n<p>不过上面这种，成功率比较低，因此我们可以将tryLock改为lock方法，来上锁，我们修改accountService，添加相关方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">takeoutMoneyWithRedissonLock</span><span class=\"hljs-params\">(TakeOutMoneyRequest request)</span> <span class=\"hljs-keyword\">throws</span> InterruptedException &#123;<br>      <span class=\"hljs-type\">Integer</span> <span class=\"hljs-variable\">accountId</span> <span class=\"hljs-operator\">=</span> request.getAccountId();<br>      <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">key</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;lock::&quot;</span> + accountId;<br><br>      <span class=\"hljs-type\">RLock</span> <span class=\"hljs-variable\">lock</span> <span class=\"hljs-operator\">=</span> redissonClient.getLock(key);<br>      lock.lock(<span class=\"hljs-number\">2</span>, TimeUnit.SECONDS);<br>      <span class=\"hljs-comment\">// 上锁成功</span><br>      <span class=\"hljs-keyword\">try</span> &#123;<br>          Thread.sleep(<span class=\"hljs-number\">1000</span>);<br>          <span class=\"hljs-type\">Account</span> <span class=\"hljs-variable\">account</span> <span class=\"hljs-operator\">=</span> accountMapper.selectById(accountId);<br>          account.setBalance(account.getBalance() - request.getMoney());<br>          account.setUpdateTime(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Date</span>());<br>          <span class=\"hljs-keyword\">return</span> accountMapper.updateById(account) &gt; <span class=\"hljs-number\">0</span>;<br>      &#125; <span class=\"hljs-keyword\">finally</span> &#123;<br>          <span class=\"hljs-comment\">// 释放锁</span><br>          lock.unlock();<br>      &#125;<br>  &#125;<br></code></pre></td></tr></table></figure>\n<p>添加测试方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Test</span><br>   <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">testTakeoutMoneyWithRedissonLock</span><span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">throws</span> ExecutionException, InterruptedException &#123;<br>       <span class=\"hljs-type\">ExecutorService</span> <span class=\"hljs-variable\">executorService</span> <span class=\"hljs-operator\">=</span> Executors.newFixedThreadPool(<span class=\"hljs-number\">5</span>);<br>       Callable&lt;Boolean&gt; takeoutTask = () -&gt; &#123;<br>           <span class=\"hljs-type\">TakeOutMoneyRequest</span> <span class=\"hljs-variable\">request</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">TakeOutMoneyRequest</span>();<br>           request.setAccountId(<span class=\"hljs-number\">1</span>);<br>           request.setMoney(<span class=\"hljs-number\">100</span>);<br>           <span class=\"hljs-keyword\">return</span> accountService.takeoutMoneyWithRedissonLock(request);<br>       &#125;;<br>       List&lt;Future&lt;Boolean&gt;&gt; futureList = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayList</span>&lt;&gt;();<br>       <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">10</span>; i++) &#123;<br>           Future&lt;Boolean&gt; future = executorService.submit(takeoutTask);<br>           futureList.add(future);<br>       &#125;<br><br>       <span class=\"hljs-keyword\">for</span> (Future&lt;Boolean&gt; future : futureList) &#123;<br>           System.out.println(future.get());<br>       &#125;<br>   &#125;<br></code></pre></td></tr></table></figure>\n<p>测试结果如下：</p>\n<img src=\"/2024/04/02/Redis%E5%AD%A6%E4%B9%A06%E2%80%94Redis%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/21.png\" class=\"\">\n<p>查看数据库，扣减次数确实为10次。</p>\n<img src=\"/2024/04/02/Redis%E5%AD%A6%E4%B9%A06%E2%80%94Redis%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/22.png\" class=\"\">\n<h5 id=\"3-2-4-watch-dog-看门狗机制\"><a href=\"#3-2-4-watch-dog-看门狗机制\" class=\"headerlink\" title=\"3.2.4. watch dog 看门狗机制\"></a>3.2.4. watch dog 看门狗机制</h5><img src=\"/2024/04/02/Redis%E5%AD%A6%E4%B9%A06%E2%80%94Redis%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/23.png\" class=\"\">\n<p>Redisson中的分布式锁自带自动续期机制，其提供了一个专门用来监控和续期锁的Watch Dog（看门狗），如果操作共享资源的线程还没有执行完成的话，Watch Dog会不断延长锁的过期时间，从而保证锁不会因为超时而被释放。</p>\n<h3 id=\"4-参考文章\"><a href=\"#4-参考文章\" class=\"headerlink\" title=\"4. 参考文章\"></a>4. 参考文章</h3><p><a href=\"https://zhuanlan.zhihu.com/p/374306005\">https://zhuanlan.zhihu.com/p/374306005</a><br><a href=\"https://my.oschina.net/u/4499317/blog/5039486\">https://my.oschina.net/u/4499317/blog/5039486</a><br><a href=\"https://blog.csdn.net/qq_15071263/article/details/101277474\">https://blog.csdn.net/qq_15071263/article/details/101277474</a><br><a href=\"https://www.cnblogs.com/jelly12345/p/14699492.html\">https://www.cnblogs.com/jelly12345/p/14699492.html</a></p>\n","excerpt":"","more":"<h3 id=\"1-引言\"><a href=\"#1-引言\" class=\"headerlink\" title=\"1. 引言\"></a>1. 引言</h3><h4 id=\"1-1-分布式锁\"><a href=\"#1-1-分布式锁\" class=\"headerlink\" title=\"1.1. 分布式锁\"></a>1.1. 分布式锁</h4><p>分布式锁（Distributed Lock）是一种用于分布式系统中实现互斥访问的机制，在分布式系统中，多个节点同时访问共享资源可能导致数据不一致或竞态条件的问题，分布式锁通过协调多个节点之间的访问，确保在同一时间只有一个节点能获得对共享资源的独占访问权限，从而解决并发访问问题。</p>\n<h4 id=\"1-2-分布式锁实现方式\"><a href=\"#1-2-分布式锁实现方式\" class=\"headerlink\" title=\"1.2. 分布式锁实现方式\"></a>1.2. 分布式锁实现方式</h4><p>常用的分布式锁实现方式有：<br>1）基于数据库的分布式锁（乐观锁)：使用数据库的事务特性和唯一约束来实现分布式锁。通过在数据库中创建一个特定的表或记录来表示锁的状态，节点可以通过获取或释放该记录来获取或释放锁。<br>2）基于缓存的分布式锁：使用分布式缓存系统（如Redis）的原子操作来实现分布式锁，节点可以通过在缓存中设置一个特定的键值对来获取锁，并利用缓存的原子性操作来保证锁的互斥性。<br>3）基于zookeeper的分布式锁：zookeeper是一个分布式协调服务，可以用于实现分布式锁，节点可以通过在zookeeper中创建一个临时有序节点来表示锁的占用状态，通过比较节点 的序号来确定锁的拥有权。</p>\n<h3 id=\"2-基于数据库的分布式锁（乐观锁）\"><a href=\"#2-基于数据库的分布式锁（乐观锁）\" class=\"headerlink\" title=\"2. 基于数据库的分布式锁（乐观锁）\"></a>2. 基于数据库的分布式锁（乐观锁）</h3><p>基于数据库的分布式锁实现方案，一般是在表中加一个字段，用于表示版本号，当读取数据时，会读取对应的版本号，在更新数据的时候，也会相应的更新版本号（比如版本号递增），且在更新数据的时候，会判断当前版本号是否正确，以账户余额修改为例，具体流程如下：<br>1）查询账户信息（此时从数据库中查出的版本号为version1)<br>2）根据请求对账户对象进行操作<br>3）更新数据库(update t_account set 字段&#x3D;新值, version &#x3D; version + 1 where id &#x3D; #{accountId} and version &#x3D; version1的值)<br>在这个过程中，最重要的就是更新sql的语句，也就是在更新的时候，判断版本号是否被修改过，只有没有被修改过，我们才能更新成功。<br>示例如下：<br>首先，我们创建一个账户表：</p>\n<img src=\"/2024/04/02/Redis%E5%AD%A6%E4%B9%A06%E2%80%94Redis%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/1.png\" class=\"\">\n<p>然后在账户表上插入一条数据，假设账户中有1000元</p>\n<img src=\"/2024/04/02/Redis%E5%AD%A6%E4%B9%A06%E2%80%94Redis%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/2.png\" class=\"\">\n<p>对应的实体类和mapper：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@TableName(value = &quot;t_account&quot;)</span><br><span class=\"hljs-meta\">@Data</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Account</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">Serializable</span> &#123;<br>    <span class=\"hljs-meta\">@TableId(type = IdType.AUTO)</span><br>    <span class=\"hljs-keyword\">private</span> Integer id;<br><br>    <span class=\"hljs-keyword\">private</span> Integer userId;<br><br>    <span class=\"hljs-keyword\">private</span> Integer balance;<br><br>    <span class=\"hljs-keyword\">private</span> Date createTime;<br><br>    <span class=\"hljs-keyword\">private</span> Date updateTime;<br><br>    <span class=\"hljs-keyword\">private</span> Integer version;<br>&#125;<br><br><br><br><span class=\"hljs-meta\">@Mapper</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">AccountMapper</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">BaseMapper</span>&lt;Account&gt; &#123;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>然后我们创建一个AccountService，先演示没有乐观锁时，会造成的问题</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> org.example.service;<br><br><span class=\"hljs-keyword\">import</span> org.example.mapper.AccountMapper;<br><span class=\"hljs-keyword\">import</span> org.example.pojo.Account;<br><span class=\"hljs-keyword\">import</span> org.example.request.account.TakeOutMoneyRequest;<br><span class=\"hljs-keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class=\"hljs-keyword\">import</span> org.springframework.stereotype.Service;<br><br><span class=\"hljs-keyword\">import</span> java.util.Date;<br><br><span class=\"hljs-meta\">@Service</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">AccountService</span> &#123;<br>    <span class=\"hljs-meta\">@Autowired</span><br>    <span class=\"hljs-keyword\">private</span> AccountMapper accountMapper;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">takeOutMoneyWithoutOpLock</span><span class=\"hljs-params\">(TakeOutMoneyRequest request)</span> <span class=\"hljs-keyword\">throws</span> InterruptedException &#123;<br>        <span class=\"hljs-type\">Integer</span> <span class=\"hljs-variable\">accountId</span> <span class=\"hljs-operator\">=</span> request.getAccountId();<br>        <span class=\"hljs-type\">Account</span> <span class=\"hljs-variable\">account</span> <span class=\"hljs-operator\">=</span> accountMapper.selectById(accountId);<br>        <span class=\"hljs-keyword\">if</span> (account.getBalance() - request.getMoney() &lt; <span class=\"hljs-number\">0</span>) &#123;<br>            System.out.println(<span class=\"hljs-string\">&quot;余额不足==============&quot;</span>);<br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;<br>        &#125;<br>        Thread.sleep(<span class=\"hljs-number\">1000</span>);<br><br>        account.setBalance(account.getBalance() - request.getMoney());<br>        account.setUpdateTime(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Date</span>());<br>        <span class=\"hljs-keyword\">return</span> accountMapper.updateById(account) &gt; <span class=\"hljs-number\">0</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>添加一个测试类，用于演示并发情况下，账户余额的减少</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> org.example.service;<br><br><span class=\"hljs-keyword\">import</span> org.example.mapper.AccountMapper;<br><span class=\"hljs-keyword\">import</span> org.example.pojo.Account;<br><span class=\"hljs-keyword\">import</span> org.example.request.account.TakeOutMoneyRequest;<br><span class=\"hljs-keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class=\"hljs-keyword\">import</span> org.springframework.stereotype.Service;<br><br><span class=\"hljs-keyword\">import</span> java.util.Date;<br><br><span class=\"hljs-meta\">@Service</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">AccountService</span> &#123;<br>    <span class=\"hljs-meta\">@Autowired</span><br>    <span class=\"hljs-keyword\">private</span> AccountMapper accountMapper;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">takeOutMoneyWithoutOpLock</span><span class=\"hljs-params\">(TakeOutMoneyRequest request)</span> <span class=\"hljs-keyword\">throws</span> InterruptedException &#123;<br>        <span class=\"hljs-type\">Integer</span> <span class=\"hljs-variable\">accountId</span> <span class=\"hljs-operator\">=</span> request.getAccountId();<br>        <span class=\"hljs-type\">Account</span> <span class=\"hljs-variable\">account</span> <span class=\"hljs-operator\">=</span> accountMapper.selectById(accountId);<br>        <span class=\"hljs-keyword\">if</span> (account.getBalance() - request.getMoney() &lt; <span class=\"hljs-number\">0</span>) &#123;<br>            System.out.println(<span class=\"hljs-string\">&quot;余额不足==============&quot;</span>);<br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;<br>        &#125;<br>        Thread.sleep(<span class=\"hljs-number\">1000</span>);<br><br>        account.setBalance(account.getBalance() - request.getMoney());<br>        account.setUpdateTime(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Date</span>());<br>        <span class=\"hljs-keyword\">return</span> accountMapper.updateById(account) &gt; <span class=\"hljs-number\">0</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>运行测试方法，结果如下图所示，说明都更新成功了</p>\n<img src=\"/2024/04/02/Redis%E5%AD%A6%E4%B9%A06%E2%80%94Redis%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/3.png\" class=\"\">\n<p>然后查看数据库：</p>\n<img src=\"/2024/04/02/Redis%E5%AD%A6%E4%B9%A06%E2%80%94Redis%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/4.png\" class=\"\">\n<p>如上图所示，原先我们的账户余额是1000元，每次扣除100元，经过10次扣减后，账户余额应该为0，但是因为并发问题，导致查询的时候，有多个请求查询到同一个值，最后导致数据不一致。<br>我们修改Account，添加使用乐观锁进行扣减余额的方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">takeOutMoneyWithOpLock</span><span class=\"hljs-params\">(TakeOutMoneyRequest request)</span> <span class=\"hljs-keyword\">throws</span> InterruptedException &#123;<br>     <span class=\"hljs-type\">Integer</span> <span class=\"hljs-variable\">accountId</span> <span class=\"hljs-operator\">=</span> request.getAccountId();<br>     <span class=\"hljs-type\">Account</span> <span class=\"hljs-variable\">account</span> <span class=\"hljs-operator\">=</span> accountMapper.selectById(accountId);<br>     <span class=\"hljs-keyword\">if</span> (account.getBalance() - request.getMoney() &lt; <span class=\"hljs-number\">0</span>) &#123;<br>         System.out.println(<span class=\"hljs-string\">&quot;余额不足==============&quot;</span>);<br>         <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;<br>     &#125;<br>     Thread.sleep(<span class=\"hljs-number\">1000</span>);<br><br>     LambdaUpdateWrapper&lt;Account&gt; lambdaUpdateWrapper = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">LambdaUpdateWrapper</span>&lt;&gt;();<br>     lambdaUpdateWrapper.set(Account::getVersion, account.getVersion() + <span class=\"hljs-number\">1</span>)<br>             .set(Account::getUpdateTime, <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Date</span>())<br>                     .set(Account::getBalance, account.getBalance() - request.getMoney())<br>                             .eq(Account::getVersion, account.getVersion())<br>                                     .eq(Account::getId, request.getAccountId());<br>     <span class=\"hljs-keyword\">return</span> accountMapper.update(account, lambdaUpdateWrapper) &gt; <span class=\"hljs-number\">0</span>;<br> &#125;<br></code></pre></td></tr></table></figure>\n<p>我们把金额修改回1000，然后添加测试方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Test</span><br>   <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">testTakeoutMoneyWithOpLock</span><span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">throws</span> ExecutionException, InterruptedException &#123;<br>       <span class=\"hljs-type\">ExecutorService</span> <span class=\"hljs-variable\">executorService</span> <span class=\"hljs-operator\">=</span> Executors.newFixedThreadPool(<span class=\"hljs-number\">5</span>);<br>       Callable&lt;Boolean&gt; takeoutTask = () -&gt; &#123;<br>           <span class=\"hljs-type\">TakeOutMoneyRequest</span> <span class=\"hljs-variable\">request</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">TakeOutMoneyRequest</span>();<br>           request.setAccountId(<span class=\"hljs-number\">1</span>);<br>           request.setMoney(<span class=\"hljs-number\">100</span>);<br>           <span class=\"hljs-keyword\">try</span> &#123;<br>               <span class=\"hljs-keyword\">return</span> accountService.takeOutMoneyWithOpLock(request);<br>           &#125; <span class=\"hljs-keyword\">catch</span> (InterruptedException e) &#123;<br>               <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;<br>           &#125;<br>       &#125;;<br>       List&lt;Future&lt;Boolean&gt;&gt; futureList = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayList</span>&lt;&gt;();<br>       <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">10</span>; i++) &#123;<br>           Future&lt;Boolean&gt; future = executorService.submit(takeoutTask);<br>           futureList.add(future);<br>       &#125;<br><br>       <span class=\"hljs-keyword\">for</span> (Future&lt;Boolean&gt; future : futureList) &#123;<br>           System.out.println(future.get());<br>       &#125;<br>   &#125;<br></code></pre></td></tr></table></figure>\n<p>运行测试方法，结果如下，说明只有两次更新成功了，其余的更新，都以为乐观锁被修改了，导致更新失败</p>\n<img src=\"/2024/04/02/Redis%E5%AD%A6%E4%B9%A06%E2%80%94Redis%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/5.png\" class=\"\">\n<p>然后我们查看数据库，结果如下，因为扣减了两次，所有余额为800，这个数据对的上。</p>\n<img src=\"/2024/04/02/Redis%E5%AD%A6%E4%B9%A06%E2%80%94Redis%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/6.png\" class=\"\">\n<p>乐观锁的实现思路，是基于对并发更新的乐观假设，也就是认为冲突的概率较低，因此在读取和提交数据时进行版本号或时间戳的比较，而不是在数据访问阶段进行加锁操作，避免了显示的锁竞争，提高了并发性能。但乐观锁并不能完全消除并发冲突，只是在提交数据时进行冲突检测和处理，如果系统中的并发冲突非常频繁，乐观锁的效率可能会下降。</p>\n<h3 id=\"3-基于Redis的分布式锁\"><a href=\"#3-基于Redis的分布式锁\" class=\"headerlink\" title=\"3. 基于Redis的分布式锁\"></a>3. 基于Redis的分布式锁</h3><h4 id=\"3-1-基于Redis的SETNX实现分布式锁\"><a href=\"#3-1-基于Redis的SETNX实现分布式锁\" class=\"headerlink\" title=\"3.1. 基于Redis的SETNX实现分布式锁\"></a>3.1. 基于Redis的SETNX实现分布式锁</h4><p>SETNX指的是set if not exist，也就是当key不存在的时候，设置key的值，存在的话，什么都不做, 其语法为:</p>\n<figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs gams\"><span class=\"hljs-keyword\">set</span> key <span class=\"hljs-comment\">value nx</span><br></code></pre></td></tr></table></figure>\n<p>如果我们要设置过期时间的话，可以使用</p>\n<figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs gams\"><span class=\"hljs-keyword\">set</span> key <span class=\"hljs-comment\">value ex</span> 时间 <span class=\"hljs-comment\">nx</span><br></code></pre></td></tr></table></figure>\n<p>如下图所示，在使用nx指令的时候，只有在该key不存在的时候，才能设置成功</p>\n<img src=\"/2024/04/02/Redis%E5%AD%A6%E4%B9%A06%E2%80%94Redis%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/7.png\" class=\"\">\n<p>我们修改之前的RedisUtils工具类，添加上和这两条指令相关的方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">setIfAbsent</span><span class=\"hljs-params\">(String key, Object value)</span> &#123;<br>       <span class=\"hljs-keyword\">return</span> redisTemplate.opsForValue().setIfAbsent(key, value);<br>   &#125;<br><br>   <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">    * 不存在时设置值，适用与分布式锁的场景</span><br><span class=\"hljs-comment\">    * <span class=\"hljs-doctag\">@param</span> key</span><br><span class=\"hljs-comment\">    * <span class=\"hljs-doctag\">@param</span> value</span><br><span class=\"hljs-comment\">    * <span class=\"hljs-doctag\">@param</span> time</span><br><span class=\"hljs-comment\">    * <span class=\"hljs-doctag\">@return</span></span><br><span class=\"hljs-comment\">    */</span><br>   <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">setIfAbsent</span><span class=\"hljs-params\">(String key, Object value, <span class=\"hljs-type\">long</span> time)</span> &#123;<br>       <span class=\"hljs-keyword\">return</span> setIfAbsent(key, value, time, TimeUnit.SECONDS);<br>   &#125;<br><br>   <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">setIfAbsent</span><span class=\"hljs-params\">(String key, Object value, <span class=\"hljs-type\">long</span> time, TimeUnit timeUnit)</span> &#123;<br>       <span class=\"hljs-keyword\">return</span> redisTemplate.opsForValue().setIfAbsent(key, value, time, timeUnit);<br>   &#125;<br></code></pre></td></tr></table></figure>\n<h5 id=\"3-1-1-通过setnx实现分布式锁\"><a href=\"#3-1-1-通过setnx实现分布式锁\" class=\"headerlink\" title=\"3.1.1. 通过setnx实现分布式锁\"></a>3.1.1. 通过setnx实现分布式锁</h5><p>具体流程如下：</p>\n<img src=\"/2024/04/02/Redis%E5%AD%A6%E4%B9%A06%E2%80%94Redis%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/24.png\" class=\"\">\n<p>我们修改AccountService，添加和该指令相关的方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Autowired</span><br>  <span class=\"hljs-keyword\">private</span> RedisUtils redisUtils;<br><br>  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">takeOutMoneyWithSetnx</span><span class=\"hljs-params\">(TakeOutMoneyRequest request)</span> &#123;<br>      <span class=\"hljs-type\">Integer</span> <span class=\"hljs-variable\">accountId</span> <span class=\"hljs-operator\">=</span> request.getAccountId();<br>      <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">key</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;lock::&quot;</span> + accountId;<br><br>      <span class=\"hljs-type\">boolean</span> <span class=\"hljs-variable\">lock</span> <span class=\"hljs-operator\">=</span> redisUtils.setIfAbsent(key, request.getAccountId());<br>      <span class=\"hljs-keyword\">if</span> (!lock) &#123;<br>          <span class=\"hljs-comment\">// 加锁失败，返回</span><br>          <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;<br>      &#125;<br>      <span class=\"hljs-comment\">// 加锁成功</span><br>      <span class=\"hljs-keyword\">try</span> &#123;<br>          <span class=\"hljs-type\">Account</span> <span class=\"hljs-variable\">account</span> <span class=\"hljs-operator\">=</span> accountMapper.selectById(accountId);<br>          account.setBalance(account.getBalance() - request.getMoney());<br>          account.setUpdateTime(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Date</span>());<br>          <span class=\"hljs-keyword\">return</span> accountMapper.updateById(account) &gt; <span class=\"hljs-number\">0</span>;<br>      &#125; <span class=\"hljs-keyword\">finally</span> &#123;<br>          <span class=\"hljs-comment\">// 释放锁</span><br>          redisUtils.removeKey(key);<br>      &#125;<br>  &#125;<br></code></pre></td></tr></table></figure>\n<p>添加测试方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Test</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">testTakeoutMoneyWithSetnx</span><span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">throws</span> ExecutionException, InterruptedException &#123;<br>        <span class=\"hljs-type\">ExecutorService</span> <span class=\"hljs-variable\">executorService</span> <span class=\"hljs-operator\">=</span> Executors.newFixedThreadPool(<span class=\"hljs-number\">5</span>);<br>        Callable&lt;Boolean&gt; takeoutTask = () -&gt; &#123;<br>            <span class=\"hljs-type\">TakeOutMoneyRequest</span> <span class=\"hljs-variable\">request</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">TakeOutMoneyRequest</span>();<br>            request.setAccountId(<span class=\"hljs-number\">1</span>);<br>            request.setMoney(<span class=\"hljs-number\">100</span>);<br>            <span class=\"hljs-keyword\">return</span> accountService.takeOutMoneyWithSetnx(request);<br>        &#125;;<br>        List&lt;Future&lt;Boolean&gt;&gt; futureList = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayList</span>&lt;&gt;();<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">10</span>; i++) &#123;<br>            Future&lt;Boolean&gt; future = executorService.submit(takeoutTask);<br>            futureList.add(future);<br>        &#125;<br><br>        <span class=\"hljs-keyword\">for</span> (Future&lt;Boolean&gt; future : futureList) &#123;<br>            System.out.println(future.get());<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure>\n<p>测试结果如下：</p>\n<img src=\"/2024/04/02/Redis%E5%AD%A6%E4%B9%A06%E2%80%94Redis%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/8.png\" class=\"\">\n<p>我们查看数据库，确实只扣减了100</p>\n<img src=\"/2024/04/02/Redis%E5%AD%A6%E4%B9%A06%E2%80%94Redis%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/9.png\" class=\"\">\n<p>这里冲突次数比较多，因此更新的效率有点低，我们可以将对应的方法修改一下，加上重试，修改代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Autowired</span><br>  <span class=\"hljs-keyword\">private</span> RedisUtils redisUtils;<br><br>  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">takeOutMoneyWithSetnx</span><span class=\"hljs-params\">(TakeOutMoneyRequest request)</span> &#123;<br>      <span class=\"hljs-type\">Integer</span> <span class=\"hljs-variable\">accountId</span> <span class=\"hljs-operator\">=</span> request.getAccountId();<br>      <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">key</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;lock::&quot;</span> + accountId;<br><br>      <span class=\"hljs-type\">boolean</span> <span class=\"hljs-variable\">lock</span> <span class=\"hljs-operator\">=</span> redisUtils.setIfAbsent(key, request.getAccountId());<br>      <span class=\"hljs-keyword\">if</span> (lock) &#123;<br>          <span class=\"hljs-comment\">// 加锁成功</span><br>          <span class=\"hljs-keyword\">try</span> &#123;<br>              <span class=\"hljs-type\">Account</span> <span class=\"hljs-variable\">account</span> <span class=\"hljs-operator\">=</span> accountMapper.selectById(accountId);<br>              account.setBalance(account.getBalance() - request.getMoney());<br>              account.setUpdateTime(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Date</span>());<br>              <span class=\"hljs-keyword\">return</span> accountMapper.updateById(account) &gt; <span class=\"hljs-number\">0</span>;<br>          &#125; <span class=\"hljs-keyword\">finally</span> &#123;<br>              <span class=\"hljs-comment\">// 释放锁</span><br>              redisUtils.removeKey(key);<br>          &#125;<br>      &#125;<br>      <span class=\"hljs-comment\">// 加锁失败，进行重试</span><br>      <span class=\"hljs-keyword\">try</span> &#123;<br>          Thread.sleep(<span class=\"hljs-number\">100</span>);<br>      &#125; <span class=\"hljs-keyword\">catch</span> (InterruptedException e) &#123;<br>          e.printStackTrace();<br>      &#125;<br>      <span class=\"hljs-keyword\">return</span> takeOutMoneyWithSetnx(request);<br>  &#125;<br></code></pre></td></tr></table></figure>\n<p>这里休眠了一段时间，是因为要涉及到递归调用，可能会导致栈空间溢出，我们再次执行测试代码，结果如下，经过重试后，执行成功率变高。</p>\n<img src=\"/2024/04/02/Redis%E5%AD%A6%E4%B9%A06%E2%80%94Redis%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/10.png\" class=\"\">\n<p>查看数据库，确实扣减了10次。</p>\n<img src=\"/2024/04/02/Redis%E5%AD%A6%E4%B9%A06%E2%80%94Redis%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/11.png\" class=\"\">\n<p>但是，使用set key value nx存在一个问题，如果setnx占锁成功，但是服务器宕机了，没有执行删除锁的逻辑，那么就会造成这个锁一直没有被释放，最终导致死锁。</p>\n<h5 id=\"3-1-2-setnx-with-expire\"><a href=\"#3-1-2-setnx-with-expire\" class=\"headerlink\" title=\"3.1.2. setnx with expire\"></a>3.1.2. setnx with expire</h5><p>为解决setnx造成的死锁问题，我们在setnx的基础上，加上过期时间，来解决上述问题。我们给AccountService添加上对应的方法如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">takeOutMoneyWithSetnxExpire</span><span class=\"hljs-params\">(TakeOutMoneyRequest request)</span> &#123;<br>       <span class=\"hljs-type\">Integer</span> <span class=\"hljs-variable\">accountId</span> <span class=\"hljs-operator\">=</span> request.getAccountId();<br>       <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">key</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;lock::&quot;</span> + accountId;<br>       <br>       <span class=\"hljs-comment\">// 占有锁并设置过期时间</span><br>       <span class=\"hljs-type\">boolean</span> <span class=\"hljs-variable\">lock</span> <span class=\"hljs-operator\">=</span> redisUtils.setIfAbsent(key, request.getAccountId(), TTL);<br>       <span class=\"hljs-keyword\">if</span> (lock) &#123;<br>           <span class=\"hljs-comment\">// 加锁成功</span><br>           <span class=\"hljs-keyword\">try</span> &#123;<br>               <span class=\"hljs-type\">Account</span> <span class=\"hljs-variable\">account</span> <span class=\"hljs-operator\">=</span> accountMapper.selectById(accountId);<br>               account.setBalance(account.getBalance() - request.getMoney());<br>               account.setUpdateTime(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Date</span>());<br>               <span class=\"hljs-keyword\">return</span> accountMapper.updateById(account) &gt; <span class=\"hljs-number\">0</span>;<br>           &#125; <span class=\"hljs-keyword\">finally</span> &#123;<br>               <span class=\"hljs-comment\">// 释放锁</span><br>               redisUtils.removeKey(key);<br>           &#125;<br>       &#125;<br>       <span class=\"hljs-comment\">// 加锁失败，进行重试</span><br>       <span class=\"hljs-keyword\">try</span> &#123;<br>           Thread.sleep(<span class=\"hljs-number\">100</span>);<br>       &#125; <span class=\"hljs-keyword\">catch</span> (InterruptedException e) &#123;<br>           e.printStackTrace();<br>       &#125;<br>       <span class=\"hljs-keyword\">return</span> takeOutMoneyWithSetnx(request);<br>   &#125;<br></code></pre></td></tr></table></figure>\n<p>添加上对应的测试方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Test</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">testTakeoutMoneyWithSetnxExpire</span><span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">throws</span> ExecutionException, InterruptedException &#123;<br>        <span class=\"hljs-type\">ExecutorService</span> <span class=\"hljs-variable\">executorService</span> <span class=\"hljs-operator\">=</span> Executors.newFixedThreadPool(<span class=\"hljs-number\">5</span>);<br>        Callable&lt;Boolean&gt; takeoutTask = () -&gt; &#123;<br>            <span class=\"hljs-type\">TakeOutMoneyRequest</span> <span class=\"hljs-variable\">request</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">TakeOutMoneyRequest</span>();<br>            request.setAccountId(<span class=\"hljs-number\">1</span>);<br>            request.setMoney(<span class=\"hljs-number\">100</span>);<br>            <span class=\"hljs-keyword\">return</span> accountService.takeOutMoneyWithSetnxExpire(request);<br>        &#125;;<br>        List&lt;Future&lt;Boolean&gt;&gt; futureList = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayList</span>&lt;&gt;();<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">10</span>; i++) &#123;<br>            Future&lt;Boolean&gt; future = executorService.submit(takeoutTask);<br>            futureList.add(future);<br>        &#125;<br><br>        <span class=\"hljs-keyword\">for</span> (Future&lt;Boolean&gt; future : futureList) &#123;<br>            System.out.println(future.get());<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure>\n<p>测试结果如下：</p>\n<img src=\"/2024/04/02/Redis%E5%AD%A6%E4%B9%A06%E2%80%94Redis%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/12.png\" class=\"\">\n<p>我们 查看数据库，数据库也确实扣减了10次</p>\n<img src=\"/2024/04/02/Redis%E5%AD%A6%E4%B9%A06%E2%80%94Redis%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/13.png\" class=\"\">\n<p>但是，这个方案还是有一定缺陷，因为我们设置的这个过期时间，是根据我们的经验设置的，而业务代码的执行时长，是不确定的，那么可能存在这种情况，假设我们现在有三个请求过来，我们设置的过期时间是100ms<br>1）请求A占锁成功，执行业务代码<br>2）请求A执行100ms后，锁过期，但此时请求A的业务代码还未执行完毕<br>3）请求B占锁成功，执行业务代码<br>4）请求A执行完毕，执行释放锁的逻辑，导致把B占有的锁打开了<br>5）请求C占锁成功，执行业务代码<br>6）请求B执行完毕，执行释放锁的逻辑，导致把C占有的锁打开了<br>这里是因为，这三个请求占有的锁的key都是相同的，而我们在释放锁的时候，只是执行删除key的命令，并不在意这个锁是谁占有的。<br>这种情况，我们可以通过lua脚本来解决，思路如下：<br>1）占锁的时候，设置value值为用户标识<br>2）释放锁的时候，通过lua脚本，判断此时key对应的value值，与传入值是否相同，只有相同的时候，我们才执行删除key的逻辑。<br>我们修改刚才的方法，如下，在占锁的时候，我们设置value值为当前的线程id（这里是为了演示，实际业务场景中，应该是多个用户抢占同一个资源，因此可以将vlaue值设置为用户的标识，比如用户id），然后在释放资源的时候，执行lua脚本，判断value值是否相同，相同则执行删除操作。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Autowired</span><br>  <span class=\"hljs-keyword\">private</span> RedisTemplate&lt;String, Object&gt; redisTemplate;<br>  <br> <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">takeOutMoneyWithSetnxExpire</span><span class=\"hljs-params\">(TakeOutMoneyRequest request)</span> &#123;<br>      <span class=\"hljs-type\">Integer</span> <span class=\"hljs-variable\">accountId</span> <span class=\"hljs-operator\">=</span> request.getAccountId();<br>      <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">key</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;lock::&quot;</span> + accountId;<br><br>      <span class=\"hljs-type\">long</span> <span class=\"hljs-variable\">threadId</span> <span class=\"hljs-operator\">=</span> Thread.currentThread().getId();<br>      <span class=\"hljs-comment\">// 占有锁并设置过期时间</span><br>      <span class=\"hljs-type\">boolean</span> <span class=\"hljs-variable\">lock</span> <span class=\"hljs-operator\">=</span> redisUtils.setIfAbsent(key, threadId, TTL);<br>      <span class=\"hljs-keyword\">if</span> (lock) &#123;<br>          <span class=\"hljs-comment\">// 加锁成功</span><br>          <span class=\"hljs-keyword\">try</span> &#123;<br>              <span class=\"hljs-type\">Account</span> <span class=\"hljs-variable\">account</span> <span class=\"hljs-operator\">=</span> accountMapper.selectById(accountId);<br>              account.setBalance(account.getBalance() - request.getMoney());<br>              account.setUpdateTime(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Date</span>());<br>              <span class=\"hljs-keyword\">return</span> accountMapper.updateById(account) &gt; <span class=\"hljs-number\">0</span>;<br>          &#125; <span class=\"hljs-keyword\">finally</span> &#123;<br>              <span class=\"hljs-comment\">// 释放锁</span><br>              <span class=\"hljs-comment\">// lua脚本</span><br>              <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">script</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;if redis.call(&#x27;get&#x27;, KEYS[1]) == ARGV[1] then return redis.call(&#x27;del&#x27;, KEYS[1]) else return 0 end&quot;</span>;<br>              redisTemplate.execute(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">DefaultRedisScript</span>&lt;Long&gt;(script, Long.class), Arrays.asList(key), threadId);<br>          &#125;<br>      &#125;<br>      <span class=\"hljs-comment\">// 加锁失败，进行重试</span><br>      <span class=\"hljs-keyword\">try</span> &#123;<br>          Thread.sleep(<span class=\"hljs-number\">100</span>);<br>      &#125; <span class=\"hljs-keyword\">catch</span> (InterruptedException e) &#123;<br>          e.printStackTrace();<br>      &#125;<br>      <span class=\"hljs-keyword\">return</span> takeOutMoneyWithSetnx(request);<br>  &#125;<br></code></pre></td></tr></table></figure>\n<p>再次执行测试代码：</p>\n<img src=\"/2024/04/02/Redis%E5%AD%A6%E4%B9%A06%E2%80%94Redis%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/14.png\" class=\"\">\n<p>查看数据库，确实减少10次</p>\n<img src=\"/2024/04/02/Redis%E5%AD%A6%E4%B9%A06%E2%80%94Redis%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/15.png\" class=\"\">\n<p>但这里还有一个问题没有解决，因为我们设置的TTL，是我们的经验值，不准确，所以还是会存在，某个请求占有锁后，还没执行完毕，锁过期了，被另外一个请求占有，此时会出现两个请求都认为自己占有锁的情况。</p>\n<h4 id=\"3-2-Redisson\"><a href=\"#3-2-Redisson\" class=\"headerlink\" title=\"3.2. Redisson\"></a>3.2. Redisson</h4><h5 id=\"3-2-1-简介\"><a href=\"#3-2-1-简介\" class=\"headerlink\" title=\"3.2.1. 简介\"></a>3.2.1. 简介</h5><p>Redisson是一个在Redis基础上实现的Java驻内存数据网络，它不仅提供一系列的分布式java常用对象，还提供许多分布式服务，其宗旨是促进使用者对Redis的关注分离（Separation of Concern），从而让使用者能将精力更多集中在处理业务逻辑上。</p>\n<img src=\"/2024/04/02/Redis%E5%AD%A6%E4%B9%A06%E2%80%94Redis%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/16.png\" class=\"\">\n<h5 id=\"3-2-2-SpringBoot-整合Redisson\"><a href=\"#3-2-2-SpringBoot-整合Redisson\" class=\"headerlink\" title=\"3.2.2. SpringBoot 整合Redisson\"></a>3.2.2. SpringBoot 整合Redisson</h5><p>引入redisson的maven依赖：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.redisson<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>redisson<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>3.15.5<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<p>然后自定义配置类（这里使用的是单节点Redis配置）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> org.example.config;<br><br><span class=\"hljs-keyword\">import</span> org.redisson.Redisson;<br><span class=\"hljs-keyword\">import</span> org.redisson.api.RedissonClient;<br><span class=\"hljs-keyword\">import</span> org.redisson.config.Config;<br><span class=\"hljs-keyword\">import</span> org.springframework.context.annotation.Bean;<br><span class=\"hljs-keyword\">import</span> org.springframework.context.annotation.Configuration;<br><br><span class=\"hljs-meta\">@Configuration</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">RedissonConfiguration</span> &#123;<br>    <br>    <span class=\"hljs-meta\">@Bean</span><br>    <span class=\"hljs-keyword\">public</span> RedissonClient <span class=\"hljs-title function_\">redisson</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-comment\">// 1. 创建配置</span><br>        <span class=\"hljs-type\">Config</span> <span class=\"hljs-variable\">config</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Config</span>();<br>        <span class=\"hljs-comment\">// 集群模式</span><br><span class=\"hljs-comment\">//        config.useClusterServers().addNodeAddress(&quot;集群ip1&quot;, &quot;集群id2&quot;);</span><br>        <span class=\"hljs-comment\">// 2. 根据Config创建出RedissonClient示例</span><br>        config.useSingleServer().setAddress(<span class=\"hljs-string\">&quot;redis://127.0.0.1:6379&quot;</span>);<br>        <span class=\"hljs-keyword\">return</span> Redisson.create(config);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>我们添加测试方法，来测试redisson的一些基本操作：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> org.example;<br><br><span class=\"hljs-keyword\">import</span> com.alibaba.fastjson.JSONObject;<br><span class=\"hljs-keyword\">import</span> org.junit.jupiter.api.Test;<br><span class=\"hljs-keyword\">import</span> org.redisson.api.*;<br><span class=\"hljs-keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class=\"hljs-keyword\">import</span> org.springframework.boot.test.context.SpringBootTest;<br><br><span class=\"hljs-keyword\">import</span> java.util.concurrent.TimeUnit;<br><br><span class=\"hljs-meta\">@SpringBootTest</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">RedissonTest</span> &#123;<br>    <span class=\"hljs-meta\">@Autowired</span><br>    <span class=\"hljs-keyword\">private</span> RedissonClient redissonClient;<br><br>    <span class=\"hljs-meta\">@Test</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">testRedisson</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-comment\">// 字符串操作</span><br>        RBucket&lt;Object&gt; rBuck = redissonClient.getBucket(<span class=\"hljs-string\">&quot;name&quot;</span>);<br>        rBuck.set(<span class=\"hljs-string\">&quot;cxy&quot;</span>, <span class=\"hljs-number\">30</span>, TimeUnit.SECONDS);<br>        System.out.println(redissonClient.getBucket(<span class=\"hljs-string\">&quot;name&quot;</span>).get());<br><br>        <span class=\"hljs-comment\">// 哈希操作</span><br>        RMap&lt;Object, Object&gt; student = redissonClient.getMap(<span class=\"hljs-string\">&quot;student&quot;</span>);<br>        student.put(<span class=\"hljs-string\">&quot;id&quot;</span>, <span class=\"hljs-number\">1</span>);<br>        student.put(<span class=\"hljs-string\">&quot;name&quot;</span>, <span class=\"hljs-string\">&quot;cxy&quot;</span>);<br>        student.put(<span class=\"hljs-string\">&quot;age&quot;</span>, <span class=\"hljs-number\">20</span>);<br>        student.expire(<span class=\"hljs-number\">30</span>, TimeUnit.SECONDS);<br><br>        System.out.println(redissonClient.getMap(<span class=\"hljs-string\">&quot;student&quot;</span>).get(<span class=\"hljs-string\">&quot;name&quot;</span>));<br><br>        <span class=\"hljs-comment\">// 列表操作</span><br>        RList&lt;Object&gt; schools = redissonClient.getList(<span class=\"hljs-string\">&quot;schools&quot;</span>);<br>        schools.add(<span class=\"hljs-string\">&quot;华南理工大学&quot;</span>);<br>        schools.add(<span class=\"hljs-string\">&quot;中山大学&quot;</span>);<br>        schools.add(<span class=\"hljs-string\">&quot;暨南大学&quot;</span>);<br>        System.out.println(JSONObject.toJSONString(redissonClient.getList(<span class=\"hljs-string\">&quot;schools&quot;</span>)));<br><br>        <span class=\"hljs-comment\">// 集合操作</span><br>        RSet&lt;Object&gt; schoolSet = redissonClient.getSet(<span class=\"hljs-string\">&quot;schoolSet&quot;</span>);<br>        schoolSet.add(<span class=\"hljs-string\">&quot;华南理工大学&quot;</span>);<br>        schoolSet.add(<span class=\"hljs-string\">&quot;中山大学&quot;</span>);<br>        schoolSet.add(<span class=\"hljs-string\">&quot;暨南大学&quot;</span>);<br>        System.out.println(JSONObject.toJSONString(redissonClient.getSet(<span class=\"hljs-string\">&quot;schoolSet&quot;</span>)));<br><br>        <span class=\"hljs-comment\">// ZSet操作</span><br>        RScoredSortedSet&lt;Object&gt; schoolScoreSet = redissonClient.getScoredSortedSet(<span class=\"hljs-string\">&quot;schoolScoreSet&quot;</span>);<br>        schoolScoreSet.add(<span class=\"hljs-number\">100d</span>, <span class=\"hljs-string\">&quot;华南理工大学&quot;</span>);<br>        schoolScoreSet.add(<span class=\"hljs-number\">90d</span>, <span class=\"hljs-string\">&quot;中山大学&quot;</span>);<br>        schoolScoreSet.add(<span class=\"hljs-number\">80d</span>, <span class=\"hljs-string\">&quot;暨南大学&quot;</span>);<br>        System.out.println(JSONObject.toJSONString(redissonClient.getScoredSortedSet(<span class=\"hljs-string\">&quot;schoolScoreSet&quot;</span>)));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>结果如下：</p>\n<img src=\"/2024/04/02/Redis%E5%AD%A6%E4%B9%A06%E2%80%94Redis%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/17.png\" class=\"\">\n<h5 id=\"3-2-3-Redisson分布式锁\"><a href=\"#3-2-3-Redisson分布式锁\" class=\"headerlink\" title=\"3.2.3. Redisson分布式锁\"></a>3.2.3. Redisson分布式锁</h5><p>redisson加锁，可以使用lock方法，注意，在加锁的时候，处理完业务逻辑后要记得释放锁，测试代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Test</span><br>  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">testLock</span><span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">throws</span> ExecutionException, InterruptedException &#123;<br>      <span class=\"hljs-type\">ExecutorService</span> <span class=\"hljs-variable\">executorService</span> <span class=\"hljs-operator\">=</span> Executors.newFixedThreadPool(<span class=\"hljs-number\">2</span>);<br>      <span class=\"hljs-type\">Runnable</span> <span class=\"hljs-variable\">lockTask</span> <span class=\"hljs-operator\">=</span> () -&gt; &#123;<br>          <span class=\"hljs-keyword\">try</span> &#123;<br>              lock();<br>          &#125; <span class=\"hljs-keyword\">catch</span> (InterruptedException e) &#123;<br>              e.printStackTrace();<br>          &#125;<br>      &#125;;<br>      List&lt; Future&gt; futureList = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayList</span>&lt;&gt;();<br>      <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">2</span>; i++) &#123;<br>          futureList.add(executorService.submit(lockTask));<br>      &#125;<br>      <span class=\"hljs-keyword\">for</span> (Future future : futureList) &#123;<br>          future.get();<br>      &#125;<br>  &#125;<br><br>  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">lock</span><span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">throws</span> InterruptedException &#123;<br>      <span class=\"hljs-type\">RLock</span> <span class=\"hljs-variable\">myLock</span> <span class=\"hljs-operator\">=</span> redissonClient.getLock(<span class=\"hljs-string\">&quot;myLock&quot;</span>);<br>      myLock.lock();<br>      <span class=\"hljs-keyword\">try</span> &#123;<br>          System.out.println(<span class=\"hljs-string\">&quot;currentTime:&quot;</span> + System.currentTimeMillis());<br>          Thread.sleep(<span class=\"hljs-number\">2000</span>);<br>          System.out.println(<span class=\"hljs-string\">&quot;执行业务代码&quot;</span>);<br>      &#125; <span class=\"hljs-keyword\">finally</span> &#123;<br>          myLock.unlock();<br>      &#125;<br>  &#125;<br></code></pre></td></tr></table></figure>\n<p>测试结果如下，从执行结果可以看出，当多个线程抢占锁时，后面的锁，需要等待，即这个锁是阻塞的。</p>\n<img src=\"/2024/04/02/Redis%E5%AD%A6%E4%B9%A06%E2%80%94Redis%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/18.png\" class=\"\">\n<p>如果不想阻塞的话，我们可以使用tryLock来上锁，结合刚才的accountService，我们先修改accountService，加上对应的方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Autowired</span><br>   <span class=\"hljs-keyword\">private</span> RedissonClient redissonClient;<br><br>   <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">takeoutMoneyWithRedissonTryLock</span><span class=\"hljs-params\">(TakeOutMoneyRequest request)</span> <span class=\"hljs-keyword\">throws</span> InterruptedException &#123;<br>       <span class=\"hljs-type\">Integer</span> <span class=\"hljs-variable\">accountId</span> <span class=\"hljs-operator\">=</span> request.getAccountId();<br>       <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">key</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;lock::&quot;</span> + accountId;<br><br>       <span class=\"hljs-type\">RLock</span> <span class=\"hljs-variable\">lock</span> <span class=\"hljs-operator\">=</span> redissonClient.getLock(key);<br>       <span class=\"hljs-keyword\">if</span> (lock.tryLock(<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">4</span>, TimeUnit.SECONDS)) &#123; <span class=\"hljs-comment\">// 过期时间为2秒，最长存活时间为4秒</span><br>           <span class=\"hljs-comment\">// 上锁成功</span><br>           <span class=\"hljs-keyword\">try</span> &#123;<br>               Thread.sleep(<span class=\"hljs-number\">1000</span>);<br>               <span class=\"hljs-type\">Account</span> <span class=\"hljs-variable\">account</span> <span class=\"hljs-operator\">=</span> accountMapper.selectById(accountId);<br>               account.setBalance(account.getBalance() - request.getMoney());<br>               account.setUpdateTime(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Date</span>());<br>               <span class=\"hljs-keyword\">return</span> accountMapper.updateById(account) &gt; <span class=\"hljs-number\">0</span>;<br>           &#125; <span class=\"hljs-keyword\">finally</span> &#123;<br>               <span class=\"hljs-comment\">// 释放锁</span><br>               lock.unlock();<br>           &#125;<br>       &#125;<br>       <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;<br>   &#125;<br></code></pre></td></tr></table></figure>\n<p>添加测试方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Test</span><br> <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">testTakeoutMoneyWithRedissonTryLock</span><span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">throws</span> ExecutionException, InterruptedException &#123;<br>     <span class=\"hljs-type\">ExecutorService</span> <span class=\"hljs-variable\">executorService</span> <span class=\"hljs-operator\">=</span> Executors.newFixedThreadPool(<span class=\"hljs-number\">5</span>);<br>     Callable&lt;Boolean&gt; takeoutTask = () -&gt; &#123;<br>         <span class=\"hljs-type\">TakeOutMoneyRequest</span> <span class=\"hljs-variable\">request</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">TakeOutMoneyRequest</span>();<br>         request.setAccountId(<span class=\"hljs-number\">1</span>);<br>         request.setMoney(<span class=\"hljs-number\">100</span>);<br>         <span class=\"hljs-keyword\">return</span> accountService.takeoutMoneyWithRedissonTryLock(request);<br>     &#125;;<br>     List&lt;Future&lt;Boolean&gt;&gt; futureList = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayList</span>&lt;&gt;();<br>     <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">10</span>; i++) &#123;<br>         Future&lt;Boolean&gt; future = executorService.submit(takeoutTask);<br>         futureList.add(future);<br>     &#125;<br><br>     <span class=\"hljs-keyword\">for</span> (Future&lt;Boolean&gt; future : futureList) &#123;<br>         System.out.println(future.get());<br>     &#125;<br> &#125;<br></code></pre></td></tr></table></figure>\n<p>测试结果如下:</p>\n<img src=\"/2024/04/02/Redis%E5%AD%A6%E4%B9%A06%E2%80%94Redis%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/19.png\" class=\"\">\n<p>查看数据库，减少的次数与上面的次数一致</p>\n<img src=\"/2024/04/02/Redis%E5%AD%A6%E4%B9%A06%E2%80%94Redis%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/20.png\" class=\"\">\n<p>不过上面这种，成功率比较低，因此我们可以将tryLock改为lock方法，来上锁，我们修改accountService，添加相关方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">takeoutMoneyWithRedissonLock</span><span class=\"hljs-params\">(TakeOutMoneyRequest request)</span> <span class=\"hljs-keyword\">throws</span> InterruptedException &#123;<br>      <span class=\"hljs-type\">Integer</span> <span class=\"hljs-variable\">accountId</span> <span class=\"hljs-operator\">=</span> request.getAccountId();<br>      <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">key</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;lock::&quot;</span> + accountId;<br><br>      <span class=\"hljs-type\">RLock</span> <span class=\"hljs-variable\">lock</span> <span class=\"hljs-operator\">=</span> redissonClient.getLock(key);<br>      lock.lock(<span class=\"hljs-number\">2</span>, TimeUnit.SECONDS);<br>      <span class=\"hljs-comment\">// 上锁成功</span><br>      <span class=\"hljs-keyword\">try</span> &#123;<br>          Thread.sleep(<span class=\"hljs-number\">1000</span>);<br>          <span class=\"hljs-type\">Account</span> <span class=\"hljs-variable\">account</span> <span class=\"hljs-operator\">=</span> accountMapper.selectById(accountId);<br>          account.setBalance(account.getBalance() - request.getMoney());<br>          account.setUpdateTime(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Date</span>());<br>          <span class=\"hljs-keyword\">return</span> accountMapper.updateById(account) &gt; <span class=\"hljs-number\">0</span>;<br>      &#125; <span class=\"hljs-keyword\">finally</span> &#123;<br>          <span class=\"hljs-comment\">// 释放锁</span><br>          lock.unlock();<br>      &#125;<br>  &#125;<br></code></pre></td></tr></table></figure>\n<p>添加测试方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Test</span><br>   <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">testTakeoutMoneyWithRedissonLock</span><span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">throws</span> ExecutionException, InterruptedException &#123;<br>       <span class=\"hljs-type\">ExecutorService</span> <span class=\"hljs-variable\">executorService</span> <span class=\"hljs-operator\">=</span> Executors.newFixedThreadPool(<span class=\"hljs-number\">5</span>);<br>       Callable&lt;Boolean&gt; takeoutTask = () -&gt; &#123;<br>           <span class=\"hljs-type\">TakeOutMoneyRequest</span> <span class=\"hljs-variable\">request</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">TakeOutMoneyRequest</span>();<br>           request.setAccountId(<span class=\"hljs-number\">1</span>);<br>           request.setMoney(<span class=\"hljs-number\">100</span>);<br>           <span class=\"hljs-keyword\">return</span> accountService.takeoutMoneyWithRedissonLock(request);<br>       &#125;;<br>       List&lt;Future&lt;Boolean&gt;&gt; futureList = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayList</span>&lt;&gt;();<br>       <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">10</span>; i++) &#123;<br>           Future&lt;Boolean&gt; future = executorService.submit(takeoutTask);<br>           futureList.add(future);<br>       &#125;<br><br>       <span class=\"hljs-keyword\">for</span> (Future&lt;Boolean&gt; future : futureList) &#123;<br>           System.out.println(future.get());<br>       &#125;<br>   &#125;<br></code></pre></td></tr></table></figure>\n<p>测试结果如下：</p>\n<img src=\"/2024/04/02/Redis%E5%AD%A6%E4%B9%A06%E2%80%94Redis%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/21.png\" class=\"\">\n<p>查看数据库，扣减次数确实为10次。</p>\n<img src=\"/2024/04/02/Redis%E5%AD%A6%E4%B9%A06%E2%80%94Redis%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/22.png\" class=\"\">\n<h5 id=\"3-2-4-watch-dog-看门狗机制\"><a href=\"#3-2-4-watch-dog-看门狗机制\" class=\"headerlink\" title=\"3.2.4. watch dog 看门狗机制\"></a>3.2.4. watch dog 看门狗机制</h5><img src=\"/2024/04/02/Redis%E5%AD%A6%E4%B9%A06%E2%80%94Redis%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/23.png\" class=\"\">\n<p>Redisson中的分布式锁自带自动续期机制，其提供了一个专门用来监控和续期锁的Watch Dog（看门狗），如果操作共享资源的线程还没有执行完成的话，Watch Dog会不断延长锁的过期时间，从而保证锁不会因为超时而被释放。</p>\n<h3 id=\"4-参考文章\"><a href=\"#4-参考文章\" class=\"headerlink\" title=\"4. 参考文章\"></a>4. 参考文章</h3><p><a href=\"https://zhuanlan.zhihu.com/p/374306005\">https://zhuanlan.zhihu.com/p/374306005</a><br><a href=\"https://my.oschina.net/u/4499317/blog/5039486\">https://my.oschina.net/u/4499317/blog/5039486</a><br><a href=\"https://blog.csdn.net/qq_15071263/article/details/101277474\">https://blog.csdn.net/qq_15071263/article/details/101277474</a><br><a href=\"https://www.cnblogs.com/jelly12345/p/14699492.html\">https://www.cnblogs.com/jelly12345/p/14699492.html</a></p>\n"},{"title":"Redis学习4—Redis应用之限流","date":"2024-04-02T13:27:15.000Z","_content":"### 1. 引言\nRedis作为一个内存数据库其读写速度非常快，并且支持原子操作，这使得它非常适合处理频繁的请求，一般情况下，我们会使用Redis作为缓存数据库，但处理做缓存数据库之外，Redis的应用还十分广泛，比如这一节，我们将讲解Redis在限流方面的应用。\n### 2. 通过setnx实现限流\n我们通过切面，来获取某给接口在一段时间内的请求次数，当请求次数超过某个值时，抛出限流异常，直接返回，不执行业务逻辑。思路大致如下：\n{% asset_img 1.png %}\n#### 2.1. 初步实现\n我们参照上面的流程，对Redis限流进行实现。首先引入aop切面相关的依赖\n```xml\n  <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-aop</artifactId>\n        </dependency>\n```\n然后添加一个限流注解类，这个注解有三个属性，maxTimes表示最大访问次数，interval表示限流间隙，unit表示时间的单位，假设配置的值为maxTimes=10, interval=1, unit= TimeUnit.SECONDS，那么表示在1秒内，限制访问次数为10次。\n```java\npackage org.example.annotations;\n\nimport java.lang.annotation.ElementType;\nimport java.lang.annotation.Retention;\nimport java.lang.annotation.RetentionPolicy;\nimport java.lang.annotation.Target;\nimport java.util.concurrent.TimeUnit;\n\n@Target(value = ElementType.METHOD)\n@Retention(RetentionPolicy.RUNTIME)\npublic @interface Limit {\n    // 访问次数\n    public int maxTimes() default 1;\n\n    // 间隔时间\n    public int interval() default 1;\n\n    // 时间单位\n    public TimeUnit unit() default TimeUnit.SECONDS;\n}\n```\n返回结果类：\n```java\npackage org.example.common;\n\nimport lombok.Getter;\n\nimport java.io.Serializable;\n\npublic class Response <T>  implements Serializable {\n    @Getter\n    private int code;\n\n    @Getter\n    private String msg;\n\n    @Getter\n    private T data;\n\n    private Response(int code, String msg) {\n        this.code = code;\n        this.msg = msg;\n    }\n\n    private Response(int code, String msg, T data) {\n        this.code = code;\n        this.msg = msg;\n        this.data = data;\n    }\n\n    private Response(ResultCode resultCode) {\n        this.code = resultCode.getCode();\n        this.msg = resultCode.getMsg();\n    }\n\n    private Response(ResultCode resultCode, T data) {\n        this.code = resultCode.getCode();\n        this.msg = resultCode.getMsg();\n        this.data = data;\n    }\n\n    public static <T> Response success() {\n        return new Response(ResultCode.SUCCESS);\n    }\n\n    public static <T> Response success(T data) {\n        return new Response(ResultCode.SUCCESS, data);\n    }\n\n    public static <T> Response fail() {\n        return new Response(ResultCode.FAIL);\n    }\n\n    public static <T> Response fail(ResultCode resultCode) {\n        return new Response(resultCode);\n    }\n\n    public static <T> Response error() {\n        return new Response(ResultCode.SERVER_ERROR);\n    }\n\n    public static <T> Response error(String msg) {\n        return new Response(ResultCode.SERVER_ERROR.getCode(), msg);\n    }\n}\n```\n错误码类，在错误码中，我们添加一个LIMIT_ERROR，表示该接口被限流。\n```java\npackage org.example.common;\n\npublic enum ResultCode {\n    SUCCESS(200, \"操作成功\"),\n\n    FAIL(400, \"操作失败\"),\n\n    SERVER_ERROR(500, \"服务器错误\"),\n\n    LIMIT_ERROR(400, \"限流\");\n\n    int code;\n\n    String msg;\n\n    ResultCode(int code, String msg) {\n        this.code = code;\n        this.msg = msg;\n    }\n\n    public int getCode() {\n        return this.code;\n    }\n\n    public String getMsg() {\n        return this.msg;\n    }\n}\n```\n业务异常类\n```java\npublic class BusinessException extends RuntimeException {\n    private ResultCode resultCode;\n\n    public BusinessException(ResultCode resultCode) {\n        super(resultCode.getMsg());\n        this.resultCode = resultCode;\n    }\n\n    public ResultCode getResultCode() {\n        return this.resultCode;\n    }\n}\n```\n全局异常处理类，在我们的切面中，如果发现访问次数大于最大访问次数，那么抛出限流异常，由全局异常处理类进行处理，返回对应的结果\n```java\npackage org.example.exception;\n\nimport org.example.common.Response;\nimport org.springframework.web.bind.annotation.ExceptionHandler;\nimport org.springframework.web.bind.annotation.RestControllerAdvice;\n\n@RestControllerAdvice\npublic class GlobalExceptionHandler {\n    @ExceptionHandler(value = BusinessException.class)\n    public Response handleBusinessException(BusinessException e) {\n        return Response.fail(e.getResultCode());\n    }\n\n    @ExceptionHandler(value = Exception.class)\n    public Response handleException(Exception e) {\n        return Response.error(e.getMessage());\n    }\n}\n```\n限流切面类\n```java\npackage org.example.aspect;\n\nimport org.aspectj.lang.JoinPoint;\nimport org.aspectj.lang.annotation.Aspect;\nimport org.aspectj.lang.annotation.Before;\nimport org.aspectj.lang.annotation.Pointcut;\nimport org.aspectj.lang.reflect.MethodSignature;\nimport org.example.annotations.Limit;\nimport org.example.common.ResultCode;\nimport org.example.exception.BusinessException;\nimport org.example.util.RedisUtils;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Component;\n\n@Component\n@Aspect\npublic class LimitAspect {\n    @Autowired\n    private RedisUtils redisUtils;\n\n    @Pointcut(\"@annotation(org.example.annotations.Limit)\")\n    public void pointCut() {\n    }\n\n    @Before(\"pointCut()\")\n    public void beforeAdvice(JoinPoint joinPoint) {\n        // 获取方法名\n        String methodName = joinPoint.getSignature().getName();\n        String prefixMethod = joinPoint.getSignature().getDeclaringTypeName();\n        String fullMethodName = prefixMethod + \".\" + methodName;\n        System.out.println(\"methodName:\" + fullMethodName);\n\n        Object[] args = joinPoint.getArgs();\n        for (Object arg : args) {\n            System.out.println(\"method argument:\" + arg);\n        }\n\n        // 获取注解参数\n        MethodSignature methodSignature = (MethodSignature) joinPoint.getSignature();\n        Limit annotation = methodSignature.getMethod().getAnnotation(Limit.class);\n        System.out.println(annotation.unit());\n        System.out.println(annotation.maxTimes());\n        System.out.println(annotation.interval());\n\n        // 获取redis值\n        Object key = redisUtils.getKey(fullMethodName);\n        if (key != null) {\n            Integer redisValue = (Integer) key;\n            // 小于限流值\n            if (redisValue.compareTo(annotation.maxTimes()) < 0) {\n                redisUtils.increment(fullMethodName);\n                return;\n            }\n            // 大于限流值\n            throw new BusinessException(ResultCode.LIMIT_ERROR);\n        }\n\n        // 获取的值为null, 设置数据到redis中\n        redisUtils.addKey(fullMethodName, 1, annotation.interval(), annotation.unit());\n    }\n}\n```\n最后添加一个TestController类，用于进行接口的测试：\n```java\npackage org.example.controller;\n\nimport org.example.annotations.Limit;\nimport org.example.common.Response;\nimport org.example.common.ResultCode;\nimport org.example.exception.BusinessException;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestParam;\nimport org.springframework.web.bind.annotation.RestController;\n\nimport java.util.concurrent.TimeUnit;\n\n@RestController\n@RequestMapping(value = \"/test\")\npublic class TestController {\n\n    @GetMapping(value = \"/hello1\")\n    @Limit(maxTimes = 10, interval = 100, unit = TimeUnit.SECONDS)\n    public Response hello1(@RequestParam(name = \"name\", defaultValue = \"cxy\") String name) {\n        return Response.success(\"hello1 success \" + name);\n    }\n}\n```\n从上面的接口注解配置中，可以看出，这个接口在100秒内最多访问10次，我们启动项目，访问/test/hello1，前10次的访问结果为：\n{% asset_img 2.png %}\n第11次时，开始限流了\n{% asset_img 3.png %}\n这里看起来不是很直观，我们将时间间隙改为2，表示2秒最多由10个请求能执行\n```java\n@GetMapping(value = \"/hello1\")\n    @Limit(maxTimes = 10, interval = 2, unit = TimeUnit.SECONDS)\n    public Response hello1(@RequestParam(name = \"name\", defaultValue = \"cxy\") String name) {\n        return Response.success(\"hello1 success \" + name);\n    }\n```\n使用postman进行并发请求，下面的redis限流测试，就是刚才提到的http://localhost:8080/test/hello1?name=cxy这个请求\n{% asset_img 4.png %}\n执行该并发测试，结果如下：\n{% asset_img 5.png %}\n这里20个请求中，有10个成功，10个被限流。不过这个postman结果展示不太好，只能一个一个查看结果，这里就不一一展示了。\n#### 2.2. 职责分离\n上面的代码，虽然能成功限流，但是有一个问题，就是切面类的beforeAdvice方法中，做的事情太多了，又是解析请求参数、解析注解参数，又是使用查询Redis，进行限流判断，我们应该将限流逻辑的判断，此外，这里使用的是Redis，如果后续我们不使用Redis，换成其他方式进行限流判断的话，需要改很多处代码，因此，这里要做一些优化，包括：\n1）定义限流请求类，用于封装访问的方法名、注解信息等内容\n2）定义限流处理接口\n3）定义Redis限流处理类，通过Redis实现限流处理接口\n我们首先定义一个限流请求类，封装限流处理所需要的参数：\n```java\npackage org.example.request;\n\nimport lombok.Data;\n\nimport java.io.Serializable;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.concurrent.TimeUnit;\n\n@Data\npublic class LimitRequest implements Serializable {\n    private String methodName;\n\n    private Integer interval;\n\n    private Integer maxTimes;\n\n    private TimeUnit timeUnit;\n\n    private Map<String, Object> extendMap = new HashMap<>();\n}\n```\n定义限流处理接口\n```java\npackage org.example.limit;\n\nimport org.example.request.limit.LimitRequest;\n\npublic interface LimitHandler {\n    void handleLimit(LimitRequest limitRequest);\n}\n```\n定义Redis的限流处理类\n```java\npackage org.example.limit;\n\nimport org.example.common.ResultCode;\nimport org.example.exception.BusinessException;\nimport org.example.request.limit.LimitRequest;\nimport org.example.util.RedisUtils;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Component;\n\n@Component\npublic class RedisLimitHandler implements LimitHandler{\n    @Autowired\n    private RedisUtils redisUtils;\n\n    @Override\n    public void handleLimit(LimitRequest limitRequest) {\n        String methodName = limitRequest.getMethodName();\n        // 获取redis值\n        Object key = redisUtils.getKey(methodName);\n        if (key != null) {\n            Integer redisValue = (Integer) key;\n            // 小于限流值\n            if (redisValue.compareTo(limitRequest.getMaxTimes()) <= 0) {\n                redisUtils.increment(methodName);\n                return;\n            }\n            // 大于限流值\n            throw new BusinessException(ResultCode.LIMIT_ERROR);\n        }\n\n        // 获取的值为null, 设置数据到redis中\n        redisUtils.addKey(methodName, 1, limitRequest.getInterval(), limitRequest.getTimeUnit());\n    }\n}\n```\n修改LimitAspect代码，但后续更换限流策略是，只需要修改LimitHandler的bean即可。\n```java\npackage org.example.aspect;\n\nimport org.aspectj.lang.JoinPoint;\nimport org.aspectj.lang.annotation.Aspect;\nimport org.aspectj.lang.annotation.Before;\nimport org.aspectj.lang.annotation.Pointcut;\nimport org.aspectj.lang.reflect.MethodSignature;\nimport org.example.annotations.Limit;\nimport org.example.limit.LimitHandler;\nimport org.example.request.limit.LimitRequest;\nimport org.springframework.stereotype.Component;\n\nimport javax.annotation.Resource;\n\n@Component\n@Aspect\npublic class LimitAspect {\n\n    @Resource\n    private LimitHandler redisLimitHandler;\n\n    @Pointcut(\"@annotation(org.example.annotations.Limit)\")\n    public void pointCut() {\n    }\n\n    @Before(\"pointCut()\")\n    public void beforeAdvice(JoinPoint joinPoint) {\n        LimitRequest limitRequest = convert2LimitRequest(joinPoint);\n\n        redisLimitHandler.handleLimit(limitRequest);\n    }\n\n    private LimitRequest convert2LimitRequest(JoinPoint joinPoint) {\n        LimitRequest limitRequest = new LimitRequest();\n\n        String methodName = joinPoint.getSignature().getName();\n        String prefixMethod = joinPoint.getSignature().getDeclaringTypeName();\n        limitRequest.setMethodName(prefixMethod + \".\" + methodName);\n\n        Object[] args = joinPoint.getArgs();\n        limitRequest.getExtendMap().put(\"args\", args);\n\n        MethodSignature methodSignature = (MethodSignature) joinPoint.getSignature();\n        Limit annotation = methodSignature.getMethod().getAnnotation(Limit.class);\n        limitRequest.setInterval(annotation.interval());\n        limitRequest.setMaxTimes(annotation.maxTimes());\n        limitRequest.setTimeUnit(annotation.unit());\n        return limitRequest;\n    }\n}\n```\n\n### 3. 通过Zset实现限流\n我们可以将请求打造成一个zset数组，每一次请求进来时，value保持一致，可以用UUID生成，然后score用当前时间戳表示，通过range方法，来获取某个时间范围内，请求的个数，然后根据这个个数与限流值对比，当大于限流值时，进行限流操作。\n我们修改RedisLimitHandler代码如下：\n```java\n @Override\n    public void handleLimit(LimitRequest limitRequest) {\n       handleLimitByZSet(limitRequest);\n    }\n\n    private void handleLimitByZSet(LimitRequest limitRequest) {\n        String methodName = limitRequest.getMethodName();\n\n        long currentTime = System.currentTimeMillis();\n        long interval = TimeUnit.MILLISECONDS.convert(limitRequest.getInterval(), limitRequest.getTimeUnit());\n\n        if (redisUtils.hasKey(methodName)) {\n            int count = redisUtils.rangeByScore(methodName, Double.valueOf(currentTime - interval), Double.valueOf(currentTime)).size();\n            if (count > limitRequest.getMaxTimes()) {\n                throw new BusinessException(ResultCode.LIMIT_ERROR);\n            }\n        }\n        redisUtils.addZSet(methodName, UUID.randomUUID().toString(), Double.valueOf(currentTime));\n    }\n```\n然后添加一个测试类，用于模拟并发场景下的多个请求\n```java\npackage org.example;\n\nimport com.alibaba.fastjson.JSONObject;\nimport org.example.common.Response;\nimport org.example.common.ResultCode;\nimport org.example.controller.TestController;\nimport org.example.exception.BusinessException;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.test.context.SpringBootTest;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.concurrent.*;\n\n@SpringBootTest\npublic class RedisLimitTest {\n    @Autowired\n    private TestController testController;\n\n    @Test\n    public void testLimit() throws ExecutionException, InterruptedException {\n        ExecutorService executorService = Executors.newFixedThreadPool(5);\n        Callable<Response> callable = () -> {\n            try {\n                String name = \"cxy\";\n                return testController.hello1(name);\n            } catch (BusinessException e) {\n                return Response.fail(e.getResultCode());\n            }\n        };\n        List<Future<Response>> futureList = new ArrayList<>();\n        for (int i = 0; i < 20; i++) {\n            Future<Response> submit = executorService.submit(callable);\n            futureList.add(submit);\n        }\n\n        for (Future<Response> future : futureList) {\n            System.out.println(JSONObject.toJSONString(future.get()));\n        }\n\n    }\n}\n```\n运行结果如下：\n{% asset_img 6.png %}\n我们可以看到，这里确实进行限流了，但是，这个限流个数不太对，这是因为可能多个请求都执行到这条代码，获取到同一个值，然后才进行更新。\n int count = redisUtils.rangeByScore(methodName, Double.valueOf(currentTime - interval), Double.valueOf(currentTime)).size();\n比如有5个请求同时打过来，此时的执行到上面这条代码时，redis中符合范围的刚好有9条，那么这5个请求在进行判断时，都小于限流值，因此都会执行，然后才是更新zset，这个就是并发场景下的问题了。\n另外，使用zset还有一个问题，它虽然能达到滑动窗口的效果，但是zset的数据结构会越来越大。\n\n","source":"_posts/Redis学习4—Redis应用之限流.md","raw":"---\ntitle: Redis学习4—Redis应用之限流\ndate: 2024-04-02 21:27:15\ntags: \n    - 中间件\n    - Redis\n---\n### 1. 引言\nRedis作为一个内存数据库其读写速度非常快，并且支持原子操作，这使得它非常适合处理频繁的请求，一般情况下，我们会使用Redis作为缓存数据库，但处理做缓存数据库之外，Redis的应用还十分广泛，比如这一节，我们将讲解Redis在限流方面的应用。\n### 2. 通过setnx实现限流\n我们通过切面，来获取某给接口在一段时间内的请求次数，当请求次数超过某个值时，抛出限流异常，直接返回，不执行业务逻辑。思路大致如下：\n{% asset_img 1.png %}\n#### 2.1. 初步实现\n我们参照上面的流程，对Redis限流进行实现。首先引入aop切面相关的依赖\n```xml\n  <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-aop</artifactId>\n        </dependency>\n```\n然后添加一个限流注解类，这个注解有三个属性，maxTimes表示最大访问次数，interval表示限流间隙，unit表示时间的单位，假设配置的值为maxTimes=10, interval=1, unit= TimeUnit.SECONDS，那么表示在1秒内，限制访问次数为10次。\n```java\npackage org.example.annotations;\n\nimport java.lang.annotation.ElementType;\nimport java.lang.annotation.Retention;\nimport java.lang.annotation.RetentionPolicy;\nimport java.lang.annotation.Target;\nimport java.util.concurrent.TimeUnit;\n\n@Target(value = ElementType.METHOD)\n@Retention(RetentionPolicy.RUNTIME)\npublic @interface Limit {\n    // 访问次数\n    public int maxTimes() default 1;\n\n    // 间隔时间\n    public int interval() default 1;\n\n    // 时间单位\n    public TimeUnit unit() default TimeUnit.SECONDS;\n}\n```\n返回结果类：\n```java\npackage org.example.common;\n\nimport lombok.Getter;\n\nimport java.io.Serializable;\n\npublic class Response <T>  implements Serializable {\n    @Getter\n    private int code;\n\n    @Getter\n    private String msg;\n\n    @Getter\n    private T data;\n\n    private Response(int code, String msg) {\n        this.code = code;\n        this.msg = msg;\n    }\n\n    private Response(int code, String msg, T data) {\n        this.code = code;\n        this.msg = msg;\n        this.data = data;\n    }\n\n    private Response(ResultCode resultCode) {\n        this.code = resultCode.getCode();\n        this.msg = resultCode.getMsg();\n    }\n\n    private Response(ResultCode resultCode, T data) {\n        this.code = resultCode.getCode();\n        this.msg = resultCode.getMsg();\n        this.data = data;\n    }\n\n    public static <T> Response success() {\n        return new Response(ResultCode.SUCCESS);\n    }\n\n    public static <T> Response success(T data) {\n        return new Response(ResultCode.SUCCESS, data);\n    }\n\n    public static <T> Response fail() {\n        return new Response(ResultCode.FAIL);\n    }\n\n    public static <T> Response fail(ResultCode resultCode) {\n        return new Response(resultCode);\n    }\n\n    public static <T> Response error() {\n        return new Response(ResultCode.SERVER_ERROR);\n    }\n\n    public static <T> Response error(String msg) {\n        return new Response(ResultCode.SERVER_ERROR.getCode(), msg);\n    }\n}\n```\n错误码类，在错误码中，我们添加一个LIMIT_ERROR，表示该接口被限流。\n```java\npackage org.example.common;\n\npublic enum ResultCode {\n    SUCCESS(200, \"操作成功\"),\n\n    FAIL(400, \"操作失败\"),\n\n    SERVER_ERROR(500, \"服务器错误\"),\n\n    LIMIT_ERROR(400, \"限流\");\n\n    int code;\n\n    String msg;\n\n    ResultCode(int code, String msg) {\n        this.code = code;\n        this.msg = msg;\n    }\n\n    public int getCode() {\n        return this.code;\n    }\n\n    public String getMsg() {\n        return this.msg;\n    }\n}\n```\n业务异常类\n```java\npublic class BusinessException extends RuntimeException {\n    private ResultCode resultCode;\n\n    public BusinessException(ResultCode resultCode) {\n        super(resultCode.getMsg());\n        this.resultCode = resultCode;\n    }\n\n    public ResultCode getResultCode() {\n        return this.resultCode;\n    }\n}\n```\n全局异常处理类，在我们的切面中，如果发现访问次数大于最大访问次数，那么抛出限流异常，由全局异常处理类进行处理，返回对应的结果\n```java\npackage org.example.exception;\n\nimport org.example.common.Response;\nimport org.springframework.web.bind.annotation.ExceptionHandler;\nimport org.springframework.web.bind.annotation.RestControllerAdvice;\n\n@RestControllerAdvice\npublic class GlobalExceptionHandler {\n    @ExceptionHandler(value = BusinessException.class)\n    public Response handleBusinessException(BusinessException e) {\n        return Response.fail(e.getResultCode());\n    }\n\n    @ExceptionHandler(value = Exception.class)\n    public Response handleException(Exception e) {\n        return Response.error(e.getMessage());\n    }\n}\n```\n限流切面类\n```java\npackage org.example.aspect;\n\nimport org.aspectj.lang.JoinPoint;\nimport org.aspectj.lang.annotation.Aspect;\nimport org.aspectj.lang.annotation.Before;\nimport org.aspectj.lang.annotation.Pointcut;\nimport org.aspectj.lang.reflect.MethodSignature;\nimport org.example.annotations.Limit;\nimport org.example.common.ResultCode;\nimport org.example.exception.BusinessException;\nimport org.example.util.RedisUtils;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Component;\n\n@Component\n@Aspect\npublic class LimitAspect {\n    @Autowired\n    private RedisUtils redisUtils;\n\n    @Pointcut(\"@annotation(org.example.annotations.Limit)\")\n    public void pointCut() {\n    }\n\n    @Before(\"pointCut()\")\n    public void beforeAdvice(JoinPoint joinPoint) {\n        // 获取方法名\n        String methodName = joinPoint.getSignature().getName();\n        String prefixMethod = joinPoint.getSignature().getDeclaringTypeName();\n        String fullMethodName = prefixMethod + \".\" + methodName;\n        System.out.println(\"methodName:\" + fullMethodName);\n\n        Object[] args = joinPoint.getArgs();\n        for (Object arg : args) {\n            System.out.println(\"method argument:\" + arg);\n        }\n\n        // 获取注解参数\n        MethodSignature methodSignature = (MethodSignature) joinPoint.getSignature();\n        Limit annotation = methodSignature.getMethod().getAnnotation(Limit.class);\n        System.out.println(annotation.unit());\n        System.out.println(annotation.maxTimes());\n        System.out.println(annotation.interval());\n\n        // 获取redis值\n        Object key = redisUtils.getKey(fullMethodName);\n        if (key != null) {\n            Integer redisValue = (Integer) key;\n            // 小于限流值\n            if (redisValue.compareTo(annotation.maxTimes()) < 0) {\n                redisUtils.increment(fullMethodName);\n                return;\n            }\n            // 大于限流值\n            throw new BusinessException(ResultCode.LIMIT_ERROR);\n        }\n\n        // 获取的值为null, 设置数据到redis中\n        redisUtils.addKey(fullMethodName, 1, annotation.interval(), annotation.unit());\n    }\n}\n```\n最后添加一个TestController类，用于进行接口的测试：\n```java\npackage org.example.controller;\n\nimport org.example.annotations.Limit;\nimport org.example.common.Response;\nimport org.example.common.ResultCode;\nimport org.example.exception.BusinessException;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestParam;\nimport org.springframework.web.bind.annotation.RestController;\n\nimport java.util.concurrent.TimeUnit;\n\n@RestController\n@RequestMapping(value = \"/test\")\npublic class TestController {\n\n    @GetMapping(value = \"/hello1\")\n    @Limit(maxTimes = 10, interval = 100, unit = TimeUnit.SECONDS)\n    public Response hello1(@RequestParam(name = \"name\", defaultValue = \"cxy\") String name) {\n        return Response.success(\"hello1 success \" + name);\n    }\n}\n```\n从上面的接口注解配置中，可以看出，这个接口在100秒内最多访问10次，我们启动项目，访问/test/hello1，前10次的访问结果为：\n{% asset_img 2.png %}\n第11次时，开始限流了\n{% asset_img 3.png %}\n这里看起来不是很直观，我们将时间间隙改为2，表示2秒最多由10个请求能执行\n```java\n@GetMapping(value = \"/hello1\")\n    @Limit(maxTimes = 10, interval = 2, unit = TimeUnit.SECONDS)\n    public Response hello1(@RequestParam(name = \"name\", defaultValue = \"cxy\") String name) {\n        return Response.success(\"hello1 success \" + name);\n    }\n```\n使用postman进行并发请求，下面的redis限流测试，就是刚才提到的http://localhost:8080/test/hello1?name=cxy这个请求\n{% asset_img 4.png %}\n执行该并发测试，结果如下：\n{% asset_img 5.png %}\n这里20个请求中，有10个成功，10个被限流。不过这个postman结果展示不太好，只能一个一个查看结果，这里就不一一展示了。\n#### 2.2. 职责分离\n上面的代码，虽然能成功限流，但是有一个问题，就是切面类的beforeAdvice方法中，做的事情太多了，又是解析请求参数、解析注解参数，又是使用查询Redis，进行限流判断，我们应该将限流逻辑的判断，此外，这里使用的是Redis，如果后续我们不使用Redis，换成其他方式进行限流判断的话，需要改很多处代码，因此，这里要做一些优化，包括：\n1）定义限流请求类，用于封装访问的方法名、注解信息等内容\n2）定义限流处理接口\n3）定义Redis限流处理类，通过Redis实现限流处理接口\n我们首先定义一个限流请求类，封装限流处理所需要的参数：\n```java\npackage org.example.request;\n\nimport lombok.Data;\n\nimport java.io.Serializable;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.concurrent.TimeUnit;\n\n@Data\npublic class LimitRequest implements Serializable {\n    private String methodName;\n\n    private Integer interval;\n\n    private Integer maxTimes;\n\n    private TimeUnit timeUnit;\n\n    private Map<String, Object> extendMap = new HashMap<>();\n}\n```\n定义限流处理接口\n```java\npackage org.example.limit;\n\nimport org.example.request.limit.LimitRequest;\n\npublic interface LimitHandler {\n    void handleLimit(LimitRequest limitRequest);\n}\n```\n定义Redis的限流处理类\n```java\npackage org.example.limit;\n\nimport org.example.common.ResultCode;\nimport org.example.exception.BusinessException;\nimport org.example.request.limit.LimitRequest;\nimport org.example.util.RedisUtils;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Component;\n\n@Component\npublic class RedisLimitHandler implements LimitHandler{\n    @Autowired\n    private RedisUtils redisUtils;\n\n    @Override\n    public void handleLimit(LimitRequest limitRequest) {\n        String methodName = limitRequest.getMethodName();\n        // 获取redis值\n        Object key = redisUtils.getKey(methodName);\n        if (key != null) {\n            Integer redisValue = (Integer) key;\n            // 小于限流值\n            if (redisValue.compareTo(limitRequest.getMaxTimes()) <= 0) {\n                redisUtils.increment(methodName);\n                return;\n            }\n            // 大于限流值\n            throw new BusinessException(ResultCode.LIMIT_ERROR);\n        }\n\n        // 获取的值为null, 设置数据到redis中\n        redisUtils.addKey(methodName, 1, limitRequest.getInterval(), limitRequest.getTimeUnit());\n    }\n}\n```\n修改LimitAspect代码，但后续更换限流策略是，只需要修改LimitHandler的bean即可。\n```java\npackage org.example.aspect;\n\nimport org.aspectj.lang.JoinPoint;\nimport org.aspectj.lang.annotation.Aspect;\nimport org.aspectj.lang.annotation.Before;\nimport org.aspectj.lang.annotation.Pointcut;\nimport org.aspectj.lang.reflect.MethodSignature;\nimport org.example.annotations.Limit;\nimport org.example.limit.LimitHandler;\nimport org.example.request.limit.LimitRequest;\nimport org.springframework.stereotype.Component;\n\nimport javax.annotation.Resource;\n\n@Component\n@Aspect\npublic class LimitAspect {\n\n    @Resource\n    private LimitHandler redisLimitHandler;\n\n    @Pointcut(\"@annotation(org.example.annotations.Limit)\")\n    public void pointCut() {\n    }\n\n    @Before(\"pointCut()\")\n    public void beforeAdvice(JoinPoint joinPoint) {\n        LimitRequest limitRequest = convert2LimitRequest(joinPoint);\n\n        redisLimitHandler.handleLimit(limitRequest);\n    }\n\n    private LimitRequest convert2LimitRequest(JoinPoint joinPoint) {\n        LimitRequest limitRequest = new LimitRequest();\n\n        String methodName = joinPoint.getSignature().getName();\n        String prefixMethod = joinPoint.getSignature().getDeclaringTypeName();\n        limitRequest.setMethodName(prefixMethod + \".\" + methodName);\n\n        Object[] args = joinPoint.getArgs();\n        limitRequest.getExtendMap().put(\"args\", args);\n\n        MethodSignature methodSignature = (MethodSignature) joinPoint.getSignature();\n        Limit annotation = methodSignature.getMethod().getAnnotation(Limit.class);\n        limitRequest.setInterval(annotation.interval());\n        limitRequest.setMaxTimes(annotation.maxTimes());\n        limitRequest.setTimeUnit(annotation.unit());\n        return limitRequest;\n    }\n}\n```\n\n### 3. 通过Zset实现限流\n我们可以将请求打造成一个zset数组，每一次请求进来时，value保持一致，可以用UUID生成，然后score用当前时间戳表示，通过range方法，来获取某个时间范围内，请求的个数，然后根据这个个数与限流值对比，当大于限流值时，进行限流操作。\n我们修改RedisLimitHandler代码如下：\n```java\n @Override\n    public void handleLimit(LimitRequest limitRequest) {\n       handleLimitByZSet(limitRequest);\n    }\n\n    private void handleLimitByZSet(LimitRequest limitRequest) {\n        String methodName = limitRequest.getMethodName();\n\n        long currentTime = System.currentTimeMillis();\n        long interval = TimeUnit.MILLISECONDS.convert(limitRequest.getInterval(), limitRequest.getTimeUnit());\n\n        if (redisUtils.hasKey(methodName)) {\n            int count = redisUtils.rangeByScore(methodName, Double.valueOf(currentTime - interval), Double.valueOf(currentTime)).size();\n            if (count > limitRequest.getMaxTimes()) {\n                throw new BusinessException(ResultCode.LIMIT_ERROR);\n            }\n        }\n        redisUtils.addZSet(methodName, UUID.randomUUID().toString(), Double.valueOf(currentTime));\n    }\n```\n然后添加一个测试类，用于模拟并发场景下的多个请求\n```java\npackage org.example;\n\nimport com.alibaba.fastjson.JSONObject;\nimport org.example.common.Response;\nimport org.example.common.ResultCode;\nimport org.example.controller.TestController;\nimport org.example.exception.BusinessException;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.test.context.SpringBootTest;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.concurrent.*;\n\n@SpringBootTest\npublic class RedisLimitTest {\n    @Autowired\n    private TestController testController;\n\n    @Test\n    public void testLimit() throws ExecutionException, InterruptedException {\n        ExecutorService executorService = Executors.newFixedThreadPool(5);\n        Callable<Response> callable = () -> {\n            try {\n                String name = \"cxy\";\n                return testController.hello1(name);\n            } catch (BusinessException e) {\n                return Response.fail(e.getResultCode());\n            }\n        };\n        List<Future<Response>> futureList = new ArrayList<>();\n        for (int i = 0; i < 20; i++) {\n            Future<Response> submit = executorService.submit(callable);\n            futureList.add(submit);\n        }\n\n        for (Future<Response> future : futureList) {\n            System.out.println(JSONObject.toJSONString(future.get()));\n        }\n\n    }\n}\n```\n运行结果如下：\n{% asset_img 6.png %}\n我们可以看到，这里确实进行限流了，但是，这个限流个数不太对，这是因为可能多个请求都执行到这条代码，获取到同一个值，然后才进行更新。\n int count = redisUtils.rangeByScore(methodName, Double.valueOf(currentTime - interval), Double.valueOf(currentTime)).size();\n比如有5个请求同时打过来，此时的执行到上面这条代码时，redis中符合范围的刚好有9条，那么这5个请求在进行判断时，都小于限流值，因此都会执行，然后才是更新zset，这个就是并发场景下的问题了。\n另外，使用zset还有一个问题，它虽然能达到滑动窗口的效果，但是zset的数据结构会越来越大。\n\n","slug":"Redis学习4—Redis应用之限流","published":1,"updated":"2024-04-03T05:44:15.019Z","_id":"cluifpiel00035svlhi6e396v","comments":1,"layout":"post","photos":[],"content":"<h3 id=\"1-引言\"><a href=\"#1-引言\" class=\"headerlink\" title=\"1. 引言\"></a>1. 引言</h3><p>Redis作为一个内存数据库其读写速度非常快，并且支持原子操作，这使得它非常适合处理频繁的请求，一般情况下，我们会使用Redis作为缓存数据库，但处理做缓存数据库之外，Redis的应用还十分广泛，比如这一节，我们将讲解Redis在限流方面的应用。</p>\n<h3 id=\"2-通过setnx实现限流\"><a href=\"#2-通过setnx实现限流\" class=\"headerlink\" title=\"2. 通过setnx实现限流\"></a>2. 通过setnx实现限流</h3><p>我们通过切面，来获取某给接口在一段时间内的请求次数，当请求次数超过某个值时，抛出限流异常，直接返回，不执行业务逻辑。思路大致如下：</p>\n<img src=\"/2024/04/02/Redis%E5%AD%A6%E4%B9%A04%E2%80%94Redis%E5%BA%94%E7%94%A8%E4%B9%8B%E9%99%90%E6%B5%81/1.png\" class=\"\">\n<h4 id=\"2-1-初步实现\"><a href=\"#2-1-初步实现\" class=\"headerlink\" title=\"2.1. 初步实现\"></a>2.1. 初步实现</h4><p>我们参照上面的流程，对Redis限流进行实现。首先引入aop切面相关的依赖</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span><br>          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span><br>          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>spring-boot-starter-aop<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<p>然后添加一个限流注解类，这个注解有三个属性，maxTimes表示最大访问次数，interval表示限流间隙，unit表示时间的单位，假设配置的值为maxTimes&#x3D;10, interval&#x3D;1, unit&#x3D; TimeUnit.SECONDS，那么表示在1秒内，限制访问次数为10次。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> org.example.annotations;<br><br><span class=\"hljs-keyword\">import</span> java.lang.annotation.ElementType;<br><span class=\"hljs-keyword\">import</span> java.lang.annotation.Retention;<br><span class=\"hljs-keyword\">import</span> java.lang.annotation.RetentionPolicy;<br><span class=\"hljs-keyword\">import</span> java.lang.annotation.Target;<br><span class=\"hljs-keyword\">import</span> java.util.concurrent.TimeUnit;<br><br><span class=\"hljs-meta\">@Target(value = ElementType.METHOD)</span><br><span class=\"hljs-meta\">@Retention(RetentionPolicy.RUNTIME)</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-meta\">@interface</span> Limit &#123;<br>    <span class=\"hljs-comment\">// 访问次数</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">maxTimes</span><span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-number\">1</span>;<br><br>    <span class=\"hljs-comment\">// 间隔时间</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">interval</span><span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-number\">1</span>;<br><br>    <span class=\"hljs-comment\">// 时间单位</span><br>    <span class=\"hljs-keyword\">public</span> TimeUnit <span class=\"hljs-title function_\">unit</span><span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">default</span> TimeUnit.SECONDS;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>返回结果类：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> org.example.common;<br><br><span class=\"hljs-keyword\">import</span> lombok.Getter;<br><br><span class=\"hljs-keyword\">import</span> java.io.Serializable;<br><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Response</span> &lt;T&gt;  <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">Serializable</span> &#123;<br>    <span class=\"hljs-meta\">@Getter</span><br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">int</span> code;<br><br>    <span class=\"hljs-meta\">@Getter</span><br>    <span class=\"hljs-keyword\">private</span> String msg;<br><br>    <span class=\"hljs-meta\">@Getter</span><br>    <span class=\"hljs-keyword\">private</span> T data;<br><br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-title function_\">Response</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> code, String msg)</span> &#123;<br>        <span class=\"hljs-built_in\">this</span>.code = code;<br>        <span class=\"hljs-built_in\">this</span>.msg = msg;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-title function_\">Response</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> code, String msg, T data)</span> &#123;<br>        <span class=\"hljs-built_in\">this</span>.code = code;<br>        <span class=\"hljs-built_in\">this</span>.msg = msg;<br>        <span class=\"hljs-built_in\">this</span>.data = data;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-title function_\">Response</span><span class=\"hljs-params\">(ResultCode resultCode)</span> &#123;<br>        <span class=\"hljs-built_in\">this</span>.code = resultCode.getCode();<br>        <span class=\"hljs-built_in\">this</span>.msg = resultCode.getMsg();<br>    &#125;<br><br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-title function_\">Response</span><span class=\"hljs-params\">(ResultCode resultCode, T data)</span> &#123;<br>        <span class=\"hljs-built_in\">this</span>.code = resultCode.getCode();<br>        <span class=\"hljs-built_in\">this</span>.msg = resultCode.getMsg();<br>        <span class=\"hljs-built_in\">this</span>.data = data;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> &lt;T&gt; Response <span class=\"hljs-title function_\">success</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Response</span>(ResultCode.SUCCESS);<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> &lt;T&gt; Response <span class=\"hljs-title function_\">success</span><span class=\"hljs-params\">(T data)</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Response</span>(ResultCode.SUCCESS, data);<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> &lt;T&gt; Response <span class=\"hljs-title function_\">fail</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Response</span>(ResultCode.FAIL);<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> &lt;T&gt; Response <span class=\"hljs-title function_\">fail</span><span class=\"hljs-params\">(ResultCode resultCode)</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Response</span>(resultCode);<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> &lt;T&gt; Response <span class=\"hljs-title function_\">error</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Response</span>(ResultCode.SERVER_ERROR);<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> &lt;T&gt; Response <span class=\"hljs-title function_\">error</span><span class=\"hljs-params\">(String msg)</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Response</span>(ResultCode.SERVER_ERROR.getCode(), msg);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>错误码类，在错误码中，我们添加一个LIMIT_ERROR，表示该接口被限流。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> org.example.common;<br><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">enum</span> <span class=\"hljs-title class_\">ResultCode</span> &#123;<br>    SUCCESS(<span class=\"hljs-number\">200</span>, <span class=\"hljs-string\">&quot;操作成功&quot;</span>),<br><br>    FAIL(<span class=\"hljs-number\">400</span>, <span class=\"hljs-string\">&quot;操作失败&quot;</span>),<br><br>    SERVER_ERROR(<span class=\"hljs-number\">500</span>, <span class=\"hljs-string\">&quot;服务器错误&quot;</span>),<br><br>    LIMIT_ERROR(<span class=\"hljs-number\">400</span>, <span class=\"hljs-string\">&quot;限流&quot;</span>);<br><br>    <span class=\"hljs-type\">int</span> code;<br><br>    String msg;<br><br>    ResultCode(<span class=\"hljs-type\">int</span> code, String msg) &#123;<br>        <span class=\"hljs-built_in\">this</span>.code = code;<br>        <span class=\"hljs-built_in\">this</span>.msg = msg;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">getCode</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>.code;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title function_\">getMsg</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>.msg;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>业务异常类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">BusinessException</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">RuntimeException</span> &#123;<br>    <span class=\"hljs-keyword\">private</span> ResultCode resultCode;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">BusinessException</span><span class=\"hljs-params\">(ResultCode resultCode)</span> &#123;<br>        <span class=\"hljs-built_in\">super</span>(resultCode.getMsg());<br>        <span class=\"hljs-built_in\">this</span>.resultCode = resultCode;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> ResultCode <span class=\"hljs-title function_\">getResultCode</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>.resultCode;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>全局异常处理类，在我们的切面中，如果发现访问次数大于最大访问次数，那么抛出限流异常，由全局异常处理类进行处理，返回对应的结果</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> org.example.exception;<br><br><span class=\"hljs-keyword\">import</span> org.example.common.Response;<br><span class=\"hljs-keyword\">import</span> org.springframework.web.bind.annotation.ExceptionHandler;<br><span class=\"hljs-keyword\">import</span> org.springframework.web.bind.annotation.RestControllerAdvice;<br><br><span class=\"hljs-meta\">@RestControllerAdvice</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">GlobalExceptionHandler</span> &#123;<br>    <span class=\"hljs-meta\">@ExceptionHandler(value = BusinessException.class)</span><br>    <span class=\"hljs-keyword\">public</span> Response <span class=\"hljs-title function_\">handleBusinessException</span><span class=\"hljs-params\">(BusinessException e)</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> Response.fail(e.getResultCode());<br>    &#125;<br><br>    <span class=\"hljs-meta\">@ExceptionHandler(value = Exception.class)</span><br>    <span class=\"hljs-keyword\">public</span> Response <span class=\"hljs-title function_\">handleException</span><span class=\"hljs-params\">(Exception e)</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> Response.error(e.getMessage());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>限流切面类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> org.example.aspect;<br><br><span class=\"hljs-keyword\">import</span> org.aspectj.lang.JoinPoint;<br><span class=\"hljs-keyword\">import</span> org.aspectj.lang.annotation.Aspect;<br><span class=\"hljs-keyword\">import</span> org.aspectj.lang.annotation.Before;<br><span class=\"hljs-keyword\">import</span> org.aspectj.lang.annotation.Pointcut;<br><span class=\"hljs-keyword\">import</span> org.aspectj.lang.reflect.MethodSignature;<br><span class=\"hljs-keyword\">import</span> org.example.annotations.Limit;<br><span class=\"hljs-keyword\">import</span> org.example.common.ResultCode;<br><span class=\"hljs-keyword\">import</span> org.example.exception.BusinessException;<br><span class=\"hljs-keyword\">import</span> org.example.util.RedisUtils;<br><span class=\"hljs-keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class=\"hljs-keyword\">import</span> org.springframework.stereotype.Component;<br><br><span class=\"hljs-meta\">@Component</span><br><span class=\"hljs-meta\">@Aspect</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">LimitAspect</span> &#123;<br>    <span class=\"hljs-meta\">@Autowired</span><br>    <span class=\"hljs-keyword\">private</span> RedisUtils redisUtils;<br><br>    <span class=\"hljs-meta\">@Pointcut(&quot;@annotation(org.example.annotations.Limit)&quot;)</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">pointCut</span><span class=\"hljs-params\">()</span> &#123;<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Before(&quot;pointCut()&quot;)</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">beforeAdvice</span><span class=\"hljs-params\">(JoinPoint joinPoint)</span> &#123;<br>        <span class=\"hljs-comment\">// 获取方法名</span><br>        <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">methodName</span> <span class=\"hljs-operator\">=</span> joinPoint.getSignature().getName();<br>        <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">prefixMethod</span> <span class=\"hljs-operator\">=</span> joinPoint.getSignature().getDeclaringTypeName();<br>        <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">fullMethodName</span> <span class=\"hljs-operator\">=</span> prefixMethod + <span class=\"hljs-string\">&quot;.&quot;</span> + methodName;<br>        System.out.println(<span class=\"hljs-string\">&quot;methodName:&quot;</span> + fullMethodName);<br><br>        Object[] args = joinPoint.getArgs();<br>        <span class=\"hljs-keyword\">for</span> (Object arg : args) &#123;<br>            System.out.println(<span class=\"hljs-string\">&quot;method argument:&quot;</span> + arg);<br>        &#125;<br><br>        <span class=\"hljs-comment\">// 获取注解参数</span><br>        <span class=\"hljs-type\">MethodSignature</span> <span class=\"hljs-variable\">methodSignature</span> <span class=\"hljs-operator\">=</span> (MethodSignature) joinPoint.getSignature();<br>        <span class=\"hljs-type\">Limit</span> <span class=\"hljs-variable\">annotation</span> <span class=\"hljs-operator\">=</span> methodSignature.getMethod().getAnnotation(Limit.class);<br>        System.out.println(annotation.unit());<br>        System.out.println(annotation.maxTimes());<br>        System.out.println(annotation.interval());<br><br>        <span class=\"hljs-comment\">// 获取redis值</span><br>        <span class=\"hljs-type\">Object</span> <span class=\"hljs-variable\">key</span> <span class=\"hljs-operator\">=</span> redisUtils.getKey(fullMethodName);<br>        <span class=\"hljs-keyword\">if</span> (key != <span class=\"hljs-literal\">null</span>) &#123;<br>            <span class=\"hljs-type\">Integer</span> <span class=\"hljs-variable\">redisValue</span> <span class=\"hljs-operator\">=</span> (Integer) key;<br>            <span class=\"hljs-comment\">// 小于限流值</span><br>            <span class=\"hljs-keyword\">if</span> (redisValue.compareTo(annotation.maxTimes()) &lt; <span class=\"hljs-number\">0</span>) &#123;<br>                redisUtils.increment(fullMethodName);<br>                <span class=\"hljs-keyword\">return</span>;<br>            &#125;<br>            <span class=\"hljs-comment\">// 大于限流值</span><br>            <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">BusinessException</span>(ResultCode.LIMIT_ERROR);<br>        &#125;<br><br>        <span class=\"hljs-comment\">// 获取的值为null, 设置数据到redis中</span><br>        redisUtils.addKey(fullMethodName, <span class=\"hljs-number\">1</span>, annotation.interval(), annotation.unit());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>最后添加一个TestController类，用于进行接口的测试：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> org.example.controller;<br><br><span class=\"hljs-keyword\">import</span> org.example.annotations.Limit;<br><span class=\"hljs-keyword\">import</span> org.example.common.Response;<br><span class=\"hljs-keyword\">import</span> org.example.common.ResultCode;<br><span class=\"hljs-keyword\">import</span> org.example.exception.BusinessException;<br><span class=\"hljs-keyword\">import</span> org.springframework.web.bind.annotation.GetMapping;<br><span class=\"hljs-keyword\">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><span class=\"hljs-keyword\">import</span> org.springframework.web.bind.annotation.RequestParam;<br><span class=\"hljs-keyword\">import</span> org.springframework.web.bind.annotation.RestController;<br><br><span class=\"hljs-keyword\">import</span> java.util.concurrent.TimeUnit;<br><br><span class=\"hljs-meta\">@RestController</span><br><span class=\"hljs-meta\">@RequestMapping(value = &quot;/test&quot;)</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">TestController</span> &#123;<br><br>    <span class=\"hljs-meta\">@GetMapping(value = &quot;/hello1&quot;)</span><br>    <span class=\"hljs-meta\">@Limit(maxTimes = 10, interval = 100, unit = TimeUnit.SECONDS)</span><br>    <span class=\"hljs-keyword\">public</span> Response <span class=\"hljs-title function_\">hello1</span><span class=\"hljs-params\">(<span class=\"hljs-meta\">@RequestParam(name = &quot;name&quot;, defaultValue = &quot;cxy&quot;)</span> String name)</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> Response.success(<span class=\"hljs-string\">&quot;hello1 success &quot;</span> + name);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>从上面的接口注解配置中，可以看出，这个接口在100秒内最多访问10次，我们启动项目，访问&#x2F;test&#x2F;hello1，前10次的访问结果为：</p>\n<img src=\"/2024/04/02/Redis%E5%AD%A6%E4%B9%A04%E2%80%94Redis%E5%BA%94%E7%94%A8%E4%B9%8B%E9%99%90%E6%B5%81/2.png\" class=\"\">\n<p>第11次时，开始限流了</p>\n<img src=\"/2024/04/02/Redis%E5%AD%A6%E4%B9%A04%E2%80%94Redis%E5%BA%94%E7%94%A8%E4%B9%8B%E9%99%90%E6%B5%81/3.png\" class=\"\">\n<p>这里看起来不是很直观，我们将时间间隙改为2，表示2秒最多由10个请求能执行</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@GetMapping(value = &quot;/hello1&quot;)</span><br>    <span class=\"hljs-meta\">@Limit(maxTimes = 10, interval = 2, unit = TimeUnit.SECONDS)</span><br>    <span class=\"hljs-keyword\">public</span> Response <span class=\"hljs-title function_\">hello1</span><span class=\"hljs-params\">(<span class=\"hljs-meta\">@RequestParam(name = &quot;name&quot;, defaultValue = &quot;cxy&quot;)</span> String name)</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> Response.success(<span class=\"hljs-string\">&quot;hello1 success &quot;</span> + name);<br>    &#125;<br></code></pre></td></tr></table></figure>\n<p>使用postman进行并发请求，下面的redis限流测试，就是刚才提到的<a href=\"http://localhost:8080/test/hello1?name=cxy%E8%BF%99%E4%B8%AA%E8%AF%B7%E6%B1%82\">http://localhost:8080/test/hello1?name=cxy这个请求</a></p>\n<img src=\"/2024/04/02/Redis%E5%AD%A6%E4%B9%A04%E2%80%94Redis%E5%BA%94%E7%94%A8%E4%B9%8B%E9%99%90%E6%B5%81/4.png\" class=\"\">\n<p>执行该并发测试，结果如下：</p>\n<img src=\"/2024/04/02/Redis%E5%AD%A6%E4%B9%A04%E2%80%94Redis%E5%BA%94%E7%94%A8%E4%B9%8B%E9%99%90%E6%B5%81/5.png\" class=\"\">\n<p>这里20个请求中，有10个成功，10个被限流。不过这个postman结果展示不太好，只能一个一个查看结果，这里就不一一展示了。</p>\n<h4 id=\"2-2-职责分离\"><a href=\"#2-2-职责分离\" class=\"headerlink\" title=\"2.2. 职责分离\"></a>2.2. 职责分离</h4><p>上面的代码，虽然能成功限流，但是有一个问题，就是切面类的beforeAdvice方法中，做的事情太多了，又是解析请求参数、解析注解参数，又是使用查询Redis，进行限流判断，我们应该将限流逻辑的判断，此外，这里使用的是Redis，如果后续我们不使用Redis，换成其他方式进行限流判断的话，需要改很多处代码，因此，这里要做一些优化，包括：<br>1）定义限流请求类，用于封装访问的方法名、注解信息等内容<br>2）定义限流处理接口<br>3）定义Redis限流处理类，通过Redis实现限流处理接口<br>我们首先定义一个限流请求类，封装限流处理所需要的参数：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> org.example.request;<br><br><span class=\"hljs-keyword\">import</span> lombok.Data;<br><br><span class=\"hljs-keyword\">import</span> java.io.Serializable;<br><span class=\"hljs-keyword\">import</span> java.util.HashMap;<br><span class=\"hljs-keyword\">import</span> java.util.Map;<br><span class=\"hljs-keyword\">import</span> java.util.concurrent.TimeUnit;<br><br><span class=\"hljs-meta\">@Data</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">LimitRequest</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">Serializable</span> &#123;<br>    <span class=\"hljs-keyword\">private</span> String methodName;<br><br>    <span class=\"hljs-keyword\">private</span> Integer interval;<br><br>    <span class=\"hljs-keyword\">private</span> Integer maxTimes;<br><br>    <span class=\"hljs-keyword\">private</span> TimeUnit timeUnit;<br><br>    <span class=\"hljs-keyword\">private</span> Map&lt;String, Object&gt; extendMap = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">HashMap</span>&lt;&gt;();<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>定义限流处理接口</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> org.example.limit;<br><br><span class=\"hljs-keyword\">import</span> org.example.request.limit.LimitRequest;<br><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">LimitHandler</span> &#123;<br>    <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">handleLimit</span><span class=\"hljs-params\">(LimitRequest limitRequest)</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>定义Redis的限流处理类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> org.example.limit;<br><br><span class=\"hljs-keyword\">import</span> org.example.common.ResultCode;<br><span class=\"hljs-keyword\">import</span> org.example.exception.BusinessException;<br><span class=\"hljs-keyword\">import</span> org.example.request.limit.LimitRequest;<br><span class=\"hljs-keyword\">import</span> org.example.util.RedisUtils;<br><span class=\"hljs-keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class=\"hljs-keyword\">import</span> org.springframework.stereotype.Component;<br><br><span class=\"hljs-meta\">@Component</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">RedisLimitHandler</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">LimitHandler</span>&#123;<br>    <span class=\"hljs-meta\">@Autowired</span><br>    <span class=\"hljs-keyword\">private</span> RedisUtils redisUtils;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">handleLimit</span><span class=\"hljs-params\">(LimitRequest limitRequest)</span> &#123;<br>        <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">methodName</span> <span class=\"hljs-operator\">=</span> limitRequest.getMethodName();<br>        <span class=\"hljs-comment\">// 获取redis值</span><br>        <span class=\"hljs-type\">Object</span> <span class=\"hljs-variable\">key</span> <span class=\"hljs-operator\">=</span> redisUtils.getKey(methodName);<br>        <span class=\"hljs-keyword\">if</span> (key != <span class=\"hljs-literal\">null</span>) &#123;<br>            <span class=\"hljs-type\">Integer</span> <span class=\"hljs-variable\">redisValue</span> <span class=\"hljs-operator\">=</span> (Integer) key;<br>            <span class=\"hljs-comment\">// 小于限流值</span><br>            <span class=\"hljs-keyword\">if</span> (redisValue.compareTo(limitRequest.getMaxTimes()) &lt;= <span class=\"hljs-number\">0</span>) &#123;<br>                redisUtils.increment(methodName);<br>                <span class=\"hljs-keyword\">return</span>;<br>            &#125;<br>            <span class=\"hljs-comment\">// 大于限流值</span><br>            <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">BusinessException</span>(ResultCode.LIMIT_ERROR);<br>        &#125;<br><br>        <span class=\"hljs-comment\">// 获取的值为null, 设置数据到redis中</span><br>        redisUtils.addKey(methodName, <span class=\"hljs-number\">1</span>, limitRequest.getInterval(), limitRequest.getTimeUnit());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>修改LimitAspect代码，但后续更换限流策略是，只需要修改LimitHandler的bean即可。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> org.example.aspect;<br><br><span class=\"hljs-keyword\">import</span> org.aspectj.lang.JoinPoint;<br><span class=\"hljs-keyword\">import</span> org.aspectj.lang.annotation.Aspect;<br><span class=\"hljs-keyword\">import</span> org.aspectj.lang.annotation.Before;<br><span class=\"hljs-keyword\">import</span> org.aspectj.lang.annotation.Pointcut;<br><span class=\"hljs-keyword\">import</span> org.aspectj.lang.reflect.MethodSignature;<br><span class=\"hljs-keyword\">import</span> org.example.annotations.Limit;<br><span class=\"hljs-keyword\">import</span> org.example.limit.LimitHandler;<br><span class=\"hljs-keyword\">import</span> org.example.request.limit.LimitRequest;<br><span class=\"hljs-keyword\">import</span> org.springframework.stereotype.Component;<br><br><span class=\"hljs-keyword\">import</span> javax.annotation.Resource;<br><br><span class=\"hljs-meta\">@Component</span><br><span class=\"hljs-meta\">@Aspect</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">LimitAspect</span> &#123;<br><br>    <span class=\"hljs-meta\">@Resource</span><br>    <span class=\"hljs-keyword\">private</span> LimitHandler redisLimitHandler;<br><br>    <span class=\"hljs-meta\">@Pointcut(&quot;@annotation(org.example.annotations.Limit)&quot;)</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">pointCut</span><span class=\"hljs-params\">()</span> &#123;<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Before(&quot;pointCut()&quot;)</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">beforeAdvice</span><span class=\"hljs-params\">(JoinPoint joinPoint)</span> &#123;<br>        <span class=\"hljs-type\">LimitRequest</span> <span class=\"hljs-variable\">limitRequest</span> <span class=\"hljs-operator\">=</span> convert2LimitRequest(joinPoint);<br><br>        redisLimitHandler.handleLimit(limitRequest);<br>    &#125;<br><br>    <span class=\"hljs-keyword\">private</span> LimitRequest <span class=\"hljs-title function_\">convert2LimitRequest</span><span class=\"hljs-params\">(JoinPoint joinPoint)</span> &#123;<br>        <span class=\"hljs-type\">LimitRequest</span> <span class=\"hljs-variable\">limitRequest</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">LimitRequest</span>();<br><br>        <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">methodName</span> <span class=\"hljs-operator\">=</span> joinPoint.getSignature().getName();<br>        <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">prefixMethod</span> <span class=\"hljs-operator\">=</span> joinPoint.getSignature().getDeclaringTypeName();<br>        limitRequest.setMethodName(prefixMethod + <span class=\"hljs-string\">&quot;.&quot;</span> + methodName);<br><br>        Object[] args = joinPoint.getArgs();<br>        limitRequest.getExtendMap().put(<span class=\"hljs-string\">&quot;args&quot;</span>, args);<br><br>        <span class=\"hljs-type\">MethodSignature</span> <span class=\"hljs-variable\">methodSignature</span> <span class=\"hljs-operator\">=</span> (MethodSignature) joinPoint.getSignature();<br>        <span class=\"hljs-type\">Limit</span> <span class=\"hljs-variable\">annotation</span> <span class=\"hljs-operator\">=</span> methodSignature.getMethod().getAnnotation(Limit.class);<br>        limitRequest.setInterval(annotation.interval());<br>        limitRequest.setMaxTimes(annotation.maxTimes());<br>        limitRequest.setTimeUnit(annotation.unit());<br>        <span class=\"hljs-keyword\">return</span> limitRequest;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"3-通过Zset实现限流\"><a href=\"#3-通过Zset实现限流\" class=\"headerlink\" title=\"3. 通过Zset实现限流\"></a>3. 通过Zset实现限流</h3><p>我们可以将请求打造成一个zset数组，每一次请求进来时，value保持一致，可以用UUID生成，然后score用当前时间戳表示，通过range方法，来获取某个时间范围内，请求的个数，然后根据这个个数与限流值对比，当大于限流值时，进行限流操作。<br>我们修改RedisLimitHandler代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Override</span><br>   <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">handleLimit</span><span class=\"hljs-params\">(LimitRequest limitRequest)</span> &#123;<br>      handleLimitByZSet(limitRequest);<br>   &#125;<br><br>   <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">handleLimitByZSet</span><span class=\"hljs-params\">(LimitRequest limitRequest)</span> &#123;<br>       <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">methodName</span> <span class=\"hljs-operator\">=</span> limitRequest.getMethodName();<br><br>       <span class=\"hljs-type\">long</span> <span class=\"hljs-variable\">currentTime</span> <span class=\"hljs-operator\">=</span> System.currentTimeMillis();<br>       <span class=\"hljs-type\">long</span> <span class=\"hljs-variable\">interval</span> <span class=\"hljs-operator\">=</span> TimeUnit.MILLISECONDS.convert(limitRequest.getInterval(), limitRequest.getTimeUnit());<br><br>       <span class=\"hljs-keyword\">if</span> (redisUtils.hasKey(methodName)) &#123;<br>           <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">count</span> <span class=\"hljs-operator\">=</span> redisUtils.rangeByScore(methodName, Double.valueOf(currentTime - interval), Double.valueOf(currentTime)).size();<br>           <span class=\"hljs-keyword\">if</span> (count &gt; limitRequest.getMaxTimes()) &#123;<br>               <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">BusinessException</span>(ResultCode.LIMIT_ERROR);<br>           &#125;<br>       &#125;<br>       redisUtils.addZSet(methodName, UUID.randomUUID().toString(), Double.valueOf(currentTime));<br>   &#125;<br></code></pre></td></tr></table></figure>\n<p>然后添加一个测试类，用于模拟并发场景下的多个请求</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> org.example;<br><br><span class=\"hljs-keyword\">import</span> com.alibaba.fastjson.JSONObject;<br><span class=\"hljs-keyword\">import</span> org.example.common.Response;<br><span class=\"hljs-keyword\">import</span> org.example.common.ResultCode;<br><span class=\"hljs-keyword\">import</span> org.example.controller.TestController;<br><span class=\"hljs-keyword\">import</span> org.example.exception.BusinessException;<br><span class=\"hljs-keyword\">import</span> org.junit.jupiter.api.Test;<br><span class=\"hljs-keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class=\"hljs-keyword\">import</span> org.springframework.boot.test.context.SpringBootTest;<br><br><span class=\"hljs-keyword\">import</span> java.util.ArrayList;<br><span class=\"hljs-keyword\">import</span> java.util.List;<br><span class=\"hljs-keyword\">import</span> java.util.concurrent.*;<br><br><span class=\"hljs-meta\">@SpringBootTest</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">RedisLimitTest</span> &#123;<br>    <span class=\"hljs-meta\">@Autowired</span><br>    <span class=\"hljs-keyword\">private</span> TestController testController;<br><br>    <span class=\"hljs-meta\">@Test</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">testLimit</span><span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">throws</span> ExecutionException, InterruptedException &#123;<br>        <span class=\"hljs-type\">ExecutorService</span> <span class=\"hljs-variable\">executorService</span> <span class=\"hljs-operator\">=</span> Executors.newFixedThreadPool(<span class=\"hljs-number\">5</span>);<br>        Callable&lt;Response&gt; callable = () -&gt; &#123;<br>            <span class=\"hljs-keyword\">try</span> &#123;<br>                <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">name</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;cxy&quot;</span>;<br>                <span class=\"hljs-keyword\">return</span> testController.hello1(name);<br>            &#125; <span class=\"hljs-keyword\">catch</span> (BusinessException e) &#123;<br>                <span class=\"hljs-keyword\">return</span> Response.fail(e.getResultCode());<br>            &#125;<br>        &#125;;<br>        List&lt;Future&lt;Response&gt;&gt; futureList = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayList</span>&lt;&gt;();<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">20</span>; i++) &#123;<br>            Future&lt;Response&gt; submit = executorService.submit(callable);<br>            futureList.add(submit);<br>        &#125;<br><br>        <span class=\"hljs-keyword\">for</span> (Future&lt;Response&gt; future : futureList) &#123;<br>            System.out.println(JSONObject.toJSONString(future.get()));<br>        &#125;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>运行结果如下：</p>\n<img src=\"/2024/04/02/Redis%E5%AD%A6%E4%B9%A04%E2%80%94Redis%E5%BA%94%E7%94%A8%E4%B9%8B%E9%99%90%E6%B5%81/6.png\" class=\"\">\n<p>我们可以看到，这里确实进行限流了，但是，这个限流个数不太对，这是因为可能多个请求都执行到这条代码，获取到同一个值，然后才进行更新。<br> int count &#x3D; redisUtils.rangeByScore(methodName, Double.valueOf(currentTime - interval), Double.valueOf(currentTime)).size();<br>比如有5个请求同时打过来，此时的执行到上面这条代码时，redis中符合范围的刚好有9条，那么这5个请求在进行判断时，都小于限流值，因此都会执行，然后才是更新zset，这个就是并发场景下的问题了。<br>另外，使用zset还有一个问题，它虽然能达到滑动窗口的效果，但是zset的数据结构会越来越大。</p>\n","excerpt":"","more":"<h3 id=\"1-引言\"><a href=\"#1-引言\" class=\"headerlink\" title=\"1. 引言\"></a>1. 引言</h3><p>Redis作为一个内存数据库其读写速度非常快，并且支持原子操作，这使得它非常适合处理频繁的请求，一般情况下，我们会使用Redis作为缓存数据库，但处理做缓存数据库之外，Redis的应用还十分广泛，比如这一节，我们将讲解Redis在限流方面的应用。</p>\n<h3 id=\"2-通过setnx实现限流\"><a href=\"#2-通过setnx实现限流\" class=\"headerlink\" title=\"2. 通过setnx实现限流\"></a>2. 通过setnx实现限流</h3><p>我们通过切面，来获取某给接口在一段时间内的请求次数，当请求次数超过某个值时，抛出限流异常，直接返回，不执行业务逻辑。思路大致如下：</p>\n<img src=\"/2024/04/02/Redis%E5%AD%A6%E4%B9%A04%E2%80%94Redis%E5%BA%94%E7%94%A8%E4%B9%8B%E9%99%90%E6%B5%81/1.png\" class=\"\">\n<h4 id=\"2-1-初步实现\"><a href=\"#2-1-初步实现\" class=\"headerlink\" title=\"2.1. 初步实现\"></a>2.1. 初步实现</h4><p>我们参照上面的流程，对Redis限流进行实现。首先引入aop切面相关的依赖</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span><br>          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span><br>          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>spring-boot-starter-aop<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<p>然后添加一个限流注解类，这个注解有三个属性，maxTimes表示最大访问次数，interval表示限流间隙，unit表示时间的单位，假设配置的值为maxTimes&#x3D;10, interval&#x3D;1, unit&#x3D; TimeUnit.SECONDS，那么表示在1秒内，限制访问次数为10次。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> org.example.annotations;<br><br><span class=\"hljs-keyword\">import</span> java.lang.annotation.ElementType;<br><span class=\"hljs-keyword\">import</span> java.lang.annotation.Retention;<br><span class=\"hljs-keyword\">import</span> java.lang.annotation.RetentionPolicy;<br><span class=\"hljs-keyword\">import</span> java.lang.annotation.Target;<br><span class=\"hljs-keyword\">import</span> java.util.concurrent.TimeUnit;<br><br><span class=\"hljs-meta\">@Target(value = ElementType.METHOD)</span><br><span class=\"hljs-meta\">@Retention(RetentionPolicy.RUNTIME)</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-meta\">@interface</span> Limit &#123;<br>    <span class=\"hljs-comment\">// 访问次数</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">maxTimes</span><span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-number\">1</span>;<br><br>    <span class=\"hljs-comment\">// 间隔时间</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">interval</span><span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-number\">1</span>;<br><br>    <span class=\"hljs-comment\">// 时间单位</span><br>    <span class=\"hljs-keyword\">public</span> TimeUnit <span class=\"hljs-title function_\">unit</span><span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">default</span> TimeUnit.SECONDS;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>返回结果类：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> org.example.common;<br><br><span class=\"hljs-keyword\">import</span> lombok.Getter;<br><br><span class=\"hljs-keyword\">import</span> java.io.Serializable;<br><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Response</span> &lt;T&gt;  <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">Serializable</span> &#123;<br>    <span class=\"hljs-meta\">@Getter</span><br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">int</span> code;<br><br>    <span class=\"hljs-meta\">@Getter</span><br>    <span class=\"hljs-keyword\">private</span> String msg;<br><br>    <span class=\"hljs-meta\">@Getter</span><br>    <span class=\"hljs-keyword\">private</span> T data;<br><br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-title function_\">Response</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> code, String msg)</span> &#123;<br>        <span class=\"hljs-built_in\">this</span>.code = code;<br>        <span class=\"hljs-built_in\">this</span>.msg = msg;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-title function_\">Response</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> code, String msg, T data)</span> &#123;<br>        <span class=\"hljs-built_in\">this</span>.code = code;<br>        <span class=\"hljs-built_in\">this</span>.msg = msg;<br>        <span class=\"hljs-built_in\">this</span>.data = data;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-title function_\">Response</span><span class=\"hljs-params\">(ResultCode resultCode)</span> &#123;<br>        <span class=\"hljs-built_in\">this</span>.code = resultCode.getCode();<br>        <span class=\"hljs-built_in\">this</span>.msg = resultCode.getMsg();<br>    &#125;<br><br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-title function_\">Response</span><span class=\"hljs-params\">(ResultCode resultCode, T data)</span> &#123;<br>        <span class=\"hljs-built_in\">this</span>.code = resultCode.getCode();<br>        <span class=\"hljs-built_in\">this</span>.msg = resultCode.getMsg();<br>        <span class=\"hljs-built_in\">this</span>.data = data;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> &lt;T&gt; Response <span class=\"hljs-title function_\">success</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Response</span>(ResultCode.SUCCESS);<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> &lt;T&gt; Response <span class=\"hljs-title function_\">success</span><span class=\"hljs-params\">(T data)</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Response</span>(ResultCode.SUCCESS, data);<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> &lt;T&gt; Response <span class=\"hljs-title function_\">fail</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Response</span>(ResultCode.FAIL);<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> &lt;T&gt; Response <span class=\"hljs-title function_\">fail</span><span class=\"hljs-params\">(ResultCode resultCode)</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Response</span>(resultCode);<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> &lt;T&gt; Response <span class=\"hljs-title function_\">error</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Response</span>(ResultCode.SERVER_ERROR);<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> &lt;T&gt; Response <span class=\"hljs-title function_\">error</span><span class=\"hljs-params\">(String msg)</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Response</span>(ResultCode.SERVER_ERROR.getCode(), msg);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>错误码类，在错误码中，我们添加一个LIMIT_ERROR，表示该接口被限流。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> org.example.common;<br><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">enum</span> <span class=\"hljs-title class_\">ResultCode</span> &#123;<br>    SUCCESS(<span class=\"hljs-number\">200</span>, <span class=\"hljs-string\">&quot;操作成功&quot;</span>),<br><br>    FAIL(<span class=\"hljs-number\">400</span>, <span class=\"hljs-string\">&quot;操作失败&quot;</span>),<br><br>    SERVER_ERROR(<span class=\"hljs-number\">500</span>, <span class=\"hljs-string\">&quot;服务器错误&quot;</span>),<br><br>    LIMIT_ERROR(<span class=\"hljs-number\">400</span>, <span class=\"hljs-string\">&quot;限流&quot;</span>);<br><br>    <span class=\"hljs-type\">int</span> code;<br><br>    String msg;<br><br>    ResultCode(<span class=\"hljs-type\">int</span> code, String msg) &#123;<br>        <span class=\"hljs-built_in\">this</span>.code = code;<br>        <span class=\"hljs-built_in\">this</span>.msg = msg;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">getCode</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>.code;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title function_\">getMsg</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>.msg;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>业务异常类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">BusinessException</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">RuntimeException</span> &#123;<br>    <span class=\"hljs-keyword\">private</span> ResultCode resultCode;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">BusinessException</span><span class=\"hljs-params\">(ResultCode resultCode)</span> &#123;<br>        <span class=\"hljs-built_in\">super</span>(resultCode.getMsg());<br>        <span class=\"hljs-built_in\">this</span>.resultCode = resultCode;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> ResultCode <span class=\"hljs-title function_\">getResultCode</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>.resultCode;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>全局异常处理类，在我们的切面中，如果发现访问次数大于最大访问次数，那么抛出限流异常，由全局异常处理类进行处理，返回对应的结果</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> org.example.exception;<br><br><span class=\"hljs-keyword\">import</span> org.example.common.Response;<br><span class=\"hljs-keyword\">import</span> org.springframework.web.bind.annotation.ExceptionHandler;<br><span class=\"hljs-keyword\">import</span> org.springframework.web.bind.annotation.RestControllerAdvice;<br><br><span class=\"hljs-meta\">@RestControllerAdvice</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">GlobalExceptionHandler</span> &#123;<br>    <span class=\"hljs-meta\">@ExceptionHandler(value = BusinessException.class)</span><br>    <span class=\"hljs-keyword\">public</span> Response <span class=\"hljs-title function_\">handleBusinessException</span><span class=\"hljs-params\">(BusinessException e)</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> Response.fail(e.getResultCode());<br>    &#125;<br><br>    <span class=\"hljs-meta\">@ExceptionHandler(value = Exception.class)</span><br>    <span class=\"hljs-keyword\">public</span> Response <span class=\"hljs-title function_\">handleException</span><span class=\"hljs-params\">(Exception e)</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> Response.error(e.getMessage());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>限流切面类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> org.example.aspect;<br><br><span class=\"hljs-keyword\">import</span> org.aspectj.lang.JoinPoint;<br><span class=\"hljs-keyword\">import</span> org.aspectj.lang.annotation.Aspect;<br><span class=\"hljs-keyword\">import</span> org.aspectj.lang.annotation.Before;<br><span class=\"hljs-keyword\">import</span> org.aspectj.lang.annotation.Pointcut;<br><span class=\"hljs-keyword\">import</span> org.aspectj.lang.reflect.MethodSignature;<br><span class=\"hljs-keyword\">import</span> org.example.annotations.Limit;<br><span class=\"hljs-keyword\">import</span> org.example.common.ResultCode;<br><span class=\"hljs-keyword\">import</span> org.example.exception.BusinessException;<br><span class=\"hljs-keyword\">import</span> org.example.util.RedisUtils;<br><span class=\"hljs-keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class=\"hljs-keyword\">import</span> org.springframework.stereotype.Component;<br><br><span class=\"hljs-meta\">@Component</span><br><span class=\"hljs-meta\">@Aspect</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">LimitAspect</span> &#123;<br>    <span class=\"hljs-meta\">@Autowired</span><br>    <span class=\"hljs-keyword\">private</span> RedisUtils redisUtils;<br><br>    <span class=\"hljs-meta\">@Pointcut(&quot;@annotation(org.example.annotations.Limit)&quot;)</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">pointCut</span><span class=\"hljs-params\">()</span> &#123;<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Before(&quot;pointCut()&quot;)</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">beforeAdvice</span><span class=\"hljs-params\">(JoinPoint joinPoint)</span> &#123;<br>        <span class=\"hljs-comment\">// 获取方法名</span><br>        <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">methodName</span> <span class=\"hljs-operator\">=</span> joinPoint.getSignature().getName();<br>        <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">prefixMethod</span> <span class=\"hljs-operator\">=</span> joinPoint.getSignature().getDeclaringTypeName();<br>        <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">fullMethodName</span> <span class=\"hljs-operator\">=</span> prefixMethod + <span class=\"hljs-string\">&quot;.&quot;</span> + methodName;<br>        System.out.println(<span class=\"hljs-string\">&quot;methodName:&quot;</span> + fullMethodName);<br><br>        Object[] args = joinPoint.getArgs();<br>        <span class=\"hljs-keyword\">for</span> (Object arg : args) &#123;<br>            System.out.println(<span class=\"hljs-string\">&quot;method argument:&quot;</span> + arg);<br>        &#125;<br><br>        <span class=\"hljs-comment\">// 获取注解参数</span><br>        <span class=\"hljs-type\">MethodSignature</span> <span class=\"hljs-variable\">methodSignature</span> <span class=\"hljs-operator\">=</span> (MethodSignature) joinPoint.getSignature();<br>        <span class=\"hljs-type\">Limit</span> <span class=\"hljs-variable\">annotation</span> <span class=\"hljs-operator\">=</span> methodSignature.getMethod().getAnnotation(Limit.class);<br>        System.out.println(annotation.unit());<br>        System.out.println(annotation.maxTimes());<br>        System.out.println(annotation.interval());<br><br>        <span class=\"hljs-comment\">// 获取redis值</span><br>        <span class=\"hljs-type\">Object</span> <span class=\"hljs-variable\">key</span> <span class=\"hljs-operator\">=</span> redisUtils.getKey(fullMethodName);<br>        <span class=\"hljs-keyword\">if</span> (key != <span class=\"hljs-literal\">null</span>) &#123;<br>            <span class=\"hljs-type\">Integer</span> <span class=\"hljs-variable\">redisValue</span> <span class=\"hljs-operator\">=</span> (Integer) key;<br>            <span class=\"hljs-comment\">// 小于限流值</span><br>            <span class=\"hljs-keyword\">if</span> (redisValue.compareTo(annotation.maxTimes()) &lt; <span class=\"hljs-number\">0</span>) &#123;<br>                redisUtils.increment(fullMethodName);<br>                <span class=\"hljs-keyword\">return</span>;<br>            &#125;<br>            <span class=\"hljs-comment\">// 大于限流值</span><br>            <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">BusinessException</span>(ResultCode.LIMIT_ERROR);<br>        &#125;<br><br>        <span class=\"hljs-comment\">// 获取的值为null, 设置数据到redis中</span><br>        redisUtils.addKey(fullMethodName, <span class=\"hljs-number\">1</span>, annotation.interval(), annotation.unit());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>最后添加一个TestController类，用于进行接口的测试：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> org.example.controller;<br><br><span class=\"hljs-keyword\">import</span> org.example.annotations.Limit;<br><span class=\"hljs-keyword\">import</span> org.example.common.Response;<br><span class=\"hljs-keyword\">import</span> org.example.common.ResultCode;<br><span class=\"hljs-keyword\">import</span> org.example.exception.BusinessException;<br><span class=\"hljs-keyword\">import</span> org.springframework.web.bind.annotation.GetMapping;<br><span class=\"hljs-keyword\">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><span class=\"hljs-keyword\">import</span> org.springframework.web.bind.annotation.RequestParam;<br><span class=\"hljs-keyword\">import</span> org.springframework.web.bind.annotation.RestController;<br><br><span class=\"hljs-keyword\">import</span> java.util.concurrent.TimeUnit;<br><br><span class=\"hljs-meta\">@RestController</span><br><span class=\"hljs-meta\">@RequestMapping(value = &quot;/test&quot;)</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">TestController</span> &#123;<br><br>    <span class=\"hljs-meta\">@GetMapping(value = &quot;/hello1&quot;)</span><br>    <span class=\"hljs-meta\">@Limit(maxTimes = 10, interval = 100, unit = TimeUnit.SECONDS)</span><br>    <span class=\"hljs-keyword\">public</span> Response <span class=\"hljs-title function_\">hello1</span><span class=\"hljs-params\">(<span class=\"hljs-meta\">@RequestParam(name = &quot;name&quot;, defaultValue = &quot;cxy&quot;)</span> String name)</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> Response.success(<span class=\"hljs-string\">&quot;hello1 success &quot;</span> + name);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>从上面的接口注解配置中，可以看出，这个接口在100秒内最多访问10次，我们启动项目，访问&#x2F;test&#x2F;hello1，前10次的访问结果为：</p>\n<img src=\"/2024/04/02/Redis%E5%AD%A6%E4%B9%A04%E2%80%94Redis%E5%BA%94%E7%94%A8%E4%B9%8B%E9%99%90%E6%B5%81/2.png\" class=\"\">\n<p>第11次时，开始限流了</p>\n<img src=\"/2024/04/02/Redis%E5%AD%A6%E4%B9%A04%E2%80%94Redis%E5%BA%94%E7%94%A8%E4%B9%8B%E9%99%90%E6%B5%81/3.png\" class=\"\">\n<p>这里看起来不是很直观，我们将时间间隙改为2，表示2秒最多由10个请求能执行</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@GetMapping(value = &quot;/hello1&quot;)</span><br>    <span class=\"hljs-meta\">@Limit(maxTimes = 10, interval = 2, unit = TimeUnit.SECONDS)</span><br>    <span class=\"hljs-keyword\">public</span> Response <span class=\"hljs-title function_\">hello1</span><span class=\"hljs-params\">(<span class=\"hljs-meta\">@RequestParam(name = &quot;name&quot;, defaultValue = &quot;cxy&quot;)</span> String name)</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> Response.success(<span class=\"hljs-string\">&quot;hello1 success &quot;</span> + name);<br>    &#125;<br></code></pre></td></tr></table></figure>\n<p>使用postman进行并发请求，下面的redis限流测试，就是刚才提到的<a href=\"http://localhost:8080/test/hello1?name=cxy%E8%BF%99%E4%B8%AA%E8%AF%B7%E6%B1%82\">http://localhost:8080/test/hello1?name=cxy这个请求</a></p>\n<img src=\"/2024/04/02/Redis%E5%AD%A6%E4%B9%A04%E2%80%94Redis%E5%BA%94%E7%94%A8%E4%B9%8B%E9%99%90%E6%B5%81/4.png\" class=\"\">\n<p>执行该并发测试，结果如下：</p>\n<img src=\"/2024/04/02/Redis%E5%AD%A6%E4%B9%A04%E2%80%94Redis%E5%BA%94%E7%94%A8%E4%B9%8B%E9%99%90%E6%B5%81/5.png\" class=\"\">\n<p>这里20个请求中，有10个成功，10个被限流。不过这个postman结果展示不太好，只能一个一个查看结果，这里就不一一展示了。</p>\n<h4 id=\"2-2-职责分离\"><a href=\"#2-2-职责分离\" class=\"headerlink\" title=\"2.2. 职责分离\"></a>2.2. 职责分离</h4><p>上面的代码，虽然能成功限流，但是有一个问题，就是切面类的beforeAdvice方法中，做的事情太多了，又是解析请求参数、解析注解参数，又是使用查询Redis，进行限流判断，我们应该将限流逻辑的判断，此外，这里使用的是Redis，如果后续我们不使用Redis，换成其他方式进行限流判断的话，需要改很多处代码，因此，这里要做一些优化，包括：<br>1）定义限流请求类，用于封装访问的方法名、注解信息等内容<br>2）定义限流处理接口<br>3）定义Redis限流处理类，通过Redis实现限流处理接口<br>我们首先定义一个限流请求类，封装限流处理所需要的参数：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> org.example.request;<br><br><span class=\"hljs-keyword\">import</span> lombok.Data;<br><br><span class=\"hljs-keyword\">import</span> java.io.Serializable;<br><span class=\"hljs-keyword\">import</span> java.util.HashMap;<br><span class=\"hljs-keyword\">import</span> java.util.Map;<br><span class=\"hljs-keyword\">import</span> java.util.concurrent.TimeUnit;<br><br><span class=\"hljs-meta\">@Data</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">LimitRequest</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">Serializable</span> &#123;<br>    <span class=\"hljs-keyword\">private</span> String methodName;<br><br>    <span class=\"hljs-keyword\">private</span> Integer interval;<br><br>    <span class=\"hljs-keyword\">private</span> Integer maxTimes;<br><br>    <span class=\"hljs-keyword\">private</span> TimeUnit timeUnit;<br><br>    <span class=\"hljs-keyword\">private</span> Map&lt;String, Object&gt; extendMap = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">HashMap</span>&lt;&gt;();<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>定义限流处理接口</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> org.example.limit;<br><br><span class=\"hljs-keyword\">import</span> org.example.request.limit.LimitRequest;<br><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">LimitHandler</span> &#123;<br>    <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">handleLimit</span><span class=\"hljs-params\">(LimitRequest limitRequest)</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>定义Redis的限流处理类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> org.example.limit;<br><br><span class=\"hljs-keyword\">import</span> org.example.common.ResultCode;<br><span class=\"hljs-keyword\">import</span> org.example.exception.BusinessException;<br><span class=\"hljs-keyword\">import</span> org.example.request.limit.LimitRequest;<br><span class=\"hljs-keyword\">import</span> org.example.util.RedisUtils;<br><span class=\"hljs-keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class=\"hljs-keyword\">import</span> org.springframework.stereotype.Component;<br><br><span class=\"hljs-meta\">@Component</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">RedisLimitHandler</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">LimitHandler</span>&#123;<br>    <span class=\"hljs-meta\">@Autowired</span><br>    <span class=\"hljs-keyword\">private</span> RedisUtils redisUtils;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">handleLimit</span><span class=\"hljs-params\">(LimitRequest limitRequest)</span> &#123;<br>        <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">methodName</span> <span class=\"hljs-operator\">=</span> limitRequest.getMethodName();<br>        <span class=\"hljs-comment\">// 获取redis值</span><br>        <span class=\"hljs-type\">Object</span> <span class=\"hljs-variable\">key</span> <span class=\"hljs-operator\">=</span> redisUtils.getKey(methodName);<br>        <span class=\"hljs-keyword\">if</span> (key != <span class=\"hljs-literal\">null</span>) &#123;<br>            <span class=\"hljs-type\">Integer</span> <span class=\"hljs-variable\">redisValue</span> <span class=\"hljs-operator\">=</span> (Integer) key;<br>            <span class=\"hljs-comment\">// 小于限流值</span><br>            <span class=\"hljs-keyword\">if</span> (redisValue.compareTo(limitRequest.getMaxTimes()) &lt;= <span class=\"hljs-number\">0</span>) &#123;<br>                redisUtils.increment(methodName);<br>                <span class=\"hljs-keyword\">return</span>;<br>            &#125;<br>            <span class=\"hljs-comment\">// 大于限流值</span><br>            <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">BusinessException</span>(ResultCode.LIMIT_ERROR);<br>        &#125;<br><br>        <span class=\"hljs-comment\">// 获取的值为null, 设置数据到redis中</span><br>        redisUtils.addKey(methodName, <span class=\"hljs-number\">1</span>, limitRequest.getInterval(), limitRequest.getTimeUnit());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>修改LimitAspect代码，但后续更换限流策略是，只需要修改LimitHandler的bean即可。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> org.example.aspect;<br><br><span class=\"hljs-keyword\">import</span> org.aspectj.lang.JoinPoint;<br><span class=\"hljs-keyword\">import</span> org.aspectj.lang.annotation.Aspect;<br><span class=\"hljs-keyword\">import</span> org.aspectj.lang.annotation.Before;<br><span class=\"hljs-keyword\">import</span> org.aspectj.lang.annotation.Pointcut;<br><span class=\"hljs-keyword\">import</span> org.aspectj.lang.reflect.MethodSignature;<br><span class=\"hljs-keyword\">import</span> org.example.annotations.Limit;<br><span class=\"hljs-keyword\">import</span> org.example.limit.LimitHandler;<br><span class=\"hljs-keyword\">import</span> org.example.request.limit.LimitRequest;<br><span class=\"hljs-keyword\">import</span> org.springframework.stereotype.Component;<br><br><span class=\"hljs-keyword\">import</span> javax.annotation.Resource;<br><br><span class=\"hljs-meta\">@Component</span><br><span class=\"hljs-meta\">@Aspect</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">LimitAspect</span> &#123;<br><br>    <span class=\"hljs-meta\">@Resource</span><br>    <span class=\"hljs-keyword\">private</span> LimitHandler redisLimitHandler;<br><br>    <span class=\"hljs-meta\">@Pointcut(&quot;@annotation(org.example.annotations.Limit)&quot;)</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">pointCut</span><span class=\"hljs-params\">()</span> &#123;<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Before(&quot;pointCut()&quot;)</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">beforeAdvice</span><span class=\"hljs-params\">(JoinPoint joinPoint)</span> &#123;<br>        <span class=\"hljs-type\">LimitRequest</span> <span class=\"hljs-variable\">limitRequest</span> <span class=\"hljs-operator\">=</span> convert2LimitRequest(joinPoint);<br><br>        redisLimitHandler.handleLimit(limitRequest);<br>    &#125;<br><br>    <span class=\"hljs-keyword\">private</span> LimitRequest <span class=\"hljs-title function_\">convert2LimitRequest</span><span class=\"hljs-params\">(JoinPoint joinPoint)</span> &#123;<br>        <span class=\"hljs-type\">LimitRequest</span> <span class=\"hljs-variable\">limitRequest</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">LimitRequest</span>();<br><br>        <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">methodName</span> <span class=\"hljs-operator\">=</span> joinPoint.getSignature().getName();<br>        <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">prefixMethod</span> <span class=\"hljs-operator\">=</span> joinPoint.getSignature().getDeclaringTypeName();<br>        limitRequest.setMethodName(prefixMethod + <span class=\"hljs-string\">&quot;.&quot;</span> + methodName);<br><br>        Object[] args = joinPoint.getArgs();<br>        limitRequest.getExtendMap().put(<span class=\"hljs-string\">&quot;args&quot;</span>, args);<br><br>        <span class=\"hljs-type\">MethodSignature</span> <span class=\"hljs-variable\">methodSignature</span> <span class=\"hljs-operator\">=</span> (MethodSignature) joinPoint.getSignature();<br>        <span class=\"hljs-type\">Limit</span> <span class=\"hljs-variable\">annotation</span> <span class=\"hljs-operator\">=</span> methodSignature.getMethod().getAnnotation(Limit.class);<br>        limitRequest.setInterval(annotation.interval());<br>        limitRequest.setMaxTimes(annotation.maxTimes());<br>        limitRequest.setTimeUnit(annotation.unit());<br>        <span class=\"hljs-keyword\">return</span> limitRequest;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"3-通过Zset实现限流\"><a href=\"#3-通过Zset实现限流\" class=\"headerlink\" title=\"3. 通过Zset实现限流\"></a>3. 通过Zset实现限流</h3><p>我们可以将请求打造成一个zset数组，每一次请求进来时，value保持一致，可以用UUID生成，然后score用当前时间戳表示，通过range方法，来获取某个时间范围内，请求的个数，然后根据这个个数与限流值对比，当大于限流值时，进行限流操作。<br>我们修改RedisLimitHandler代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Override</span><br>   <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">handleLimit</span><span class=\"hljs-params\">(LimitRequest limitRequest)</span> &#123;<br>      handleLimitByZSet(limitRequest);<br>   &#125;<br><br>   <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">handleLimitByZSet</span><span class=\"hljs-params\">(LimitRequest limitRequest)</span> &#123;<br>       <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">methodName</span> <span class=\"hljs-operator\">=</span> limitRequest.getMethodName();<br><br>       <span class=\"hljs-type\">long</span> <span class=\"hljs-variable\">currentTime</span> <span class=\"hljs-operator\">=</span> System.currentTimeMillis();<br>       <span class=\"hljs-type\">long</span> <span class=\"hljs-variable\">interval</span> <span class=\"hljs-operator\">=</span> TimeUnit.MILLISECONDS.convert(limitRequest.getInterval(), limitRequest.getTimeUnit());<br><br>       <span class=\"hljs-keyword\">if</span> (redisUtils.hasKey(methodName)) &#123;<br>           <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">count</span> <span class=\"hljs-operator\">=</span> redisUtils.rangeByScore(methodName, Double.valueOf(currentTime - interval), Double.valueOf(currentTime)).size();<br>           <span class=\"hljs-keyword\">if</span> (count &gt; limitRequest.getMaxTimes()) &#123;<br>               <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">BusinessException</span>(ResultCode.LIMIT_ERROR);<br>           &#125;<br>       &#125;<br>       redisUtils.addZSet(methodName, UUID.randomUUID().toString(), Double.valueOf(currentTime));<br>   &#125;<br></code></pre></td></tr></table></figure>\n<p>然后添加一个测试类，用于模拟并发场景下的多个请求</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> org.example;<br><br><span class=\"hljs-keyword\">import</span> com.alibaba.fastjson.JSONObject;<br><span class=\"hljs-keyword\">import</span> org.example.common.Response;<br><span class=\"hljs-keyword\">import</span> org.example.common.ResultCode;<br><span class=\"hljs-keyword\">import</span> org.example.controller.TestController;<br><span class=\"hljs-keyword\">import</span> org.example.exception.BusinessException;<br><span class=\"hljs-keyword\">import</span> org.junit.jupiter.api.Test;<br><span class=\"hljs-keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class=\"hljs-keyword\">import</span> org.springframework.boot.test.context.SpringBootTest;<br><br><span class=\"hljs-keyword\">import</span> java.util.ArrayList;<br><span class=\"hljs-keyword\">import</span> java.util.List;<br><span class=\"hljs-keyword\">import</span> java.util.concurrent.*;<br><br><span class=\"hljs-meta\">@SpringBootTest</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">RedisLimitTest</span> &#123;<br>    <span class=\"hljs-meta\">@Autowired</span><br>    <span class=\"hljs-keyword\">private</span> TestController testController;<br><br>    <span class=\"hljs-meta\">@Test</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">testLimit</span><span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">throws</span> ExecutionException, InterruptedException &#123;<br>        <span class=\"hljs-type\">ExecutorService</span> <span class=\"hljs-variable\">executorService</span> <span class=\"hljs-operator\">=</span> Executors.newFixedThreadPool(<span class=\"hljs-number\">5</span>);<br>        Callable&lt;Response&gt; callable = () -&gt; &#123;<br>            <span class=\"hljs-keyword\">try</span> &#123;<br>                <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">name</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;cxy&quot;</span>;<br>                <span class=\"hljs-keyword\">return</span> testController.hello1(name);<br>            &#125; <span class=\"hljs-keyword\">catch</span> (BusinessException e) &#123;<br>                <span class=\"hljs-keyword\">return</span> Response.fail(e.getResultCode());<br>            &#125;<br>        &#125;;<br>        List&lt;Future&lt;Response&gt;&gt; futureList = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayList</span>&lt;&gt;();<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">20</span>; i++) &#123;<br>            Future&lt;Response&gt; submit = executorService.submit(callable);<br>            futureList.add(submit);<br>        &#125;<br><br>        <span class=\"hljs-keyword\">for</span> (Future&lt;Response&gt; future : futureList) &#123;<br>            System.out.println(JSONObject.toJSONString(future.get()));<br>        &#125;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>运行结果如下：</p>\n<img src=\"/2024/04/02/Redis%E5%AD%A6%E4%B9%A04%E2%80%94Redis%E5%BA%94%E7%94%A8%E4%B9%8B%E9%99%90%E6%B5%81/6.png\" class=\"\">\n<p>我们可以看到，这里确实进行限流了，但是，这个限流个数不太对，这是因为可能多个请求都执行到这条代码，获取到同一个值，然后才进行更新。<br> int count &#x3D; redisUtils.rangeByScore(methodName, Double.valueOf(currentTime - interval), Double.valueOf(currentTime)).size();<br>比如有5个请求同时打过来，此时的执行到上面这条代码时，redis中符合范围的刚好有9条，那么这5个请求在进行判断时，都小于限流值，因此都会执行，然后才是更新zset，这个就是并发场景下的问题了。<br>另外，使用zset还有一个问题，它虽然能达到滑动窗口的效果，但是zset的数据结构会越来越大。</p>\n"},{"title":"Redis学习3—Redis应用之缓存","date":"2024-04-02T13:12:30.000Z","_content":"### 1. 引言\n#### 1.1. 缓存的意义\nRedis作为一个NoSql数据库，被广泛的当作缓存数据库使用，所谓缓存，就是数据交换的缓冲区。使用缓存的具体原因有：\n1. 缓存数据存储于代码中，而代码运行在内存中，内存的读写性能远高于磁盘，通过缓存，可以大大降低用户访问并发量带来的服务器读写压力。\n2. 实际开发过程中，企业的数据量，少则几十万，多则上千万，如此大的数据量，如果没有缓存来作为“避震器”，系统是几乎撑不住的，所以企业会大量运用缓存技术。\n{% asset_img 1.png %}\n#### 1.2. 缓存的分类\n对于缓存，我们可以分为以下几类：\n1. 浏览器缓存：主要存在于浏览器端的缓存\n2. 应用层缓存：本地缓存（比如tomcat本地缓存）或缓存数据库（比如redis）\n3. 数据库缓存：在数据库中有一片空间是buffer pool，增删改查数据都会先加载到mysql的缓存中\n4. CPU缓存：当代计算机最大的问题是 cpu性能提升了，但内存读写速度没有跟上，所以为了适应当下的情况，增加了cpu的L1，L2，L3级的缓存\n{% asset_img 2.png %}\n### 2. 缓存模型\n#### 2.1. 查询、添加缓存\n一般情况下，在查询数据库之前，先查询缓存，如果缓存数据存在，就直接返回缓存数据，如果不存在，查询数据库，并将数据存入redis，具体的模型如下：\n{% asset_img 3.png %}\n#### 2.2. 缓存淘汰\n内存的空间是有限的，当我们向redis存储太多数据时，redis会对部分数据进行淘汰，淘汰数据的场景有：\n1. 内存淘汰：Redis自动进行，当redis内存达到设定的max-memery时，会自动触发淘汰机制，淘汰掉一些不重要的数据。\n2. 超时剔除：当对redis设置了过期时间TTL时，Redis会将超时的数据进行删除。\n3. 主动更新：通过手动调用方法把缓存删除掉，常用于解决缓存与数据库不一致的问题。\nRedis自动进行内存淘汰时，主要有6+2种数据淘汰机制，可以分为以下三大类：\n1. 不淘汰数据\n● noeviction ，不进行数据淘汰，当缓存被写满后，Redis不提供服务直接返回错误。\n2. 在设置过期时间的键值对中，\n● volatile-random ，在设置过期时间的键值对中随机删除\n● volatile-ttl ，在设置过期时间的键值对，基于过期时间的先后进行删除，越早过期的越先被删除。\n● volatile-lru ， 基于LRU(Least Recently Used) 算法筛选设置了过期时间的键值对， 最近最少使用的原则来筛选数据\n● volatile-lfu ，使用 LFU( Least Frequently Used ) 算法选择设置了过期时间的键值对, 使用频率最少的键值对,来筛选数据。\n3. 在所有键值对中\n● allkeys-random， 从所有键值对中随机选择并删除数据\n● allkeys-lru， 使用 LRU 算法在所有数据中进行筛选\n● allkeys-lfu， 使用 LFU 算法在所有数据中进行筛选\n{% asset_img 4.png %}\n#### 2.3. 数据库缓存不一致解决方案\n因为我们的缓存数据来自于数据库，而数据库的数据会随业务的需要而发生变化，当数据库中的数据变化，而缓存没有同步该数据，此时便会产生一致性问题。具体的解决策略有：\n1. Cache Aside Pattern（旁路缓存）\n2. Read/Write-Through Pattern（读写穿透）\n3. Write Behind Pattern（异步缓存写入）\n##### 2.3.1. Cache Aside Pattern（旁路缓存模式）\n该模式是平时使用比较多的一个缓存读写模式，比较适合读请求比较多的场景，在该模式中，需要同时维系db和cache，并且以db的结果为准。\n###### 2.3.1.1. 写\n先更新db，然后再直接删除cache\n{% asset_img 5.png %}\n注意，不能先删除cache，在写db，因为在并发的情况下，可能存在，请求1删除缓存，然后写db，并且写db操作还没结束，这时请求2获取缓存，此时因为缓存被删除了，因此会从数据库读数据， 并存入缓存，这个时候的数据是未更新的，当请求2结束后，请求1写db结束，此时就会造成数据库和缓存中的数据不一致。\n{% asset_img 6.png %}\n旁路缓存理论上来说，也会造成数据库和缓存不一致的问题，比如：请求 1 先写数据 A，请求 2 随后读数据 A 的话，就很有可能产生数据不一致性的问题。\n这个过程可以简单描述为：\n{% asset_img 7.png %}\n但这种概率很小，因为缓存的写入速度比数据库的写入速度快很多。\n###### 2.3.1.2. 读\n从cache中读取数据，读取到就直接返回。如果读取不到，从db中读取数据返回，然后再把数据放到cache中。\n{% asset_img 8.png %}\n###### 2.3.1.3. Cache Aside Pattern的缺陷\n1. 首次请求数据一定不在cache：这种情况可以先将热点数据提前放入cache中。\n2. 写操作比较频繁，会导致cache的数据被频繁删除，影响缓存命中率：更新db的时候同时更新cache，但是给缓存设置一个比较短的过期时间，保证即使数据不一致的话，影响也比较小。\n##### 2.3.2. Read/Write Through Pattern（读写穿透）\n服务端把 cache 视为主要数据存储，从中读取数据并将数据写入其中。cache 服务负责将此数据读取和写入 db，从而减轻了应用程序的职责。这种策略比较少使用，因为Redis并没有提供cache将数据写入db的功能。\n###### 2.3.2.1. 写（Write Through）\n● 先查 cache，cache 中不存在，直接更新 db。\n● cache 中存在，则先更新 cache，然后 cache 服务自己更新 db（同步更新 cache 和 db）。\n{% asset_img 9.png %}\n###### 2.3.2.2. 读（Read Through）\n● 从 cache 中读取数据，读取到就直接返回 。\n● 读取不到的话，先从 db 加载，写入到 cache 后返回响应。\n{% asset_img 10.png %}\n###### 2.3.2.3. 缺陷\n1. 实现困难，如Redis并没有提供cache将数据写入db的功能\n2. 和Cache Aside Pattern一样，首次请求数据一定不在cache中\n##### 2.3.3. Write Behind Pattern（异步缓存写入）\n与Read/Write Through Pattern相似，都是由cache服务来负责cache和db的读写，但是，Read/Write Through是同步更新cache和db，而Write Behind是只更新缓存，不直接更新db，改为异步批量的方式，更新db。\n这种方式对数据一致性带来了更大的挑战，比如 cache 数据可能还没异步更新 db 的话，cache 服务可能就就挂掉了。这种策略在我们平时开发过程中也非常非常少见，但是不代表它的应用场景少，比如消息队列中消息的异步写入磁盘、MySQL 的 Innodb Buffer Pool 机制都用到了这种策略。\nWrite Behind Pattern 下 db 的写性能非常高，非常适合一些数据经常变化又对数据一致性要求没那么高的场景，比如浏览量、点赞量。\n### 3. 缓存常见的问题\n#### 3.1. 缓存雪崩\n缓存雪崩，指缓存在同一时间大面积的生效（比如缓存数据过期），导致大量的请求都直接落到数据库上，给数据库造成了巨大的压力。此外，如果缓存服务器宕机也会导致缓存雪崩现象，导致所有的请求都落到了数据库上。\n{% asset_img 11.png %}\n解决方法有：\n1. 采用Redis集群，避免单机出现问题导致整个缓存服务器无法使用。\n2. 限流，避免同时处理大量请求。\n3. 多级缓存，比如本地缓存+Redis缓存的组合，当Redis缓存出现问题时，可以从本地缓存中获取部分数据。\n4. 设置不同的生效时间比如随机设置缓存的失效时间。\n5. 缓存永不生效。\n6. 缓存预热，在程序启动后或运行过程中，主动将热点数据加载到缓存中。\n#### 3.2. 缓存穿透\n缓存穿透指大量请求的key是不合理的，根本不存在与缓存和数据库中，这就导致这些请求直接到了数据库，给数据库造成巨大压力。比如黑客故意制造一些非法的key发起大量请求，导致大量请求落到数据库，结果数据库上也没有查到对应的数据。\n{% asset_img 12.png %}\n解决方法：\n1. 参数校验：对不合法的参数请求，直接抛出异常信息给客户端，比如查询的数据库id不能为0，手机格式不正确等。\n2. 缓存无效key：将这些无效的key设置到缓存中，并设置一个较短的过期时间。这种方法可以解决请求的key变化不频繁的情况。\n3. 接口限流。\n4. 布隆过滤器：通过布隆过滤器判断一个给定数据是否存在于海量数据中。具体做法是：把所有可能存在的请求的值都存放在布隆过滤器中，当用户请求过来，先判断用户发来的请求的值是否存在于布隆过滤器中。不存在的话，直接返回请求参数错误信息给客户端，存在的话才会走下面的流程。\n{% asset_img 13.png %}\n#### 3.3. 缓存击穿\n缓存击穿，指请求的key对应的是热点数据，该数据存在于数据库中，但是不存在于缓存中（通常是因为缓存中的数据已经过期），这就会导致瞬时大量请求直接打到了数据库上，对数据库造成巨大压力。比如秒杀进行过程中，缓存中的某个秒杀商品数据过期，导致瞬时大量对该商品的请求直接落到数据库上，对数据库造成巨大压力。\n{% asset_img 14.png %}\n解决方法：\n1. 设置热点数据永不过期或过期时间较长。\n2. 针对热点数据提取预热，将其存入缓存中并设置合理的过期时间。\n3. 请求数据库写数据到缓存之前，先获取互斥锁，保证只有一个请求会落到数据库上，减少数据库的压力。\n### 4. SpringBoot整合Redis实现缓存\n#### 4.1. 准备数据库数据\n首先我们创建一个t_user表，并插入几条数据，用于后续的查询：\n{% asset_img 15.png %}\n#### 4.2. 读缓存\n创建User类和对应的UserMapper\n```java\n@TableName(value = \"t_user\")\n@Data\npublic class User implements Serializable {\n    @TableId(type = IdType.AUTO)\n    private Integer id;\n\n    private String username;\n\n    private String password;\n}\n\n@Mapper\npublic interface UserMapper extends BaseMapper<User> {\n}\n```\nUserService\n```java\n@Service\npublic class UserService {\n    // 过期时间\n    private long ttl = 100L;\n\n    @Autowired\n    private UserMapper userMapper;\n\n    @Autowired\n    private RedisUtils redisUtils;\n\n    public User getUserById(Integer id) {\n        String key = \"user:\" + id;\n        Object value = redisUtils.getKey(key);\n        if (value != null) {\n            // 缓存中存在该数据\n            return (User) value;\n        }\n\n        // 缓存中不存在该数据, 从数据库中查询\n        User userFromDB = getUserFromDB(id);\n        if (userFromDB == null) {\n            return null;\n        }\n        redisUtils.addKey(key, userFromDB, ttl);\n        return userFromDB;\n    }\n\n    private User getUserFromDB(Integer id) {\n        System.out.println(\"从数据库中查询====================\");\n        return userMapper.selectById(id);\n    }\n}\n```\n添加一个测试方法：\n```java\npackage org.example;\n\nimport org.example.pojo.User;\nimport org.example.service.UserService;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.test.context.SpringBootTest;\n\n@SpringBootTest\npublic class RedisCacheTest {\n    @Autowired\n    private UserService userService;\n\n    @Test\n    public void testGetUserById() {\n        User userById = userService.getUserById(1);\n        System.out.println(userById);\n\n        userById = userService.getUserById(1);\n        System.out.println(userById);\n    }\n}\n```\n执行测试方法，结果如下：\n{% asset_img 16.png %}\n从上述内容中，可以看出，第一次查询时，因为数据不存在于缓存中，所以会查询数据库，第二次查询时，从缓存中查询到数据，直接返回。\n但是这里涉及到一个序列化的问题，我们通过下载一些redis桌面可视化工具，查看这些数据，发现这些key和value都有一些奇怪的编码，如下图所示：\n{% asset_img 17.png %}\n这是因为，默认情况下，redisTemplate使用JDK的序列化器(JdkSerializationRedisSerializer)对存储的对象进行序列哈和反序列化操作，这可能导致序列化结果不可读或占用较多的存储空间。因此，我们需要在配置redisTemplate的时候，设置对应的序列化器，我们修改上一章的RedisConfiguration类，修改结果如下：\n```java\npackage org.example.config;\n\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.data.redis.connection.RedisConnectionFactory;\nimport org.springframework.data.redis.core.RedisTemplate;\nimport org.springframework.data.redis.serializer.Jackson2JsonRedisSerializer;\nimport org.springframework.data.redis.serializer.StringRedisSerializer;\n\n@Configuration\npublic class RedisConfiguration {\n    @Bean\n    public RedisTemplate<String, Object> redisTemplate(RedisConnectionFactory redisConnectionFactory) {\n        RedisTemplate<String, Object> redisTemplate = new RedisTemplate<>();\n        redisTemplate.setConnectionFactory(redisConnectionFactory);\n\n        StringRedisSerializer stringRedisSerializer = new StringRedisSerializer();\n        Jackson2JsonRedisSerializer jackson2JsonRedisSerializer = new Jackson2JsonRedisSerializer(Object.class);\n        ObjectMapper objectMapper = new ObjectMapper().enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);\n        jackson2JsonRedisSerializer.setObjectMapper(objectMapper);\n\n        // 设置key的序列化器为StringRedisSerializer\n        redisTemplate.setKeySerializer(stringRedisSerializer);\n        // 设置value的序列化器为Jackson2JsonRedisSerializer\n        redisTemplate.setValueSerializer(jackson2JsonRedisSerializer);\n\n        // 设置hash key的序列化器为StringRedisSerializer\n        redisTemplate.setHashKeySerializer(stringRedisSerializer);\n        // 设置hash value的序列化器为Jackson2JsonRedisSerializer\n        redisTemplate.setHashValueSerializer(jackson2JsonRedisSerializer);\n\n        // 完成其他配置后，初始化RedisTemplate\n        redisTemplate.afterPropertiesSet();\n        return redisTemplate;\n    }\n}\n```\n我们将之前那些key全部删除掉，然后重新运行测试代码，结果如下：\n{% asset_img 18.png %}\n通过redis可视化工具，也能清楚地看到每个key和value的结构和信息。\n{% asset_img 19.png %}\n上面的代码，存在一些问题，当请求1查询id=1的用户，从缓存中查询不到时，会查询数据库，然后将数据更新到数据库，然后请求2查询id=1的用户，从缓存中查询到，便直接返回，这是理想的情况。但是，可能请求1查询数据库还没执行完，请求2过来了，此时缓存中没有id=1的用户，因此请求2也会去查询数据库。\n比如我们修改getUserFromDB，加上Thread.sleep(2000)，模拟数据库的查询较慢，然后修改测试代码，模拟多个请求同时查询id=1的用户的情况：\n```java\n   @Test\n    public void testGetUserById() throws ExecutionException, InterruptedException {\n        ExecutorService executorService = Executors.newFixedThreadPool(2);\n        Callable<User> getUserTask = () -> userService.getUserById(1);\n\n        Future<User> submit1 = executorService.submit(getUserTask);\n        Future<User> submit2 = executorService.submit(getUserTask);\n        System.out.println(submit1.get());\n        System.out.println(submit2.get());\n    }\n```\n此时再次执行测试代码，结果如下：\n{% asset_img 20.png %}\n解决上面的情况，方式就是加锁，我们修改UserService的代码如下,这里通过synchronized加锁，然后锁的对象使用key，这样可以将锁的粒度缩小一点。\n```java\n public User getUserById(Integer id) {\n        String key = \"user:\" + id;\n        Object value = redisUtils.getKey(key);\n        if (value != null) {\n            // 缓存中存在该数据\n            return (User) value;\n        }\n\n        User userFromDB = null;\n        synchronized (key.intern()) {\n            // 再次查询缓存\n            value = redisUtils.getKey(key);\n            if (value != null) {\n                return (User) value;\n            }\n\n            // 缓存中不存在该数据, 从数据库中查询\n            userFromDB = getUserFromDB(id);\n            if (userFromDB == null) {\n                return null;\n            }\n            redisUtils.addKey(key, userFromDB, ttl);\n        }\n        return userFromDB;\n    }\n\n    private User getUserFromDB(Integer id) {\n        try {\n            Thread.sleep(2000);\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        System.out.println(\"从数据库中查询====================\");\n        return userMapper.selectById(id);\n    }\n```\n重新运行测试方法，结果如下：\n{% asset_img 21.png %}\n通过加锁，可以解决被访问多次的情况，但是这样的锁有一个问题，这个锁，只适用于单机的情况，当我们的服务部署在多台服务器上时，这些服务器上的应用，对应的JVM都不同，因此锁住的，不是同一个对象，后续会单独对分布式锁进行讲解，这里先不予讨论。\n#### 4.3. 更新缓存\n修改userService，添加修改用户的方法\n```java\n public void updateUser(UpdateUserRequest updateUserRequest) {\n        if (updateUserRequest.getId() == null) {\n            return;\n        }\n        User user = getUserById(updateUserRequest.getId());\n        if (user == null) {\n            return;\n        }\n        if (StringUtils.isNotEmpty(updateUserRequest.getUsername())) {\n            user.setUsername(updateUserRequest.getUsername());\n        }\n        if (StringUtils.isNotEmpty(updateUserRequest.getPassword())) {\n            user.setPassword(updateUserRequest.getPassword());\n        }\n        // 先更新数据库\n        int updateResult = userMapper.updateById(user);\n        if (updateResult == 1) {\n            // 更新成功，删除缓存\n            redisUtils.removeKey(\"user:\" + updateUserRequest.getId());\n        }\n    }\n```\n添加测试方法\n```java\n @Test\n    public void testUpdateUser() {\n        UpdateUserRequest updateUserRequest = new UpdateUserRequest();\n        updateUserRequest.setId(1);\n        updateUserRequest.setPassword(\"12345\");\n        userService.updateUser(updateUserRequest);\n\n        User userById = userService.getUserById(1);\n        System.out.println(userById);\n    }\n```\n测试结果如下\n{% asset_img 22.png %}\n### 5. SpringBoot整合SpringCache+Redis\n在上面的代码中，我们发现，和Redis查询的操作，和我们的业务代码糅合在一起， 不方便进行处理，如果后续我们缓存服务器从Redis改为其他缓存服务器，需要修改多处代码，不利于项目的扩展和维护。\nSpringCache框架是Spring框架提供的一套基于注解的缓存解决方案，在应用程序中简化了缓存操作的管理和使用。它通过在方法上添加缓存注解，来实现自动缓存的功能，其常用注解有：\n1）@Cacheable: 表示该方法返回结果可以被缓存，当方法被调用时，先检查缓存，如果缓存命中，直接返回缓存中的结果，不再执行方法体中的逻辑。\n2） @CachePut：表示该方法的返回结果需要更新缓存，每次方法被调用后，都会将返回结果更新到缓存中。\n3）@CacheEvit：表示该方法会清除缓存中的数据，可以用于在更新或删除数据时清除相应的缓存。\n#### 5.1. 整合SpringCache\n添加Spring Cache的依赖\n```xml\n\t\t<dependency>\n\t\t\t<groupId>org.springframework.boot</groupId>\n\t\t\t<artifactId>spring-boot-starter-cache</artifactId>\n\t\t</dependency>\n```\n在启动类上加上注解开启缓存\n```java\n@SpringBootApplication\n@EnableCaching\npublic class RedisApp {\n    public static void main(String[] args) {\n        SpringApplication.run(RedisApp.class, args);\n    }\n}\n```\n#### 5.2. 测试Cacheable和CacheEvict\n我们在userService类上，加上两个方法，用于测试Cacheable和CacheEvit注解。\n添加getUserById2方法，该方法中的逻辑为查询数据库操作\n```java\n  @Cacheable(value = \"user\", key = \"#id\")\n    public User getUserById2(Integer id) {\n        System.out.println(\"从数据库中查询==============\");\n        return userMapper.selectById(id);\n    }\n```\n然后添加一个测试方法\n```java\n @Autowired\n    private UserService userService;\n\n    @Test\n    public void testGetUserById() {\n        System.out.println(userService.getUserById2(1));\n        System.out.println(userService.getUserById2(1));\n    }\n```\n测试结果如下，第一次查询时，查询数据库，第二次直接查询缓存。\n{% asset_img 23.png %}\n然后我们查看reids缓存，发现这个key的值是user::1，这个和我们之前定义的不太相同，而且没有过期时间，除此之外，这个value的值，序列化有问题\n{% asset_img 24.png %}\n我们修改RedisConfiguration，添加RedisCacheConfiguration的相关配置\n```java\npackage org.example.config;\n\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.data.redis.cache.RedisCacheConfiguration;\nimport org.springframework.data.redis.connection.RedisConnectionFactory;\nimport org.springframework.data.redis.core.RedisTemplate;\nimport org.springframework.data.redis.serializer.Jackson2JsonRedisSerializer;\nimport org.springframework.data.redis.serializer.RedisSerializationContext;\nimport org.springframework.data.redis.serializer.StringRedisSerializer;\n\nimport java.time.Duration;\n\n@Configuration\npublic class RedisConfiguration {\n    @Bean\n    public RedisTemplate<String, Object> redisTemplate(RedisConnectionFactory redisConnectionFactory) {\n        RedisTemplate<String, Object> redisTemplate = new RedisTemplate<>();\n        redisTemplate.setConnectionFactory(redisConnectionFactory);\n\n        StringRedisSerializer stringRedisSerializer = new StringRedisSerializer();\n        Jackson2JsonRedisSerializer jackson2JsonRedisSerializer = new Jackson2JsonRedisSerializer(Object.class);\n        ObjectMapper objectMapper = new ObjectMapper().enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);\n        jackson2JsonRedisSerializer.setObjectMapper(objectMapper);\n\n        // 设置key的序列化器为StringRedisSerializer\n        redisTemplate.setKeySerializer(stringRedisSerializer);\n        // 设置value的序列化器为Jackson2JsonRedisSerializer\n        redisTemplate.setValueSerializer(jackson2JsonRedisSerializer);\n\n        // 设置hash key的序列化器为StringRedisSerializer\n        redisTemplate.setHashKeySerializer(stringRedisSerializer);\n        // 设置hash value的序列化器为Jackson2JsonRedisSerializer\n        redisTemplate.setHashValueSerializer(jackson2JsonRedisSerializer);\n\n        // 完成其他配置后，初始化RedisTemplate\n        redisTemplate.afterPropertiesSet();\n        return redisTemplate;\n    }\n\n    @Bean\n    public RedisCacheConfiguration redisCacheConfiguration(){\n        Jackson2JsonRedisSerializer jackson2JsonRedisSerializer = new Jackson2JsonRedisSerializer(Object.class);\n        ObjectMapper objectMapper = new ObjectMapper().enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);\n        jackson2JsonRedisSerializer.setObjectMapper(objectMapper);\n\n        //相当于new了一个RedisCacheConfiguration\n        RedisCacheConfiguration  configuration = RedisCacheConfiguration.defaultCacheConfig();\n        configuration = configuration.serializeValuesWith\n                // 指定value序列化器\n                        (RedisSerializationContext.SerializationPair.fromSerializer(jackson2JsonRedisSerializer))\n                // 指定 key的TTL\n                .entryTtl(Duration.ofSeconds(100))\n                // 指定前缀\n                .prefixCacheNameWith(\"user::\");\n        return configuration;\n    }\n}\n```\n删除原先的缓存，然后重新运行测试代码，然后查看缓存信息，结果如下：\n{% asset_img 25.png %}\n此时过期时间和序列化均设置成功。但这样配置还有一些问题，通过这种全局配置，所有cache key的TTL都一样，实际开发中，不同的cache key可能需要的TTL都不同，我们修改RedisConfiguration，为不同的key配置上不同的过期时间\n```java\npackage org.example.config;\n\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport org.springframework.boot.autoconfigure.cache.RedisCacheManagerBuilderCustomizer;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.data.redis.cache.RedisCacheConfiguration;\nimport org.springframework.data.redis.connection.RedisConnectionFactory;\nimport org.springframework.data.redis.core.RedisTemplate;\nimport org.springframework.data.redis.serializer.Jackson2JsonRedisSerializer;\nimport org.springframework.data.redis.serializer.RedisSerializationContext;\nimport org.springframework.data.redis.serializer.StringRedisSerializer;\n\nimport java.time.Duration;\nimport java.util.HashMap;\nimport java.util.Map;\n\n@Configuration\npublic class RedisConfiguration {\n    @Bean\n    public RedisTemplate<String, Object> redisTemplate(RedisConnectionFactory redisConnectionFactory) {\n        RedisTemplate<String, Object> redisTemplate = new RedisTemplate<>();\n        redisTemplate.setConnectionFactory(redisConnectionFactory);\n\n        StringRedisSerializer stringRedisSerializer = new StringRedisSerializer();\n        Jackson2JsonRedisSerializer jackson2JsonRedisSerializer = new Jackson2JsonRedisSerializer(Object.class);\n        ObjectMapper objectMapper = new ObjectMapper().enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);\n        jackson2JsonRedisSerializer.setObjectMapper(objectMapper);\n\n        // 设置key的序列化器为StringRedisSerializer\n        redisTemplate.setKeySerializer(stringRedisSerializer);\n        // 设置value的序列化器为Jackson2JsonRedisSerializer\n        redisTemplate.setValueSerializer(jackson2JsonRedisSerializer);\n\n        // 设置hash key的序列化器为StringRedisSerializer\n        redisTemplate.setHashKeySerializer(stringRedisSerializer);\n        // 设置hash value的序列化器为Jackson2JsonRedisSerializer\n        redisTemplate.setHashValueSerializer(jackson2JsonRedisSerializer);\n\n        // 完成其他配置后，初始化RedisTemplate\n        redisTemplate.afterPropertiesSet();\n        return redisTemplate;\n    }\n\n    @Bean\n    public RedisCacheManagerBuilderCustomizer redisCacheManagerBuilderCustomizer() {\n        Jackson2JsonRedisSerializer<Object> jackson2JsonRedisSerializer = new Jackson2JsonRedisSerializer<>(Object.class);\n        ObjectMapper objectMapper = new ObjectMapper().enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);\n        jackson2JsonRedisSerializer.setObjectMapper(objectMapper);\n\n        return (builder) -> {\n            Map<String, RedisCacheConfiguration> cacheConfigurations = new HashMap<>();\n\n            cacheConfigurations.put(\"user\",\n                    RedisCacheConfiguration.defaultCacheConfig()\n                            .entryTtl(Duration.ofSeconds(60))\n                            .serializeValuesWith(RedisSerializationContext.SerializationPair.fromSerializer(jackson2JsonRedisSerializer)));\n\n            cacheConfigurations.put(\"product\",\n                    RedisCacheConfiguration.defaultCacheConfig()\n                            .entryTtl(Duration.ofSeconds(120))\n                            .serializeValuesWith(RedisSerializationContext.SerializationPair.fromSerializer(jackson2JsonRedisSerializer)));\n\n            builder.withInitialCacheConfigurations(cacheConfigurations);\n        };\n    }\n    \n}\n```\n运行结果如下：\n{% asset_img 26.png %}\n接着，我们测试CacheEvict，首先在userService中添加一个更新方法\n```java\n  @CacheEvict(value = \"user\", key = \"#updateUserRequest.id\")\n    public void updateUser2(UpdateUserRequest updateUserRequest) {\n        if (updateUserRequest.getId() == null) {\n            return;\n        }\n        User user = getUserById2(updateUserRequest.getId());\n        if (user == null) {\n            return;\n        }\n        if (StringUtils.isNotEmpty(updateUserRequest.getUsername())) {\n            user.setUsername(updateUserRequest.getUsername());\n        }\n        if (StringUtils.isNotEmpty(updateUserRequest.getPassword())) {\n            user.setPassword(updateUserRequest.getPassword());\n        }\n        // 先更新数据库\n        userMapper.updateById(user);\n    }\n```\n然后添加测试方法：\n```java\n @Test\n    public void testUpdateUser() {\n        UpdateUserRequest updateUserRequest = new UpdateUserRequest();\n        updateUserRequest.setId(1);\n        updateUserRequest.setPassword(\"123456\");\n        userService.updateUser2(updateUserRequest);\n    }\n```\n运行该测试方法，然后去看对应的redis缓存，发现更新成功后，该缓存被删除掉，说明CacheEvict生效\n{% asset_img 27.png %}","source":"_posts/Redis学习3—Redis应用之缓存.md","raw":"---\ntitle: Redis学习3—Redis应用之缓存\ndate: 2024-04-02 21:12:30\ntags: \n    - 中间件\n    - Redis\n---\n### 1. 引言\n#### 1.1. 缓存的意义\nRedis作为一个NoSql数据库，被广泛的当作缓存数据库使用，所谓缓存，就是数据交换的缓冲区。使用缓存的具体原因有：\n1. 缓存数据存储于代码中，而代码运行在内存中，内存的读写性能远高于磁盘，通过缓存，可以大大降低用户访问并发量带来的服务器读写压力。\n2. 实际开发过程中，企业的数据量，少则几十万，多则上千万，如此大的数据量，如果没有缓存来作为“避震器”，系统是几乎撑不住的，所以企业会大量运用缓存技术。\n{% asset_img 1.png %}\n#### 1.2. 缓存的分类\n对于缓存，我们可以分为以下几类：\n1. 浏览器缓存：主要存在于浏览器端的缓存\n2. 应用层缓存：本地缓存（比如tomcat本地缓存）或缓存数据库（比如redis）\n3. 数据库缓存：在数据库中有一片空间是buffer pool，增删改查数据都会先加载到mysql的缓存中\n4. CPU缓存：当代计算机最大的问题是 cpu性能提升了，但内存读写速度没有跟上，所以为了适应当下的情况，增加了cpu的L1，L2，L3级的缓存\n{% asset_img 2.png %}\n### 2. 缓存模型\n#### 2.1. 查询、添加缓存\n一般情况下，在查询数据库之前，先查询缓存，如果缓存数据存在，就直接返回缓存数据，如果不存在，查询数据库，并将数据存入redis，具体的模型如下：\n{% asset_img 3.png %}\n#### 2.2. 缓存淘汰\n内存的空间是有限的，当我们向redis存储太多数据时，redis会对部分数据进行淘汰，淘汰数据的场景有：\n1. 内存淘汰：Redis自动进行，当redis内存达到设定的max-memery时，会自动触发淘汰机制，淘汰掉一些不重要的数据。\n2. 超时剔除：当对redis设置了过期时间TTL时，Redis会将超时的数据进行删除。\n3. 主动更新：通过手动调用方法把缓存删除掉，常用于解决缓存与数据库不一致的问题。\nRedis自动进行内存淘汰时，主要有6+2种数据淘汰机制，可以分为以下三大类：\n1. 不淘汰数据\n● noeviction ，不进行数据淘汰，当缓存被写满后，Redis不提供服务直接返回错误。\n2. 在设置过期时间的键值对中，\n● volatile-random ，在设置过期时间的键值对中随机删除\n● volatile-ttl ，在设置过期时间的键值对，基于过期时间的先后进行删除，越早过期的越先被删除。\n● volatile-lru ， 基于LRU(Least Recently Used) 算法筛选设置了过期时间的键值对， 最近最少使用的原则来筛选数据\n● volatile-lfu ，使用 LFU( Least Frequently Used ) 算法选择设置了过期时间的键值对, 使用频率最少的键值对,来筛选数据。\n3. 在所有键值对中\n● allkeys-random， 从所有键值对中随机选择并删除数据\n● allkeys-lru， 使用 LRU 算法在所有数据中进行筛选\n● allkeys-lfu， 使用 LFU 算法在所有数据中进行筛选\n{% asset_img 4.png %}\n#### 2.3. 数据库缓存不一致解决方案\n因为我们的缓存数据来自于数据库，而数据库的数据会随业务的需要而发生变化，当数据库中的数据变化，而缓存没有同步该数据，此时便会产生一致性问题。具体的解决策略有：\n1. Cache Aside Pattern（旁路缓存）\n2. Read/Write-Through Pattern（读写穿透）\n3. Write Behind Pattern（异步缓存写入）\n##### 2.3.1. Cache Aside Pattern（旁路缓存模式）\n该模式是平时使用比较多的一个缓存读写模式，比较适合读请求比较多的场景，在该模式中，需要同时维系db和cache，并且以db的结果为准。\n###### 2.3.1.1. 写\n先更新db，然后再直接删除cache\n{% asset_img 5.png %}\n注意，不能先删除cache，在写db，因为在并发的情况下，可能存在，请求1删除缓存，然后写db，并且写db操作还没结束，这时请求2获取缓存，此时因为缓存被删除了，因此会从数据库读数据， 并存入缓存，这个时候的数据是未更新的，当请求2结束后，请求1写db结束，此时就会造成数据库和缓存中的数据不一致。\n{% asset_img 6.png %}\n旁路缓存理论上来说，也会造成数据库和缓存不一致的问题，比如：请求 1 先写数据 A，请求 2 随后读数据 A 的话，就很有可能产生数据不一致性的问题。\n这个过程可以简单描述为：\n{% asset_img 7.png %}\n但这种概率很小，因为缓存的写入速度比数据库的写入速度快很多。\n###### 2.3.1.2. 读\n从cache中读取数据，读取到就直接返回。如果读取不到，从db中读取数据返回，然后再把数据放到cache中。\n{% asset_img 8.png %}\n###### 2.3.1.3. Cache Aside Pattern的缺陷\n1. 首次请求数据一定不在cache：这种情况可以先将热点数据提前放入cache中。\n2. 写操作比较频繁，会导致cache的数据被频繁删除，影响缓存命中率：更新db的时候同时更新cache，但是给缓存设置一个比较短的过期时间，保证即使数据不一致的话，影响也比较小。\n##### 2.3.2. Read/Write Through Pattern（读写穿透）\n服务端把 cache 视为主要数据存储，从中读取数据并将数据写入其中。cache 服务负责将此数据读取和写入 db，从而减轻了应用程序的职责。这种策略比较少使用，因为Redis并没有提供cache将数据写入db的功能。\n###### 2.3.2.1. 写（Write Through）\n● 先查 cache，cache 中不存在，直接更新 db。\n● cache 中存在，则先更新 cache，然后 cache 服务自己更新 db（同步更新 cache 和 db）。\n{% asset_img 9.png %}\n###### 2.3.2.2. 读（Read Through）\n● 从 cache 中读取数据，读取到就直接返回 。\n● 读取不到的话，先从 db 加载，写入到 cache 后返回响应。\n{% asset_img 10.png %}\n###### 2.3.2.3. 缺陷\n1. 实现困难，如Redis并没有提供cache将数据写入db的功能\n2. 和Cache Aside Pattern一样，首次请求数据一定不在cache中\n##### 2.3.3. Write Behind Pattern（异步缓存写入）\n与Read/Write Through Pattern相似，都是由cache服务来负责cache和db的读写，但是，Read/Write Through是同步更新cache和db，而Write Behind是只更新缓存，不直接更新db，改为异步批量的方式，更新db。\n这种方式对数据一致性带来了更大的挑战，比如 cache 数据可能还没异步更新 db 的话，cache 服务可能就就挂掉了。这种策略在我们平时开发过程中也非常非常少见，但是不代表它的应用场景少，比如消息队列中消息的异步写入磁盘、MySQL 的 Innodb Buffer Pool 机制都用到了这种策略。\nWrite Behind Pattern 下 db 的写性能非常高，非常适合一些数据经常变化又对数据一致性要求没那么高的场景，比如浏览量、点赞量。\n### 3. 缓存常见的问题\n#### 3.1. 缓存雪崩\n缓存雪崩，指缓存在同一时间大面积的生效（比如缓存数据过期），导致大量的请求都直接落到数据库上，给数据库造成了巨大的压力。此外，如果缓存服务器宕机也会导致缓存雪崩现象，导致所有的请求都落到了数据库上。\n{% asset_img 11.png %}\n解决方法有：\n1. 采用Redis集群，避免单机出现问题导致整个缓存服务器无法使用。\n2. 限流，避免同时处理大量请求。\n3. 多级缓存，比如本地缓存+Redis缓存的组合，当Redis缓存出现问题时，可以从本地缓存中获取部分数据。\n4. 设置不同的生效时间比如随机设置缓存的失效时间。\n5. 缓存永不生效。\n6. 缓存预热，在程序启动后或运行过程中，主动将热点数据加载到缓存中。\n#### 3.2. 缓存穿透\n缓存穿透指大量请求的key是不合理的，根本不存在与缓存和数据库中，这就导致这些请求直接到了数据库，给数据库造成巨大压力。比如黑客故意制造一些非法的key发起大量请求，导致大量请求落到数据库，结果数据库上也没有查到对应的数据。\n{% asset_img 12.png %}\n解决方法：\n1. 参数校验：对不合法的参数请求，直接抛出异常信息给客户端，比如查询的数据库id不能为0，手机格式不正确等。\n2. 缓存无效key：将这些无效的key设置到缓存中，并设置一个较短的过期时间。这种方法可以解决请求的key变化不频繁的情况。\n3. 接口限流。\n4. 布隆过滤器：通过布隆过滤器判断一个给定数据是否存在于海量数据中。具体做法是：把所有可能存在的请求的值都存放在布隆过滤器中，当用户请求过来，先判断用户发来的请求的值是否存在于布隆过滤器中。不存在的话，直接返回请求参数错误信息给客户端，存在的话才会走下面的流程。\n{% asset_img 13.png %}\n#### 3.3. 缓存击穿\n缓存击穿，指请求的key对应的是热点数据，该数据存在于数据库中，但是不存在于缓存中（通常是因为缓存中的数据已经过期），这就会导致瞬时大量请求直接打到了数据库上，对数据库造成巨大压力。比如秒杀进行过程中，缓存中的某个秒杀商品数据过期，导致瞬时大量对该商品的请求直接落到数据库上，对数据库造成巨大压力。\n{% asset_img 14.png %}\n解决方法：\n1. 设置热点数据永不过期或过期时间较长。\n2. 针对热点数据提取预热，将其存入缓存中并设置合理的过期时间。\n3. 请求数据库写数据到缓存之前，先获取互斥锁，保证只有一个请求会落到数据库上，减少数据库的压力。\n### 4. SpringBoot整合Redis实现缓存\n#### 4.1. 准备数据库数据\n首先我们创建一个t_user表，并插入几条数据，用于后续的查询：\n{% asset_img 15.png %}\n#### 4.2. 读缓存\n创建User类和对应的UserMapper\n```java\n@TableName(value = \"t_user\")\n@Data\npublic class User implements Serializable {\n    @TableId(type = IdType.AUTO)\n    private Integer id;\n\n    private String username;\n\n    private String password;\n}\n\n@Mapper\npublic interface UserMapper extends BaseMapper<User> {\n}\n```\nUserService\n```java\n@Service\npublic class UserService {\n    // 过期时间\n    private long ttl = 100L;\n\n    @Autowired\n    private UserMapper userMapper;\n\n    @Autowired\n    private RedisUtils redisUtils;\n\n    public User getUserById(Integer id) {\n        String key = \"user:\" + id;\n        Object value = redisUtils.getKey(key);\n        if (value != null) {\n            // 缓存中存在该数据\n            return (User) value;\n        }\n\n        // 缓存中不存在该数据, 从数据库中查询\n        User userFromDB = getUserFromDB(id);\n        if (userFromDB == null) {\n            return null;\n        }\n        redisUtils.addKey(key, userFromDB, ttl);\n        return userFromDB;\n    }\n\n    private User getUserFromDB(Integer id) {\n        System.out.println(\"从数据库中查询====================\");\n        return userMapper.selectById(id);\n    }\n}\n```\n添加一个测试方法：\n```java\npackage org.example;\n\nimport org.example.pojo.User;\nimport org.example.service.UserService;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.test.context.SpringBootTest;\n\n@SpringBootTest\npublic class RedisCacheTest {\n    @Autowired\n    private UserService userService;\n\n    @Test\n    public void testGetUserById() {\n        User userById = userService.getUserById(1);\n        System.out.println(userById);\n\n        userById = userService.getUserById(1);\n        System.out.println(userById);\n    }\n}\n```\n执行测试方法，结果如下：\n{% asset_img 16.png %}\n从上述内容中，可以看出，第一次查询时，因为数据不存在于缓存中，所以会查询数据库，第二次查询时，从缓存中查询到数据，直接返回。\n但是这里涉及到一个序列化的问题，我们通过下载一些redis桌面可视化工具，查看这些数据，发现这些key和value都有一些奇怪的编码，如下图所示：\n{% asset_img 17.png %}\n这是因为，默认情况下，redisTemplate使用JDK的序列化器(JdkSerializationRedisSerializer)对存储的对象进行序列哈和反序列化操作，这可能导致序列化结果不可读或占用较多的存储空间。因此，我们需要在配置redisTemplate的时候，设置对应的序列化器，我们修改上一章的RedisConfiguration类，修改结果如下：\n```java\npackage org.example.config;\n\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.data.redis.connection.RedisConnectionFactory;\nimport org.springframework.data.redis.core.RedisTemplate;\nimport org.springframework.data.redis.serializer.Jackson2JsonRedisSerializer;\nimport org.springframework.data.redis.serializer.StringRedisSerializer;\n\n@Configuration\npublic class RedisConfiguration {\n    @Bean\n    public RedisTemplate<String, Object> redisTemplate(RedisConnectionFactory redisConnectionFactory) {\n        RedisTemplate<String, Object> redisTemplate = new RedisTemplate<>();\n        redisTemplate.setConnectionFactory(redisConnectionFactory);\n\n        StringRedisSerializer stringRedisSerializer = new StringRedisSerializer();\n        Jackson2JsonRedisSerializer jackson2JsonRedisSerializer = new Jackson2JsonRedisSerializer(Object.class);\n        ObjectMapper objectMapper = new ObjectMapper().enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);\n        jackson2JsonRedisSerializer.setObjectMapper(objectMapper);\n\n        // 设置key的序列化器为StringRedisSerializer\n        redisTemplate.setKeySerializer(stringRedisSerializer);\n        // 设置value的序列化器为Jackson2JsonRedisSerializer\n        redisTemplate.setValueSerializer(jackson2JsonRedisSerializer);\n\n        // 设置hash key的序列化器为StringRedisSerializer\n        redisTemplate.setHashKeySerializer(stringRedisSerializer);\n        // 设置hash value的序列化器为Jackson2JsonRedisSerializer\n        redisTemplate.setHashValueSerializer(jackson2JsonRedisSerializer);\n\n        // 完成其他配置后，初始化RedisTemplate\n        redisTemplate.afterPropertiesSet();\n        return redisTemplate;\n    }\n}\n```\n我们将之前那些key全部删除掉，然后重新运行测试代码，结果如下：\n{% asset_img 18.png %}\n通过redis可视化工具，也能清楚地看到每个key和value的结构和信息。\n{% asset_img 19.png %}\n上面的代码，存在一些问题，当请求1查询id=1的用户，从缓存中查询不到时，会查询数据库，然后将数据更新到数据库，然后请求2查询id=1的用户，从缓存中查询到，便直接返回，这是理想的情况。但是，可能请求1查询数据库还没执行完，请求2过来了，此时缓存中没有id=1的用户，因此请求2也会去查询数据库。\n比如我们修改getUserFromDB，加上Thread.sleep(2000)，模拟数据库的查询较慢，然后修改测试代码，模拟多个请求同时查询id=1的用户的情况：\n```java\n   @Test\n    public void testGetUserById() throws ExecutionException, InterruptedException {\n        ExecutorService executorService = Executors.newFixedThreadPool(2);\n        Callable<User> getUserTask = () -> userService.getUserById(1);\n\n        Future<User> submit1 = executorService.submit(getUserTask);\n        Future<User> submit2 = executorService.submit(getUserTask);\n        System.out.println(submit1.get());\n        System.out.println(submit2.get());\n    }\n```\n此时再次执行测试代码，结果如下：\n{% asset_img 20.png %}\n解决上面的情况，方式就是加锁，我们修改UserService的代码如下,这里通过synchronized加锁，然后锁的对象使用key，这样可以将锁的粒度缩小一点。\n```java\n public User getUserById(Integer id) {\n        String key = \"user:\" + id;\n        Object value = redisUtils.getKey(key);\n        if (value != null) {\n            // 缓存中存在该数据\n            return (User) value;\n        }\n\n        User userFromDB = null;\n        synchronized (key.intern()) {\n            // 再次查询缓存\n            value = redisUtils.getKey(key);\n            if (value != null) {\n                return (User) value;\n            }\n\n            // 缓存中不存在该数据, 从数据库中查询\n            userFromDB = getUserFromDB(id);\n            if (userFromDB == null) {\n                return null;\n            }\n            redisUtils.addKey(key, userFromDB, ttl);\n        }\n        return userFromDB;\n    }\n\n    private User getUserFromDB(Integer id) {\n        try {\n            Thread.sleep(2000);\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        System.out.println(\"从数据库中查询====================\");\n        return userMapper.selectById(id);\n    }\n```\n重新运行测试方法，结果如下：\n{% asset_img 21.png %}\n通过加锁，可以解决被访问多次的情况，但是这样的锁有一个问题，这个锁，只适用于单机的情况，当我们的服务部署在多台服务器上时，这些服务器上的应用，对应的JVM都不同，因此锁住的，不是同一个对象，后续会单独对分布式锁进行讲解，这里先不予讨论。\n#### 4.3. 更新缓存\n修改userService，添加修改用户的方法\n```java\n public void updateUser(UpdateUserRequest updateUserRequest) {\n        if (updateUserRequest.getId() == null) {\n            return;\n        }\n        User user = getUserById(updateUserRequest.getId());\n        if (user == null) {\n            return;\n        }\n        if (StringUtils.isNotEmpty(updateUserRequest.getUsername())) {\n            user.setUsername(updateUserRequest.getUsername());\n        }\n        if (StringUtils.isNotEmpty(updateUserRequest.getPassword())) {\n            user.setPassword(updateUserRequest.getPassword());\n        }\n        // 先更新数据库\n        int updateResult = userMapper.updateById(user);\n        if (updateResult == 1) {\n            // 更新成功，删除缓存\n            redisUtils.removeKey(\"user:\" + updateUserRequest.getId());\n        }\n    }\n```\n添加测试方法\n```java\n @Test\n    public void testUpdateUser() {\n        UpdateUserRequest updateUserRequest = new UpdateUserRequest();\n        updateUserRequest.setId(1);\n        updateUserRequest.setPassword(\"12345\");\n        userService.updateUser(updateUserRequest);\n\n        User userById = userService.getUserById(1);\n        System.out.println(userById);\n    }\n```\n测试结果如下\n{% asset_img 22.png %}\n### 5. SpringBoot整合SpringCache+Redis\n在上面的代码中，我们发现，和Redis查询的操作，和我们的业务代码糅合在一起， 不方便进行处理，如果后续我们缓存服务器从Redis改为其他缓存服务器，需要修改多处代码，不利于项目的扩展和维护。\nSpringCache框架是Spring框架提供的一套基于注解的缓存解决方案，在应用程序中简化了缓存操作的管理和使用。它通过在方法上添加缓存注解，来实现自动缓存的功能，其常用注解有：\n1）@Cacheable: 表示该方法返回结果可以被缓存，当方法被调用时，先检查缓存，如果缓存命中，直接返回缓存中的结果，不再执行方法体中的逻辑。\n2） @CachePut：表示该方法的返回结果需要更新缓存，每次方法被调用后，都会将返回结果更新到缓存中。\n3）@CacheEvit：表示该方法会清除缓存中的数据，可以用于在更新或删除数据时清除相应的缓存。\n#### 5.1. 整合SpringCache\n添加Spring Cache的依赖\n```xml\n\t\t<dependency>\n\t\t\t<groupId>org.springframework.boot</groupId>\n\t\t\t<artifactId>spring-boot-starter-cache</artifactId>\n\t\t</dependency>\n```\n在启动类上加上注解开启缓存\n```java\n@SpringBootApplication\n@EnableCaching\npublic class RedisApp {\n    public static void main(String[] args) {\n        SpringApplication.run(RedisApp.class, args);\n    }\n}\n```\n#### 5.2. 测试Cacheable和CacheEvict\n我们在userService类上，加上两个方法，用于测试Cacheable和CacheEvit注解。\n添加getUserById2方法，该方法中的逻辑为查询数据库操作\n```java\n  @Cacheable(value = \"user\", key = \"#id\")\n    public User getUserById2(Integer id) {\n        System.out.println(\"从数据库中查询==============\");\n        return userMapper.selectById(id);\n    }\n```\n然后添加一个测试方法\n```java\n @Autowired\n    private UserService userService;\n\n    @Test\n    public void testGetUserById() {\n        System.out.println(userService.getUserById2(1));\n        System.out.println(userService.getUserById2(1));\n    }\n```\n测试结果如下，第一次查询时，查询数据库，第二次直接查询缓存。\n{% asset_img 23.png %}\n然后我们查看reids缓存，发现这个key的值是user::1，这个和我们之前定义的不太相同，而且没有过期时间，除此之外，这个value的值，序列化有问题\n{% asset_img 24.png %}\n我们修改RedisConfiguration，添加RedisCacheConfiguration的相关配置\n```java\npackage org.example.config;\n\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.data.redis.cache.RedisCacheConfiguration;\nimport org.springframework.data.redis.connection.RedisConnectionFactory;\nimport org.springframework.data.redis.core.RedisTemplate;\nimport org.springframework.data.redis.serializer.Jackson2JsonRedisSerializer;\nimport org.springframework.data.redis.serializer.RedisSerializationContext;\nimport org.springframework.data.redis.serializer.StringRedisSerializer;\n\nimport java.time.Duration;\n\n@Configuration\npublic class RedisConfiguration {\n    @Bean\n    public RedisTemplate<String, Object> redisTemplate(RedisConnectionFactory redisConnectionFactory) {\n        RedisTemplate<String, Object> redisTemplate = new RedisTemplate<>();\n        redisTemplate.setConnectionFactory(redisConnectionFactory);\n\n        StringRedisSerializer stringRedisSerializer = new StringRedisSerializer();\n        Jackson2JsonRedisSerializer jackson2JsonRedisSerializer = new Jackson2JsonRedisSerializer(Object.class);\n        ObjectMapper objectMapper = new ObjectMapper().enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);\n        jackson2JsonRedisSerializer.setObjectMapper(objectMapper);\n\n        // 设置key的序列化器为StringRedisSerializer\n        redisTemplate.setKeySerializer(stringRedisSerializer);\n        // 设置value的序列化器为Jackson2JsonRedisSerializer\n        redisTemplate.setValueSerializer(jackson2JsonRedisSerializer);\n\n        // 设置hash key的序列化器为StringRedisSerializer\n        redisTemplate.setHashKeySerializer(stringRedisSerializer);\n        // 设置hash value的序列化器为Jackson2JsonRedisSerializer\n        redisTemplate.setHashValueSerializer(jackson2JsonRedisSerializer);\n\n        // 完成其他配置后，初始化RedisTemplate\n        redisTemplate.afterPropertiesSet();\n        return redisTemplate;\n    }\n\n    @Bean\n    public RedisCacheConfiguration redisCacheConfiguration(){\n        Jackson2JsonRedisSerializer jackson2JsonRedisSerializer = new Jackson2JsonRedisSerializer(Object.class);\n        ObjectMapper objectMapper = new ObjectMapper().enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);\n        jackson2JsonRedisSerializer.setObjectMapper(objectMapper);\n\n        //相当于new了一个RedisCacheConfiguration\n        RedisCacheConfiguration  configuration = RedisCacheConfiguration.defaultCacheConfig();\n        configuration = configuration.serializeValuesWith\n                // 指定value序列化器\n                        (RedisSerializationContext.SerializationPair.fromSerializer(jackson2JsonRedisSerializer))\n                // 指定 key的TTL\n                .entryTtl(Duration.ofSeconds(100))\n                // 指定前缀\n                .prefixCacheNameWith(\"user::\");\n        return configuration;\n    }\n}\n```\n删除原先的缓存，然后重新运行测试代码，然后查看缓存信息，结果如下：\n{% asset_img 25.png %}\n此时过期时间和序列化均设置成功。但这样配置还有一些问题，通过这种全局配置，所有cache key的TTL都一样，实际开发中，不同的cache key可能需要的TTL都不同，我们修改RedisConfiguration，为不同的key配置上不同的过期时间\n```java\npackage org.example.config;\n\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport org.springframework.boot.autoconfigure.cache.RedisCacheManagerBuilderCustomizer;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.data.redis.cache.RedisCacheConfiguration;\nimport org.springframework.data.redis.connection.RedisConnectionFactory;\nimport org.springframework.data.redis.core.RedisTemplate;\nimport org.springframework.data.redis.serializer.Jackson2JsonRedisSerializer;\nimport org.springframework.data.redis.serializer.RedisSerializationContext;\nimport org.springframework.data.redis.serializer.StringRedisSerializer;\n\nimport java.time.Duration;\nimport java.util.HashMap;\nimport java.util.Map;\n\n@Configuration\npublic class RedisConfiguration {\n    @Bean\n    public RedisTemplate<String, Object> redisTemplate(RedisConnectionFactory redisConnectionFactory) {\n        RedisTemplate<String, Object> redisTemplate = new RedisTemplate<>();\n        redisTemplate.setConnectionFactory(redisConnectionFactory);\n\n        StringRedisSerializer stringRedisSerializer = new StringRedisSerializer();\n        Jackson2JsonRedisSerializer jackson2JsonRedisSerializer = new Jackson2JsonRedisSerializer(Object.class);\n        ObjectMapper objectMapper = new ObjectMapper().enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);\n        jackson2JsonRedisSerializer.setObjectMapper(objectMapper);\n\n        // 设置key的序列化器为StringRedisSerializer\n        redisTemplate.setKeySerializer(stringRedisSerializer);\n        // 设置value的序列化器为Jackson2JsonRedisSerializer\n        redisTemplate.setValueSerializer(jackson2JsonRedisSerializer);\n\n        // 设置hash key的序列化器为StringRedisSerializer\n        redisTemplate.setHashKeySerializer(stringRedisSerializer);\n        // 设置hash value的序列化器为Jackson2JsonRedisSerializer\n        redisTemplate.setHashValueSerializer(jackson2JsonRedisSerializer);\n\n        // 完成其他配置后，初始化RedisTemplate\n        redisTemplate.afterPropertiesSet();\n        return redisTemplate;\n    }\n\n    @Bean\n    public RedisCacheManagerBuilderCustomizer redisCacheManagerBuilderCustomizer() {\n        Jackson2JsonRedisSerializer<Object> jackson2JsonRedisSerializer = new Jackson2JsonRedisSerializer<>(Object.class);\n        ObjectMapper objectMapper = new ObjectMapper().enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);\n        jackson2JsonRedisSerializer.setObjectMapper(objectMapper);\n\n        return (builder) -> {\n            Map<String, RedisCacheConfiguration> cacheConfigurations = new HashMap<>();\n\n            cacheConfigurations.put(\"user\",\n                    RedisCacheConfiguration.defaultCacheConfig()\n                            .entryTtl(Duration.ofSeconds(60))\n                            .serializeValuesWith(RedisSerializationContext.SerializationPair.fromSerializer(jackson2JsonRedisSerializer)));\n\n            cacheConfigurations.put(\"product\",\n                    RedisCacheConfiguration.defaultCacheConfig()\n                            .entryTtl(Duration.ofSeconds(120))\n                            .serializeValuesWith(RedisSerializationContext.SerializationPair.fromSerializer(jackson2JsonRedisSerializer)));\n\n            builder.withInitialCacheConfigurations(cacheConfigurations);\n        };\n    }\n    \n}\n```\n运行结果如下：\n{% asset_img 26.png %}\n接着，我们测试CacheEvict，首先在userService中添加一个更新方法\n```java\n  @CacheEvict(value = \"user\", key = \"#updateUserRequest.id\")\n    public void updateUser2(UpdateUserRequest updateUserRequest) {\n        if (updateUserRequest.getId() == null) {\n            return;\n        }\n        User user = getUserById2(updateUserRequest.getId());\n        if (user == null) {\n            return;\n        }\n        if (StringUtils.isNotEmpty(updateUserRequest.getUsername())) {\n            user.setUsername(updateUserRequest.getUsername());\n        }\n        if (StringUtils.isNotEmpty(updateUserRequest.getPassword())) {\n            user.setPassword(updateUserRequest.getPassword());\n        }\n        // 先更新数据库\n        userMapper.updateById(user);\n    }\n```\n然后添加测试方法：\n```java\n @Test\n    public void testUpdateUser() {\n        UpdateUserRequest updateUserRequest = new UpdateUserRequest();\n        updateUserRequest.setId(1);\n        updateUserRequest.setPassword(\"123456\");\n        userService.updateUser2(updateUserRequest);\n    }\n```\n运行该测试方法，然后去看对应的redis缓存，发现更新成功后，该缓存被删除掉，说明CacheEvict生效\n{% asset_img 27.png %}","slug":"Redis学习3—Redis应用之缓存","published":1,"updated":"2024-04-03T05:44:22.736Z","_id":"cluifpiep00045svl1bc540z0","comments":1,"layout":"post","photos":[],"content":"<h3 id=\"1-引言\"><a href=\"#1-引言\" class=\"headerlink\" title=\"1. 引言\"></a>1. 引言</h3><h4 id=\"1-1-缓存的意义\"><a href=\"#1-1-缓存的意义\" class=\"headerlink\" title=\"1.1. 缓存的意义\"></a>1.1. 缓存的意义</h4><p>Redis作为一个NoSql数据库，被广泛的当作缓存数据库使用，所谓缓存，就是数据交换的缓冲区。使用缓存的具体原因有：</p>\n<ol>\n<li>缓存数据存储于代码中，而代码运行在内存中，内存的读写性能远高于磁盘，通过缓存，可以大大降低用户访问并发量带来的服务器读写压力。</li>\n<li>实际开发过程中，企业的数据量，少则几十万，多则上千万，如此大的数据量，如果没有缓存来作为“避震器”，系统是几乎撑不住的，所以企业会大量运用缓存技术。<img src=\"/2024/04/02/Redis%E5%AD%A6%E4%B9%A03%E2%80%94Redis%E5%BA%94%E7%94%A8%E4%B9%8B%E7%BC%93%E5%AD%98/1.png\" class=\"\"></li>\n</ol>\n<h4 id=\"1-2-缓存的分类\"><a href=\"#1-2-缓存的分类\" class=\"headerlink\" title=\"1.2. 缓存的分类\"></a>1.2. 缓存的分类</h4><p>对于缓存，我们可以分为以下几类：</p>\n<ol>\n<li>浏览器缓存：主要存在于浏览器端的缓存</li>\n<li>应用层缓存：本地缓存（比如tomcat本地缓存）或缓存数据库（比如redis）</li>\n<li>数据库缓存：在数据库中有一片空间是buffer pool，增删改查数据都会先加载到mysql的缓存中</li>\n<li>CPU缓存：当代计算机最大的问题是 cpu性能提升了，但内存读写速度没有跟上，所以为了适应当下的情况，增加了cpu的L1，L2，L3级的缓存<img src=\"/2024/04/02/Redis%E5%AD%A6%E4%B9%A03%E2%80%94Redis%E5%BA%94%E7%94%A8%E4%B9%8B%E7%BC%93%E5%AD%98/2.png\" class=\"\"></li>\n</ol>\n<h3 id=\"2-缓存模型\"><a href=\"#2-缓存模型\" class=\"headerlink\" title=\"2. 缓存模型\"></a>2. 缓存模型</h3><h4 id=\"2-1-查询、添加缓存\"><a href=\"#2-1-查询、添加缓存\" class=\"headerlink\" title=\"2.1. 查询、添加缓存\"></a>2.1. 查询、添加缓存</h4><p>一般情况下，在查询数据库之前，先查询缓存，如果缓存数据存在，就直接返回缓存数据，如果不存在，查询数据库，并将数据存入redis，具体的模型如下：</p>\n<img src=\"/2024/04/02/Redis%E5%AD%A6%E4%B9%A03%E2%80%94Redis%E5%BA%94%E7%94%A8%E4%B9%8B%E7%BC%93%E5%AD%98/3.png\" class=\"\">\n<h4 id=\"2-2-缓存淘汰\"><a href=\"#2-2-缓存淘汰\" class=\"headerlink\" title=\"2.2. 缓存淘汰\"></a>2.2. 缓存淘汰</h4><p>内存的空间是有限的，当我们向redis存储太多数据时，redis会对部分数据进行淘汰，淘汰数据的场景有：</p>\n<ol>\n<li>内存淘汰：Redis自动进行，当redis内存达到设定的max-memery时，会自动触发淘汰机制，淘汰掉一些不重要的数据。</li>\n<li>超时剔除：当对redis设置了过期时间TTL时，Redis会将超时的数据进行删除。</li>\n<li>主动更新：通过手动调用方法把缓存删除掉，常用于解决缓存与数据库不一致的问题。<br>Redis自动进行内存淘汰时，主要有6+2种数据淘汰机制，可以分为以下三大类：</li>\n<li>不淘汰数据<br>● noeviction ，不进行数据淘汰，当缓存被写满后，Redis不提供服务直接返回错误。</li>\n<li>在设置过期时间的键值对中，<br>● volatile-random ，在设置过期时间的键值对中随机删除<br>● volatile-ttl ，在设置过期时间的键值对，基于过期时间的先后进行删除，越早过期的越先被删除。<br>● volatile-lru ， 基于LRU(Least Recently Used) 算法筛选设置了过期时间的键值对， 最近最少使用的原则来筛选数据<br>● volatile-lfu ，使用 LFU( Least Frequently Used ) 算法选择设置了过期时间的键值对, 使用频率最少的键值对,来筛选数据。</li>\n<li>在所有键值对中<br>● allkeys-random， 从所有键值对中随机选择并删除数据<br>● allkeys-lru， 使用 LRU 算法在所有数据中进行筛选<br>● allkeys-lfu， 使用 LFU 算法在所有数据中进行筛选<img src=\"/2024/04/02/Redis%E5%AD%A6%E4%B9%A03%E2%80%94Redis%E5%BA%94%E7%94%A8%E4%B9%8B%E7%BC%93%E5%AD%98/4.png\" class=\"\"></li>\n</ol>\n<h4 id=\"2-3-数据库缓存不一致解决方案\"><a href=\"#2-3-数据库缓存不一致解决方案\" class=\"headerlink\" title=\"2.3. 数据库缓存不一致解决方案\"></a>2.3. 数据库缓存不一致解决方案</h4><p>因为我们的缓存数据来自于数据库，而数据库的数据会随业务的需要而发生变化，当数据库中的数据变化，而缓存没有同步该数据，此时便会产生一致性问题。具体的解决策略有：</p>\n<ol>\n<li>Cache Aside Pattern（旁路缓存）</li>\n<li>Read&#x2F;Write-Through Pattern（读写穿透）</li>\n<li>Write Behind Pattern（异步缓存写入）</li>\n</ol>\n<h5 id=\"2-3-1-Cache-Aside-Pattern（旁路缓存模式）\"><a href=\"#2-3-1-Cache-Aside-Pattern（旁路缓存模式）\" class=\"headerlink\" title=\"2.3.1. Cache Aside Pattern（旁路缓存模式）\"></a>2.3.1. Cache Aside Pattern（旁路缓存模式）</h5><p>该模式是平时使用比较多的一个缓存读写模式，比较适合读请求比较多的场景，在该模式中，需要同时维系db和cache，并且以db的结果为准。</p>\n<h6 id=\"2-3-1-1-写\"><a href=\"#2-3-1-1-写\" class=\"headerlink\" title=\"2.3.1.1. 写\"></a>2.3.1.1. 写</h6><p>先更新db，然后再直接删除cache</p>\n<img src=\"/2024/04/02/Redis%E5%AD%A6%E4%B9%A03%E2%80%94Redis%E5%BA%94%E7%94%A8%E4%B9%8B%E7%BC%93%E5%AD%98/5.png\" class=\"\">\n<p>注意，不能先删除cache，在写db，因为在并发的情况下，可能存在，请求1删除缓存，然后写db，并且写db操作还没结束，这时请求2获取缓存，此时因为缓存被删除了，因此会从数据库读数据， 并存入缓存，这个时候的数据是未更新的，当请求2结束后，请求1写db结束，此时就会造成数据库和缓存中的数据不一致。</p>\n<img src=\"/2024/04/02/Redis%E5%AD%A6%E4%B9%A03%E2%80%94Redis%E5%BA%94%E7%94%A8%E4%B9%8B%E7%BC%93%E5%AD%98/6.png\" class=\"\">\n<p>旁路缓存理论上来说，也会造成数据库和缓存不一致的问题，比如：请求 1 先写数据 A，请求 2 随后读数据 A 的话，就很有可能产生数据不一致性的问题。<br>这个过程可以简单描述为：</p>\n<img src=\"/2024/04/02/Redis%E5%AD%A6%E4%B9%A03%E2%80%94Redis%E5%BA%94%E7%94%A8%E4%B9%8B%E7%BC%93%E5%AD%98/7.png\" class=\"\">\n<p>但这种概率很小，因为缓存的写入速度比数据库的写入速度快很多。</p>\n<h6 id=\"2-3-1-2-读\"><a href=\"#2-3-1-2-读\" class=\"headerlink\" title=\"2.3.1.2. 读\"></a>2.3.1.2. 读</h6><p>从cache中读取数据，读取到就直接返回。如果读取不到，从db中读取数据返回，然后再把数据放到cache中。</p>\n<img src=\"/2024/04/02/Redis%E5%AD%A6%E4%B9%A03%E2%80%94Redis%E5%BA%94%E7%94%A8%E4%B9%8B%E7%BC%93%E5%AD%98/8.png\" class=\"\">\n<h6 id=\"2-3-1-3-Cache-Aside-Pattern的缺陷\"><a href=\"#2-3-1-3-Cache-Aside-Pattern的缺陷\" class=\"headerlink\" title=\"2.3.1.3. Cache Aside Pattern的缺陷\"></a>2.3.1.3. Cache Aside Pattern的缺陷</h6><ol>\n<li>首次请求数据一定不在cache：这种情况可以先将热点数据提前放入cache中。</li>\n<li>写操作比较频繁，会导致cache的数据被频繁删除，影响缓存命中率：更新db的时候同时更新cache，但是给缓存设置一个比较短的过期时间，保证即使数据不一致的话，影响也比较小。</li>\n</ol>\n<h5 id=\"2-3-2-Read-Write-Through-Pattern（读写穿透）\"><a href=\"#2-3-2-Read-Write-Through-Pattern（读写穿透）\" class=\"headerlink\" title=\"2.3.2. Read&#x2F;Write Through Pattern（读写穿透）\"></a>2.3.2. Read&#x2F;Write Through Pattern（读写穿透）</h5><p>服务端把 cache 视为主要数据存储，从中读取数据并将数据写入其中。cache 服务负责将此数据读取和写入 db，从而减轻了应用程序的职责。这种策略比较少使用，因为Redis并没有提供cache将数据写入db的功能。</p>\n<h6 id=\"2-3-2-1-写（Write-Through）\"><a href=\"#2-3-2-1-写（Write-Through）\" class=\"headerlink\" title=\"2.3.2.1. 写（Write Through）\"></a>2.3.2.1. 写（Write Through）</h6><p>● 先查 cache，cache 中不存在，直接更新 db。<br>● cache 中存在，则先更新 cache，然后 cache 服务自己更新 db（同步更新 cache 和 db）。</p>\n<img src=\"/2024/04/02/Redis%E5%AD%A6%E4%B9%A03%E2%80%94Redis%E5%BA%94%E7%94%A8%E4%B9%8B%E7%BC%93%E5%AD%98/9.png\" class=\"\">\n<h6 id=\"2-3-2-2-读（Read-Through）\"><a href=\"#2-3-2-2-读（Read-Through）\" class=\"headerlink\" title=\"2.3.2.2. 读（Read Through）\"></a>2.3.2.2. 读（Read Through）</h6><p>● 从 cache 中读取数据，读取到就直接返回 。<br>● 读取不到的话，先从 db 加载，写入到 cache 后返回响应。</p>\n<img src=\"/2024/04/02/Redis%E5%AD%A6%E4%B9%A03%E2%80%94Redis%E5%BA%94%E7%94%A8%E4%B9%8B%E7%BC%93%E5%AD%98/10.png\" class=\"\">\n<h6 id=\"2-3-2-3-缺陷\"><a href=\"#2-3-2-3-缺陷\" class=\"headerlink\" title=\"2.3.2.3. 缺陷\"></a>2.3.2.3. 缺陷</h6><ol>\n<li>实现困难，如Redis并没有提供cache将数据写入db的功能</li>\n<li>和Cache Aside Pattern一样，首次请求数据一定不在cache中</li>\n</ol>\n<h5 id=\"2-3-3-Write-Behind-Pattern（异步缓存写入）\"><a href=\"#2-3-3-Write-Behind-Pattern（异步缓存写入）\" class=\"headerlink\" title=\"2.3.3. Write Behind Pattern（异步缓存写入）\"></a>2.3.3. Write Behind Pattern（异步缓存写入）</h5><p>与Read&#x2F;Write Through Pattern相似，都是由cache服务来负责cache和db的读写，但是，Read&#x2F;Write Through是同步更新cache和db，而Write Behind是只更新缓存，不直接更新db，改为异步批量的方式，更新db。<br>这种方式对数据一致性带来了更大的挑战，比如 cache 数据可能还没异步更新 db 的话，cache 服务可能就就挂掉了。这种策略在我们平时开发过程中也非常非常少见，但是不代表它的应用场景少，比如消息队列中消息的异步写入磁盘、MySQL 的 Innodb Buffer Pool 机制都用到了这种策略。<br>Write Behind Pattern 下 db 的写性能非常高，非常适合一些数据经常变化又对数据一致性要求没那么高的场景，比如浏览量、点赞量。</p>\n<h3 id=\"3-缓存常见的问题\"><a href=\"#3-缓存常见的问题\" class=\"headerlink\" title=\"3. 缓存常见的问题\"></a>3. 缓存常见的问题</h3><h4 id=\"3-1-缓存雪崩\"><a href=\"#3-1-缓存雪崩\" class=\"headerlink\" title=\"3.1. 缓存雪崩\"></a>3.1. 缓存雪崩</h4><p>缓存雪崩，指缓存在同一时间大面积的生效（比如缓存数据过期），导致大量的请求都直接落到数据库上，给数据库造成了巨大的压力。此外，如果缓存服务器宕机也会导致缓存雪崩现象，导致所有的请求都落到了数据库上。</p>\n<img src=\"/2024/04/02/Redis%E5%AD%A6%E4%B9%A03%E2%80%94Redis%E5%BA%94%E7%94%A8%E4%B9%8B%E7%BC%93%E5%AD%98/11.png\" class=\"\">\n<p>解决方法有：</p>\n<ol>\n<li>采用Redis集群，避免单机出现问题导致整个缓存服务器无法使用。</li>\n<li>限流，避免同时处理大量请求。</li>\n<li>多级缓存，比如本地缓存+Redis缓存的组合，当Redis缓存出现问题时，可以从本地缓存中获取部分数据。</li>\n<li>设置不同的生效时间比如随机设置缓存的失效时间。</li>\n<li>缓存永不生效。</li>\n<li>缓存预热，在程序启动后或运行过程中，主动将热点数据加载到缓存中。</li>\n</ol>\n<h4 id=\"3-2-缓存穿透\"><a href=\"#3-2-缓存穿透\" class=\"headerlink\" title=\"3.2. 缓存穿透\"></a>3.2. 缓存穿透</h4><p>缓存穿透指大量请求的key是不合理的，根本不存在与缓存和数据库中，这就导致这些请求直接到了数据库，给数据库造成巨大压力。比如黑客故意制造一些非法的key发起大量请求，导致大量请求落到数据库，结果数据库上也没有查到对应的数据。</p>\n<img src=\"/2024/04/02/Redis%E5%AD%A6%E4%B9%A03%E2%80%94Redis%E5%BA%94%E7%94%A8%E4%B9%8B%E7%BC%93%E5%AD%98/12.png\" class=\"\">\n<p>解决方法：</p>\n<ol>\n<li>参数校验：对不合法的参数请求，直接抛出异常信息给客户端，比如查询的数据库id不能为0，手机格式不正确等。</li>\n<li>缓存无效key：将这些无效的key设置到缓存中，并设置一个较短的过期时间。这种方法可以解决请求的key变化不频繁的情况。</li>\n<li>接口限流。</li>\n<li>布隆过滤器：通过布隆过滤器判断一个给定数据是否存在于海量数据中。具体做法是：把所有可能存在的请求的值都存放在布隆过滤器中，当用户请求过来，先判断用户发来的请求的值是否存在于布隆过滤器中。不存在的话，直接返回请求参数错误信息给客户端，存在的话才会走下面的流程。<img src=\"/2024/04/02/Redis%E5%AD%A6%E4%B9%A03%E2%80%94Redis%E5%BA%94%E7%94%A8%E4%B9%8B%E7%BC%93%E5%AD%98/13.png\" class=\"\"></li>\n</ol>\n<h4 id=\"3-3-缓存击穿\"><a href=\"#3-3-缓存击穿\" class=\"headerlink\" title=\"3.3. 缓存击穿\"></a>3.3. 缓存击穿</h4><p>缓存击穿，指请求的key对应的是热点数据，该数据存在于数据库中，但是不存在于缓存中（通常是因为缓存中的数据已经过期），这就会导致瞬时大量请求直接打到了数据库上，对数据库造成巨大压力。比如秒杀进行过程中，缓存中的某个秒杀商品数据过期，导致瞬时大量对该商品的请求直接落到数据库上，对数据库造成巨大压力。</p>\n<img src=\"/2024/04/02/Redis%E5%AD%A6%E4%B9%A03%E2%80%94Redis%E5%BA%94%E7%94%A8%E4%B9%8B%E7%BC%93%E5%AD%98/14.png\" class=\"\">\n<p>解决方法：</p>\n<ol>\n<li>设置热点数据永不过期或过期时间较长。</li>\n<li>针对热点数据提取预热，将其存入缓存中并设置合理的过期时间。</li>\n<li>请求数据库写数据到缓存之前，先获取互斥锁，保证只有一个请求会落到数据库上，减少数据库的压力。</li>\n</ol>\n<h3 id=\"4-SpringBoot整合Redis实现缓存\"><a href=\"#4-SpringBoot整合Redis实现缓存\" class=\"headerlink\" title=\"4. SpringBoot整合Redis实现缓存\"></a>4. SpringBoot整合Redis实现缓存</h3><h4 id=\"4-1-准备数据库数据\"><a href=\"#4-1-准备数据库数据\" class=\"headerlink\" title=\"4.1. 准备数据库数据\"></a>4.1. 准备数据库数据</h4><p>首先我们创建一个t_user表，并插入几条数据，用于后续的查询：</p>\n<img src=\"/2024/04/02/Redis%E5%AD%A6%E4%B9%A03%E2%80%94Redis%E5%BA%94%E7%94%A8%E4%B9%8B%E7%BC%93%E5%AD%98/15.png\" class=\"\">\n<h4 id=\"4-2-读缓存\"><a href=\"#4-2-读缓存\" class=\"headerlink\" title=\"4.2. 读缓存\"></a>4.2. 读缓存</h4><p>创建User类和对应的UserMapper</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@TableName(value = &quot;t_user&quot;)</span><br><span class=\"hljs-meta\">@Data</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">User</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">Serializable</span> &#123;<br>    <span class=\"hljs-meta\">@TableId(type = IdType.AUTO)</span><br>    <span class=\"hljs-keyword\">private</span> Integer id;<br><br>    <span class=\"hljs-keyword\">private</span> String username;<br><br>    <span class=\"hljs-keyword\">private</span> String password;<br>&#125;<br><br><span class=\"hljs-meta\">@Mapper</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">UserMapper</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">BaseMapper</span>&lt;User&gt; &#123;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>UserService</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Service</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">UserService</span> &#123;<br>    <span class=\"hljs-comment\">// 过期时间</span><br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">long</span> <span class=\"hljs-variable\">ttl</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">100L</span>;<br><br>    <span class=\"hljs-meta\">@Autowired</span><br>    <span class=\"hljs-keyword\">private</span> UserMapper userMapper;<br><br>    <span class=\"hljs-meta\">@Autowired</span><br>    <span class=\"hljs-keyword\">private</span> RedisUtils redisUtils;<br><br>    <span class=\"hljs-keyword\">public</span> User <span class=\"hljs-title function_\">getUserById</span><span class=\"hljs-params\">(Integer id)</span> &#123;<br>        <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">key</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;user:&quot;</span> + id;<br>        <span class=\"hljs-type\">Object</span> <span class=\"hljs-variable\">value</span> <span class=\"hljs-operator\">=</span> redisUtils.getKey(key);<br>        <span class=\"hljs-keyword\">if</span> (value != <span class=\"hljs-literal\">null</span>) &#123;<br>            <span class=\"hljs-comment\">// 缓存中存在该数据</span><br>            <span class=\"hljs-keyword\">return</span> (User) value;<br>        &#125;<br><br>        <span class=\"hljs-comment\">// 缓存中不存在该数据, 从数据库中查询</span><br>        <span class=\"hljs-type\">User</span> <span class=\"hljs-variable\">userFromDB</span> <span class=\"hljs-operator\">=</span> getUserFromDB(id);<br>        <span class=\"hljs-keyword\">if</span> (userFromDB == <span class=\"hljs-literal\">null</span>) &#123;<br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>;<br>        &#125;<br>        redisUtils.addKey(key, userFromDB, ttl);<br>        <span class=\"hljs-keyword\">return</span> userFromDB;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">private</span> User <span class=\"hljs-title function_\">getUserFromDB</span><span class=\"hljs-params\">(Integer id)</span> &#123;<br>        System.out.println(<span class=\"hljs-string\">&quot;从数据库中查询====================&quot;</span>);<br>        <span class=\"hljs-keyword\">return</span> userMapper.selectById(id);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>添加一个测试方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> org.example;<br><br><span class=\"hljs-keyword\">import</span> org.example.pojo.User;<br><span class=\"hljs-keyword\">import</span> org.example.service.UserService;<br><span class=\"hljs-keyword\">import</span> org.junit.jupiter.api.Test;<br><span class=\"hljs-keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class=\"hljs-keyword\">import</span> org.springframework.boot.test.context.SpringBootTest;<br><br><span class=\"hljs-meta\">@SpringBootTest</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">RedisCacheTest</span> &#123;<br>    <span class=\"hljs-meta\">@Autowired</span><br>    <span class=\"hljs-keyword\">private</span> UserService userService;<br><br>    <span class=\"hljs-meta\">@Test</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">testGetUserById</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-type\">User</span> <span class=\"hljs-variable\">userById</span> <span class=\"hljs-operator\">=</span> userService.getUserById(<span class=\"hljs-number\">1</span>);<br>        System.out.println(userById);<br><br>        userById = userService.getUserById(<span class=\"hljs-number\">1</span>);<br>        System.out.println(userById);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>执行测试方法，结果如下：</p>\n<img src=\"/2024/04/02/Redis%E5%AD%A6%E4%B9%A03%E2%80%94Redis%E5%BA%94%E7%94%A8%E4%B9%8B%E7%BC%93%E5%AD%98/16.png\" class=\"\">\n<p>从上述内容中，可以看出，第一次查询时，因为数据不存在于缓存中，所以会查询数据库，第二次查询时，从缓存中查询到数据，直接返回。<br>但是这里涉及到一个序列化的问题，我们通过下载一些redis桌面可视化工具，查看这些数据，发现这些key和value都有一些奇怪的编码，如下图所示：</p>\n<img src=\"/2024/04/02/Redis%E5%AD%A6%E4%B9%A03%E2%80%94Redis%E5%BA%94%E7%94%A8%E4%B9%8B%E7%BC%93%E5%AD%98/17.png\" class=\"\">\n<p>这是因为，默认情况下，redisTemplate使用JDK的序列化器(JdkSerializationRedisSerializer)对存储的对象进行序列哈和反序列化操作，这可能导致序列化结果不可读或占用较多的存储空间。因此，我们需要在配置redisTemplate的时候，设置对应的序列化器，我们修改上一章的RedisConfiguration类，修改结果如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> org.example.config;<br><br><span class=\"hljs-keyword\">import</span> com.fasterxml.jackson.databind.ObjectMapper;<br><span class=\"hljs-keyword\">import</span> org.springframework.context.annotation.Bean;<br><span class=\"hljs-keyword\">import</span> org.springframework.context.annotation.Configuration;<br><span class=\"hljs-keyword\">import</span> org.springframework.data.redis.connection.RedisConnectionFactory;<br><span class=\"hljs-keyword\">import</span> org.springframework.data.redis.core.RedisTemplate;<br><span class=\"hljs-keyword\">import</span> org.springframework.data.redis.serializer.Jackson2JsonRedisSerializer;<br><span class=\"hljs-keyword\">import</span> org.springframework.data.redis.serializer.StringRedisSerializer;<br><br><span class=\"hljs-meta\">@Configuration</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">RedisConfiguration</span> &#123;<br>    <span class=\"hljs-meta\">@Bean</span><br>    <span class=\"hljs-keyword\">public</span> RedisTemplate&lt;String, Object&gt; <span class=\"hljs-title function_\">redisTemplate</span><span class=\"hljs-params\">(RedisConnectionFactory redisConnectionFactory)</span> &#123;<br>        RedisTemplate&lt;String, Object&gt; redisTemplate = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">RedisTemplate</span>&lt;&gt;();<br>        redisTemplate.setConnectionFactory(redisConnectionFactory);<br><br>        <span class=\"hljs-type\">StringRedisSerializer</span> <span class=\"hljs-variable\">stringRedisSerializer</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">StringRedisSerializer</span>();<br>        <span class=\"hljs-type\">Jackson2JsonRedisSerializer</span> <span class=\"hljs-variable\">jackson2JsonRedisSerializer</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Jackson2JsonRedisSerializer</span>(Object.class);<br>        <span class=\"hljs-type\">ObjectMapper</span> <span class=\"hljs-variable\">objectMapper</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ObjectMapper</span>().enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);<br>        jackson2JsonRedisSerializer.setObjectMapper(objectMapper);<br><br>        <span class=\"hljs-comment\">// 设置key的序列化器为StringRedisSerializer</span><br>        redisTemplate.setKeySerializer(stringRedisSerializer);<br>        <span class=\"hljs-comment\">// 设置value的序列化器为Jackson2JsonRedisSerializer</span><br>        redisTemplate.setValueSerializer(jackson2JsonRedisSerializer);<br><br>        <span class=\"hljs-comment\">// 设置hash key的序列化器为StringRedisSerializer</span><br>        redisTemplate.setHashKeySerializer(stringRedisSerializer);<br>        <span class=\"hljs-comment\">// 设置hash value的序列化器为Jackson2JsonRedisSerializer</span><br>        redisTemplate.setHashValueSerializer(jackson2JsonRedisSerializer);<br><br>        <span class=\"hljs-comment\">// 完成其他配置后，初始化RedisTemplate</span><br>        redisTemplate.afterPropertiesSet();<br>        <span class=\"hljs-keyword\">return</span> redisTemplate;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>我们将之前那些key全部删除掉，然后重新运行测试代码，结果如下：</p>\n<img src=\"/2024/04/02/Redis%E5%AD%A6%E4%B9%A03%E2%80%94Redis%E5%BA%94%E7%94%A8%E4%B9%8B%E7%BC%93%E5%AD%98/18.png\" class=\"\">\n<p>通过redis可视化工具，也能清楚地看到每个key和value的结构和信息。</p>\n<img src=\"/2024/04/02/Redis%E5%AD%A6%E4%B9%A03%E2%80%94Redis%E5%BA%94%E7%94%A8%E4%B9%8B%E7%BC%93%E5%AD%98/19.png\" class=\"\">\n<p>上面的代码，存在一些问题，当请求1查询id&#x3D;1的用户，从缓存中查询不到时，会查询数据库，然后将数据更新到数据库，然后请求2查询id&#x3D;1的用户，从缓存中查询到，便直接返回，这是理想的情况。但是，可能请求1查询数据库还没执行完，请求2过来了，此时缓存中没有id&#x3D;1的用户，因此请求2也会去查询数据库。<br>比如我们修改getUserFromDB，加上Thread.sleep(2000)，模拟数据库的查询较慢，然后修改测试代码，模拟多个请求同时查询id&#x3D;1的用户的情况：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Test</span><br> <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">testGetUserById</span><span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">throws</span> ExecutionException, InterruptedException &#123;<br>     <span class=\"hljs-type\">ExecutorService</span> <span class=\"hljs-variable\">executorService</span> <span class=\"hljs-operator\">=</span> Executors.newFixedThreadPool(<span class=\"hljs-number\">2</span>);<br>     Callable&lt;User&gt; getUserTask = () -&gt; userService.getUserById(<span class=\"hljs-number\">1</span>);<br><br>     Future&lt;User&gt; submit1 = executorService.submit(getUserTask);<br>     Future&lt;User&gt; submit2 = executorService.submit(getUserTask);<br>     System.out.println(submit1.get());<br>     System.out.println(submit2.get());<br> &#125;<br></code></pre></td></tr></table></figure>\n<p>此时再次执行测试代码，结果如下：</p>\n<img src=\"/2024/04/02/Redis%E5%AD%A6%E4%B9%A03%E2%80%94Redis%E5%BA%94%E7%94%A8%E4%B9%8B%E7%BC%93%E5%AD%98/20.png\" class=\"\">\n<p>解决上面的情况，方式就是加锁，我们修改UserService的代码如下,这里通过synchronized加锁，然后锁的对象使用key，这样可以将锁的粒度缩小一点。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> User <span class=\"hljs-title function_\">getUserById</span><span class=\"hljs-params\">(Integer id)</span> &#123;<br>       <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">key</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;user:&quot;</span> + id;<br>       <span class=\"hljs-type\">Object</span> <span class=\"hljs-variable\">value</span> <span class=\"hljs-operator\">=</span> redisUtils.getKey(key);<br>       <span class=\"hljs-keyword\">if</span> (value != <span class=\"hljs-literal\">null</span>) &#123;<br>           <span class=\"hljs-comment\">// 缓存中存在该数据</span><br>           <span class=\"hljs-keyword\">return</span> (User) value;<br>       &#125;<br><br>       <span class=\"hljs-type\">User</span> <span class=\"hljs-variable\">userFromDB</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-literal\">null</span>;<br>       <span class=\"hljs-keyword\">synchronized</span> (key.intern()) &#123;<br>           <span class=\"hljs-comment\">// 再次查询缓存</span><br>           value = redisUtils.getKey(key);<br>           <span class=\"hljs-keyword\">if</span> (value != <span class=\"hljs-literal\">null</span>) &#123;<br>               <span class=\"hljs-keyword\">return</span> (User) value;<br>           &#125;<br><br>           <span class=\"hljs-comment\">// 缓存中不存在该数据, 从数据库中查询</span><br>           userFromDB = getUserFromDB(id);<br>           <span class=\"hljs-keyword\">if</span> (userFromDB == <span class=\"hljs-literal\">null</span>) &#123;<br>               <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>;<br>           &#125;<br>           redisUtils.addKey(key, userFromDB, ttl);<br>       &#125;<br>       <span class=\"hljs-keyword\">return</span> userFromDB;<br>   &#125;<br><br>   <span class=\"hljs-keyword\">private</span> User <span class=\"hljs-title function_\">getUserFromDB</span><span class=\"hljs-params\">(Integer id)</span> &#123;<br>       <span class=\"hljs-keyword\">try</span> &#123;<br>           Thread.sleep(<span class=\"hljs-number\">2000</span>);<br>       &#125; <span class=\"hljs-keyword\">catch</span> (Exception e) &#123;<br>           e.printStackTrace();<br>       &#125;<br>       System.out.println(<span class=\"hljs-string\">&quot;从数据库中查询====================&quot;</span>);<br>       <span class=\"hljs-keyword\">return</span> userMapper.selectById(id);<br>   &#125;<br></code></pre></td></tr></table></figure>\n<p>重新运行测试方法，结果如下：</p>\n<img src=\"/2024/04/02/Redis%E5%AD%A6%E4%B9%A03%E2%80%94Redis%E5%BA%94%E7%94%A8%E4%B9%8B%E7%BC%93%E5%AD%98/21.png\" class=\"\">\n<p>通过加锁，可以解决被访问多次的情况，但是这样的锁有一个问题，这个锁，只适用于单机的情况，当我们的服务部署在多台服务器上时，这些服务器上的应用，对应的JVM都不同，因此锁住的，不是同一个对象，后续会单独对分布式锁进行讲解，这里先不予讨论。</p>\n<h4 id=\"4-3-更新缓存\"><a href=\"#4-3-更新缓存\" class=\"headerlink\" title=\"4.3. 更新缓存\"></a>4.3. 更新缓存</h4><p>修改userService，添加修改用户的方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">updateUser</span><span class=\"hljs-params\">(UpdateUserRequest updateUserRequest)</span> &#123;<br>       <span class=\"hljs-keyword\">if</span> (updateUserRequest.getId() == <span class=\"hljs-literal\">null</span>) &#123;<br>           <span class=\"hljs-keyword\">return</span>;<br>       &#125;<br>       <span class=\"hljs-type\">User</span> <span class=\"hljs-variable\">user</span> <span class=\"hljs-operator\">=</span> getUserById(updateUserRequest.getId());<br>       <span class=\"hljs-keyword\">if</span> (user == <span class=\"hljs-literal\">null</span>) &#123;<br>           <span class=\"hljs-keyword\">return</span>;<br>       &#125;<br>       <span class=\"hljs-keyword\">if</span> (StringUtils.isNotEmpty(updateUserRequest.getUsername())) &#123;<br>           user.setUsername(updateUserRequest.getUsername());<br>       &#125;<br>       <span class=\"hljs-keyword\">if</span> (StringUtils.isNotEmpty(updateUserRequest.getPassword())) &#123;<br>           user.setPassword(updateUserRequest.getPassword());<br>       &#125;<br>       <span class=\"hljs-comment\">// 先更新数据库</span><br>       <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">updateResult</span> <span class=\"hljs-operator\">=</span> userMapper.updateById(user);<br>       <span class=\"hljs-keyword\">if</span> (updateResult == <span class=\"hljs-number\">1</span>) &#123;<br>           <span class=\"hljs-comment\">// 更新成功，删除缓存</span><br>           redisUtils.removeKey(<span class=\"hljs-string\">&quot;user:&quot;</span> + updateUserRequest.getId());<br>       &#125;<br>   &#125;<br></code></pre></td></tr></table></figure>\n<p>添加测试方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Test</span><br>   <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">testUpdateUser</span><span class=\"hljs-params\">()</span> &#123;<br>       <span class=\"hljs-type\">UpdateUserRequest</span> <span class=\"hljs-variable\">updateUserRequest</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">UpdateUserRequest</span>();<br>       updateUserRequest.setId(<span class=\"hljs-number\">1</span>);<br>       updateUserRequest.setPassword(<span class=\"hljs-string\">&quot;12345&quot;</span>);<br>       userService.updateUser(updateUserRequest);<br><br>       <span class=\"hljs-type\">User</span> <span class=\"hljs-variable\">userById</span> <span class=\"hljs-operator\">=</span> userService.getUserById(<span class=\"hljs-number\">1</span>);<br>       System.out.println(userById);<br>   &#125;<br></code></pre></td></tr></table></figure>\n<p>测试结果如下</p>\n<img src=\"/2024/04/02/Redis%E5%AD%A6%E4%B9%A03%E2%80%94Redis%E5%BA%94%E7%94%A8%E4%B9%8B%E7%BC%93%E5%AD%98/22.png\" class=\"\">\n<h3 id=\"5-SpringBoot整合SpringCache-Redis\"><a href=\"#5-SpringBoot整合SpringCache-Redis\" class=\"headerlink\" title=\"5. SpringBoot整合SpringCache+Redis\"></a>5. SpringBoot整合SpringCache+Redis</h3><p>在上面的代码中，我们发现，和Redis查询的操作，和我们的业务代码糅合在一起， 不方便进行处理，如果后续我们缓存服务器从Redis改为其他缓存服务器，需要修改多处代码，不利于项目的扩展和维护。<br>SpringCache框架是Spring框架提供的一套基于注解的缓存解决方案，在应用程序中简化了缓存操作的管理和使用。它通过在方法上添加缓存注解，来实现自动缓存的功能，其常用注解有：<br>1）@Cacheable: 表示该方法返回结果可以被缓存，当方法被调用时，先检查缓存，如果缓存命中，直接返回缓存中的结果，不再执行方法体中的逻辑。<br>2） @CachePut：表示该方法的返回结果需要更新缓存，每次方法被调用后，都会将返回结果更新到缓存中。<br>3）@CacheEvit：表示该方法会清除缓存中的数据，可以用于在更新或删除数据时清除相应的缓存。</p>\n<h4 id=\"5-1-整合SpringCache\"><a href=\"#5-1-整合SpringCache\" class=\"headerlink\" title=\"5.1. 整合SpringCache\"></a>5.1. 整合SpringCache</h4><p>添加Spring Cache的依赖</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span><br>\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span><br>\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>spring-boot-starter-cache<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<p>在启动类上加上注解开启缓存</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@SpringBootApplication</span><br><span class=\"hljs-meta\">@EnableCaching</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">RedisApp</span> &#123;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> &#123;<br>        SpringApplication.run(RedisApp.class, args);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h4 id=\"5-2-测试Cacheable和CacheEvict\"><a href=\"#5-2-测试Cacheable和CacheEvict\" class=\"headerlink\" title=\"5.2. 测试Cacheable和CacheEvict\"></a>5.2. 测试Cacheable和CacheEvict</h4><p>我们在userService类上，加上两个方法，用于测试Cacheable和CacheEvit注解。<br>添加getUserById2方法，该方法中的逻辑为查询数据库操作</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Cacheable(value = &quot;user&quot;, key = &quot;#id&quot;)</span><br>  <span class=\"hljs-keyword\">public</span> User <span class=\"hljs-title function_\">getUserById2</span><span class=\"hljs-params\">(Integer id)</span> &#123;<br>      System.out.println(<span class=\"hljs-string\">&quot;从数据库中查询==============&quot;</span>);<br>      <span class=\"hljs-keyword\">return</span> userMapper.selectById(id);<br>  &#125;<br></code></pre></td></tr></table></figure>\n<p>然后添加一个测试方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Autowired</span><br>   <span class=\"hljs-keyword\">private</span> UserService userService;<br><br>   <span class=\"hljs-meta\">@Test</span><br>   <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">testGetUserById</span><span class=\"hljs-params\">()</span> &#123;<br>       System.out.println(userService.getUserById2(<span class=\"hljs-number\">1</span>));<br>       System.out.println(userService.getUserById2(<span class=\"hljs-number\">1</span>));<br>   &#125;<br></code></pre></td></tr></table></figure>\n<p>测试结果如下，第一次查询时，查询数据库，第二次直接查询缓存。</p>\n<img src=\"/2024/04/02/Redis%E5%AD%A6%E4%B9%A03%E2%80%94Redis%E5%BA%94%E7%94%A8%E4%B9%8B%E7%BC%93%E5%AD%98/23.png\" class=\"\">\n<p>然后我们查看reids缓存，发现这个key的值是user::1，这个和我们之前定义的不太相同，而且没有过期时间，除此之外，这个value的值，序列化有问题</p>\n<img src=\"/2024/04/02/Redis%E5%AD%A6%E4%B9%A03%E2%80%94Redis%E5%BA%94%E7%94%A8%E4%B9%8B%E7%BC%93%E5%AD%98/24.png\" class=\"\">\n<p>我们修改RedisConfiguration，添加RedisCacheConfiguration的相关配置</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> org.example.config;<br><br><span class=\"hljs-keyword\">import</span> com.fasterxml.jackson.databind.ObjectMapper;<br><span class=\"hljs-keyword\">import</span> org.springframework.context.annotation.Bean;<br><span class=\"hljs-keyword\">import</span> org.springframework.context.annotation.Configuration;<br><span class=\"hljs-keyword\">import</span> org.springframework.data.redis.cache.RedisCacheConfiguration;<br><span class=\"hljs-keyword\">import</span> org.springframework.data.redis.connection.RedisConnectionFactory;<br><span class=\"hljs-keyword\">import</span> org.springframework.data.redis.core.RedisTemplate;<br><span class=\"hljs-keyword\">import</span> org.springframework.data.redis.serializer.Jackson2JsonRedisSerializer;<br><span class=\"hljs-keyword\">import</span> org.springframework.data.redis.serializer.RedisSerializationContext;<br><span class=\"hljs-keyword\">import</span> org.springframework.data.redis.serializer.StringRedisSerializer;<br><br><span class=\"hljs-keyword\">import</span> java.time.Duration;<br><br><span class=\"hljs-meta\">@Configuration</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">RedisConfiguration</span> &#123;<br>    <span class=\"hljs-meta\">@Bean</span><br>    <span class=\"hljs-keyword\">public</span> RedisTemplate&lt;String, Object&gt; <span class=\"hljs-title function_\">redisTemplate</span><span class=\"hljs-params\">(RedisConnectionFactory redisConnectionFactory)</span> &#123;<br>        RedisTemplate&lt;String, Object&gt; redisTemplate = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">RedisTemplate</span>&lt;&gt;();<br>        redisTemplate.setConnectionFactory(redisConnectionFactory);<br><br>        <span class=\"hljs-type\">StringRedisSerializer</span> <span class=\"hljs-variable\">stringRedisSerializer</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">StringRedisSerializer</span>();<br>        <span class=\"hljs-type\">Jackson2JsonRedisSerializer</span> <span class=\"hljs-variable\">jackson2JsonRedisSerializer</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Jackson2JsonRedisSerializer</span>(Object.class);<br>        <span class=\"hljs-type\">ObjectMapper</span> <span class=\"hljs-variable\">objectMapper</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ObjectMapper</span>().enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);<br>        jackson2JsonRedisSerializer.setObjectMapper(objectMapper);<br><br>        <span class=\"hljs-comment\">// 设置key的序列化器为StringRedisSerializer</span><br>        redisTemplate.setKeySerializer(stringRedisSerializer);<br>        <span class=\"hljs-comment\">// 设置value的序列化器为Jackson2JsonRedisSerializer</span><br>        redisTemplate.setValueSerializer(jackson2JsonRedisSerializer);<br><br>        <span class=\"hljs-comment\">// 设置hash key的序列化器为StringRedisSerializer</span><br>        redisTemplate.setHashKeySerializer(stringRedisSerializer);<br>        <span class=\"hljs-comment\">// 设置hash value的序列化器为Jackson2JsonRedisSerializer</span><br>        redisTemplate.setHashValueSerializer(jackson2JsonRedisSerializer);<br><br>        <span class=\"hljs-comment\">// 完成其他配置后，初始化RedisTemplate</span><br>        redisTemplate.afterPropertiesSet();<br>        <span class=\"hljs-keyword\">return</span> redisTemplate;<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Bean</span><br>    <span class=\"hljs-keyword\">public</span> RedisCacheConfiguration <span class=\"hljs-title function_\">redisCacheConfiguration</span><span class=\"hljs-params\">()</span>&#123;<br>        <span class=\"hljs-type\">Jackson2JsonRedisSerializer</span> <span class=\"hljs-variable\">jackson2JsonRedisSerializer</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Jackson2JsonRedisSerializer</span>(Object.class);<br>        <span class=\"hljs-type\">ObjectMapper</span> <span class=\"hljs-variable\">objectMapper</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ObjectMapper</span>().enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);<br>        jackson2JsonRedisSerializer.setObjectMapper(objectMapper);<br><br>        <span class=\"hljs-comment\">//相当于new了一个RedisCacheConfiguration</span><br>        <span class=\"hljs-type\">RedisCacheConfiguration</span>  <span class=\"hljs-variable\">configuration</span> <span class=\"hljs-operator\">=</span> RedisCacheConfiguration.defaultCacheConfig();<br>        configuration = configuration.serializeValuesWith<br>                <span class=\"hljs-comment\">// 指定value序列化器</span><br>                        (RedisSerializationContext.SerializationPair.fromSerializer(jackson2JsonRedisSerializer))<br>                <span class=\"hljs-comment\">// 指定 key的TTL</span><br>                .entryTtl(Duration.ofSeconds(<span class=\"hljs-number\">100</span>))<br>                <span class=\"hljs-comment\">// 指定前缀</span><br>                .prefixCacheNameWith(<span class=\"hljs-string\">&quot;user::&quot;</span>);<br>        <span class=\"hljs-keyword\">return</span> configuration;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>删除原先的缓存，然后重新运行测试代码，然后查看缓存信息，结果如下：</p>\n<img src=\"/2024/04/02/Redis%E5%AD%A6%E4%B9%A03%E2%80%94Redis%E5%BA%94%E7%94%A8%E4%B9%8B%E7%BC%93%E5%AD%98/25.png\" class=\"\">\n<p>此时过期时间和序列化均设置成功。但这样配置还有一些问题，通过这种全局配置，所有cache key的TTL都一样，实际开发中，不同的cache key可能需要的TTL都不同，我们修改RedisConfiguration，为不同的key配置上不同的过期时间</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> org.example.config;<br><br><span class=\"hljs-keyword\">import</span> com.fasterxml.jackson.databind.ObjectMapper;<br><span class=\"hljs-keyword\">import</span> org.springframework.boot.autoconfigure.cache.RedisCacheManagerBuilderCustomizer;<br><span class=\"hljs-keyword\">import</span> org.springframework.context.annotation.Bean;<br><span class=\"hljs-keyword\">import</span> org.springframework.context.annotation.Configuration;<br><span class=\"hljs-keyword\">import</span> org.springframework.data.redis.cache.RedisCacheConfiguration;<br><span class=\"hljs-keyword\">import</span> org.springframework.data.redis.connection.RedisConnectionFactory;<br><span class=\"hljs-keyword\">import</span> org.springframework.data.redis.core.RedisTemplate;<br><span class=\"hljs-keyword\">import</span> org.springframework.data.redis.serializer.Jackson2JsonRedisSerializer;<br><span class=\"hljs-keyword\">import</span> org.springframework.data.redis.serializer.RedisSerializationContext;<br><span class=\"hljs-keyword\">import</span> org.springframework.data.redis.serializer.StringRedisSerializer;<br><br><span class=\"hljs-keyword\">import</span> java.time.Duration;<br><span class=\"hljs-keyword\">import</span> java.util.HashMap;<br><span class=\"hljs-keyword\">import</span> java.util.Map;<br><br><span class=\"hljs-meta\">@Configuration</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">RedisConfiguration</span> &#123;<br>    <span class=\"hljs-meta\">@Bean</span><br>    <span class=\"hljs-keyword\">public</span> RedisTemplate&lt;String, Object&gt; <span class=\"hljs-title function_\">redisTemplate</span><span class=\"hljs-params\">(RedisConnectionFactory redisConnectionFactory)</span> &#123;<br>        RedisTemplate&lt;String, Object&gt; redisTemplate = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">RedisTemplate</span>&lt;&gt;();<br>        redisTemplate.setConnectionFactory(redisConnectionFactory);<br><br>        <span class=\"hljs-type\">StringRedisSerializer</span> <span class=\"hljs-variable\">stringRedisSerializer</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">StringRedisSerializer</span>();<br>        <span class=\"hljs-type\">Jackson2JsonRedisSerializer</span> <span class=\"hljs-variable\">jackson2JsonRedisSerializer</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Jackson2JsonRedisSerializer</span>(Object.class);<br>        <span class=\"hljs-type\">ObjectMapper</span> <span class=\"hljs-variable\">objectMapper</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ObjectMapper</span>().enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);<br>        jackson2JsonRedisSerializer.setObjectMapper(objectMapper);<br><br>        <span class=\"hljs-comment\">// 设置key的序列化器为StringRedisSerializer</span><br>        redisTemplate.setKeySerializer(stringRedisSerializer);<br>        <span class=\"hljs-comment\">// 设置value的序列化器为Jackson2JsonRedisSerializer</span><br>        redisTemplate.setValueSerializer(jackson2JsonRedisSerializer);<br><br>        <span class=\"hljs-comment\">// 设置hash key的序列化器为StringRedisSerializer</span><br>        redisTemplate.setHashKeySerializer(stringRedisSerializer);<br>        <span class=\"hljs-comment\">// 设置hash value的序列化器为Jackson2JsonRedisSerializer</span><br>        redisTemplate.setHashValueSerializer(jackson2JsonRedisSerializer);<br><br>        <span class=\"hljs-comment\">// 完成其他配置后，初始化RedisTemplate</span><br>        redisTemplate.afterPropertiesSet();<br>        <span class=\"hljs-keyword\">return</span> redisTemplate;<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Bean</span><br>    <span class=\"hljs-keyword\">public</span> RedisCacheManagerBuilderCustomizer <span class=\"hljs-title function_\">redisCacheManagerBuilderCustomizer</span><span class=\"hljs-params\">()</span> &#123;<br>        Jackson2JsonRedisSerializer&lt;Object&gt; jackson2JsonRedisSerializer = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Jackson2JsonRedisSerializer</span>&lt;&gt;(Object.class);<br>        <span class=\"hljs-type\">ObjectMapper</span> <span class=\"hljs-variable\">objectMapper</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ObjectMapper</span>().enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);<br>        jackson2JsonRedisSerializer.setObjectMapper(objectMapper);<br><br>        <span class=\"hljs-keyword\">return</span> (builder) -&gt; &#123;<br>            Map&lt;String, RedisCacheConfiguration&gt; cacheConfigurations = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">HashMap</span>&lt;&gt;();<br><br>            cacheConfigurations.put(<span class=\"hljs-string\">&quot;user&quot;</span>,<br>                    RedisCacheConfiguration.defaultCacheConfig()<br>                            .entryTtl(Duration.ofSeconds(<span class=\"hljs-number\">60</span>))<br>                            .serializeValuesWith(RedisSerializationContext.SerializationPair.fromSerializer(jackson2JsonRedisSerializer)));<br><br>            cacheConfigurations.put(<span class=\"hljs-string\">&quot;product&quot;</span>,<br>                    RedisCacheConfiguration.defaultCacheConfig()<br>                            .entryTtl(Duration.ofSeconds(<span class=\"hljs-number\">120</span>))<br>                            .serializeValuesWith(RedisSerializationContext.SerializationPair.fromSerializer(jackson2JsonRedisSerializer)));<br><br>            builder.withInitialCacheConfigurations(cacheConfigurations);<br>        &#125;;<br>    &#125;<br>    <br>&#125;<br></code></pre></td></tr></table></figure>\n<p>运行结果如下：</p>\n<img src=\"/2024/04/02/Redis%E5%AD%A6%E4%B9%A03%E2%80%94Redis%E5%BA%94%E7%94%A8%E4%B9%8B%E7%BC%93%E5%AD%98/26.png\" class=\"\">\n<p>接着，我们测试CacheEvict，首先在userService中添加一个更新方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@CacheEvict(value = &quot;user&quot;, key = &quot;#updateUserRequest.id&quot;)</span><br>  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">updateUser2</span><span class=\"hljs-params\">(UpdateUserRequest updateUserRequest)</span> &#123;<br>      <span class=\"hljs-keyword\">if</span> (updateUserRequest.getId() == <span class=\"hljs-literal\">null</span>) &#123;<br>          <span class=\"hljs-keyword\">return</span>;<br>      &#125;<br>      <span class=\"hljs-type\">User</span> <span class=\"hljs-variable\">user</span> <span class=\"hljs-operator\">=</span> getUserById2(updateUserRequest.getId());<br>      <span class=\"hljs-keyword\">if</span> (user == <span class=\"hljs-literal\">null</span>) &#123;<br>          <span class=\"hljs-keyword\">return</span>;<br>      &#125;<br>      <span class=\"hljs-keyword\">if</span> (StringUtils.isNotEmpty(updateUserRequest.getUsername())) &#123;<br>          user.setUsername(updateUserRequest.getUsername());<br>      &#125;<br>      <span class=\"hljs-keyword\">if</span> (StringUtils.isNotEmpty(updateUserRequest.getPassword())) &#123;<br>          user.setPassword(updateUserRequest.getPassword());<br>      &#125;<br>      <span class=\"hljs-comment\">// 先更新数据库</span><br>      userMapper.updateById(user);<br>  &#125;<br></code></pre></td></tr></table></figure>\n<p>然后添加测试方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Test</span><br>   <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">testUpdateUser</span><span class=\"hljs-params\">()</span> &#123;<br>       <span class=\"hljs-type\">UpdateUserRequest</span> <span class=\"hljs-variable\">updateUserRequest</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">UpdateUserRequest</span>();<br>       updateUserRequest.setId(<span class=\"hljs-number\">1</span>);<br>       updateUserRequest.setPassword(<span class=\"hljs-string\">&quot;123456&quot;</span>);<br>       userService.updateUser2(updateUserRequest);<br>   &#125;<br></code></pre></td></tr></table></figure>\n<p>运行该测试方法，然后去看对应的redis缓存，发现更新成功后，该缓存被删除掉，说明CacheEvict生效</p>\n<img src=\"/2024/04/02/Redis%E5%AD%A6%E4%B9%A03%E2%80%94Redis%E5%BA%94%E7%94%A8%E4%B9%8B%E7%BC%93%E5%AD%98/27.png\" class=\"\">","excerpt":"","more":"<h3 id=\"1-引言\"><a href=\"#1-引言\" class=\"headerlink\" title=\"1. 引言\"></a>1. 引言</h3><h4 id=\"1-1-缓存的意义\"><a href=\"#1-1-缓存的意义\" class=\"headerlink\" title=\"1.1. 缓存的意义\"></a>1.1. 缓存的意义</h4><p>Redis作为一个NoSql数据库，被广泛的当作缓存数据库使用，所谓缓存，就是数据交换的缓冲区。使用缓存的具体原因有：</p>\n<ol>\n<li>缓存数据存储于代码中，而代码运行在内存中，内存的读写性能远高于磁盘，通过缓存，可以大大降低用户访问并发量带来的服务器读写压力。</li>\n<li>实际开发过程中，企业的数据量，少则几十万，多则上千万，如此大的数据量，如果没有缓存来作为“避震器”，系统是几乎撑不住的，所以企业会大量运用缓存技术。<img src=\"/2024/04/02/Redis%E5%AD%A6%E4%B9%A03%E2%80%94Redis%E5%BA%94%E7%94%A8%E4%B9%8B%E7%BC%93%E5%AD%98/1.png\" class=\"\"></li>\n</ol>\n<h4 id=\"1-2-缓存的分类\"><a href=\"#1-2-缓存的分类\" class=\"headerlink\" title=\"1.2. 缓存的分类\"></a>1.2. 缓存的分类</h4><p>对于缓存，我们可以分为以下几类：</p>\n<ol>\n<li>浏览器缓存：主要存在于浏览器端的缓存</li>\n<li>应用层缓存：本地缓存（比如tomcat本地缓存）或缓存数据库（比如redis）</li>\n<li>数据库缓存：在数据库中有一片空间是buffer pool，增删改查数据都会先加载到mysql的缓存中</li>\n<li>CPU缓存：当代计算机最大的问题是 cpu性能提升了，但内存读写速度没有跟上，所以为了适应当下的情况，增加了cpu的L1，L2，L3级的缓存<img src=\"/2024/04/02/Redis%E5%AD%A6%E4%B9%A03%E2%80%94Redis%E5%BA%94%E7%94%A8%E4%B9%8B%E7%BC%93%E5%AD%98/2.png\" class=\"\"></li>\n</ol>\n<h3 id=\"2-缓存模型\"><a href=\"#2-缓存模型\" class=\"headerlink\" title=\"2. 缓存模型\"></a>2. 缓存模型</h3><h4 id=\"2-1-查询、添加缓存\"><a href=\"#2-1-查询、添加缓存\" class=\"headerlink\" title=\"2.1. 查询、添加缓存\"></a>2.1. 查询、添加缓存</h4><p>一般情况下，在查询数据库之前，先查询缓存，如果缓存数据存在，就直接返回缓存数据，如果不存在，查询数据库，并将数据存入redis，具体的模型如下：</p>\n<img src=\"/2024/04/02/Redis%E5%AD%A6%E4%B9%A03%E2%80%94Redis%E5%BA%94%E7%94%A8%E4%B9%8B%E7%BC%93%E5%AD%98/3.png\" class=\"\">\n<h4 id=\"2-2-缓存淘汰\"><a href=\"#2-2-缓存淘汰\" class=\"headerlink\" title=\"2.2. 缓存淘汰\"></a>2.2. 缓存淘汰</h4><p>内存的空间是有限的，当我们向redis存储太多数据时，redis会对部分数据进行淘汰，淘汰数据的场景有：</p>\n<ol>\n<li>内存淘汰：Redis自动进行，当redis内存达到设定的max-memery时，会自动触发淘汰机制，淘汰掉一些不重要的数据。</li>\n<li>超时剔除：当对redis设置了过期时间TTL时，Redis会将超时的数据进行删除。</li>\n<li>主动更新：通过手动调用方法把缓存删除掉，常用于解决缓存与数据库不一致的问题。<br>Redis自动进行内存淘汰时，主要有6+2种数据淘汰机制，可以分为以下三大类：</li>\n<li>不淘汰数据<br>● noeviction ，不进行数据淘汰，当缓存被写满后，Redis不提供服务直接返回错误。</li>\n<li>在设置过期时间的键值对中，<br>● volatile-random ，在设置过期时间的键值对中随机删除<br>● volatile-ttl ，在设置过期时间的键值对，基于过期时间的先后进行删除，越早过期的越先被删除。<br>● volatile-lru ， 基于LRU(Least Recently Used) 算法筛选设置了过期时间的键值对， 最近最少使用的原则来筛选数据<br>● volatile-lfu ，使用 LFU( Least Frequently Used ) 算法选择设置了过期时间的键值对, 使用频率最少的键值对,来筛选数据。</li>\n<li>在所有键值对中<br>● allkeys-random， 从所有键值对中随机选择并删除数据<br>● allkeys-lru， 使用 LRU 算法在所有数据中进行筛选<br>● allkeys-lfu， 使用 LFU 算法在所有数据中进行筛选<img src=\"/2024/04/02/Redis%E5%AD%A6%E4%B9%A03%E2%80%94Redis%E5%BA%94%E7%94%A8%E4%B9%8B%E7%BC%93%E5%AD%98/4.png\" class=\"\"></li>\n</ol>\n<h4 id=\"2-3-数据库缓存不一致解决方案\"><a href=\"#2-3-数据库缓存不一致解决方案\" class=\"headerlink\" title=\"2.3. 数据库缓存不一致解决方案\"></a>2.3. 数据库缓存不一致解决方案</h4><p>因为我们的缓存数据来自于数据库，而数据库的数据会随业务的需要而发生变化，当数据库中的数据变化，而缓存没有同步该数据，此时便会产生一致性问题。具体的解决策略有：</p>\n<ol>\n<li>Cache Aside Pattern（旁路缓存）</li>\n<li>Read&#x2F;Write-Through Pattern（读写穿透）</li>\n<li>Write Behind Pattern（异步缓存写入）</li>\n</ol>\n<h5 id=\"2-3-1-Cache-Aside-Pattern（旁路缓存模式）\"><a href=\"#2-3-1-Cache-Aside-Pattern（旁路缓存模式）\" class=\"headerlink\" title=\"2.3.1. Cache Aside Pattern（旁路缓存模式）\"></a>2.3.1. Cache Aside Pattern（旁路缓存模式）</h5><p>该模式是平时使用比较多的一个缓存读写模式，比较适合读请求比较多的场景，在该模式中，需要同时维系db和cache，并且以db的结果为准。</p>\n<h6 id=\"2-3-1-1-写\"><a href=\"#2-3-1-1-写\" class=\"headerlink\" title=\"2.3.1.1. 写\"></a>2.3.1.1. 写</h6><p>先更新db，然后再直接删除cache</p>\n<img src=\"/2024/04/02/Redis%E5%AD%A6%E4%B9%A03%E2%80%94Redis%E5%BA%94%E7%94%A8%E4%B9%8B%E7%BC%93%E5%AD%98/5.png\" class=\"\">\n<p>注意，不能先删除cache，在写db，因为在并发的情况下，可能存在，请求1删除缓存，然后写db，并且写db操作还没结束，这时请求2获取缓存，此时因为缓存被删除了，因此会从数据库读数据， 并存入缓存，这个时候的数据是未更新的，当请求2结束后，请求1写db结束，此时就会造成数据库和缓存中的数据不一致。</p>\n<img src=\"/2024/04/02/Redis%E5%AD%A6%E4%B9%A03%E2%80%94Redis%E5%BA%94%E7%94%A8%E4%B9%8B%E7%BC%93%E5%AD%98/6.png\" class=\"\">\n<p>旁路缓存理论上来说，也会造成数据库和缓存不一致的问题，比如：请求 1 先写数据 A，请求 2 随后读数据 A 的话，就很有可能产生数据不一致性的问题。<br>这个过程可以简单描述为：</p>\n<img src=\"/2024/04/02/Redis%E5%AD%A6%E4%B9%A03%E2%80%94Redis%E5%BA%94%E7%94%A8%E4%B9%8B%E7%BC%93%E5%AD%98/7.png\" class=\"\">\n<p>但这种概率很小，因为缓存的写入速度比数据库的写入速度快很多。</p>\n<h6 id=\"2-3-1-2-读\"><a href=\"#2-3-1-2-读\" class=\"headerlink\" title=\"2.3.1.2. 读\"></a>2.3.1.2. 读</h6><p>从cache中读取数据，读取到就直接返回。如果读取不到，从db中读取数据返回，然后再把数据放到cache中。</p>\n<img src=\"/2024/04/02/Redis%E5%AD%A6%E4%B9%A03%E2%80%94Redis%E5%BA%94%E7%94%A8%E4%B9%8B%E7%BC%93%E5%AD%98/8.png\" class=\"\">\n<h6 id=\"2-3-1-3-Cache-Aside-Pattern的缺陷\"><a href=\"#2-3-1-3-Cache-Aside-Pattern的缺陷\" class=\"headerlink\" title=\"2.3.1.3. Cache Aside Pattern的缺陷\"></a>2.3.1.3. Cache Aside Pattern的缺陷</h6><ol>\n<li>首次请求数据一定不在cache：这种情况可以先将热点数据提前放入cache中。</li>\n<li>写操作比较频繁，会导致cache的数据被频繁删除，影响缓存命中率：更新db的时候同时更新cache，但是给缓存设置一个比较短的过期时间，保证即使数据不一致的话，影响也比较小。</li>\n</ol>\n<h5 id=\"2-3-2-Read-Write-Through-Pattern（读写穿透）\"><a href=\"#2-3-2-Read-Write-Through-Pattern（读写穿透）\" class=\"headerlink\" title=\"2.3.2. Read&#x2F;Write Through Pattern（读写穿透）\"></a>2.3.2. Read&#x2F;Write Through Pattern（读写穿透）</h5><p>服务端把 cache 视为主要数据存储，从中读取数据并将数据写入其中。cache 服务负责将此数据读取和写入 db，从而减轻了应用程序的职责。这种策略比较少使用，因为Redis并没有提供cache将数据写入db的功能。</p>\n<h6 id=\"2-3-2-1-写（Write-Through）\"><a href=\"#2-3-2-1-写（Write-Through）\" class=\"headerlink\" title=\"2.3.2.1. 写（Write Through）\"></a>2.3.2.1. 写（Write Through）</h6><p>● 先查 cache，cache 中不存在，直接更新 db。<br>● cache 中存在，则先更新 cache，然后 cache 服务自己更新 db（同步更新 cache 和 db）。</p>\n<img src=\"/2024/04/02/Redis%E5%AD%A6%E4%B9%A03%E2%80%94Redis%E5%BA%94%E7%94%A8%E4%B9%8B%E7%BC%93%E5%AD%98/9.png\" class=\"\">\n<h6 id=\"2-3-2-2-读（Read-Through）\"><a href=\"#2-3-2-2-读（Read-Through）\" class=\"headerlink\" title=\"2.3.2.2. 读（Read Through）\"></a>2.3.2.2. 读（Read Through）</h6><p>● 从 cache 中读取数据，读取到就直接返回 。<br>● 读取不到的话，先从 db 加载，写入到 cache 后返回响应。</p>\n<img src=\"/2024/04/02/Redis%E5%AD%A6%E4%B9%A03%E2%80%94Redis%E5%BA%94%E7%94%A8%E4%B9%8B%E7%BC%93%E5%AD%98/10.png\" class=\"\">\n<h6 id=\"2-3-2-3-缺陷\"><a href=\"#2-3-2-3-缺陷\" class=\"headerlink\" title=\"2.3.2.3. 缺陷\"></a>2.3.2.3. 缺陷</h6><ol>\n<li>实现困难，如Redis并没有提供cache将数据写入db的功能</li>\n<li>和Cache Aside Pattern一样，首次请求数据一定不在cache中</li>\n</ol>\n<h5 id=\"2-3-3-Write-Behind-Pattern（异步缓存写入）\"><a href=\"#2-3-3-Write-Behind-Pattern（异步缓存写入）\" class=\"headerlink\" title=\"2.3.3. Write Behind Pattern（异步缓存写入）\"></a>2.3.3. Write Behind Pattern（异步缓存写入）</h5><p>与Read&#x2F;Write Through Pattern相似，都是由cache服务来负责cache和db的读写，但是，Read&#x2F;Write Through是同步更新cache和db，而Write Behind是只更新缓存，不直接更新db，改为异步批量的方式，更新db。<br>这种方式对数据一致性带来了更大的挑战，比如 cache 数据可能还没异步更新 db 的话，cache 服务可能就就挂掉了。这种策略在我们平时开发过程中也非常非常少见，但是不代表它的应用场景少，比如消息队列中消息的异步写入磁盘、MySQL 的 Innodb Buffer Pool 机制都用到了这种策略。<br>Write Behind Pattern 下 db 的写性能非常高，非常适合一些数据经常变化又对数据一致性要求没那么高的场景，比如浏览量、点赞量。</p>\n<h3 id=\"3-缓存常见的问题\"><a href=\"#3-缓存常见的问题\" class=\"headerlink\" title=\"3. 缓存常见的问题\"></a>3. 缓存常见的问题</h3><h4 id=\"3-1-缓存雪崩\"><a href=\"#3-1-缓存雪崩\" class=\"headerlink\" title=\"3.1. 缓存雪崩\"></a>3.1. 缓存雪崩</h4><p>缓存雪崩，指缓存在同一时间大面积的生效（比如缓存数据过期），导致大量的请求都直接落到数据库上，给数据库造成了巨大的压力。此外，如果缓存服务器宕机也会导致缓存雪崩现象，导致所有的请求都落到了数据库上。</p>\n<img src=\"/2024/04/02/Redis%E5%AD%A6%E4%B9%A03%E2%80%94Redis%E5%BA%94%E7%94%A8%E4%B9%8B%E7%BC%93%E5%AD%98/11.png\" class=\"\">\n<p>解决方法有：</p>\n<ol>\n<li>采用Redis集群，避免单机出现问题导致整个缓存服务器无法使用。</li>\n<li>限流，避免同时处理大量请求。</li>\n<li>多级缓存，比如本地缓存+Redis缓存的组合，当Redis缓存出现问题时，可以从本地缓存中获取部分数据。</li>\n<li>设置不同的生效时间比如随机设置缓存的失效时间。</li>\n<li>缓存永不生效。</li>\n<li>缓存预热，在程序启动后或运行过程中，主动将热点数据加载到缓存中。</li>\n</ol>\n<h4 id=\"3-2-缓存穿透\"><a href=\"#3-2-缓存穿透\" class=\"headerlink\" title=\"3.2. 缓存穿透\"></a>3.2. 缓存穿透</h4><p>缓存穿透指大量请求的key是不合理的，根本不存在与缓存和数据库中，这就导致这些请求直接到了数据库，给数据库造成巨大压力。比如黑客故意制造一些非法的key发起大量请求，导致大量请求落到数据库，结果数据库上也没有查到对应的数据。</p>\n<img src=\"/2024/04/02/Redis%E5%AD%A6%E4%B9%A03%E2%80%94Redis%E5%BA%94%E7%94%A8%E4%B9%8B%E7%BC%93%E5%AD%98/12.png\" class=\"\">\n<p>解决方法：</p>\n<ol>\n<li>参数校验：对不合法的参数请求，直接抛出异常信息给客户端，比如查询的数据库id不能为0，手机格式不正确等。</li>\n<li>缓存无效key：将这些无效的key设置到缓存中，并设置一个较短的过期时间。这种方法可以解决请求的key变化不频繁的情况。</li>\n<li>接口限流。</li>\n<li>布隆过滤器：通过布隆过滤器判断一个给定数据是否存在于海量数据中。具体做法是：把所有可能存在的请求的值都存放在布隆过滤器中，当用户请求过来，先判断用户发来的请求的值是否存在于布隆过滤器中。不存在的话，直接返回请求参数错误信息给客户端，存在的话才会走下面的流程。<img src=\"/2024/04/02/Redis%E5%AD%A6%E4%B9%A03%E2%80%94Redis%E5%BA%94%E7%94%A8%E4%B9%8B%E7%BC%93%E5%AD%98/13.png\" class=\"\"></li>\n</ol>\n<h4 id=\"3-3-缓存击穿\"><a href=\"#3-3-缓存击穿\" class=\"headerlink\" title=\"3.3. 缓存击穿\"></a>3.3. 缓存击穿</h4><p>缓存击穿，指请求的key对应的是热点数据，该数据存在于数据库中，但是不存在于缓存中（通常是因为缓存中的数据已经过期），这就会导致瞬时大量请求直接打到了数据库上，对数据库造成巨大压力。比如秒杀进行过程中，缓存中的某个秒杀商品数据过期，导致瞬时大量对该商品的请求直接落到数据库上，对数据库造成巨大压力。</p>\n<img src=\"/2024/04/02/Redis%E5%AD%A6%E4%B9%A03%E2%80%94Redis%E5%BA%94%E7%94%A8%E4%B9%8B%E7%BC%93%E5%AD%98/14.png\" class=\"\">\n<p>解决方法：</p>\n<ol>\n<li>设置热点数据永不过期或过期时间较长。</li>\n<li>针对热点数据提取预热，将其存入缓存中并设置合理的过期时间。</li>\n<li>请求数据库写数据到缓存之前，先获取互斥锁，保证只有一个请求会落到数据库上，减少数据库的压力。</li>\n</ol>\n<h3 id=\"4-SpringBoot整合Redis实现缓存\"><a href=\"#4-SpringBoot整合Redis实现缓存\" class=\"headerlink\" title=\"4. SpringBoot整合Redis实现缓存\"></a>4. SpringBoot整合Redis实现缓存</h3><h4 id=\"4-1-准备数据库数据\"><a href=\"#4-1-准备数据库数据\" class=\"headerlink\" title=\"4.1. 准备数据库数据\"></a>4.1. 准备数据库数据</h4><p>首先我们创建一个t_user表，并插入几条数据，用于后续的查询：</p>\n<img src=\"/2024/04/02/Redis%E5%AD%A6%E4%B9%A03%E2%80%94Redis%E5%BA%94%E7%94%A8%E4%B9%8B%E7%BC%93%E5%AD%98/15.png\" class=\"\">\n<h4 id=\"4-2-读缓存\"><a href=\"#4-2-读缓存\" class=\"headerlink\" title=\"4.2. 读缓存\"></a>4.2. 读缓存</h4><p>创建User类和对应的UserMapper</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@TableName(value = &quot;t_user&quot;)</span><br><span class=\"hljs-meta\">@Data</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">User</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">Serializable</span> &#123;<br>    <span class=\"hljs-meta\">@TableId(type = IdType.AUTO)</span><br>    <span class=\"hljs-keyword\">private</span> Integer id;<br><br>    <span class=\"hljs-keyword\">private</span> String username;<br><br>    <span class=\"hljs-keyword\">private</span> String password;<br>&#125;<br><br><span class=\"hljs-meta\">@Mapper</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">UserMapper</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">BaseMapper</span>&lt;User&gt; &#123;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>UserService</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Service</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">UserService</span> &#123;<br>    <span class=\"hljs-comment\">// 过期时间</span><br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">long</span> <span class=\"hljs-variable\">ttl</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">100L</span>;<br><br>    <span class=\"hljs-meta\">@Autowired</span><br>    <span class=\"hljs-keyword\">private</span> UserMapper userMapper;<br><br>    <span class=\"hljs-meta\">@Autowired</span><br>    <span class=\"hljs-keyword\">private</span> RedisUtils redisUtils;<br><br>    <span class=\"hljs-keyword\">public</span> User <span class=\"hljs-title function_\">getUserById</span><span class=\"hljs-params\">(Integer id)</span> &#123;<br>        <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">key</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;user:&quot;</span> + id;<br>        <span class=\"hljs-type\">Object</span> <span class=\"hljs-variable\">value</span> <span class=\"hljs-operator\">=</span> redisUtils.getKey(key);<br>        <span class=\"hljs-keyword\">if</span> (value != <span class=\"hljs-literal\">null</span>) &#123;<br>            <span class=\"hljs-comment\">// 缓存中存在该数据</span><br>            <span class=\"hljs-keyword\">return</span> (User) value;<br>        &#125;<br><br>        <span class=\"hljs-comment\">// 缓存中不存在该数据, 从数据库中查询</span><br>        <span class=\"hljs-type\">User</span> <span class=\"hljs-variable\">userFromDB</span> <span class=\"hljs-operator\">=</span> getUserFromDB(id);<br>        <span class=\"hljs-keyword\">if</span> (userFromDB == <span class=\"hljs-literal\">null</span>) &#123;<br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>;<br>        &#125;<br>        redisUtils.addKey(key, userFromDB, ttl);<br>        <span class=\"hljs-keyword\">return</span> userFromDB;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">private</span> User <span class=\"hljs-title function_\">getUserFromDB</span><span class=\"hljs-params\">(Integer id)</span> &#123;<br>        System.out.println(<span class=\"hljs-string\">&quot;从数据库中查询====================&quot;</span>);<br>        <span class=\"hljs-keyword\">return</span> userMapper.selectById(id);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>添加一个测试方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> org.example;<br><br><span class=\"hljs-keyword\">import</span> org.example.pojo.User;<br><span class=\"hljs-keyword\">import</span> org.example.service.UserService;<br><span class=\"hljs-keyword\">import</span> org.junit.jupiter.api.Test;<br><span class=\"hljs-keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class=\"hljs-keyword\">import</span> org.springframework.boot.test.context.SpringBootTest;<br><br><span class=\"hljs-meta\">@SpringBootTest</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">RedisCacheTest</span> &#123;<br>    <span class=\"hljs-meta\">@Autowired</span><br>    <span class=\"hljs-keyword\">private</span> UserService userService;<br><br>    <span class=\"hljs-meta\">@Test</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">testGetUserById</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-type\">User</span> <span class=\"hljs-variable\">userById</span> <span class=\"hljs-operator\">=</span> userService.getUserById(<span class=\"hljs-number\">1</span>);<br>        System.out.println(userById);<br><br>        userById = userService.getUserById(<span class=\"hljs-number\">1</span>);<br>        System.out.println(userById);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>执行测试方法，结果如下：</p>\n<img src=\"/2024/04/02/Redis%E5%AD%A6%E4%B9%A03%E2%80%94Redis%E5%BA%94%E7%94%A8%E4%B9%8B%E7%BC%93%E5%AD%98/16.png\" class=\"\">\n<p>从上述内容中，可以看出，第一次查询时，因为数据不存在于缓存中，所以会查询数据库，第二次查询时，从缓存中查询到数据，直接返回。<br>但是这里涉及到一个序列化的问题，我们通过下载一些redis桌面可视化工具，查看这些数据，发现这些key和value都有一些奇怪的编码，如下图所示：</p>\n<img src=\"/2024/04/02/Redis%E5%AD%A6%E4%B9%A03%E2%80%94Redis%E5%BA%94%E7%94%A8%E4%B9%8B%E7%BC%93%E5%AD%98/17.png\" class=\"\">\n<p>这是因为，默认情况下，redisTemplate使用JDK的序列化器(JdkSerializationRedisSerializer)对存储的对象进行序列哈和反序列化操作，这可能导致序列化结果不可读或占用较多的存储空间。因此，我们需要在配置redisTemplate的时候，设置对应的序列化器，我们修改上一章的RedisConfiguration类，修改结果如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> org.example.config;<br><br><span class=\"hljs-keyword\">import</span> com.fasterxml.jackson.databind.ObjectMapper;<br><span class=\"hljs-keyword\">import</span> org.springframework.context.annotation.Bean;<br><span class=\"hljs-keyword\">import</span> org.springframework.context.annotation.Configuration;<br><span class=\"hljs-keyword\">import</span> org.springframework.data.redis.connection.RedisConnectionFactory;<br><span class=\"hljs-keyword\">import</span> org.springframework.data.redis.core.RedisTemplate;<br><span class=\"hljs-keyword\">import</span> org.springframework.data.redis.serializer.Jackson2JsonRedisSerializer;<br><span class=\"hljs-keyword\">import</span> org.springframework.data.redis.serializer.StringRedisSerializer;<br><br><span class=\"hljs-meta\">@Configuration</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">RedisConfiguration</span> &#123;<br>    <span class=\"hljs-meta\">@Bean</span><br>    <span class=\"hljs-keyword\">public</span> RedisTemplate&lt;String, Object&gt; <span class=\"hljs-title function_\">redisTemplate</span><span class=\"hljs-params\">(RedisConnectionFactory redisConnectionFactory)</span> &#123;<br>        RedisTemplate&lt;String, Object&gt; redisTemplate = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">RedisTemplate</span>&lt;&gt;();<br>        redisTemplate.setConnectionFactory(redisConnectionFactory);<br><br>        <span class=\"hljs-type\">StringRedisSerializer</span> <span class=\"hljs-variable\">stringRedisSerializer</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">StringRedisSerializer</span>();<br>        <span class=\"hljs-type\">Jackson2JsonRedisSerializer</span> <span class=\"hljs-variable\">jackson2JsonRedisSerializer</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Jackson2JsonRedisSerializer</span>(Object.class);<br>        <span class=\"hljs-type\">ObjectMapper</span> <span class=\"hljs-variable\">objectMapper</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ObjectMapper</span>().enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);<br>        jackson2JsonRedisSerializer.setObjectMapper(objectMapper);<br><br>        <span class=\"hljs-comment\">// 设置key的序列化器为StringRedisSerializer</span><br>        redisTemplate.setKeySerializer(stringRedisSerializer);<br>        <span class=\"hljs-comment\">// 设置value的序列化器为Jackson2JsonRedisSerializer</span><br>        redisTemplate.setValueSerializer(jackson2JsonRedisSerializer);<br><br>        <span class=\"hljs-comment\">// 设置hash key的序列化器为StringRedisSerializer</span><br>        redisTemplate.setHashKeySerializer(stringRedisSerializer);<br>        <span class=\"hljs-comment\">// 设置hash value的序列化器为Jackson2JsonRedisSerializer</span><br>        redisTemplate.setHashValueSerializer(jackson2JsonRedisSerializer);<br><br>        <span class=\"hljs-comment\">// 完成其他配置后，初始化RedisTemplate</span><br>        redisTemplate.afterPropertiesSet();<br>        <span class=\"hljs-keyword\">return</span> redisTemplate;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>我们将之前那些key全部删除掉，然后重新运行测试代码，结果如下：</p>\n<img src=\"/2024/04/02/Redis%E5%AD%A6%E4%B9%A03%E2%80%94Redis%E5%BA%94%E7%94%A8%E4%B9%8B%E7%BC%93%E5%AD%98/18.png\" class=\"\">\n<p>通过redis可视化工具，也能清楚地看到每个key和value的结构和信息。</p>\n<img src=\"/2024/04/02/Redis%E5%AD%A6%E4%B9%A03%E2%80%94Redis%E5%BA%94%E7%94%A8%E4%B9%8B%E7%BC%93%E5%AD%98/19.png\" class=\"\">\n<p>上面的代码，存在一些问题，当请求1查询id&#x3D;1的用户，从缓存中查询不到时，会查询数据库，然后将数据更新到数据库，然后请求2查询id&#x3D;1的用户，从缓存中查询到，便直接返回，这是理想的情况。但是，可能请求1查询数据库还没执行完，请求2过来了，此时缓存中没有id&#x3D;1的用户，因此请求2也会去查询数据库。<br>比如我们修改getUserFromDB，加上Thread.sleep(2000)，模拟数据库的查询较慢，然后修改测试代码，模拟多个请求同时查询id&#x3D;1的用户的情况：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Test</span><br> <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">testGetUserById</span><span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">throws</span> ExecutionException, InterruptedException &#123;<br>     <span class=\"hljs-type\">ExecutorService</span> <span class=\"hljs-variable\">executorService</span> <span class=\"hljs-operator\">=</span> Executors.newFixedThreadPool(<span class=\"hljs-number\">2</span>);<br>     Callable&lt;User&gt; getUserTask = () -&gt; userService.getUserById(<span class=\"hljs-number\">1</span>);<br><br>     Future&lt;User&gt; submit1 = executorService.submit(getUserTask);<br>     Future&lt;User&gt; submit2 = executorService.submit(getUserTask);<br>     System.out.println(submit1.get());<br>     System.out.println(submit2.get());<br> &#125;<br></code></pre></td></tr></table></figure>\n<p>此时再次执行测试代码，结果如下：</p>\n<img src=\"/2024/04/02/Redis%E5%AD%A6%E4%B9%A03%E2%80%94Redis%E5%BA%94%E7%94%A8%E4%B9%8B%E7%BC%93%E5%AD%98/20.png\" class=\"\">\n<p>解决上面的情况，方式就是加锁，我们修改UserService的代码如下,这里通过synchronized加锁，然后锁的对象使用key，这样可以将锁的粒度缩小一点。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> User <span class=\"hljs-title function_\">getUserById</span><span class=\"hljs-params\">(Integer id)</span> &#123;<br>       <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">key</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;user:&quot;</span> + id;<br>       <span class=\"hljs-type\">Object</span> <span class=\"hljs-variable\">value</span> <span class=\"hljs-operator\">=</span> redisUtils.getKey(key);<br>       <span class=\"hljs-keyword\">if</span> (value != <span class=\"hljs-literal\">null</span>) &#123;<br>           <span class=\"hljs-comment\">// 缓存中存在该数据</span><br>           <span class=\"hljs-keyword\">return</span> (User) value;<br>       &#125;<br><br>       <span class=\"hljs-type\">User</span> <span class=\"hljs-variable\">userFromDB</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-literal\">null</span>;<br>       <span class=\"hljs-keyword\">synchronized</span> (key.intern()) &#123;<br>           <span class=\"hljs-comment\">// 再次查询缓存</span><br>           value = redisUtils.getKey(key);<br>           <span class=\"hljs-keyword\">if</span> (value != <span class=\"hljs-literal\">null</span>) &#123;<br>               <span class=\"hljs-keyword\">return</span> (User) value;<br>           &#125;<br><br>           <span class=\"hljs-comment\">// 缓存中不存在该数据, 从数据库中查询</span><br>           userFromDB = getUserFromDB(id);<br>           <span class=\"hljs-keyword\">if</span> (userFromDB == <span class=\"hljs-literal\">null</span>) &#123;<br>               <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>;<br>           &#125;<br>           redisUtils.addKey(key, userFromDB, ttl);<br>       &#125;<br>       <span class=\"hljs-keyword\">return</span> userFromDB;<br>   &#125;<br><br>   <span class=\"hljs-keyword\">private</span> User <span class=\"hljs-title function_\">getUserFromDB</span><span class=\"hljs-params\">(Integer id)</span> &#123;<br>       <span class=\"hljs-keyword\">try</span> &#123;<br>           Thread.sleep(<span class=\"hljs-number\">2000</span>);<br>       &#125; <span class=\"hljs-keyword\">catch</span> (Exception e) &#123;<br>           e.printStackTrace();<br>       &#125;<br>       System.out.println(<span class=\"hljs-string\">&quot;从数据库中查询====================&quot;</span>);<br>       <span class=\"hljs-keyword\">return</span> userMapper.selectById(id);<br>   &#125;<br></code></pre></td></tr></table></figure>\n<p>重新运行测试方法，结果如下：</p>\n<img src=\"/2024/04/02/Redis%E5%AD%A6%E4%B9%A03%E2%80%94Redis%E5%BA%94%E7%94%A8%E4%B9%8B%E7%BC%93%E5%AD%98/21.png\" class=\"\">\n<p>通过加锁，可以解决被访问多次的情况，但是这样的锁有一个问题，这个锁，只适用于单机的情况，当我们的服务部署在多台服务器上时，这些服务器上的应用，对应的JVM都不同，因此锁住的，不是同一个对象，后续会单独对分布式锁进行讲解，这里先不予讨论。</p>\n<h4 id=\"4-3-更新缓存\"><a href=\"#4-3-更新缓存\" class=\"headerlink\" title=\"4.3. 更新缓存\"></a>4.3. 更新缓存</h4><p>修改userService，添加修改用户的方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">updateUser</span><span class=\"hljs-params\">(UpdateUserRequest updateUserRequest)</span> &#123;<br>       <span class=\"hljs-keyword\">if</span> (updateUserRequest.getId() == <span class=\"hljs-literal\">null</span>) &#123;<br>           <span class=\"hljs-keyword\">return</span>;<br>       &#125;<br>       <span class=\"hljs-type\">User</span> <span class=\"hljs-variable\">user</span> <span class=\"hljs-operator\">=</span> getUserById(updateUserRequest.getId());<br>       <span class=\"hljs-keyword\">if</span> (user == <span class=\"hljs-literal\">null</span>) &#123;<br>           <span class=\"hljs-keyword\">return</span>;<br>       &#125;<br>       <span class=\"hljs-keyword\">if</span> (StringUtils.isNotEmpty(updateUserRequest.getUsername())) &#123;<br>           user.setUsername(updateUserRequest.getUsername());<br>       &#125;<br>       <span class=\"hljs-keyword\">if</span> (StringUtils.isNotEmpty(updateUserRequest.getPassword())) &#123;<br>           user.setPassword(updateUserRequest.getPassword());<br>       &#125;<br>       <span class=\"hljs-comment\">// 先更新数据库</span><br>       <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">updateResult</span> <span class=\"hljs-operator\">=</span> userMapper.updateById(user);<br>       <span class=\"hljs-keyword\">if</span> (updateResult == <span class=\"hljs-number\">1</span>) &#123;<br>           <span class=\"hljs-comment\">// 更新成功，删除缓存</span><br>           redisUtils.removeKey(<span class=\"hljs-string\">&quot;user:&quot;</span> + updateUserRequest.getId());<br>       &#125;<br>   &#125;<br></code></pre></td></tr></table></figure>\n<p>添加测试方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Test</span><br>   <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">testUpdateUser</span><span class=\"hljs-params\">()</span> &#123;<br>       <span class=\"hljs-type\">UpdateUserRequest</span> <span class=\"hljs-variable\">updateUserRequest</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">UpdateUserRequest</span>();<br>       updateUserRequest.setId(<span class=\"hljs-number\">1</span>);<br>       updateUserRequest.setPassword(<span class=\"hljs-string\">&quot;12345&quot;</span>);<br>       userService.updateUser(updateUserRequest);<br><br>       <span class=\"hljs-type\">User</span> <span class=\"hljs-variable\">userById</span> <span class=\"hljs-operator\">=</span> userService.getUserById(<span class=\"hljs-number\">1</span>);<br>       System.out.println(userById);<br>   &#125;<br></code></pre></td></tr></table></figure>\n<p>测试结果如下</p>\n<img src=\"/2024/04/02/Redis%E5%AD%A6%E4%B9%A03%E2%80%94Redis%E5%BA%94%E7%94%A8%E4%B9%8B%E7%BC%93%E5%AD%98/22.png\" class=\"\">\n<h3 id=\"5-SpringBoot整合SpringCache-Redis\"><a href=\"#5-SpringBoot整合SpringCache-Redis\" class=\"headerlink\" title=\"5. SpringBoot整合SpringCache+Redis\"></a>5. SpringBoot整合SpringCache+Redis</h3><p>在上面的代码中，我们发现，和Redis查询的操作，和我们的业务代码糅合在一起， 不方便进行处理，如果后续我们缓存服务器从Redis改为其他缓存服务器，需要修改多处代码，不利于项目的扩展和维护。<br>SpringCache框架是Spring框架提供的一套基于注解的缓存解决方案，在应用程序中简化了缓存操作的管理和使用。它通过在方法上添加缓存注解，来实现自动缓存的功能，其常用注解有：<br>1）@Cacheable: 表示该方法返回结果可以被缓存，当方法被调用时，先检查缓存，如果缓存命中，直接返回缓存中的结果，不再执行方法体中的逻辑。<br>2） @CachePut：表示该方法的返回结果需要更新缓存，每次方法被调用后，都会将返回结果更新到缓存中。<br>3）@CacheEvit：表示该方法会清除缓存中的数据，可以用于在更新或删除数据时清除相应的缓存。</p>\n<h4 id=\"5-1-整合SpringCache\"><a href=\"#5-1-整合SpringCache\" class=\"headerlink\" title=\"5.1. 整合SpringCache\"></a>5.1. 整合SpringCache</h4><p>添加Spring Cache的依赖</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span><br>\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span><br>\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>spring-boot-starter-cache<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<p>在启动类上加上注解开启缓存</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@SpringBootApplication</span><br><span class=\"hljs-meta\">@EnableCaching</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">RedisApp</span> &#123;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> &#123;<br>        SpringApplication.run(RedisApp.class, args);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h4 id=\"5-2-测试Cacheable和CacheEvict\"><a href=\"#5-2-测试Cacheable和CacheEvict\" class=\"headerlink\" title=\"5.2. 测试Cacheable和CacheEvict\"></a>5.2. 测试Cacheable和CacheEvict</h4><p>我们在userService类上，加上两个方法，用于测试Cacheable和CacheEvit注解。<br>添加getUserById2方法，该方法中的逻辑为查询数据库操作</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Cacheable(value = &quot;user&quot;, key = &quot;#id&quot;)</span><br>  <span class=\"hljs-keyword\">public</span> User <span class=\"hljs-title function_\">getUserById2</span><span class=\"hljs-params\">(Integer id)</span> &#123;<br>      System.out.println(<span class=\"hljs-string\">&quot;从数据库中查询==============&quot;</span>);<br>      <span class=\"hljs-keyword\">return</span> userMapper.selectById(id);<br>  &#125;<br></code></pre></td></tr></table></figure>\n<p>然后添加一个测试方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Autowired</span><br>   <span class=\"hljs-keyword\">private</span> UserService userService;<br><br>   <span class=\"hljs-meta\">@Test</span><br>   <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">testGetUserById</span><span class=\"hljs-params\">()</span> &#123;<br>       System.out.println(userService.getUserById2(<span class=\"hljs-number\">1</span>));<br>       System.out.println(userService.getUserById2(<span class=\"hljs-number\">1</span>));<br>   &#125;<br></code></pre></td></tr></table></figure>\n<p>测试结果如下，第一次查询时，查询数据库，第二次直接查询缓存。</p>\n<img src=\"/2024/04/02/Redis%E5%AD%A6%E4%B9%A03%E2%80%94Redis%E5%BA%94%E7%94%A8%E4%B9%8B%E7%BC%93%E5%AD%98/23.png\" class=\"\">\n<p>然后我们查看reids缓存，发现这个key的值是user::1，这个和我们之前定义的不太相同，而且没有过期时间，除此之外，这个value的值，序列化有问题</p>\n<img src=\"/2024/04/02/Redis%E5%AD%A6%E4%B9%A03%E2%80%94Redis%E5%BA%94%E7%94%A8%E4%B9%8B%E7%BC%93%E5%AD%98/24.png\" class=\"\">\n<p>我们修改RedisConfiguration，添加RedisCacheConfiguration的相关配置</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> org.example.config;<br><br><span class=\"hljs-keyword\">import</span> com.fasterxml.jackson.databind.ObjectMapper;<br><span class=\"hljs-keyword\">import</span> org.springframework.context.annotation.Bean;<br><span class=\"hljs-keyword\">import</span> org.springframework.context.annotation.Configuration;<br><span class=\"hljs-keyword\">import</span> org.springframework.data.redis.cache.RedisCacheConfiguration;<br><span class=\"hljs-keyword\">import</span> org.springframework.data.redis.connection.RedisConnectionFactory;<br><span class=\"hljs-keyword\">import</span> org.springframework.data.redis.core.RedisTemplate;<br><span class=\"hljs-keyword\">import</span> org.springframework.data.redis.serializer.Jackson2JsonRedisSerializer;<br><span class=\"hljs-keyword\">import</span> org.springframework.data.redis.serializer.RedisSerializationContext;<br><span class=\"hljs-keyword\">import</span> org.springframework.data.redis.serializer.StringRedisSerializer;<br><br><span class=\"hljs-keyword\">import</span> java.time.Duration;<br><br><span class=\"hljs-meta\">@Configuration</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">RedisConfiguration</span> &#123;<br>    <span class=\"hljs-meta\">@Bean</span><br>    <span class=\"hljs-keyword\">public</span> RedisTemplate&lt;String, Object&gt; <span class=\"hljs-title function_\">redisTemplate</span><span class=\"hljs-params\">(RedisConnectionFactory redisConnectionFactory)</span> &#123;<br>        RedisTemplate&lt;String, Object&gt; redisTemplate = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">RedisTemplate</span>&lt;&gt;();<br>        redisTemplate.setConnectionFactory(redisConnectionFactory);<br><br>        <span class=\"hljs-type\">StringRedisSerializer</span> <span class=\"hljs-variable\">stringRedisSerializer</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">StringRedisSerializer</span>();<br>        <span class=\"hljs-type\">Jackson2JsonRedisSerializer</span> <span class=\"hljs-variable\">jackson2JsonRedisSerializer</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Jackson2JsonRedisSerializer</span>(Object.class);<br>        <span class=\"hljs-type\">ObjectMapper</span> <span class=\"hljs-variable\">objectMapper</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ObjectMapper</span>().enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);<br>        jackson2JsonRedisSerializer.setObjectMapper(objectMapper);<br><br>        <span class=\"hljs-comment\">// 设置key的序列化器为StringRedisSerializer</span><br>        redisTemplate.setKeySerializer(stringRedisSerializer);<br>        <span class=\"hljs-comment\">// 设置value的序列化器为Jackson2JsonRedisSerializer</span><br>        redisTemplate.setValueSerializer(jackson2JsonRedisSerializer);<br><br>        <span class=\"hljs-comment\">// 设置hash key的序列化器为StringRedisSerializer</span><br>        redisTemplate.setHashKeySerializer(stringRedisSerializer);<br>        <span class=\"hljs-comment\">// 设置hash value的序列化器为Jackson2JsonRedisSerializer</span><br>        redisTemplate.setHashValueSerializer(jackson2JsonRedisSerializer);<br><br>        <span class=\"hljs-comment\">// 完成其他配置后，初始化RedisTemplate</span><br>        redisTemplate.afterPropertiesSet();<br>        <span class=\"hljs-keyword\">return</span> redisTemplate;<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Bean</span><br>    <span class=\"hljs-keyword\">public</span> RedisCacheConfiguration <span class=\"hljs-title function_\">redisCacheConfiguration</span><span class=\"hljs-params\">()</span>&#123;<br>        <span class=\"hljs-type\">Jackson2JsonRedisSerializer</span> <span class=\"hljs-variable\">jackson2JsonRedisSerializer</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Jackson2JsonRedisSerializer</span>(Object.class);<br>        <span class=\"hljs-type\">ObjectMapper</span> <span class=\"hljs-variable\">objectMapper</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ObjectMapper</span>().enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);<br>        jackson2JsonRedisSerializer.setObjectMapper(objectMapper);<br><br>        <span class=\"hljs-comment\">//相当于new了一个RedisCacheConfiguration</span><br>        <span class=\"hljs-type\">RedisCacheConfiguration</span>  <span class=\"hljs-variable\">configuration</span> <span class=\"hljs-operator\">=</span> RedisCacheConfiguration.defaultCacheConfig();<br>        configuration = configuration.serializeValuesWith<br>                <span class=\"hljs-comment\">// 指定value序列化器</span><br>                        (RedisSerializationContext.SerializationPair.fromSerializer(jackson2JsonRedisSerializer))<br>                <span class=\"hljs-comment\">// 指定 key的TTL</span><br>                .entryTtl(Duration.ofSeconds(<span class=\"hljs-number\">100</span>))<br>                <span class=\"hljs-comment\">// 指定前缀</span><br>                .prefixCacheNameWith(<span class=\"hljs-string\">&quot;user::&quot;</span>);<br>        <span class=\"hljs-keyword\">return</span> configuration;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>删除原先的缓存，然后重新运行测试代码，然后查看缓存信息，结果如下：</p>\n<img src=\"/2024/04/02/Redis%E5%AD%A6%E4%B9%A03%E2%80%94Redis%E5%BA%94%E7%94%A8%E4%B9%8B%E7%BC%93%E5%AD%98/25.png\" class=\"\">\n<p>此时过期时间和序列化均设置成功。但这样配置还有一些问题，通过这种全局配置，所有cache key的TTL都一样，实际开发中，不同的cache key可能需要的TTL都不同，我们修改RedisConfiguration，为不同的key配置上不同的过期时间</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> org.example.config;<br><br><span class=\"hljs-keyword\">import</span> com.fasterxml.jackson.databind.ObjectMapper;<br><span class=\"hljs-keyword\">import</span> org.springframework.boot.autoconfigure.cache.RedisCacheManagerBuilderCustomizer;<br><span class=\"hljs-keyword\">import</span> org.springframework.context.annotation.Bean;<br><span class=\"hljs-keyword\">import</span> org.springframework.context.annotation.Configuration;<br><span class=\"hljs-keyword\">import</span> org.springframework.data.redis.cache.RedisCacheConfiguration;<br><span class=\"hljs-keyword\">import</span> org.springframework.data.redis.connection.RedisConnectionFactory;<br><span class=\"hljs-keyword\">import</span> org.springframework.data.redis.core.RedisTemplate;<br><span class=\"hljs-keyword\">import</span> org.springframework.data.redis.serializer.Jackson2JsonRedisSerializer;<br><span class=\"hljs-keyword\">import</span> org.springframework.data.redis.serializer.RedisSerializationContext;<br><span class=\"hljs-keyword\">import</span> org.springframework.data.redis.serializer.StringRedisSerializer;<br><br><span class=\"hljs-keyword\">import</span> java.time.Duration;<br><span class=\"hljs-keyword\">import</span> java.util.HashMap;<br><span class=\"hljs-keyword\">import</span> java.util.Map;<br><br><span class=\"hljs-meta\">@Configuration</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">RedisConfiguration</span> &#123;<br>    <span class=\"hljs-meta\">@Bean</span><br>    <span class=\"hljs-keyword\">public</span> RedisTemplate&lt;String, Object&gt; <span class=\"hljs-title function_\">redisTemplate</span><span class=\"hljs-params\">(RedisConnectionFactory redisConnectionFactory)</span> &#123;<br>        RedisTemplate&lt;String, Object&gt; redisTemplate = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">RedisTemplate</span>&lt;&gt;();<br>        redisTemplate.setConnectionFactory(redisConnectionFactory);<br><br>        <span class=\"hljs-type\">StringRedisSerializer</span> <span class=\"hljs-variable\">stringRedisSerializer</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">StringRedisSerializer</span>();<br>        <span class=\"hljs-type\">Jackson2JsonRedisSerializer</span> <span class=\"hljs-variable\">jackson2JsonRedisSerializer</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Jackson2JsonRedisSerializer</span>(Object.class);<br>        <span class=\"hljs-type\">ObjectMapper</span> <span class=\"hljs-variable\">objectMapper</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ObjectMapper</span>().enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);<br>        jackson2JsonRedisSerializer.setObjectMapper(objectMapper);<br><br>        <span class=\"hljs-comment\">// 设置key的序列化器为StringRedisSerializer</span><br>        redisTemplate.setKeySerializer(stringRedisSerializer);<br>        <span class=\"hljs-comment\">// 设置value的序列化器为Jackson2JsonRedisSerializer</span><br>        redisTemplate.setValueSerializer(jackson2JsonRedisSerializer);<br><br>        <span class=\"hljs-comment\">// 设置hash key的序列化器为StringRedisSerializer</span><br>        redisTemplate.setHashKeySerializer(stringRedisSerializer);<br>        <span class=\"hljs-comment\">// 设置hash value的序列化器为Jackson2JsonRedisSerializer</span><br>        redisTemplate.setHashValueSerializer(jackson2JsonRedisSerializer);<br><br>        <span class=\"hljs-comment\">// 完成其他配置后，初始化RedisTemplate</span><br>        redisTemplate.afterPropertiesSet();<br>        <span class=\"hljs-keyword\">return</span> redisTemplate;<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Bean</span><br>    <span class=\"hljs-keyword\">public</span> RedisCacheManagerBuilderCustomizer <span class=\"hljs-title function_\">redisCacheManagerBuilderCustomizer</span><span class=\"hljs-params\">()</span> &#123;<br>        Jackson2JsonRedisSerializer&lt;Object&gt; jackson2JsonRedisSerializer = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Jackson2JsonRedisSerializer</span>&lt;&gt;(Object.class);<br>        <span class=\"hljs-type\">ObjectMapper</span> <span class=\"hljs-variable\">objectMapper</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ObjectMapper</span>().enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);<br>        jackson2JsonRedisSerializer.setObjectMapper(objectMapper);<br><br>        <span class=\"hljs-keyword\">return</span> (builder) -&gt; &#123;<br>            Map&lt;String, RedisCacheConfiguration&gt; cacheConfigurations = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">HashMap</span>&lt;&gt;();<br><br>            cacheConfigurations.put(<span class=\"hljs-string\">&quot;user&quot;</span>,<br>                    RedisCacheConfiguration.defaultCacheConfig()<br>                            .entryTtl(Duration.ofSeconds(<span class=\"hljs-number\">60</span>))<br>                            .serializeValuesWith(RedisSerializationContext.SerializationPair.fromSerializer(jackson2JsonRedisSerializer)));<br><br>            cacheConfigurations.put(<span class=\"hljs-string\">&quot;product&quot;</span>,<br>                    RedisCacheConfiguration.defaultCacheConfig()<br>                            .entryTtl(Duration.ofSeconds(<span class=\"hljs-number\">120</span>))<br>                            .serializeValuesWith(RedisSerializationContext.SerializationPair.fromSerializer(jackson2JsonRedisSerializer)));<br><br>            builder.withInitialCacheConfigurations(cacheConfigurations);<br>        &#125;;<br>    &#125;<br>    <br>&#125;<br></code></pre></td></tr></table></figure>\n<p>运行结果如下：</p>\n<img src=\"/2024/04/02/Redis%E5%AD%A6%E4%B9%A03%E2%80%94Redis%E5%BA%94%E7%94%A8%E4%B9%8B%E7%BC%93%E5%AD%98/26.png\" class=\"\">\n<p>接着，我们测试CacheEvict，首先在userService中添加一个更新方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@CacheEvict(value = &quot;user&quot;, key = &quot;#updateUserRequest.id&quot;)</span><br>  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">updateUser2</span><span class=\"hljs-params\">(UpdateUserRequest updateUserRequest)</span> &#123;<br>      <span class=\"hljs-keyword\">if</span> (updateUserRequest.getId() == <span class=\"hljs-literal\">null</span>) &#123;<br>          <span class=\"hljs-keyword\">return</span>;<br>      &#125;<br>      <span class=\"hljs-type\">User</span> <span class=\"hljs-variable\">user</span> <span class=\"hljs-operator\">=</span> getUserById2(updateUserRequest.getId());<br>      <span class=\"hljs-keyword\">if</span> (user == <span class=\"hljs-literal\">null</span>) &#123;<br>          <span class=\"hljs-keyword\">return</span>;<br>      &#125;<br>      <span class=\"hljs-keyword\">if</span> (StringUtils.isNotEmpty(updateUserRequest.getUsername())) &#123;<br>          user.setUsername(updateUserRequest.getUsername());<br>      &#125;<br>      <span class=\"hljs-keyword\">if</span> (StringUtils.isNotEmpty(updateUserRequest.getPassword())) &#123;<br>          user.setPassword(updateUserRequest.getPassword());<br>      &#125;<br>      <span class=\"hljs-comment\">// 先更新数据库</span><br>      userMapper.updateById(user);<br>  &#125;<br></code></pre></td></tr></table></figure>\n<p>然后添加测试方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Test</span><br>   <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">testUpdateUser</span><span class=\"hljs-params\">()</span> &#123;<br>       <span class=\"hljs-type\">UpdateUserRequest</span> <span class=\"hljs-variable\">updateUserRequest</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">UpdateUserRequest</span>();<br>       updateUserRequest.setId(<span class=\"hljs-number\">1</span>);<br>       updateUserRequest.setPassword(<span class=\"hljs-string\">&quot;123456&quot;</span>);<br>       userService.updateUser2(updateUserRequest);<br>   &#125;<br></code></pre></td></tr></table></figure>\n<p>运行该测试方法，然后去看对应的redis缓存，发现更新成功后，该缓存被删除掉，说明CacheEvict生效</p>\n<img src=\"/2024/04/02/Redis%E5%AD%A6%E4%B9%A03%E2%80%94Redis%E5%BA%94%E7%94%A8%E4%B9%8B%E7%BC%93%E5%AD%98/27.png\" class=\"\">"},{"title":"MongoDB学习1—MongoDB简介","date":"2024-04-03T05:58:36.000Z","_content":"### 1. MongoDB介绍\n#### 1.1. 什么是MongoDB\nMongoDB是由C++语言编写的，是一个基于分布式文件存储的开源数据库系统，旨在为WEB应用提供可扩展的高性能数据存储解决方案。它将数据存储为一个文档，数据结构由键值(key=>value）对组成，MongoDB文档类似于JSON对象，字段值可以包含其他文档，数组即文档数组。\n{% asset_img 1.png %}\n#### 1.2. 特点\nMongoDB具有以下特点：\n1) 文档导向： MongoDB使用文档导向的数据模型，数据以文档的形式存储，类似于JSON对象。文档是一个键值对的集合，支持嵌套结构和动态模式。\n2) 灵活的模式： MongoDB是一个无模式（Schemaless）数据库，意味着不需要预定义模式和表结构。每个文档可以具有不同的字段和结构，这使得数据模型更加灵活，适用于各种类型的数据。\n3) 分布式存储： MongoDB可以在多个服务器上进行部署，实现数据的分布式存储和横向扩展。它支持副本集（Replica Set）和分片集群（Sharded Cluster），提供高可用性和可伸缩性。\n4) 丰富的查询语言： MongoDB提供了丰富的查询功能，支持灵活的条件查询、范围查询、正则表达式、聚合管道等。它还支持地理空间查询和文本搜索等特殊类型的查询。\n5) 支持事务： MongoDB从版本4.0开始支持事务，可以在单个文档或多个文档上执行原子性的读写操作。事务能够确保数据的一致性和完整性，适用于复杂的数据操作场景。\n\n#### 1.3. MongoDB的应用\nMongoDB在许多应用场景中具有广泛的应用，以下是一些常见的MongoDB应用场景：\n1) 实时分析和大数据处理： MongoDB适用于实时数据分析和大数据处理场景。它可以存储和处理大量的非结构化或半结构化数据，支持高并发读写操作和复杂的聚合查询。这使得它成为处理实时数据、日志分析和数据挖掘等任务的理想选择。\n2) 内容管理系统（CMS）： MongoDB可以用作内容管理系统的后端数据库。它的灵活的数据模型和无模式特性使得存储和管理各种类型的内容（如文章、页面、多媒体文件等）变得简单。此外，MongoDB的高性能和可扩展性能够满足CMS的需求。\n3) 物联网（IoT）应用： MongoDB适用于物联网应用，用于存储和处理大量的传感器数据和设备数据。它可以轻松地处理大规模的时间序列数据，支持地理空间查询和实时数据分析，使得物联网应用的数据管理和分析更加便捷。\n4) 实时应用和实时通信： MongoDB的低延迟和高吞吐量使其适用于实时应用和实时通信场景。它可以存储和处理实时产生的数据，如聊天消息、实时推送、实时游戏数据等。MongoDB的副本集和分片集群提供了高可用性和可伸缩性，确保实时应用的稳定性和性能。\n5) 目录和目标存储： MongoDB可以用作目录和目标存储，用于存储和管理大量的结构化和非结构化数据。它的灵活的数据模型和强大的查询功能使得存储和检索数据变得更高效和便捷。\n6) 用户数据和个性化推荐： MongoDB可以存储和管理用户数据，如用户配置、偏好设置、历史记录等。它可以用于个性化推荐系统，根据用户的行为和偏好提供个性化的推荐内容。\n\n### 2. MongoDB安装和启动\nwindows下载地址：https://www.mongodb.com/try/download/community\n下载完毕后，安装过程中，一路next就可以，如果不想放到C盘，在下面这一步选择想要存放的位置，其余的next就可以了。\n{% asset_img 2.png %}\n安装完毕后，在MongoDB目录的bin目录下，执行mongod.exe文件，启动mongodb。\n启动完毕后，可以访问http://localhost:27017，出现下面内容，说明启动成功\n{% asset_img 3.png %}\n### 3. MongoDB概念\n在MongoDB中，基本的概念是文档、集合、数据库，如下表所示：\n|SQL术语概念\t|MongoDB术语概念\t|解释|\n|--|--|--|\n|database\t|database\t|数据库|\n|table\t|collection\t|数据库表/集合|\n|row\t|document\t|数据库行/文档|\n|column\t|field\t|数据库字段/域|\n|index\t|index\t|索引|\n|table joins|\t|\t表连接,MongoDB不支持|\n|primary key|\tprimary key|主键，MongoDB自动将_id字段设置为主键|\n\n#### 3.1. 数据库\n一个mongodb中可以创建多个数据库，默认数据库为\"db\"，数据库的命名有以下要求：\n1）不能是空字符串(\"\")\n2）不得含有''(空格)、.、$、/、和\\0（空字符）\n3）应全部小写\n4）最多64字节\n有一些数据库名是保留的，可以直接访问这些有特殊作用的数据库：\n1）admin：从权限的角度来看，这生\"root\"数据库，要是将一个用户添加到这个数据库，这个用户自动继承所有数据库的权限，一些特定的服务器端命令也智能从这个数据库运行，比如列出所有的数据库或者关闭服务器。\n2）local：这个数据永远不会被复制，可以用来存储于本地单台服务器的任何集合\n3）config：当Mongo用于分片设置时，config数据库在内部使用，用于保存分片的相关信息。\n#### 3.2. 文档（Document）\n文档是一组键值(key-value)对，但MongoDB的文档不需要设置相同的字段，并且相同字段不需要相同的数据类型，这与关系型数据库有很大区别，也是MongoDB非常突出的特点。\n需要注意的是：\n1. 文档中的键/值对是有序的。\n2. 文档中的值不仅可以是在双引号里面的字符串，还可以是其他几种数据类型（甚至可以是整个嵌入的文档)。\n3. MongoDB区分类型和大小写。\n4. MongoDB的文档不能有重复的键。\n5. 文档的键是字符串。除了少数例外情况，键可以使用任意UTF-8字符。\n\n#### 3.3. 集合\n集合就是MongoDB文档组，类似于RDBMS（关系数据库管理系统:Relational Database Management System)中的表格。\n集合存在于数据库中，集合没有固定的结构，这意味着你在对集合可以插入不同格式和类型的数据，但通常情况下我们插入集合的数据库都会有一定的关联性。\n\n#### 3.4. MongoDB数据类型：\n下表是MongoDB中常用的数据类型：\n|数据类型\t|描述|\n|--|--|\n|String \t|字符串。 存储数据常用的数据类型。在 MongoDB 中，UTF-8 编码的字符串才是合法的。|\n|Integer \t |整型数值。用于存储数值。根据你所采用的服务器，可分为 32 位或 64 位。 |\n|Boolean\t|布尔值。用于存储布尔值（真/假）。|\n|Double \t|双精度浮点值。用于存储浮点值。|\n|Min/Max keys\t   | 将一个值与 BSON（二进制的 JSON）元素的最低值和最高值相对比。 Array 用于将数组或列表或多个值存储为一个键。 |\n|Timestamp\t |时间戳。记录文档修改或添加的具体时间。 |\n|Object\t|用于内嵌文档。|\n|Null\t|用于创建空值。|\n|Symbol\t  |符号。该数据类型基本上等同于字符串类型，但不同的是，它一般用于采用特殊符号类型的语言。|\n|Date\t|日期时间。用 UNIX 时间格式来存储当前日期或时间。你可以指定自己的日期时间：创建 Date 对象，传入年月日信息。|\n|Object ID \t|对象 ID。用于创建文档的 ID。 |\n|Binary Data\t |二进制数据。 用于存储二进制数据。|\n|Code\t |代码类型。用于在文档中存储 JavaScript 代码。|\n|Regular expression \t|正则表达式类型。用于存储正则表达式。 |\n","source":"_posts/MongoDB学习1—MongoDB简介.md","raw":"---\ntitle: MongoDB学习1—MongoDB简介\ndate: 2024-04-03 13:58:36\ntags:\n    - 中间件\n    - MongoDB\n---\n### 1. MongoDB介绍\n#### 1.1. 什么是MongoDB\nMongoDB是由C++语言编写的，是一个基于分布式文件存储的开源数据库系统，旨在为WEB应用提供可扩展的高性能数据存储解决方案。它将数据存储为一个文档，数据结构由键值(key=>value）对组成，MongoDB文档类似于JSON对象，字段值可以包含其他文档，数组即文档数组。\n{% asset_img 1.png %}\n#### 1.2. 特点\nMongoDB具有以下特点：\n1) 文档导向： MongoDB使用文档导向的数据模型，数据以文档的形式存储，类似于JSON对象。文档是一个键值对的集合，支持嵌套结构和动态模式。\n2) 灵活的模式： MongoDB是一个无模式（Schemaless）数据库，意味着不需要预定义模式和表结构。每个文档可以具有不同的字段和结构，这使得数据模型更加灵活，适用于各种类型的数据。\n3) 分布式存储： MongoDB可以在多个服务器上进行部署，实现数据的分布式存储和横向扩展。它支持副本集（Replica Set）和分片集群（Sharded Cluster），提供高可用性和可伸缩性。\n4) 丰富的查询语言： MongoDB提供了丰富的查询功能，支持灵活的条件查询、范围查询、正则表达式、聚合管道等。它还支持地理空间查询和文本搜索等特殊类型的查询。\n5) 支持事务： MongoDB从版本4.0开始支持事务，可以在单个文档或多个文档上执行原子性的读写操作。事务能够确保数据的一致性和完整性，适用于复杂的数据操作场景。\n\n#### 1.3. MongoDB的应用\nMongoDB在许多应用场景中具有广泛的应用，以下是一些常见的MongoDB应用场景：\n1) 实时分析和大数据处理： MongoDB适用于实时数据分析和大数据处理场景。它可以存储和处理大量的非结构化或半结构化数据，支持高并发读写操作和复杂的聚合查询。这使得它成为处理实时数据、日志分析和数据挖掘等任务的理想选择。\n2) 内容管理系统（CMS）： MongoDB可以用作内容管理系统的后端数据库。它的灵活的数据模型和无模式特性使得存储和管理各种类型的内容（如文章、页面、多媒体文件等）变得简单。此外，MongoDB的高性能和可扩展性能够满足CMS的需求。\n3) 物联网（IoT）应用： MongoDB适用于物联网应用，用于存储和处理大量的传感器数据和设备数据。它可以轻松地处理大规模的时间序列数据，支持地理空间查询和实时数据分析，使得物联网应用的数据管理和分析更加便捷。\n4) 实时应用和实时通信： MongoDB的低延迟和高吞吐量使其适用于实时应用和实时通信场景。它可以存储和处理实时产生的数据，如聊天消息、实时推送、实时游戏数据等。MongoDB的副本集和分片集群提供了高可用性和可伸缩性，确保实时应用的稳定性和性能。\n5) 目录和目标存储： MongoDB可以用作目录和目标存储，用于存储和管理大量的结构化和非结构化数据。它的灵活的数据模型和强大的查询功能使得存储和检索数据变得更高效和便捷。\n6) 用户数据和个性化推荐： MongoDB可以存储和管理用户数据，如用户配置、偏好设置、历史记录等。它可以用于个性化推荐系统，根据用户的行为和偏好提供个性化的推荐内容。\n\n### 2. MongoDB安装和启动\nwindows下载地址：https://www.mongodb.com/try/download/community\n下载完毕后，安装过程中，一路next就可以，如果不想放到C盘，在下面这一步选择想要存放的位置，其余的next就可以了。\n{% asset_img 2.png %}\n安装完毕后，在MongoDB目录的bin目录下，执行mongod.exe文件，启动mongodb。\n启动完毕后，可以访问http://localhost:27017，出现下面内容，说明启动成功\n{% asset_img 3.png %}\n### 3. MongoDB概念\n在MongoDB中，基本的概念是文档、集合、数据库，如下表所示：\n|SQL术语概念\t|MongoDB术语概念\t|解释|\n|--|--|--|\n|database\t|database\t|数据库|\n|table\t|collection\t|数据库表/集合|\n|row\t|document\t|数据库行/文档|\n|column\t|field\t|数据库字段/域|\n|index\t|index\t|索引|\n|table joins|\t|\t表连接,MongoDB不支持|\n|primary key|\tprimary key|主键，MongoDB自动将_id字段设置为主键|\n\n#### 3.1. 数据库\n一个mongodb中可以创建多个数据库，默认数据库为\"db\"，数据库的命名有以下要求：\n1）不能是空字符串(\"\")\n2）不得含有''(空格)、.、$、/、和\\0（空字符）\n3）应全部小写\n4）最多64字节\n有一些数据库名是保留的，可以直接访问这些有特殊作用的数据库：\n1）admin：从权限的角度来看，这生\"root\"数据库，要是将一个用户添加到这个数据库，这个用户自动继承所有数据库的权限，一些特定的服务器端命令也智能从这个数据库运行，比如列出所有的数据库或者关闭服务器。\n2）local：这个数据永远不会被复制，可以用来存储于本地单台服务器的任何集合\n3）config：当Mongo用于分片设置时，config数据库在内部使用，用于保存分片的相关信息。\n#### 3.2. 文档（Document）\n文档是一组键值(key-value)对，但MongoDB的文档不需要设置相同的字段，并且相同字段不需要相同的数据类型，这与关系型数据库有很大区别，也是MongoDB非常突出的特点。\n需要注意的是：\n1. 文档中的键/值对是有序的。\n2. 文档中的值不仅可以是在双引号里面的字符串，还可以是其他几种数据类型（甚至可以是整个嵌入的文档)。\n3. MongoDB区分类型和大小写。\n4. MongoDB的文档不能有重复的键。\n5. 文档的键是字符串。除了少数例外情况，键可以使用任意UTF-8字符。\n\n#### 3.3. 集合\n集合就是MongoDB文档组，类似于RDBMS（关系数据库管理系统:Relational Database Management System)中的表格。\n集合存在于数据库中，集合没有固定的结构，这意味着你在对集合可以插入不同格式和类型的数据，但通常情况下我们插入集合的数据库都会有一定的关联性。\n\n#### 3.4. MongoDB数据类型：\n下表是MongoDB中常用的数据类型：\n|数据类型\t|描述|\n|--|--|\n|String \t|字符串。 存储数据常用的数据类型。在 MongoDB 中，UTF-8 编码的字符串才是合法的。|\n|Integer \t |整型数值。用于存储数值。根据你所采用的服务器，可分为 32 位或 64 位。 |\n|Boolean\t|布尔值。用于存储布尔值（真/假）。|\n|Double \t|双精度浮点值。用于存储浮点值。|\n|Min/Max keys\t   | 将一个值与 BSON（二进制的 JSON）元素的最低值和最高值相对比。 Array 用于将数组或列表或多个值存储为一个键。 |\n|Timestamp\t |时间戳。记录文档修改或添加的具体时间。 |\n|Object\t|用于内嵌文档。|\n|Null\t|用于创建空值。|\n|Symbol\t  |符号。该数据类型基本上等同于字符串类型，但不同的是，它一般用于采用特殊符号类型的语言。|\n|Date\t|日期时间。用 UNIX 时间格式来存储当前日期或时间。你可以指定自己的日期时间：创建 Date 对象，传入年月日信息。|\n|Object ID \t|对象 ID。用于创建文档的 ID。 |\n|Binary Data\t |二进制数据。 用于存储二进制数据。|\n|Code\t |代码类型。用于在文档中存储 JavaScript 代码。|\n|Regular expression \t|正则表达式类型。用于存储正则表达式。 |\n","slug":"MongoDB学习1—MongoDB简介","published":1,"updated":"2024-04-03T06:05:06.910Z","comments":1,"layout":"post","photos":[],"_id":"clujeumc100006wvlawwz33ch","content":"<h3 id=\"1-MongoDB介绍\"><a href=\"#1-MongoDB介绍\" class=\"headerlink\" title=\"1. MongoDB介绍\"></a>1. MongoDB介绍</h3><h4 id=\"1-1-什么是MongoDB\"><a href=\"#1-1-什么是MongoDB\" class=\"headerlink\" title=\"1.1. 什么是MongoDB\"></a>1.1. 什么是MongoDB</h4><p>MongoDB是由C++语言编写的，是一个基于分布式文件存储的开源数据库系统，旨在为WEB应用提供可扩展的高性能数据存储解决方案。它将数据存储为一个文档，数据结构由键值(key&#x3D;&gt;value）对组成，MongoDB文档类似于JSON对象，字段值可以包含其他文档，数组即文档数组。</p>\n<img src=\"/2024/04/03/MongoDB%E5%AD%A6%E4%B9%A01%E2%80%94MongoDB%E7%AE%80%E4%BB%8B/1.png\" class=\"\">\n<h4 id=\"1-2-特点\"><a href=\"#1-2-特点\" class=\"headerlink\" title=\"1.2. 特点\"></a>1.2. 特点</h4><p>MongoDB具有以下特点：</p>\n<ol>\n<li>文档导向： MongoDB使用文档导向的数据模型，数据以文档的形式存储，类似于JSON对象。文档是一个键值对的集合，支持嵌套结构和动态模式。</li>\n<li>灵活的模式： MongoDB是一个无模式（Schemaless）数据库，意味着不需要预定义模式和表结构。每个文档可以具有不同的字段和结构，这使得数据模型更加灵活，适用于各种类型的数据。</li>\n<li>分布式存储： MongoDB可以在多个服务器上进行部署，实现数据的分布式存储和横向扩展。它支持副本集（Replica Set）和分片集群（Sharded Cluster），提供高可用性和可伸缩性。</li>\n<li>丰富的查询语言： MongoDB提供了丰富的查询功能，支持灵活的条件查询、范围查询、正则表达式、聚合管道等。它还支持地理空间查询和文本搜索等特殊类型的查询。</li>\n<li>支持事务： MongoDB从版本4.0开始支持事务，可以在单个文档或多个文档上执行原子性的读写操作。事务能够确保数据的一致性和完整性，适用于复杂的数据操作场景。</li>\n</ol>\n<h4 id=\"1-3-MongoDB的应用\"><a href=\"#1-3-MongoDB的应用\" class=\"headerlink\" title=\"1.3. MongoDB的应用\"></a>1.3. MongoDB的应用</h4><p>MongoDB在许多应用场景中具有广泛的应用，以下是一些常见的MongoDB应用场景：</p>\n<ol>\n<li>实时分析和大数据处理： MongoDB适用于实时数据分析和大数据处理场景。它可以存储和处理大量的非结构化或半结构化数据，支持高并发读写操作和复杂的聚合查询。这使得它成为处理实时数据、日志分析和数据挖掘等任务的理想选择。</li>\n<li>内容管理系统（CMS）： MongoDB可以用作内容管理系统的后端数据库。它的灵活的数据模型和无模式特性使得存储和管理各种类型的内容（如文章、页面、多媒体文件等）变得简单。此外，MongoDB的高性能和可扩展性能够满足CMS的需求。</li>\n<li>物联网（IoT）应用： MongoDB适用于物联网应用，用于存储和处理大量的传感器数据和设备数据。它可以轻松地处理大规模的时间序列数据，支持地理空间查询和实时数据分析，使得物联网应用的数据管理和分析更加便捷。</li>\n<li>实时应用和实时通信： MongoDB的低延迟和高吞吐量使其适用于实时应用和实时通信场景。它可以存储和处理实时产生的数据，如聊天消息、实时推送、实时游戏数据等。MongoDB的副本集和分片集群提供了高可用性和可伸缩性，确保实时应用的稳定性和性能。</li>\n<li>目录和目标存储： MongoDB可以用作目录和目标存储，用于存储和管理大量的结构化和非结构化数据。它的灵活的数据模型和强大的查询功能使得存储和检索数据变得更高效和便捷。</li>\n<li>用户数据和个性化推荐： MongoDB可以存储和管理用户数据，如用户配置、偏好设置、历史记录等。它可以用于个性化推荐系统，根据用户的行为和偏好提供个性化的推荐内容。</li>\n</ol>\n<h3 id=\"2-MongoDB安装和启动\"><a href=\"#2-MongoDB安装和启动\" class=\"headerlink\" title=\"2. MongoDB安装和启动\"></a>2. MongoDB安装和启动</h3><p>windows下载地址：<a href=\"https://www.mongodb.com/try/download/community\">https://www.mongodb.com/try/download/community</a><br>下载完毕后，安装过程中，一路next就可以，如果不想放到C盘，在下面这一步选择想要存放的位置，其余的next就可以了。</p>\n<img src=\"/2024/04/03/MongoDB%E5%AD%A6%E4%B9%A01%E2%80%94MongoDB%E7%AE%80%E4%BB%8B/2.png\" class=\"\">\n<p>安装完毕后，在MongoDB目录的bin目录下，执行mongod.exe文件，启动mongodb。<br>启动完毕后，可以访问<a href=\"http://localhost:27017，出现下面内容，说明启动成功\">http://localhost:27017，出现下面内容，说明启动成功</a></p>\n<img src=\"/2024/04/03/MongoDB%E5%AD%A6%E4%B9%A01%E2%80%94MongoDB%E7%AE%80%E4%BB%8B/3.png\" class=\"\">\n<h3 id=\"3-MongoDB概念\"><a href=\"#3-MongoDB概念\" class=\"headerlink\" title=\"3. MongoDB概念\"></a>3. MongoDB概念</h3><p>在MongoDB中，基本的概念是文档、集合、数据库，如下表所示：</p>\n<table>\n<thead>\n<tr>\n<th>SQL术语概念</th>\n<th>MongoDB术语概念</th>\n<th>解释</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>database</td>\n<td>database</td>\n<td>数据库</td>\n</tr>\n<tr>\n<td>table</td>\n<td>collection</td>\n<td>数据库表&#x2F;集合</td>\n</tr>\n<tr>\n<td>row</td>\n<td>document</td>\n<td>数据库行&#x2F;文档</td>\n</tr>\n<tr>\n<td>column</td>\n<td>field</td>\n<td>数据库字段&#x2F;域</td>\n</tr>\n<tr>\n<td>index</td>\n<td>index</td>\n<td>索引</td>\n</tr>\n<tr>\n<td>table joins</td>\n<td></td>\n<td>表连接,MongoDB不支持</td>\n</tr>\n<tr>\n<td>primary key</td>\n<td>primary key</td>\n<td>主键，MongoDB自动将_id字段设置为主键</td>\n</tr>\n</tbody></table>\n<h4 id=\"3-1-数据库\"><a href=\"#3-1-数据库\" class=\"headerlink\" title=\"3.1. 数据库\"></a>3.1. 数据库</h4><p>一个mongodb中可以创建多个数据库，默认数据库为”db”，数据库的命名有以下要求：<br>1）不能是空字符串(“”)<br>2）不得含有’’(空格)、.、$、&#x2F;、和\\0（空字符）<br>3）应全部小写<br>4）最多64字节<br>有一些数据库名是保留的，可以直接访问这些有特殊作用的数据库：<br>1）admin：从权限的角度来看，这生”root”数据库，要是将一个用户添加到这个数据库，这个用户自动继承所有数据库的权限，一些特定的服务器端命令也智能从这个数据库运行，比如列出所有的数据库或者关闭服务器。<br>2）local：这个数据永远不会被复制，可以用来存储于本地单台服务器的任何集合<br>3）config：当Mongo用于分片设置时，config数据库在内部使用，用于保存分片的相关信息。</p>\n<h4 id=\"3-2-文档（Document）\"><a href=\"#3-2-文档（Document）\" class=\"headerlink\" title=\"3.2. 文档（Document）\"></a>3.2. 文档（Document）</h4><p>文档是一组键值(key-value)对，但MongoDB的文档不需要设置相同的字段，并且相同字段不需要相同的数据类型，这与关系型数据库有很大区别，也是MongoDB非常突出的特点。<br>需要注意的是：</p>\n<ol>\n<li>文档中的键&#x2F;值对是有序的。</li>\n<li>文档中的值不仅可以是在双引号里面的字符串，还可以是其他几种数据类型（甚至可以是整个嵌入的文档)。</li>\n<li>MongoDB区分类型和大小写。</li>\n<li>MongoDB的文档不能有重复的键。</li>\n<li>文档的键是字符串。除了少数例外情况，键可以使用任意UTF-8字符。</li>\n</ol>\n<h4 id=\"3-3-集合\"><a href=\"#3-3-集合\" class=\"headerlink\" title=\"3.3. 集合\"></a>3.3. 集合</h4><p>集合就是MongoDB文档组，类似于RDBMS（关系数据库管理系统:Relational Database Management System)中的表格。<br>集合存在于数据库中，集合没有固定的结构，这意味着你在对集合可以插入不同格式和类型的数据，但通常情况下我们插入集合的数据库都会有一定的关联性。</p>\n<h4 id=\"3-4-MongoDB数据类型：\"><a href=\"#3-4-MongoDB数据类型：\" class=\"headerlink\" title=\"3.4. MongoDB数据类型：\"></a>3.4. MongoDB数据类型：</h4><p>下表是MongoDB中常用的数据类型：</p>\n<table>\n<thead>\n<tr>\n<th>数据类型</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>String</td>\n<td>字符串。 存储数据常用的数据类型。在 MongoDB 中，UTF-8 编码的字符串才是合法的。</td>\n</tr>\n<tr>\n<td>Integer</td>\n<td>整型数值。用于存储数值。根据你所采用的服务器，可分为 32 位或 64 位。</td>\n</tr>\n<tr>\n<td>Boolean</td>\n<td>布尔值。用于存储布尔值（真&#x2F;假）。</td>\n</tr>\n<tr>\n<td>Double</td>\n<td>双精度浮点值。用于存储浮点值。</td>\n</tr>\n<tr>\n<td>Min&#x2F;Max keys</td>\n<td>将一个值与 BSON（二进制的 JSON）元素的最低值和最高值相对比。 Array 用于将数组或列表或多个值存储为一个键。</td>\n</tr>\n<tr>\n<td>Timestamp</td>\n<td>时间戳。记录文档修改或添加的具体时间。</td>\n</tr>\n<tr>\n<td>Object</td>\n<td>用于内嵌文档。</td>\n</tr>\n<tr>\n<td>Null</td>\n<td>用于创建空值。</td>\n</tr>\n<tr>\n<td>Symbol</td>\n<td>符号。该数据类型基本上等同于字符串类型，但不同的是，它一般用于采用特殊符号类型的语言。</td>\n</tr>\n<tr>\n<td>Date</td>\n<td>日期时间。用 UNIX 时间格式来存储当前日期或时间。你可以指定自己的日期时间：创建 Date 对象，传入年月日信息。</td>\n</tr>\n<tr>\n<td>Object ID</td>\n<td>对象 ID。用于创建文档的 ID。</td>\n</tr>\n<tr>\n<td>Binary Data</td>\n<td>二进制数据。 用于存储二进制数据。</td>\n</tr>\n<tr>\n<td>Code</td>\n<td>代码类型。用于在文档中存储 JavaScript 代码。</td>\n</tr>\n<tr>\n<td>Regular expression</td>\n<td>正则表达式类型。用于存储正则表达式。</td>\n</tr>\n</tbody></table>\n","excerpt":"","more":"<h3 id=\"1-MongoDB介绍\"><a href=\"#1-MongoDB介绍\" class=\"headerlink\" title=\"1. MongoDB介绍\"></a>1. MongoDB介绍</h3><h4 id=\"1-1-什么是MongoDB\"><a href=\"#1-1-什么是MongoDB\" class=\"headerlink\" title=\"1.1. 什么是MongoDB\"></a>1.1. 什么是MongoDB</h4><p>MongoDB是由C++语言编写的，是一个基于分布式文件存储的开源数据库系统，旨在为WEB应用提供可扩展的高性能数据存储解决方案。它将数据存储为一个文档，数据结构由键值(key&#x3D;&gt;value）对组成，MongoDB文档类似于JSON对象，字段值可以包含其他文档，数组即文档数组。</p>\n<img src=\"/2024/04/03/MongoDB%E5%AD%A6%E4%B9%A01%E2%80%94MongoDB%E7%AE%80%E4%BB%8B/1.png\" class=\"\">\n<h4 id=\"1-2-特点\"><a href=\"#1-2-特点\" class=\"headerlink\" title=\"1.2. 特点\"></a>1.2. 特点</h4><p>MongoDB具有以下特点：</p>\n<ol>\n<li>文档导向： MongoDB使用文档导向的数据模型，数据以文档的形式存储，类似于JSON对象。文档是一个键值对的集合，支持嵌套结构和动态模式。</li>\n<li>灵活的模式： MongoDB是一个无模式（Schemaless）数据库，意味着不需要预定义模式和表结构。每个文档可以具有不同的字段和结构，这使得数据模型更加灵活，适用于各种类型的数据。</li>\n<li>分布式存储： MongoDB可以在多个服务器上进行部署，实现数据的分布式存储和横向扩展。它支持副本集（Replica Set）和分片集群（Sharded Cluster），提供高可用性和可伸缩性。</li>\n<li>丰富的查询语言： MongoDB提供了丰富的查询功能，支持灵活的条件查询、范围查询、正则表达式、聚合管道等。它还支持地理空间查询和文本搜索等特殊类型的查询。</li>\n<li>支持事务： MongoDB从版本4.0开始支持事务，可以在单个文档或多个文档上执行原子性的读写操作。事务能够确保数据的一致性和完整性，适用于复杂的数据操作场景。</li>\n</ol>\n<h4 id=\"1-3-MongoDB的应用\"><a href=\"#1-3-MongoDB的应用\" class=\"headerlink\" title=\"1.3. MongoDB的应用\"></a>1.3. MongoDB的应用</h4><p>MongoDB在许多应用场景中具有广泛的应用，以下是一些常见的MongoDB应用场景：</p>\n<ol>\n<li>实时分析和大数据处理： MongoDB适用于实时数据分析和大数据处理场景。它可以存储和处理大量的非结构化或半结构化数据，支持高并发读写操作和复杂的聚合查询。这使得它成为处理实时数据、日志分析和数据挖掘等任务的理想选择。</li>\n<li>内容管理系统（CMS）： MongoDB可以用作内容管理系统的后端数据库。它的灵活的数据模型和无模式特性使得存储和管理各种类型的内容（如文章、页面、多媒体文件等）变得简单。此外，MongoDB的高性能和可扩展性能够满足CMS的需求。</li>\n<li>物联网（IoT）应用： MongoDB适用于物联网应用，用于存储和处理大量的传感器数据和设备数据。它可以轻松地处理大规模的时间序列数据，支持地理空间查询和实时数据分析，使得物联网应用的数据管理和分析更加便捷。</li>\n<li>实时应用和实时通信： MongoDB的低延迟和高吞吐量使其适用于实时应用和实时通信场景。它可以存储和处理实时产生的数据，如聊天消息、实时推送、实时游戏数据等。MongoDB的副本集和分片集群提供了高可用性和可伸缩性，确保实时应用的稳定性和性能。</li>\n<li>目录和目标存储： MongoDB可以用作目录和目标存储，用于存储和管理大量的结构化和非结构化数据。它的灵活的数据模型和强大的查询功能使得存储和检索数据变得更高效和便捷。</li>\n<li>用户数据和个性化推荐： MongoDB可以存储和管理用户数据，如用户配置、偏好设置、历史记录等。它可以用于个性化推荐系统，根据用户的行为和偏好提供个性化的推荐内容。</li>\n</ol>\n<h3 id=\"2-MongoDB安装和启动\"><a href=\"#2-MongoDB安装和启动\" class=\"headerlink\" title=\"2. MongoDB安装和启动\"></a>2. MongoDB安装和启动</h3><p>windows下载地址：<a href=\"https://www.mongodb.com/try/download/community\">https://www.mongodb.com/try/download/community</a><br>下载完毕后，安装过程中，一路next就可以，如果不想放到C盘，在下面这一步选择想要存放的位置，其余的next就可以了。</p>\n<img src=\"/2024/04/03/MongoDB%E5%AD%A6%E4%B9%A01%E2%80%94MongoDB%E7%AE%80%E4%BB%8B/2.png\" class=\"\">\n<p>安装完毕后，在MongoDB目录的bin目录下，执行mongod.exe文件，启动mongodb。<br>启动完毕后，可以访问<a href=\"http://localhost:27017，出现下面内容，说明启动成功\">http://localhost:27017，出现下面内容，说明启动成功</a></p>\n<img src=\"/2024/04/03/MongoDB%E5%AD%A6%E4%B9%A01%E2%80%94MongoDB%E7%AE%80%E4%BB%8B/3.png\" class=\"\">\n<h3 id=\"3-MongoDB概念\"><a href=\"#3-MongoDB概念\" class=\"headerlink\" title=\"3. MongoDB概念\"></a>3. MongoDB概念</h3><p>在MongoDB中，基本的概念是文档、集合、数据库，如下表所示：</p>\n<table>\n<thead>\n<tr>\n<th>SQL术语概念</th>\n<th>MongoDB术语概念</th>\n<th>解释</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>database</td>\n<td>database</td>\n<td>数据库</td>\n</tr>\n<tr>\n<td>table</td>\n<td>collection</td>\n<td>数据库表&#x2F;集合</td>\n</tr>\n<tr>\n<td>row</td>\n<td>document</td>\n<td>数据库行&#x2F;文档</td>\n</tr>\n<tr>\n<td>column</td>\n<td>field</td>\n<td>数据库字段&#x2F;域</td>\n</tr>\n<tr>\n<td>index</td>\n<td>index</td>\n<td>索引</td>\n</tr>\n<tr>\n<td>table joins</td>\n<td></td>\n<td>表连接,MongoDB不支持</td>\n</tr>\n<tr>\n<td>primary key</td>\n<td>primary key</td>\n<td>主键，MongoDB自动将_id字段设置为主键</td>\n</tr>\n</tbody></table>\n<h4 id=\"3-1-数据库\"><a href=\"#3-1-数据库\" class=\"headerlink\" title=\"3.1. 数据库\"></a>3.1. 数据库</h4><p>一个mongodb中可以创建多个数据库，默认数据库为”db”，数据库的命名有以下要求：<br>1）不能是空字符串(“”)<br>2）不得含有’’(空格)、.、$、&#x2F;、和\\0（空字符）<br>3）应全部小写<br>4）最多64字节<br>有一些数据库名是保留的，可以直接访问这些有特殊作用的数据库：<br>1）admin：从权限的角度来看，这生”root”数据库，要是将一个用户添加到这个数据库，这个用户自动继承所有数据库的权限，一些特定的服务器端命令也智能从这个数据库运行，比如列出所有的数据库或者关闭服务器。<br>2）local：这个数据永远不会被复制，可以用来存储于本地单台服务器的任何集合<br>3）config：当Mongo用于分片设置时，config数据库在内部使用，用于保存分片的相关信息。</p>\n<h4 id=\"3-2-文档（Document）\"><a href=\"#3-2-文档（Document）\" class=\"headerlink\" title=\"3.2. 文档（Document）\"></a>3.2. 文档（Document）</h4><p>文档是一组键值(key-value)对，但MongoDB的文档不需要设置相同的字段，并且相同字段不需要相同的数据类型，这与关系型数据库有很大区别，也是MongoDB非常突出的特点。<br>需要注意的是：</p>\n<ol>\n<li>文档中的键&#x2F;值对是有序的。</li>\n<li>文档中的值不仅可以是在双引号里面的字符串，还可以是其他几种数据类型（甚至可以是整个嵌入的文档)。</li>\n<li>MongoDB区分类型和大小写。</li>\n<li>MongoDB的文档不能有重复的键。</li>\n<li>文档的键是字符串。除了少数例外情况，键可以使用任意UTF-8字符。</li>\n</ol>\n<h4 id=\"3-3-集合\"><a href=\"#3-3-集合\" class=\"headerlink\" title=\"3.3. 集合\"></a>3.3. 集合</h4><p>集合就是MongoDB文档组，类似于RDBMS（关系数据库管理系统:Relational Database Management System)中的表格。<br>集合存在于数据库中，集合没有固定的结构，这意味着你在对集合可以插入不同格式和类型的数据，但通常情况下我们插入集合的数据库都会有一定的关联性。</p>\n<h4 id=\"3-4-MongoDB数据类型：\"><a href=\"#3-4-MongoDB数据类型：\" class=\"headerlink\" title=\"3.4. MongoDB数据类型：\"></a>3.4. MongoDB数据类型：</h4><p>下表是MongoDB中常用的数据类型：</p>\n<table>\n<thead>\n<tr>\n<th>数据类型</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>String</td>\n<td>字符串。 存储数据常用的数据类型。在 MongoDB 中，UTF-8 编码的字符串才是合法的。</td>\n</tr>\n<tr>\n<td>Integer</td>\n<td>整型数值。用于存储数值。根据你所采用的服务器，可分为 32 位或 64 位。</td>\n</tr>\n<tr>\n<td>Boolean</td>\n<td>布尔值。用于存储布尔值（真&#x2F;假）。</td>\n</tr>\n<tr>\n<td>Double</td>\n<td>双精度浮点值。用于存储浮点值。</td>\n</tr>\n<tr>\n<td>Min&#x2F;Max keys</td>\n<td>将一个值与 BSON（二进制的 JSON）元素的最低值和最高值相对比。 Array 用于将数组或列表或多个值存储为一个键。</td>\n</tr>\n<tr>\n<td>Timestamp</td>\n<td>时间戳。记录文档修改或添加的具体时间。</td>\n</tr>\n<tr>\n<td>Object</td>\n<td>用于内嵌文档。</td>\n</tr>\n<tr>\n<td>Null</td>\n<td>用于创建空值。</td>\n</tr>\n<tr>\n<td>Symbol</td>\n<td>符号。该数据类型基本上等同于字符串类型，但不同的是，它一般用于采用特殊符号类型的语言。</td>\n</tr>\n<tr>\n<td>Date</td>\n<td>日期时间。用 UNIX 时间格式来存储当前日期或时间。你可以指定自己的日期时间：创建 Date 对象，传入年月日信息。</td>\n</tr>\n<tr>\n<td>Object ID</td>\n<td>对象 ID。用于创建文档的 ID。</td>\n</tr>\n<tr>\n<td>Binary Data</td>\n<td>二进制数据。 用于存储二进制数据。</td>\n</tr>\n<tr>\n<td>Code</td>\n<td>代码类型。用于在文档中存储 JavaScript 代码。</td>\n</tr>\n<tr>\n<td>Regular expression</td>\n<td>正则表达式类型。用于存储正则表达式。</td>\n</tr>\n</tbody></table>\n"},{"title":"MongoDB学习2—SpringBoot集成MongoDB","date":"2024-04-03T06:05:33.000Z","_content":"### 1. 引言\nSpringBoot要集成MongoDB，可以直接使用spring-data-mongodb提供的MongoTemplate和MongoRepository这两种方式，前者操作比较灵活，后者比较简单。\n引入依赖如下：\n```xml\n<dependencies>\n    <dependency>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter</artifactId>\n    </dependency>\n    <dependency>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-data-mongodb</artifactId>\n    </dependency>\n    <dependency>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-web</artifactId>\n    </dependency>\n    <dependency>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-test</artifactId>\n        <scope>test</scope>\n    </dependency>\n    <dependency>\n        <groupId>org.projectlombok</groupId>\n        <artifactId>lombok</artifactId>\n    </dependency>\n    <dependency>\n        <groupId>joda-time</groupId>\n        <artifactId>joda-time</artifactId>\n        <version>2.10.1</version>\n    </dependency>\n\n    <dependency>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-test</artifactId>\n        <scope>test</scope>\n        <exclusions>\n            <exclusion>\n                <groupId>org.junit.vintage</groupId>\n                <artifactId>junit-vintage-engine</artifactId>\n            </exclusion>\n        </exclusions>\n    </dependency>\n</dependencies>\n```\napplication.yml配置信息如下：\n``` yml\nspring:\n  data:\n    mongodb:\n      uri: mongodb://127.0.0.1:27017/test\n```\n### 2. 代码示例\n首先，我们创建一个test数据库，在这个数据库中，创建一个user集合，用于演示：\n{% asset_img 1.png %}\n#### 2.1. MongoTemplate使用\n##### 2.1.1. 插入和简单查询\n我们添加测试方法，首先测试插入和一些简单查询：\n```java\n @Test\n    public void testInsertAndSimpleFind() {\n        // 测试添加\n        User createUser = new User();\n        createUser.setAge(20);\n        createUser.setName(\"cxy\");\n        createUser.setEmail(\"123@qq.com\");\n        createUser.setCreateTime(new Date());\n        createUser = mongoTemplate.insert(createUser);\n        System.out.println(JSONObject.toJSONString(createUser));\n\n        // 根据id查询\n        User userById = mongoTemplate.findById(createUser.getId(), User.class);\n        System.out.println(JSONObject.toJSONString(userById));\n\n        // 查询全部\n        List<User> allUsers = mongoTemplate.findAll(User.class);\n        System.out.println(JSONObject.toJSONString(allUsers));\n    }\n```\n执行结果如下：\n{% asset_img 2.png %}\n查看数据库，确实多了一条记录\n{% asset_img 3.png %}\n##### 2.1.2. 更新\n接着我们测试mongoTemplate的修改\n```java\n  @Test\n    public void testUpdateMongoTemplate() {\n        String id = \"65ea70bf090d176df859e5fa\";\n        Query query = new Query(Criteria.where(\"_id\").is(id));\n        Update update = new Update();\n        update.set(\"name\", \"cxy123\");\n        update.set(\"age\", 20);\n        UpdateResult upsert = mongoTemplate.upsert(query, update, User.class);\n        long modifiedCount = upsert.getModifiedCount();\n        System.out.println(\"受影响的条数：\" + modifiedCount);\n    }\n```\n执行上述代码，查看数据库，数据库确实被修改了。\n{% asset_img 4.png %}\n##### 2.1.3. 删除\n```java\n @Test\n    public void testDeleteMongoTemplate() {\n        String id = \"65ea70bf090d176df859e5fa\";\n        Query query = new Query(Criteria.where(\"_id\").is(id));\n        DeleteResult deleteResult = mongoTemplate.remove(query, User.class);\n        System.out.println(\"删除个数：\" + deleteResult.getDeletedCount());\n    }\n```\n执行完毕后，查看数控库，相关的集合被成功删除。\n{% asset_img 5.png %}\n##### 2.1.4. 条件查询\n我们先插入一些测试数据，方便后续测试条件查询\n```java\n   @Test\n    public void insertTestUser() {\n        User user1 = new User();\n        user1.setName(\"张三\");\n        user1.setAge(10);\n        user1.setEmail(\"zhangsna@qq.com\");\n        user1.setCreateTime(new Date());\n        \n        User user2 = new User();\n        user2.setName(\"李四\");\n        user2.setAge(20);\n        user2.setEmail(\"lisi@163.com\");\n        user2.setCreateTime(new Date());\n        \n        User user3 = new User();\n        user3.setName(\"王五\");\n        user3.setAge(30);\n        user3.setCreateTime(new Date());\n        \n        List<User> userList = new ArrayList<>();\n        userList.add(user1);\n        userList.add(user2);\n        userList.add(user3);\n        for (int i = 0; i < 10; i++) {\n            User user = new User();\n            user.setName(\"name:\" + i);\n            user.setAge(20 + i);\n            user.setEmail(\"template\" + i + \"@qq.com\");\n            user.setCreateTime(new Date());\n            userList.add(user);\n        }\n        mongoTemplate.insert(userList, User.class);\n    }\n```\n假设我们现在查询姓名为张三的用户：\n```java\n@Test\n    public void testFindByName() {\n        Query query = new Query();\n        query.addCriteria(Criteria.where(\"name\").is(\"张三\"));\n        User zhangsan = mongoTemplate.findOne(query, User.class);\n        System.out.println(\"张三：\" + JSONObject.toJSONString(zhangsan));\n    }\n```\n执行结果如下：\n{% asset_img 6.png %}\n查询年龄在20到30之间的用户：\n```java\n@Test\n    public void testFindByAge() {\n        Query query = new Query();\n        query.addCriteria(Criteria.where(\"age\").gte(20).lte(30));\n        List<User> users = mongoTemplate.find(query, User.class);\n        for (User user : users) {\n            System.out.println(\"age:\" + user.getAge() + \":\" + JSONObject.toJSONString(user));\n        }\n    }\n```\n结果如下：\n{% asset_img 7.png %}\n当我们要进行查询的时候，可以使用where来查询，上述演示的，只是对一个field进行条件查询，当我们需要对多个field进行条件查询时，可以使用and来连接，假设我们要查询姓名为王五并且年龄为30岁的人，测试方法如下：\n```java\n  @Test\n    public void testFindByNameAndAge() {\n        Query query = new Query();\n        query.addCriteria(Criteria.where(\"name\").is(\"王五\")\n                .and(\"age\").is(30));\n\n        List<User> users = mongoTemplate.find(query, User.class);\n        for (User user : users) {\n            System.out.println(\"age:\" + user.getAge() + \":\" + JSONObject.toJSONString(user));\n        }\n    }\n```\n测试结果如下：\n{% asset_img 8.png %}\n##### 2.1.5. 分页查询\n```java\n @Test\n    public void testPage() {\n        int pageNo = 1;\n        int pageSize = 3;\n\n        Query query = new Query();\n        query.skip((pageNo - 1) * pageSize).limit(pageSize);\n        List<User> users = mongoTemplate.find(query, User.class);\n        for (User user : users) {\n            System.out.println(\"user:\" + JSONObject.toJSONString(user));\n        }\n    }\n```\n测试结果如下：\n{% asset_img 9.png %}\n#### 2.2. MongoRepository\nSpring Data提供对mongodb数据访问的支持，我们只需要继承MongoRepository类，按照SpringData规范就可以了。\n首先，我们添加UserRepository接口，继承MongoRepository<User, String>\n```java\npackage org.example.repository;\n\nimport org.example.pojo.User;\nimport org.springframework.data.mongodb.repository.MongoRepository;\nimport org.springframework.stereotype.Repository;\n\n@Repository\npublic interface UserRepository extends MongoRepository<User, String> {\n}\n\n然后创建UserService，用于对user进行增删改查\npackage org.example.service;\n\nimport org.example.pojo.User;\nimport org.example.repository.UserRepository;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.data.domain.*;\nimport org.springframework.stereotype.Service;\n\nimport java.util.Date;\nimport java.util.List;\n\n@Service\npublic class UserService {\n    @Autowired\n    private UserRepository userRepository;\n    \n    public User saveUser(User user) {\n        user.setCreateTime(new Date());\n        return userRepository.save(user);\n    }\n    \n    public User updateUser(User user) {\n        // 插入和更新都是使用save\n        return userRepository.save(user);\n    }\n    \n    public void removeUserById(String id) {\n        userRepository.deleteById(id);\n    }\n    \n    public User findById(String id) {\n        return userRepository.findById(id).get();\n    }\n    \n    public List<User> findAll() {\n        return userRepository.findAll();\n    }\n    \n    public List<User> findByNameAndAge(String name, int age) {\n        User conditionUser = new User();\n        conditionUser.setName(name);\n        conditionUser.setAge(age);\n        Example<User> example = Example.of(conditionUser);\n        return userRepository.findAll(example);\n    }\n    \n    public List<User> findPage(int pageNo, int pageSize) {\n        Pageable pageable = PageRequest.of(pageNo, pageSize);\n        Page<User> page = userRepository.findAll(pageable);\n        return page.getContent();\n    }\n    \n   \n}\n```\n添加测试方法，测试查询是否生效：\n```java\n @Autowired\n    private UserService userService;\n\n    @Test\n    public void testFind() {\n        // 根据id查询\n        User findById = userService.findById(\"65ea7586b4c1f3160f791b06\");\n        System.out.println(JSONObject.toJSONString(findById));\n\n        // 根据姓名和年龄查询\n        List<User> zhangsan = userService.findByNameAndAge(\"张三\", 10);\n        System.out.println(JSONObject.toJSONString(zhangsan));\n\n        // 分页查询\n        List<User> page = userService.findPage(1, 3);\n        System.out.println(JSONObject.toJSONString(page));\n\n        // 查询全部\n        List<User> all = userService.findAll();\n        System.out.println(JSONObject.toJSONString(all));\n\n    }\n```\n查询结果如下：\n{% asset_img 10.png %}","source":"_posts/MongoDB学习2—SpringBoot集成MongoDB.md","raw":"---\ntitle: MongoDB学习2—SpringBoot集成MongoDB\ndate: 2024-04-03 14:05:33\ntags:\n    - 中间件\n    - MongoDB\n---\n### 1. 引言\nSpringBoot要集成MongoDB，可以直接使用spring-data-mongodb提供的MongoTemplate和MongoRepository这两种方式，前者操作比较灵活，后者比较简单。\n引入依赖如下：\n```xml\n<dependencies>\n    <dependency>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter</artifactId>\n    </dependency>\n    <dependency>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-data-mongodb</artifactId>\n    </dependency>\n    <dependency>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-web</artifactId>\n    </dependency>\n    <dependency>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-test</artifactId>\n        <scope>test</scope>\n    </dependency>\n    <dependency>\n        <groupId>org.projectlombok</groupId>\n        <artifactId>lombok</artifactId>\n    </dependency>\n    <dependency>\n        <groupId>joda-time</groupId>\n        <artifactId>joda-time</artifactId>\n        <version>2.10.1</version>\n    </dependency>\n\n    <dependency>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-test</artifactId>\n        <scope>test</scope>\n        <exclusions>\n            <exclusion>\n                <groupId>org.junit.vintage</groupId>\n                <artifactId>junit-vintage-engine</artifactId>\n            </exclusion>\n        </exclusions>\n    </dependency>\n</dependencies>\n```\napplication.yml配置信息如下：\n``` yml\nspring:\n  data:\n    mongodb:\n      uri: mongodb://127.0.0.1:27017/test\n```\n### 2. 代码示例\n首先，我们创建一个test数据库，在这个数据库中，创建一个user集合，用于演示：\n{% asset_img 1.png %}\n#### 2.1. MongoTemplate使用\n##### 2.1.1. 插入和简单查询\n我们添加测试方法，首先测试插入和一些简单查询：\n```java\n @Test\n    public void testInsertAndSimpleFind() {\n        // 测试添加\n        User createUser = new User();\n        createUser.setAge(20);\n        createUser.setName(\"cxy\");\n        createUser.setEmail(\"123@qq.com\");\n        createUser.setCreateTime(new Date());\n        createUser = mongoTemplate.insert(createUser);\n        System.out.println(JSONObject.toJSONString(createUser));\n\n        // 根据id查询\n        User userById = mongoTemplate.findById(createUser.getId(), User.class);\n        System.out.println(JSONObject.toJSONString(userById));\n\n        // 查询全部\n        List<User> allUsers = mongoTemplate.findAll(User.class);\n        System.out.println(JSONObject.toJSONString(allUsers));\n    }\n```\n执行结果如下：\n{% asset_img 2.png %}\n查看数据库，确实多了一条记录\n{% asset_img 3.png %}\n##### 2.1.2. 更新\n接着我们测试mongoTemplate的修改\n```java\n  @Test\n    public void testUpdateMongoTemplate() {\n        String id = \"65ea70bf090d176df859e5fa\";\n        Query query = new Query(Criteria.where(\"_id\").is(id));\n        Update update = new Update();\n        update.set(\"name\", \"cxy123\");\n        update.set(\"age\", 20);\n        UpdateResult upsert = mongoTemplate.upsert(query, update, User.class);\n        long modifiedCount = upsert.getModifiedCount();\n        System.out.println(\"受影响的条数：\" + modifiedCount);\n    }\n```\n执行上述代码，查看数据库，数据库确实被修改了。\n{% asset_img 4.png %}\n##### 2.1.3. 删除\n```java\n @Test\n    public void testDeleteMongoTemplate() {\n        String id = \"65ea70bf090d176df859e5fa\";\n        Query query = new Query(Criteria.where(\"_id\").is(id));\n        DeleteResult deleteResult = mongoTemplate.remove(query, User.class);\n        System.out.println(\"删除个数：\" + deleteResult.getDeletedCount());\n    }\n```\n执行完毕后，查看数控库，相关的集合被成功删除。\n{% asset_img 5.png %}\n##### 2.1.4. 条件查询\n我们先插入一些测试数据，方便后续测试条件查询\n```java\n   @Test\n    public void insertTestUser() {\n        User user1 = new User();\n        user1.setName(\"张三\");\n        user1.setAge(10);\n        user1.setEmail(\"zhangsna@qq.com\");\n        user1.setCreateTime(new Date());\n        \n        User user2 = new User();\n        user2.setName(\"李四\");\n        user2.setAge(20);\n        user2.setEmail(\"lisi@163.com\");\n        user2.setCreateTime(new Date());\n        \n        User user3 = new User();\n        user3.setName(\"王五\");\n        user3.setAge(30);\n        user3.setCreateTime(new Date());\n        \n        List<User> userList = new ArrayList<>();\n        userList.add(user1);\n        userList.add(user2);\n        userList.add(user3);\n        for (int i = 0; i < 10; i++) {\n            User user = new User();\n            user.setName(\"name:\" + i);\n            user.setAge(20 + i);\n            user.setEmail(\"template\" + i + \"@qq.com\");\n            user.setCreateTime(new Date());\n            userList.add(user);\n        }\n        mongoTemplate.insert(userList, User.class);\n    }\n```\n假设我们现在查询姓名为张三的用户：\n```java\n@Test\n    public void testFindByName() {\n        Query query = new Query();\n        query.addCriteria(Criteria.where(\"name\").is(\"张三\"));\n        User zhangsan = mongoTemplate.findOne(query, User.class);\n        System.out.println(\"张三：\" + JSONObject.toJSONString(zhangsan));\n    }\n```\n执行结果如下：\n{% asset_img 6.png %}\n查询年龄在20到30之间的用户：\n```java\n@Test\n    public void testFindByAge() {\n        Query query = new Query();\n        query.addCriteria(Criteria.where(\"age\").gte(20).lte(30));\n        List<User> users = mongoTemplate.find(query, User.class);\n        for (User user : users) {\n            System.out.println(\"age:\" + user.getAge() + \":\" + JSONObject.toJSONString(user));\n        }\n    }\n```\n结果如下：\n{% asset_img 7.png %}\n当我们要进行查询的时候，可以使用where来查询，上述演示的，只是对一个field进行条件查询，当我们需要对多个field进行条件查询时，可以使用and来连接，假设我们要查询姓名为王五并且年龄为30岁的人，测试方法如下：\n```java\n  @Test\n    public void testFindByNameAndAge() {\n        Query query = new Query();\n        query.addCriteria(Criteria.where(\"name\").is(\"王五\")\n                .and(\"age\").is(30));\n\n        List<User> users = mongoTemplate.find(query, User.class);\n        for (User user : users) {\n            System.out.println(\"age:\" + user.getAge() + \":\" + JSONObject.toJSONString(user));\n        }\n    }\n```\n测试结果如下：\n{% asset_img 8.png %}\n##### 2.1.5. 分页查询\n```java\n @Test\n    public void testPage() {\n        int pageNo = 1;\n        int pageSize = 3;\n\n        Query query = new Query();\n        query.skip((pageNo - 1) * pageSize).limit(pageSize);\n        List<User> users = mongoTemplate.find(query, User.class);\n        for (User user : users) {\n            System.out.println(\"user:\" + JSONObject.toJSONString(user));\n        }\n    }\n```\n测试结果如下：\n{% asset_img 9.png %}\n#### 2.2. MongoRepository\nSpring Data提供对mongodb数据访问的支持，我们只需要继承MongoRepository类，按照SpringData规范就可以了。\n首先，我们添加UserRepository接口，继承MongoRepository<User, String>\n```java\npackage org.example.repository;\n\nimport org.example.pojo.User;\nimport org.springframework.data.mongodb.repository.MongoRepository;\nimport org.springframework.stereotype.Repository;\n\n@Repository\npublic interface UserRepository extends MongoRepository<User, String> {\n}\n\n然后创建UserService，用于对user进行增删改查\npackage org.example.service;\n\nimport org.example.pojo.User;\nimport org.example.repository.UserRepository;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.data.domain.*;\nimport org.springframework.stereotype.Service;\n\nimport java.util.Date;\nimport java.util.List;\n\n@Service\npublic class UserService {\n    @Autowired\n    private UserRepository userRepository;\n    \n    public User saveUser(User user) {\n        user.setCreateTime(new Date());\n        return userRepository.save(user);\n    }\n    \n    public User updateUser(User user) {\n        // 插入和更新都是使用save\n        return userRepository.save(user);\n    }\n    \n    public void removeUserById(String id) {\n        userRepository.deleteById(id);\n    }\n    \n    public User findById(String id) {\n        return userRepository.findById(id).get();\n    }\n    \n    public List<User> findAll() {\n        return userRepository.findAll();\n    }\n    \n    public List<User> findByNameAndAge(String name, int age) {\n        User conditionUser = new User();\n        conditionUser.setName(name);\n        conditionUser.setAge(age);\n        Example<User> example = Example.of(conditionUser);\n        return userRepository.findAll(example);\n    }\n    \n    public List<User> findPage(int pageNo, int pageSize) {\n        Pageable pageable = PageRequest.of(pageNo, pageSize);\n        Page<User> page = userRepository.findAll(pageable);\n        return page.getContent();\n    }\n    \n   \n}\n```\n添加测试方法，测试查询是否生效：\n```java\n @Autowired\n    private UserService userService;\n\n    @Test\n    public void testFind() {\n        // 根据id查询\n        User findById = userService.findById(\"65ea7586b4c1f3160f791b06\");\n        System.out.println(JSONObject.toJSONString(findById));\n\n        // 根据姓名和年龄查询\n        List<User> zhangsan = userService.findByNameAndAge(\"张三\", 10);\n        System.out.println(JSONObject.toJSONString(zhangsan));\n\n        // 分页查询\n        List<User> page = userService.findPage(1, 3);\n        System.out.println(JSONObject.toJSONString(page));\n\n        // 查询全部\n        List<User> all = userService.findAll();\n        System.out.println(JSONObject.toJSONString(all));\n\n    }\n```\n查询结果如下：\n{% asset_img 10.png %}","slug":"MongoDB学习2—SpringBoot集成MongoDB","published":1,"updated":"2024-04-03T06:11:36.391Z","comments":1,"layout":"post","photos":[],"_id":"clujeumc700016wvl7diu5d69","content":"<h3 id=\"1-引言\"><a href=\"#1-引言\" class=\"headerlink\" title=\"1. 引言\"></a>1. 引言</h3><p>SpringBoot要集成MongoDB，可以直接使用spring-data-mongodb提供的MongoTemplate和MongoRepository这两种方式，前者操作比较灵活，后者比较简单。<br>引入依赖如下：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependencies</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>spring-boot-starter<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>spring-boot-starter-data-mongodb<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>spring-boot-starter-web<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>spring-boot-starter-test<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">scope</span>&gt;</span>test<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">scope</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.projectlombok<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>lombok<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>joda-time<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>joda-time<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>2.10.1<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span><br><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>spring-boot-starter-test<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">scope</span>&gt;</span>test<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">scope</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">exclusions</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">exclusion</span>&gt;</span><br>                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.junit.vintage<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span><br>                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>junit-vintage-engine<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">exclusion</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">exclusions</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<p>application.yml配置信息如下：</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yml\"><span class=\"hljs-attr\">spring:</span><br>  <span class=\"hljs-attr\">data:</span><br>    <span class=\"hljs-attr\">mongodb:</span><br>      <span class=\"hljs-attr\">uri:</span> <span class=\"hljs-string\">mongodb://127.0.0.1:27017/test</span><br></code></pre></td></tr></table></figure>\n<h3 id=\"2-代码示例\"><a href=\"#2-代码示例\" class=\"headerlink\" title=\"2. 代码示例\"></a>2. 代码示例</h3><p>首先，我们创建一个test数据库，在这个数据库中，创建一个user集合，用于演示：</p>\n<img src=\"/2024/04/03/MongoDB%E5%AD%A6%E4%B9%A02%E2%80%94SpringBoot%E9%9B%86%E6%88%90MongoDB/1.png\" class=\"\">\n<h4 id=\"2-1-MongoTemplate使用\"><a href=\"#2-1-MongoTemplate使用\" class=\"headerlink\" title=\"2.1. MongoTemplate使用\"></a>2.1. MongoTemplate使用</h4><h5 id=\"2-1-1-插入和简单查询\"><a href=\"#2-1-1-插入和简单查询\" class=\"headerlink\" title=\"2.1.1. 插入和简单查询\"></a>2.1.1. 插入和简单查询</h5><p>我们添加测试方法，首先测试插入和一些简单查询：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Test</span><br>   <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">testInsertAndSimpleFind</span><span class=\"hljs-params\">()</span> &#123;<br>       <span class=\"hljs-comment\">// 测试添加</span><br>       <span class=\"hljs-type\">User</span> <span class=\"hljs-variable\">createUser</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">User</span>();<br>       createUser.setAge(<span class=\"hljs-number\">20</span>);<br>       createUser.setName(<span class=\"hljs-string\">&quot;cxy&quot;</span>);<br>       createUser.setEmail(<span class=\"hljs-string\">&quot;123@qq.com&quot;</span>);<br>       createUser.setCreateTime(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Date</span>());<br>       createUser = mongoTemplate.insert(createUser);<br>       System.out.println(JSONObject.toJSONString(createUser));<br><br>       <span class=\"hljs-comment\">// 根据id查询</span><br>       <span class=\"hljs-type\">User</span> <span class=\"hljs-variable\">userById</span> <span class=\"hljs-operator\">=</span> mongoTemplate.findById(createUser.getId(), User.class);<br>       System.out.println(JSONObject.toJSONString(userById));<br><br>       <span class=\"hljs-comment\">// 查询全部</span><br>       List&lt;User&gt; allUsers = mongoTemplate.findAll(User.class);<br>       System.out.println(JSONObject.toJSONString(allUsers));<br>   &#125;<br></code></pre></td></tr></table></figure>\n<p>执行结果如下：</p>\n<img src=\"/2024/04/03/MongoDB%E5%AD%A6%E4%B9%A02%E2%80%94SpringBoot%E9%9B%86%E6%88%90MongoDB/2.png\" class=\"\">\n<p>查看数据库，确实多了一条记录</p>\n<img src=\"/2024/04/03/MongoDB%E5%AD%A6%E4%B9%A02%E2%80%94SpringBoot%E9%9B%86%E6%88%90MongoDB/3.png\" class=\"\">\n<h5 id=\"2-1-2-更新\"><a href=\"#2-1-2-更新\" class=\"headerlink\" title=\"2.1.2. 更新\"></a>2.1.2. 更新</h5><p>接着我们测试mongoTemplate的修改</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Test</span><br>  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">testUpdateMongoTemplate</span><span class=\"hljs-params\">()</span> &#123;<br>      <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">id</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;65ea70bf090d176df859e5fa&quot;</span>;<br>      <span class=\"hljs-type\">Query</span> <span class=\"hljs-variable\">query</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Query</span>(Criteria.where(<span class=\"hljs-string\">&quot;_id&quot;</span>).is(id));<br>      <span class=\"hljs-type\">Update</span> <span class=\"hljs-variable\">update</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Update</span>();<br>      update.set(<span class=\"hljs-string\">&quot;name&quot;</span>, <span class=\"hljs-string\">&quot;cxy123&quot;</span>);<br>      update.set(<span class=\"hljs-string\">&quot;age&quot;</span>, <span class=\"hljs-number\">20</span>);<br>      <span class=\"hljs-type\">UpdateResult</span> <span class=\"hljs-variable\">upsert</span> <span class=\"hljs-operator\">=</span> mongoTemplate.upsert(query, update, User.class);<br>      <span class=\"hljs-type\">long</span> <span class=\"hljs-variable\">modifiedCount</span> <span class=\"hljs-operator\">=</span> upsert.getModifiedCount();<br>      System.out.println(<span class=\"hljs-string\">&quot;受影响的条数：&quot;</span> + modifiedCount);<br>  &#125;<br></code></pre></td></tr></table></figure>\n<p>执行上述代码，查看数据库，数据库确实被修改了。</p>\n<img src=\"/2024/04/03/MongoDB%E5%AD%A6%E4%B9%A02%E2%80%94SpringBoot%E9%9B%86%E6%88%90MongoDB/4.png\" class=\"\">\n<h5 id=\"2-1-3-删除\"><a href=\"#2-1-3-删除\" class=\"headerlink\" title=\"2.1.3. 删除\"></a>2.1.3. 删除</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Test</span><br>   <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">testDeleteMongoTemplate</span><span class=\"hljs-params\">()</span> &#123;<br>       <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">id</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;65ea70bf090d176df859e5fa&quot;</span>;<br>       <span class=\"hljs-type\">Query</span> <span class=\"hljs-variable\">query</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Query</span>(Criteria.where(<span class=\"hljs-string\">&quot;_id&quot;</span>).is(id));<br>       <span class=\"hljs-type\">DeleteResult</span> <span class=\"hljs-variable\">deleteResult</span> <span class=\"hljs-operator\">=</span> mongoTemplate.remove(query, User.class);<br>       System.out.println(<span class=\"hljs-string\">&quot;删除个数：&quot;</span> + deleteResult.getDeletedCount());<br>   &#125;<br></code></pre></td></tr></table></figure>\n<p>执行完毕后，查看数控库，相关的集合被成功删除。</p>\n<img src=\"/2024/04/03/MongoDB%E5%AD%A6%E4%B9%A02%E2%80%94SpringBoot%E9%9B%86%E6%88%90MongoDB/5.png\" class=\"\">\n<h5 id=\"2-1-4-条件查询\"><a href=\"#2-1-4-条件查询\" class=\"headerlink\" title=\"2.1.4. 条件查询\"></a>2.1.4. 条件查询</h5><p>我们先插入一些测试数据，方便后续测试条件查询</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Test</span><br> <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">insertTestUser</span><span class=\"hljs-params\">()</span> &#123;<br>     <span class=\"hljs-type\">User</span> <span class=\"hljs-variable\">user1</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">User</span>();<br>     user1.setName(<span class=\"hljs-string\">&quot;张三&quot;</span>);<br>     user1.setAge(<span class=\"hljs-number\">10</span>);<br>     user1.setEmail(<span class=\"hljs-string\">&quot;zhangsna@qq.com&quot;</span>);<br>     user1.setCreateTime(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Date</span>());<br>     <br>     <span class=\"hljs-type\">User</span> <span class=\"hljs-variable\">user2</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">User</span>();<br>     user2.setName(<span class=\"hljs-string\">&quot;李四&quot;</span>);<br>     user2.setAge(<span class=\"hljs-number\">20</span>);<br>     user2.setEmail(<span class=\"hljs-string\">&quot;lisi@163.com&quot;</span>);<br>     user2.setCreateTime(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Date</span>());<br>     <br>     <span class=\"hljs-type\">User</span> <span class=\"hljs-variable\">user3</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">User</span>();<br>     user3.setName(<span class=\"hljs-string\">&quot;王五&quot;</span>);<br>     user3.setAge(<span class=\"hljs-number\">30</span>);<br>     user3.setCreateTime(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Date</span>());<br>     <br>     List&lt;User&gt; userList = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayList</span>&lt;&gt;();<br>     userList.add(user1);<br>     userList.add(user2);<br>     userList.add(user3);<br>     <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">10</span>; i++) &#123;<br>         <span class=\"hljs-type\">User</span> <span class=\"hljs-variable\">user</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">User</span>();<br>         user.setName(<span class=\"hljs-string\">&quot;name:&quot;</span> + i);<br>         user.setAge(<span class=\"hljs-number\">20</span> + i);<br>         user.setEmail(<span class=\"hljs-string\">&quot;template&quot;</span> + i + <span class=\"hljs-string\">&quot;@qq.com&quot;</span>);<br>         user.setCreateTime(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Date</span>());<br>         userList.add(user);<br>     &#125;<br>     mongoTemplate.insert(userList, User.class);<br> &#125;<br></code></pre></td></tr></table></figure>\n<p>假设我们现在查询姓名为张三的用户：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Test</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">testFindByName</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-type\">Query</span> <span class=\"hljs-variable\">query</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Query</span>();<br>        query.addCriteria(Criteria.where(<span class=\"hljs-string\">&quot;name&quot;</span>).is(<span class=\"hljs-string\">&quot;张三&quot;</span>));<br>        <span class=\"hljs-type\">User</span> <span class=\"hljs-variable\">zhangsan</span> <span class=\"hljs-operator\">=</span> mongoTemplate.findOne(query, User.class);<br>        System.out.println(<span class=\"hljs-string\">&quot;张三：&quot;</span> + JSONObject.toJSONString(zhangsan));<br>    &#125;<br></code></pre></td></tr></table></figure>\n<p>执行结果如下：</p>\n<img src=\"/2024/04/03/MongoDB%E5%AD%A6%E4%B9%A02%E2%80%94SpringBoot%E9%9B%86%E6%88%90MongoDB/6.png\" class=\"\">\n<p>查询年龄在20到30之间的用户：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Test</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">testFindByAge</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-type\">Query</span> <span class=\"hljs-variable\">query</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Query</span>();<br>        query.addCriteria(Criteria.where(<span class=\"hljs-string\">&quot;age&quot;</span>).gte(<span class=\"hljs-number\">20</span>).lte(<span class=\"hljs-number\">30</span>));<br>        List&lt;User&gt; users = mongoTemplate.find(query, User.class);<br>        <span class=\"hljs-keyword\">for</span> (User user : users) &#123;<br>            System.out.println(<span class=\"hljs-string\">&quot;age:&quot;</span> + user.getAge() + <span class=\"hljs-string\">&quot;:&quot;</span> + JSONObject.toJSONString(user));<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure>\n<p>结果如下：</p>\n<img src=\"/2024/04/03/MongoDB%E5%AD%A6%E4%B9%A02%E2%80%94SpringBoot%E9%9B%86%E6%88%90MongoDB/7.png\" class=\"\">\n<p>当我们要进行查询的时候，可以使用where来查询，上述演示的，只是对一个field进行条件查询，当我们需要对多个field进行条件查询时，可以使用and来连接，假设我们要查询姓名为王五并且年龄为30岁的人，测试方法如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Test</span><br>  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">testFindByNameAndAge</span><span class=\"hljs-params\">()</span> &#123;<br>      <span class=\"hljs-type\">Query</span> <span class=\"hljs-variable\">query</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Query</span>();<br>      query.addCriteria(Criteria.where(<span class=\"hljs-string\">&quot;name&quot;</span>).is(<span class=\"hljs-string\">&quot;王五&quot;</span>)<br>              .and(<span class=\"hljs-string\">&quot;age&quot;</span>).is(<span class=\"hljs-number\">30</span>));<br><br>      List&lt;User&gt; users = mongoTemplate.find(query, User.class);<br>      <span class=\"hljs-keyword\">for</span> (User user : users) &#123;<br>          System.out.println(<span class=\"hljs-string\">&quot;age:&quot;</span> + user.getAge() + <span class=\"hljs-string\">&quot;:&quot;</span> + JSONObject.toJSONString(user));<br>      &#125;<br>  &#125;<br></code></pre></td></tr></table></figure>\n<p>测试结果如下：</p>\n<img src=\"/2024/04/03/MongoDB%E5%AD%A6%E4%B9%A02%E2%80%94SpringBoot%E9%9B%86%E6%88%90MongoDB/8.png\" class=\"\">\n<h5 id=\"2-1-5-分页查询\"><a href=\"#2-1-5-分页查询\" class=\"headerlink\" title=\"2.1.5. 分页查询\"></a>2.1.5. 分页查询</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Test</span><br>   <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">testPage</span><span class=\"hljs-params\">()</span> &#123;<br>       <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">pageNo</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">1</span>;<br>       <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">pageSize</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">3</span>;<br><br>       <span class=\"hljs-type\">Query</span> <span class=\"hljs-variable\">query</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Query</span>();<br>       query.skip((pageNo - <span class=\"hljs-number\">1</span>) * pageSize).limit(pageSize);<br>       List&lt;User&gt; users = mongoTemplate.find(query, User.class);<br>       <span class=\"hljs-keyword\">for</span> (User user : users) &#123;<br>           System.out.println(<span class=\"hljs-string\">&quot;user:&quot;</span> + JSONObject.toJSONString(user));<br>       &#125;<br>   &#125;<br></code></pre></td></tr></table></figure>\n<p>测试结果如下：</p>\n<img src=\"/2024/04/03/MongoDB%E5%AD%A6%E4%B9%A02%E2%80%94SpringBoot%E9%9B%86%E6%88%90MongoDB/9.png\" class=\"\">\n<h4 id=\"2-2-MongoRepository\"><a href=\"#2-2-MongoRepository\" class=\"headerlink\" title=\"2.2. MongoRepository\"></a>2.2. MongoRepository</h4><p>Spring Data提供对mongodb数据访问的支持，我们只需要继承MongoRepository类，按照SpringData规范就可以了。<br>首先，我们添加UserRepository接口，继承MongoRepository&lt;User, String&gt;</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> org.example.repository;<br><br><span class=\"hljs-keyword\">import</span> org.example.pojo.User;<br><span class=\"hljs-keyword\">import</span> org.springframework.data.mongodb.repository.MongoRepository;<br><span class=\"hljs-keyword\">import</span> org.springframework.stereotype.Repository;<br><br><span class=\"hljs-meta\">@Repository</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">UserRepository</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">MongoRepository</span>&lt;User, String&gt; &#123;<br>&#125;<br><br>然后创建UserService，用于对user进行增删改查<br><span class=\"hljs-keyword\">package</span> org.example.service;<br><br><span class=\"hljs-keyword\">import</span> org.example.pojo.User;<br><span class=\"hljs-keyword\">import</span> org.example.repository.UserRepository;<br><span class=\"hljs-keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class=\"hljs-keyword\">import</span> org.springframework.data.domain.*;<br><span class=\"hljs-keyword\">import</span> org.springframework.stereotype.Service;<br><br><span class=\"hljs-keyword\">import</span> java.util.Date;<br><span class=\"hljs-keyword\">import</span> java.util.List;<br><br><span class=\"hljs-meta\">@Service</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">UserService</span> &#123;<br>    <span class=\"hljs-meta\">@Autowired</span><br>    <span class=\"hljs-keyword\">private</span> UserRepository userRepository;<br>    <br>    <span class=\"hljs-keyword\">public</span> User <span class=\"hljs-title function_\">saveUser</span><span class=\"hljs-params\">(User user)</span> &#123;<br>        user.setCreateTime(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Date</span>());<br>        <span class=\"hljs-keyword\">return</span> userRepository.save(user);<br>    &#125;<br>    <br>    <span class=\"hljs-keyword\">public</span> User <span class=\"hljs-title function_\">updateUser</span><span class=\"hljs-params\">(User user)</span> &#123;<br>        <span class=\"hljs-comment\">// 插入和更新都是使用save</span><br>        <span class=\"hljs-keyword\">return</span> userRepository.save(user);<br>    &#125;<br>    <br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">removeUserById</span><span class=\"hljs-params\">(String id)</span> &#123;<br>        userRepository.deleteById(id);<br>    &#125;<br>    <br>    <span class=\"hljs-keyword\">public</span> User <span class=\"hljs-title function_\">findById</span><span class=\"hljs-params\">(String id)</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> userRepository.findById(id).get();<br>    &#125;<br>    <br>    <span class=\"hljs-keyword\">public</span> List&lt;User&gt; <span class=\"hljs-title function_\">findAll</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> userRepository.findAll();<br>    &#125;<br>    <br>    <span class=\"hljs-keyword\">public</span> List&lt;User&gt; <span class=\"hljs-title function_\">findByNameAndAge</span><span class=\"hljs-params\">(String name, <span class=\"hljs-type\">int</span> age)</span> &#123;<br>        <span class=\"hljs-type\">User</span> <span class=\"hljs-variable\">conditionUser</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">User</span>();<br>        conditionUser.setName(name);<br>        conditionUser.setAge(age);<br>        Example&lt;User&gt; example = Example.of(conditionUser);<br>        <span class=\"hljs-keyword\">return</span> userRepository.findAll(example);<br>    &#125;<br>    <br>    <span class=\"hljs-keyword\">public</span> List&lt;User&gt; <span class=\"hljs-title function_\">findPage</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> pageNo, <span class=\"hljs-type\">int</span> pageSize)</span> &#123;<br>        <span class=\"hljs-type\">Pageable</span> <span class=\"hljs-variable\">pageable</span> <span class=\"hljs-operator\">=</span> PageRequest.of(pageNo, pageSize);<br>        Page&lt;User&gt; page = userRepository.findAll(pageable);<br>        <span class=\"hljs-keyword\">return</span> page.getContent();<br>    &#125;<br>    <br>   <br>&#125;<br></code></pre></td></tr></table></figure>\n<p>添加测试方法，测试查询是否生效：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Autowired</span><br>   <span class=\"hljs-keyword\">private</span> UserService userService;<br><br>   <span class=\"hljs-meta\">@Test</span><br>   <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">testFind</span><span class=\"hljs-params\">()</span> &#123;<br>       <span class=\"hljs-comment\">// 根据id查询</span><br>       <span class=\"hljs-type\">User</span> <span class=\"hljs-variable\">findById</span> <span class=\"hljs-operator\">=</span> userService.findById(<span class=\"hljs-string\">&quot;65ea7586b4c1f3160f791b06&quot;</span>);<br>       System.out.println(JSONObject.toJSONString(findById));<br><br>       <span class=\"hljs-comment\">// 根据姓名和年龄查询</span><br>       List&lt;User&gt; zhangsan = userService.findByNameAndAge(<span class=\"hljs-string\">&quot;张三&quot;</span>, <span class=\"hljs-number\">10</span>);<br>       System.out.println(JSONObject.toJSONString(zhangsan));<br><br>       <span class=\"hljs-comment\">// 分页查询</span><br>       List&lt;User&gt; page = userService.findPage(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">3</span>);<br>       System.out.println(JSONObject.toJSONString(page));<br><br>       <span class=\"hljs-comment\">// 查询全部</span><br>       List&lt;User&gt; all = userService.findAll();<br>       System.out.println(JSONObject.toJSONString(all));<br><br>   &#125;<br></code></pre></td></tr></table></figure>\n<p>查询结果如下：</p>\n<img src=\"/2024/04/03/MongoDB%E5%AD%A6%E4%B9%A02%E2%80%94SpringBoot%E9%9B%86%E6%88%90MongoDB/10.png\" class=\"\">","excerpt":"","more":"<h3 id=\"1-引言\"><a href=\"#1-引言\" class=\"headerlink\" title=\"1. 引言\"></a>1. 引言</h3><p>SpringBoot要集成MongoDB，可以直接使用spring-data-mongodb提供的MongoTemplate和MongoRepository这两种方式，前者操作比较灵活，后者比较简单。<br>引入依赖如下：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependencies</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>spring-boot-starter<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>spring-boot-starter-data-mongodb<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>spring-boot-starter-web<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>spring-boot-starter-test<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">scope</span>&gt;</span>test<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">scope</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.projectlombok<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>lombok<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>joda-time<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>joda-time<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>2.10.1<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span><br><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>spring-boot-starter-test<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">scope</span>&gt;</span>test<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">scope</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">exclusions</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">exclusion</span>&gt;</span><br>                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.junit.vintage<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span><br>                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>junit-vintage-engine<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">exclusion</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">exclusions</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<p>application.yml配置信息如下：</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yml\"><span class=\"hljs-attr\">spring:</span><br>  <span class=\"hljs-attr\">data:</span><br>    <span class=\"hljs-attr\">mongodb:</span><br>      <span class=\"hljs-attr\">uri:</span> <span class=\"hljs-string\">mongodb://127.0.0.1:27017/test</span><br></code></pre></td></tr></table></figure>\n<h3 id=\"2-代码示例\"><a href=\"#2-代码示例\" class=\"headerlink\" title=\"2. 代码示例\"></a>2. 代码示例</h3><p>首先，我们创建一个test数据库，在这个数据库中，创建一个user集合，用于演示：</p>\n<img src=\"/2024/04/03/MongoDB%E5%AD%A6%E4%B9%A02%E2%80%94SpringBoot%E9%9B%86%E6%88%90MongoDB/1.png\" class=\"\">\n<h4 id=\"2-1-MongoTemplate使用\"><a href=\"#2-1-MongoTemplate使用\" class=\"headerlink\" title=\"2.1. MongoTemplate使用\"></a>2.1. MongoTemplate使用</h4><h5 id=\"2-1-1-插入和简单查询\"><a href=\"#2-1-1-插入和简单查询\" class=\"headerlink\" title=\"2.1.1. 插入和简单查询\"></a>2.1.1. 插入和简单查询</h5><p>我们添加测试方法，首先测试插入和一些简单查询：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Test</span><br>   <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">testInsertAndSimpleFind</span><span class=\"hljs-params\">()</span> &#123;<br>       <span class=\"hljs-comment\">// 测试添加</span><br>       <span class=\"hljs-type\">User</span> <span class=\"hljs-variable\">createUser</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">User</span>();<br>       createUser.setAge(<span class=\"hljs-number\">20</span>);<br>       createUser.setName(<span class=\"hljs-string\">&quot;cxy&quot;</span>);<br>       createUser.setEmail(<span class=\"hljs-string\">&quot;123@qq.com&quot;</span>);<br>       createUser.setCreateTime(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Date</span>());<br>       createUser = mongoTemplate.insert(createUser);<br>       System.out.println(JSONObject.toJSONString(createUser));<br><br>       <span class=\"hljs-comment\">// 根据id查询</span><br>       <span class=\"hljs-type\">User</span> <span class=\"hljs-variable\">userById</span> <span class=\"hljs-operator\">=</span> mongoTemplate.findById(createUser.getId(), User.class);<br>       System.out.println(JSONObject.toJSONString(userById));<br><br>       <span class=\"hljs-comment\">// 查询全部</span><br>       List&lt;User&gt; allUsers = mongoTemplate.findAll(User.class);<br>       System.out.println(JSONObject.toJSONString(allUsers));<br>   &#125;<br></code></pre></td></tr></table></figure>\n<p>执行结果如下：</p>\n<img src=\"/2024/04/03/MongoDB%E5%AD%A6%E4%B9%A02%E2%80%94SpringBoot%E9%9B%86%E6%88%90MongoDB/2.png\" class=\"\">\n<p>查看数据库，确实多了一条记录</p>\n<img src=\"/2024/04/03/MongoDB%E5%AD%A6%E4%B9%A02%E2%80%94SpringBoot%E9%9B%86%E6%88%90MongoDB/3.png\" class=\"\">\n<h5 id=\"2-1-2-更新\"><a href=\"#2-1-2-更新\" class=\"headerlink\" title=\"2.1.2. 更新\"></a>2.1.2. 更新</h5><p>接着我们测试mongoTemplate的修改</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Test</span><br>  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">testUpdateMongoTemplate</span><span class=\"hljs-params\">()</span> &#123;<br>      <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">id</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;65ea70bf090d176df859e5fa&quot;</span>;<br>      <span class=\"hljs-type\">Query</span> <span class=\"hljs-variable\">query</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Query</span>(Criteria.where(<span class=\"hljs-string\">&quot;_id&quot;</span>).is(id));<br>      <span class=\"hljs-type\">Update</span> <span class=\"hljs-variable\">update</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Update</span>();<br>      update.set(<span class=\"hljs-string\">&quot;name&quot;</span>, <span class=\"hljs-string\">&quot;cxy123&quot;</span>);<br>      update.set(<span class=\"hljs-string\">&quot;age&quot;</span>, <span class=\"hljs-number\">20</span>);<br>      <span class=\"hljs-type\">UpdateResult</span> <span class=\"hljs-variable\">upsert</span> <span class=\"hljs-operator\">=</span> mongoTemplate.upsert(query, update, User.class);<br>      <span class=\"hljs-type\">long</span> <span class=\"hljs-variable\">modifiedCount</span> <span class=\"hljs-operator\">=</span> upsert.getModifiedCount();<br>      System.out.println(<span class=\"hljs-string\">&quot;受影响的条数：&quot;</span> + modifiedCount);<br>  &#125;<br></code></pre></td></tr></table></figure>\n<p>执行上述代码，查看数据库，数据库确实被修改了。</p>\n<img src=\"/2024/04/03/MongoDB%E5%AD%A6%E4%B9%A02%E2%80%94SpringBoot%E9%9B%86%E6%88%90MongoDB/4.png\" class=\"\">\n<h5 id=\"2-1-3-删除\"><a href=\"#2-1-3-删除\" class=\"headerlink\" title=\"2.1.3. 删除\"></a>2.1.3. 删除</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Test</span><br>   <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">testDeleteMongoTemplate</span><span class=\"hljs-params\">()</span> &#123;<br>       <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">id</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;65ea70bf090d176df859e5fa&quot;</span>;<br>       <span class=\"hljs-type\">Query</span> <span class=\"hljs-variable\">query</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Query</span>(Criteria.where(<span class=\"hljs-string\">&quot;_id&quot;</span>).is(id));<br>       <span class=\"hljs-type\">DeleteResult</span> <span class=\"hljs-variable\">deleteResult</span> <span class=\"hljs-operator\">=</span> mongoTemplate.remove(query, User.class);<br>       System.out.println(<span class=\"hljs-string\">&quot;删除个数：&quot;</span> + deleteResult.getDeletedCount());<br>   &#125;<br></code></pre></td></tr></table></figure>\n<p>执行完毕后，查看数控库，相关的集合被成功删除。</p>\n<img src=\"/2024/04/03/MongoDB%E5%AD%A6%E4%B9%A02%E2%80%94SpringBoot%E9%9B%86%E6%88%90MongoDB/5.png\" class=\"\">\n<h5 id=\"2-1-4-条件查询\"><a href=\"#2-1-4-条件查询\" class=\"headerlink\" title=\"2.1.4. 条件查询\"></a>2.1.4. 条件查询</h5><p>我们先插入一些测试数据，方便后续测试条件查询</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Test</span><br> <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">insertTestUser</span><span class=\"hljs-params\">()</span> &#123;<br>     <span class=\"hljs-type\">User</span> <span class=\"hljs-variable\">user1</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">User</span>();<br>     user1.setName(<span class=\"hljs-string\">&quot;张三&quot;</span>);<br>     user1.setAge(<span class=\"hljs-number\">10</span>);<br>     user1.setEmail(<span class=\"hljs-string\">&quot;zhangsna@qq.com&quot;</span>);<br>     user1.setCreateTime(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Date</span>());<br>     <br>     <span class=\"hljs-type\">User</span> <span class=\"hljs-variable\">user2</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">User</span>();<br>     user2.setName(<span class=\"hljs-string\">&quot;李四&quot;</span>);<br>     user2.setAge(<span class=\"hljs-number\">20</span>);<br>     user2.setEmail(<span class=\"hljs-string\">&quot;lisi@163.com&quot;</span>);<br>     user2.setCreateTime(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Date</span>());<br>     <br>     <span class=\"hljs-type\">User</span> <span class=\"hljs-variable\">user3</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">User</span>();<br>     user3.setName(<span class=\"hljs-string\">&quot;王五&quot;</span>);<br>     user3.setAge(<span class=\"hljs-number\">30</span>);<br>     user3.setCreateTime(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Date</span>());<br>     <br>     List&lt;User&gt; userList = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayList</span>&lt;&gt;();<br>     userList.add(user1);<br>     userList.add(user2);<br>     userList.add(user3);<br>     <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">10</span>; i++) &#123;<br>         <span class=\"hljs-type\">User</span> <span class=\"hljs-variable\">user</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">User</span>();<br>         user.setName(<span class=\"hljs-string\">&quot;name:&quot;</span> + i);<br>         user.setAge(<span class=\"hljs-number\">20</span> + i);<br>         user.setEmail(<span class=\"hljs-string\">&quot;template&quot;</span> + i + <span class=\"hljs-string\">&quot;@qq.com&quot;</span>);<br>         user.setCreateTime(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Date</span>());<br>         userList.add(user);<br>     &#125;<br>     mongoTemplate.insert(userList, User.class);<br> &#125;<br></code></pre></td></tr></table></figure>\n<p>假设我们现在查询姓名为张三的用户：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Test</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">testFindByName</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-type\">Query</span> <span class=\"hljs-variable\">query</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Query</span>();<br>        query.addCriteria(Criteria.where(<span class=\"hljs-string\">&quot;name&quot;</span>).is(<span class=\"hljs-string\">&quot;张三&quot;</span>));<br>        <span class=\"hljs-type\">User</span> <span class=\"hljs-variable\">zhangsan</span> <span class=\"hljs-operator\">=</span> mongoTemplate.findOne(query, User.class);<br>        System.out.println(<span class=\"hljs-string\">&quot;张三：&quot;</span> + JSONObject.toJSONString(zhangsan));<br>    &#125;<br></code></pre></td></tr></table></figure>\n<p>执行结果如下：</p>\n<img src=\"/2024/04/03/MongoDB%E5%AD%A6%E4%B9%A02%E2%80%94SpringBoot%E9%9B%86%E6%88%90MongoDB/6.png\" class=\"\">\n<p>查询年龄在20到30之间的用户：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Test</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">testFindByAge</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-type\">Query</span> <span class=\"hljs-variable\">query</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Query</span>();<br>        query.addCriteria(Criteria.where(<span class=\"hljs-string\">&quot;age&quot;</span>).gte(<span class=\"hljs-number\">20</span>).lte(<span class=\"hljs-number\">30</span>));<br>        List&lt;User&gt; users = mongoTemplate.find(query, User.class);<br>        <span class=\"hljs-keyword\">for</span> (User user : users) &#123;<br>            System.out.println(<span class=\"hljs-string\">&quot;age:&quot;</span> + user.getAge() + <span class=\"hljs-string\">&quot;:&quot;</span> + JSONObject.toJSONString(user));<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure>\n<p>结果如下：</p>\n<img src=\"/2024/04/03/MongoDB%E5%AD%A6%E4%B9%A02%E2%80%94SpringBoot%E9%9B%86%E6%88%90MongoDB/7.png\" class=\"\">\n<p>当我们要进行查询的时候，可以使用where来查询，上述演示的，只是对一个field进行条件查询，当我们需要对多个field进行条件查询时，可以使用and来连接，假设我们要查询姓名为王五并且年龄为30岁的人，测试方法如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Test</span><br>  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">testFindByNameAndAge</span><span class=\"hljs-params\">()</span> &#123;<br>      <span class=\"hljs-type\">Query</span> <span class=\"hljs-variable\">query</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Query</span>();<br>      query.addCriteria(Criteria.where(<span class=\"hljs-string\">&quot;name&quot;</span>).is(<span class=\"hljs-string\">&quot;王五&quot;</span>)<br>              .and(<span class=\"hljs-string\">&quot;age&quot;</span>).is(<span class=\"hljs-number\">30</span>));<br><br>      List&lt;User&gt; users = mongoTemplate.find(query, User.class);<br>      <span class=\"hljs-keyword\">for</span> (User user : users) &#123;<br>          System.out.println(<span class=\"hljs-string\">&quot;age:&quot;</span> + user.getAge() + <span class=\"hljs-string\">&quot;:&quot;</span> + JSONObject.toJSONString(user));<br>      &#125;<br>  &#125;<br></code></pre></td></tr></table></figure>\n<p>测试结果如下：</p>\n<img src=\"/2024/04/03/MongoDB%E5%AD%A6%E4%B9%A02%E2%80%94SpringBoot%E9%9B%86%E6%88%90MongoDB/8.png\" class=\"\">\n<h5 id=\"2-1-5-分页查询\"><a href=\"#2-1-5-分页查询\" class=\"headerlink\" title=\"2.1.5. 分页查询\"></a>2.1.5. 分页查询</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Test</span><br>   <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">testPage</span><span class=\"hljs-params\">()</span> &#123;<br>       <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">pageNo</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">1</span>;<br>       <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">pageSize</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">3</span>;<br><br>       <span class=\"hljs-type\">Query</span> <span class=\"hljs-variable\">query</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Query</span>();<br>       query.skip((pageNo - <span class=\"hljs-number\">1</span>) * pageSize).limit(pageSize);<br>       List&lt;User&gt; users = mongoTemplate.find(query, User.class);<br>       <span class=\"hljs-keyword\">for</span> (User user : users) &#123;<br>           System.out.println(<span class=\"hljs-string\">&quot;user:&quot;</span> + JSONObject.toJSONString(user));<br>       &#125;<br>   &#125;<br></code></pre></td></tr></table></figure>\n<p>测试结果如下：</p>\n<img src=\"/2024/04/03/MongoDB%E5%AD%A6%E4%B9%A02%E2%80%94SpringBoot%E9%9B%86%E6%88%90MongoDB/9.png\" class=\"\">\n<h4 id=\"2-2-MongoRepository\"><a href=\"#2-2-MongoRepository\" class=\"headerlink\" title=\"2.2. MongoRepository\"></a>2.2. MongoRepository</h4><p>Spring Data提供对mongodb数据访问的支持，我们只需要继承MongoRepository类，按照SpringData规范就可以了。<br>首先，我们添加UserRepository接口，继承MongoRepository&lt;User, String&gt;</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> org.example.repository;<br><br><span class=\"hljs-keyword\">import</span> org.example.pojo.User;<br><span class=\"hljs-keyword\">import</span> org.springframework.data.mongodb.repository.MongoRepository;<br><span class=\"hljs-keyword\">import</span> org.springframework.stereotype.Repository;<br><br><span class=\"hljs-meta\">@Repository</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">UserRepository</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">MongoRepository</span>&lt;User, String&gt; &#123;<br>&#125;<br><br>然后创建UserService，用于对user进行增删改查<br><span class=\"hljs-keyword\">package</span> org.example.service;<br><br><span class=\"hljs-keyword\">import</span> org.example.pojo.User;<br><span class=\"hljs-keyword\">import</span> org.example.repository.UserRepository;<br><span class=\"hljs-keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class=\"hljs-keyword\">import</span> org.springframework.data.domain.*;<br><span class=\"hljs-keyword\">import</span> org.springframework.stereotype.Service;<br><br><span class=\"hljs-keyword\">import</span> java.util.Date;<br><span class=\"hljs-keyword\">import</span> java.util.List;<br><br><span class=\"hljs-meta\">@Service</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">UserService</span> &#123;<br>    <span class=\"hljs-meta\">@Autowired</span><br>    <span class=\"hljs-keyword\">private</span> UserRepository userRepository;<br>    <br>    <span class=\"hljs-keyword\">public</span> User <span class=\"hljs-title function_\">saveUser</span><span class=\"hljs-params\">(User user)</span> &#123;<br>        user.setCreateTime(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Date</span>());<br>        <span class=\"hljs-keyword\">return</span> userRepository.save(user);<br>    &#125;<br>    <br>    <span class=\"hljs-keyword\">public</span> User <span class=\"hljs-title function_\">updateUser</span><span class=\"hljs-params\">(User user)</span> &#123;<br>        <span class=\"hljs-comment\">// 插入和更新都是使用save</span><br>        <span class=\"hljs-keyword\">return</span> userRepository.save(user);<br>    &#125;<br>    <br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">removeUserById</span><span class=\"hljs-params\">(String id)</span> &#123;<br>        userRepository.deleteById(id);<br>    &#125;<br>    <br>    <span class=\"hljs-keyword\">public</span> User <span class=\"hljs-title function_\">findById</span><span class=\"hljs-params\">(String id)</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> userRepository.findById(id).get();<br>    &#125;<br>    <br>    <span class=\"hljs-keyword\">public</span> List&lt;User&gt; <span class=\"hljs-title function_\">findAll</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> userRepository.findAll();<br>    &#125;<br>    <br>    <span class=\"hljs-keyword\">public</span> List&lt;User&gt; <span class=\"hljs-title function_\">findByNameAndAge</span><span class=\"hljs-params\">(String name, <span class=\"hljs-type\">int</span> age)</span> &#123;<br>        <span class=\"hljs-type\">User</span> <span class=\"hljs-variable\">conditionUser</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">User</span>();<br>        conditionUser.setName(name);<br>        conditionUser.setAge(age);<br>        Example&lt;User&gt; example = Example.of(conditionUser);<br>        <span class=\"hljs-keyword\">return</span> userRepository.findAll(example);<br>    &#125;<br>    <br>    <span class=\"hljs-keyword\">public</span> List&lt;User&gt; <span class=\"hljs-title function_\">findPage</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> pageNo, <span class=\"hljs-type\">int</span> pageSize)</span> &#123;<br>        <span class=\"hljs-type\">Pageable</span> <span class=\"hljs-variable\">pageable</span> <span class=\"hljs-operator\">=</span> PageRequest.of(pageNo, pageSize);<br>        Page&lt;User&gt; page = userRepository.findAll(pageable);<br>        <span class=\"hljs-keyword\">return</span> page.getContent();<br>    &#125;<br>    <br>   <br>&#125;<br></code></pre></td></tr></table></figure>\n<p>添加测试方法，测试查询是否生效：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Autowired</span><br>   <span class=\"hljs-keyword\">private</span> UserService userService;<br><br>   <span class=\"hljs-meta\">@Test</span><br>   <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">testFind</span><span class=\"hljs-params\">()</span> &#123;<br>       <span class=\"hljs-comment\">// 根据id查询</span><br>       <span class=\"hljs-type\">User</span> <span class=\"hljs-variable\">findById</span> <span class=\"hljs-operator\">=</span> userService.findById(<span class=\"hljs-string\">&quot;65ea7586b4c1f3160f791b06&quot;</span>);<br>       System.out.println(JSONObject.toJSONString(findById));<br><br>       <span class=\"hljs-comment\">// 根据姓名和年龄查询</span><br>       List&lt;User&gt; zhangsan = userService.findByNameAndAge(<span class=\"hljs-string\">&quot;张三&quot;</span>, <span class=\"hljs-number\">10</span>);<br>       System.out.println(JSONObject.toJSONString(zhangsan));<br><br>       <span class=\"hljs-comment\">// 分页查询</span><br>       List&lt;User&gt; page = userService.findPage(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">3</span>);<br>       System.out.println(JSONObject.toJSONString(page));<br><br>       <span class=\"hljs-comment\">// 查询全部</span><br>       List&lt;User&gt; all = userService.findAll();<br>       System.out.println(JSONObject.toJSONString(all));<br><br>   &#125;<br></code></pre></td></tr></table></figure>\n<p>查询结果如下：</p>\n<img src=\"/2024/04/03/MongoDB%E5%AD%A6%E4%B9%A02%E2%80%94SpringBoot%E9%9B%86%E6%88%90MongoDB/10.png\" class=\"\">"},{"title":"登录、注册学习","date":"2024-04-03T06:16:59.000Z","_content":"### 1. 引言\n在项目中，登录、注册一般都是项目的必备功能，因为它们的用户管理和身份验证的基础，通过登录和注册，能有效保护用户个人数据，并根据用户权限，进行对应的资源访问控制。此外，还能对注册后的用户进行行为分析，以便提供对应的个性化服务。\n### 2. 登录、注册实现\n#### 2.1. 项目结构介绍\n这里的项目结构，借鉴周志明老师提出的凤凰架构，将项目分为四层：\n1）domain： 领域层，负责实现业务逻辑，即表达业务概念、处理业务状态信息以及业务规这些行为，提供对应的领域服务。\n2）infrastructure：基础设施层，向其他层提供通用的技术能力，譬如持久化能力、远程访问通信、工具集等。\n3）application：应用层，负责软件本身对外暴露的能力，通过整合各个领域服务，进行协助，对外提供服务，相当于各个领域服务的门面，类似于MVC架构中的service层。\n4）controller：负责向用户显示信息或解释用户发出的命令，即MVC架构中的controller层。\n{% asset_img 1.png %}\n#### 2.2. 简单实现\n##### 2.2.1. 准备工作\n首先引入下列依赖：\n```xml\n<dependencies>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-web</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>mysql</groupId>\n            <artifactId>mysql-connector-java</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>com.baomidou</groupId>\n            <artifactId>mybatis-plus-boot-starter</artifactId>\n            <version>3.4.3</version>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-test</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>org.projectlombok</groupId>\n            <artifactId>lombok</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>org.apache.commons</groupId>\n            <artifactId>commons-lang3</artifactId>\n        </dependency>\n    </dependencies>\n```\n创建对应的数据库，数据库表结构如下：\n{% asset_img 2.png %}\n这里的username添加了唯一索引，因为用户名一般都是唯一的。\n##### 2.2.2. domain层\n创建对应的实体类，以及相关的repository仓储层和domainservice领域服务\n```java\n@Data\n@TableName(value = \"t_user\")\npublic class User implements Serializable {\n    @TableId(type = IdType.AUTO)\n    private Integer id;\n\n    private String username;\n\n    private String password;\n\n    // 是否冻结 0未冻结 1已冻结\n    private Integer freeze;\n\n    private Date createTime;\n\n    private Date updateTime;\n\n    private Map<String, String> featuresMap;\n\n    private String features;\n}\n\n\n\npublic interface IUserRepository {\n\n    boolean saveUser(User user);\n\n\n    User findByUsernameAndPassword(String username, String password);\n}\n\n\n\n@Repository\npublic class UserRepository implements IUserRepository {\n    @Autowired\n    private UserMapper userMapper;\n\n    private static final int UN_FREEZE = 0;\n    private static final int FREEZE = 1;\n\n    @Override\n    public boolean saveUser(User user) {\n        user.setCreateTime(new Date());\n        user.setUpdateTime(new Date());\n        user.setFreeze(UN_FREEZE);\n        user.setFeaturesMap(new HashMap<>());\n        user.setFeatures(JSONObject.toJSONString(user.getFeaturesMap()));\n        return userMapper.insert(user) > 0;\n    }\n\n    @Override\n    public User findByUsernameAndPassword(String username, String password) {\n        LambdaQueryWrapper<User> queryWrapper = new LambdaQueryWrapper<>();\n        queryWrapper.eq(User::getUsername, username);\n        queryWrapper.eq(User::getPassword, password);\n        return userMapper.selectOne(queryWrapper);\n    }\n\n\n}\n\n\n@Service\npublic class UserService {\n    @Resource\n    private IUserRepository userRepository;\n\n    public User register(RegisterUserRequest request) {\n        User user = new User();\n        user.setUsername(request.getUsername());\n        user.setPassword(request.getPassword());\n        try {\n            userRepository.saveUser(user);\n            return user;\n        } catch (Exception e) {\n            e.printStackTrace();\n            throw new BusinessException(ResultCode.SERVER_ERROR);\n        }\n    }\n\n    public User login(LoginUserRequest request) {\n        return userRepository.findByUsernameAndPassword(request.getUsername(), request.getPassword());\n    }\n}\n```\n\n##### 2.2.3. controller层\n添加userController，在该类中添加注册和登录的接口\n```java\n@RestController\n@RequestMapping(value = \"/user\")\npublic class UserController {\n    @Autowired\n    private UserService userService;\n\n    @PostMapping(value = \"/register\")\n    public Response<User> register(@RequestBody RegisterUserRequest request) {\n        User user = userService.register(request);\n        return Response.success(user);\n    }\n\n    @PostMapping(value = \"/login\")\n    public Response<User> login(@RequestBody LoginUserRequest request) {\n        User user = userService.login(request);\n        if (user == null) {\n            throw new BusinessException(ResultCode.LOGIN_FAILED);\n        }\n        return Response.success(user);\n    }\n}\n\n\n\n@Data\npublic class LoginUserRequest implements Serializable {\n    private String username;\n\n    private String password;\n}\n\n\n\n@Data\npublic class RegisterUserRequest implements Serializable {\n    private String username;\n\n    private String password;\n\n}\n```\n##### 2.2.4. infrastructure层\n添加基础设施，比如异常类、返回结果类、错误码，全局异常处理等\n```java\npublic enum ResultCode {\n    SUCCESS(200, \"操作成功\"),\n    ACCESS_DENIED(403, \"没有权限\"),\n    FAILED(400, \"操作失败\"),\n\n    LOGIN_FAILED(400, \"用户不存在或密码错误\"),\n    SERVER_ERROR(500, \"服务器错误\");\n\n    private int code;\n\n    private String msg;\n\n    ResultCode(int code, String msg) {\n        this.code = code;\n        this.msg = msg;\n    }\n\n    public int getCode() {\n        return this.code;\n    }\n\n    public String getMsg() {\n        return this.msg;\n    }\n}\n\n\n\n\npublic class Response <T> {\n    private int code;\n\n    private String msg;\n\n    private T data;\n\n    private Response(Integer code, String msg) {\n        this.code = code;\n        this.msg = msg;\n    }\n\n    private Response(Integer code, String msg, T data) {\n        this.code = code;\n        this.msg = msg;\n        this.data = data;\n    }\n\n    private Response(ResultCode resultCode) {\n        this.code = resultCode.getCode();\n        this.msg = resultCode.getMsg();\n    }\n\n    private Response(ResultCode resultCode, T data) {\n        this.code = resultCode.getCode();\n        this.msg = resultCode.getMsg();\n        this.data = data;\n    }\n\n    public static <T> Response<T> success() {\n        return new Response<>(ResultCode.SUCCESS);\n    }\n\n    public static <T> Response<T> success(T data) {\n        return new Response<>(ResultCode.SUCCESS, data);\n    }\n\n    public static <T> Response<T> fail() {\n        return new Response<>(ResultCode.FAILED);\n    }\n\n    public static <T> Response<T> error() {\n        return new Response<>(ResultCode.SERVER_ERROR);\n    }\n\n    public static <T> Response<T> fail(ResultCode resultCode) {\n        return new Response<>(resultCode);\n    }\n\n    public static <T> Response<T> fail(String msg) {\n        return new Response<>(ResultCode.FAILED.getCode(), msg);\n    }\n\n    public int getCode() {\n        return this.code;\n    }\n\n    public String getMsg() {\n        return this.msg;\n    }\n\n    public T getData() {\n        return this.data;\n    }\n}\n\n\n\npublic class BusinessException extends RuntimeException {\n    private ResultCode resultCode;\n\n    public BusinessException(ResultCode resultCode) {\n        super(resultCode.getMsg());\n        this.resultCode = resultCode;\n    }\n\n    public ResultCode getResultCode() {\n        return this.resultCode;\n    }\n}\n\n\n\n@RestControllerAdvice\npublic class GlobalExceptionHandler {\n    @ExceptionHandler(value = BusinessException.class)\n    public Response handleBusinessException(BusinessException businessException) {\n        return Response.fail(businessException.getResultCode());\n    }\n\n    @ExceptionHandler(value = Exception.class)\n    public Response handleException(Exception e) {\n        return Response.fail(e.getMessage());\n    }\n}\n```\n##### 2.2.5. application层\n因为现在的功能比较简单，不涉及到多个领域对象的交互，所以这里暂时不添加相关的应用服务。\n##### 2.2.6. 测试\n所以接口测试工具，分别对注册接口和登录接口进行访问\n{% asset_img 3.png %}\n{% asset_img 4.png %}\n#### 2.3. 密码加密\n上述流程虽然能够跑通，但是存在一个问题，用户密码在数据库中，以明文的方式进行存储，这样不太合理，容易将用户数据泄露出去。因此，这里进行修改。\n在用户密码加密中，我们经常会使用到盐（Salt），盐是一种随机值，它与用户密码组合起来，形成一个组合密码，然后使用加密哈希函数（比如SHA-）对组合密码进行加密，生成哈希值，并将加密后的哈希值存储在数据库中，当用户登录时，系统会取出存储的哈希值，通过与用户输入的密码组合，进行哈希加密，然后比对与数据库中存储的值是否一致。\n##### 2.3.1. 修改表结构\n在之前的表设计中，我们预留了一个features字段，表示扩展信息，我们其实可以将盐存入到扩展信息中，但是因为盐我们在登录中进场使用到，因此，还是单独作为一个字段，修改后的表结构如下：\n{% asset_img 5.png %}\n##### 2.3.2. infrastructure层\n在基础设施层中，添加上加密工具类\n```java\npackage com.yang.infrastructure.utils;\n\nimport cn.hutool.crypto.SecureUtil;\nimport cn.hutool.crypto.digest.Digester;\n\nimport java.util.concurrent.ThreadLocalRandom;\n\npublic class EncryptUtils {\n    private static final Digester sha256 = SecureUtil.sha256();\n    \n    private static final char[] saltChars = \"0123456789abcdefghijklmnopqrstuvwxyz\".toCharArray();\n    \n    private static final int SALT_LEN = 6;\n\n    /**\n     * 加密\n     * @param originPwd\n     * @param salt\n     * @return\n     */\n    public static String encrypt(String originPwd, String salt) {\n        String newPwd = salt + originPwd;\n        byte[] digest = sha256.digest(newPwd);\n        return new String(digest);\n    }\n\n    /**\n     * 生成盐\n     * @return\n     */\n    public static String generateSalt() {\n        StringBuilder sb = new StringBuilder();\n        ThreadLocalRandom threadLocalRandom = ThreadLocalRandom.current();\n        for (int i = 0; i < SALT_LEN; i++) {\n            int index = threadLocalRandom.nextInt(saltChars.length);\n            sb.append(saltChars[index]);\n        }\n        return sb.toString();\n    }\n}\n```\n##### 2.3.3. domain\n修改domain层中的userService，在注册的时候，设置盐，并对密码进行加密，在登录的时候，根据盐和输入密码，生成哈希值，与数据库中的哈希值进行对比。\n```java\npackage com.yang.domain.service;\n\nimport com.yang.controller.request.LoginUserRequest;\nimport com.yang.controller.request.RegisterUserRequest;\nimport com.yang.domain.data.User;\nimport com.yang.domain.repository.IUserRepository;\nimport com.yang.infrastructure.common.ResultCode;\nimport com.yang.infrastructure.exception.BusinessException;\nimport com.yang.infrastructure.utils.EncryptUtils;\nimport org.springframework.stereotype.Service;\n\nimport javax.annotation.Resource;\n\n@Service\npublic class UserService {\n    @Resource\n    private IUserRepository userRepository;\n\n    public User register(RegisterUserRequest request) {\n        User user = new User();\n        user.setUsername(request.getUsername());\n        // 设置盐\n        user.setSalt(EncryptUtils.generateSalt());\n        user.setPassword(EncryptUtils.encrypt(request.getPassword(), user.getSalt()));\n        try {\n            userRepository.saveUser(user);\n            return user;\n        } catch (Exception e) {\n            e.printStackTrace();\n            throw new BusinessException(ResultCode.SERVER_ERROR);\n        }\n    }\n\n    public User login(LoginUserRequest request) {\n        User user = userRepository.findByUsername(request.getUsername());\n        String salt = user.getSalt();\n        String password = EncryptUtils.encrypt(request.getPassword(), salt);\n        if (password.equals(user.getPassword())) {\n            return user;\n        }\n        return null;\n    }\n}\n```\n##### 2.3.4. 测试\n重新运行项目，调用注册接口和登录接口\n{% asset_img 6.png %}\n{% asset_img 7.png %}\n查看数据库，可以看出此时的password确实是经过加密后生成的。\n{% asset_img 8.png %}\n### 3. Token生成\n#### 3.1. 准备工作\n一般情况下，除了登录和注册接口，不需要进行登录拦截之外，其他的接口，都需要对用户的登录状态进行拦截，判断用户是否登录，如若未登录，则提示用户需要进行登录。对此，我们在用户登录成功后，可以返回一个token作为登录凭证返回给前端。\n{% asset_img 9.png %}\n这里我们在构建token的时候，使用JWT来构建，JWT(JSON Web Token)是为了在网络应用环境间传递声明而执行的一种基于JSON的开放标准。JWT主要由三部分组成：\n1）头部（Header），通常包含两部分信息，alg(alogirthm，指定用于签名或加密令牌的算法），typ（类型，表明令牌的类型为JWT）\n```json\n{\n  \"alg\": \"HS256\",\n  \"typ\": \"JWT\"\n}\n```\n2）有效载荷（Payload），一个json对象，包含一系列声明，比如sub（subject主题，通常是用户id），name（用户名称），exp（过期时间）等。\n3）签名：对前两部分的串行化后的字符串使用指定的算法（如SHA256或RSA签名）生成的一个加密串，它的作用是保证令牌的完整性和真实性，保证传输过程中没有被修改。\n这三个部分之间用.分隔，构成JWT的完整结构，如：\n```\neyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7H8RU\n```\n为整合JWT，我们引入下列依赖：\n```xml\n <dependency>\n            <groupId>com.auth0</groupId>\n            <artifactId>java-jwt</artifactId>\n            <version>3.10.3</version>\n        </dependency>\n```\n#### 3.2. infrastructure层\n在基础设施层，我们添加和鉴权相关的信息，首先添加一个jwt配置类，用于配置jwt使用的密钥和过期时间\n```java\npackage com.yang.infrastructure.auth.config;\n\nimport lombok.Data;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.stereotype.Component;\n\n@Component\n@Data\npublic class JwtTokenProperty {\n\n    @Value(\"${jwt.token.secret}\")\n    private String secret;\n\n    @Value(\"${jwt.token.expire}\")\n    private Integer expire;\n}\n```\n定义一个JwtTokenService接口，以及对应的实现类：\n```java\npublic interface JwtTokenService {\n    String generateJwtToken(JwtTokenGenerateRequest request);\n\n    JwtTokenVerifyDTO verify(JwtTokenVerifyRequest request);\n\n}\n\n\n\n@Component\npublic class JwtTokenServiceImpl implements JwtTokenService{\n    private final Integer EXPIRE_TIME = 604800;\n\n    private final String SECRET = \"helloworld\";\n\n    @Override\n    public String generateJwtToken(JwtTokenGenerateRequest request) {\n        JWTCreator.Builder builder = JWT.create();\n        if (MapUtil.isNotEmpty(request.getPayLoads())) {\n            request.getPayLoads().forEach((k, v) -> {\n                builder.withClaim(k, v);\n            });\n        }\n\n        Calendar expireTime = Calendar.getInstance();\n        expireTime.add(Calendar.SECOND, request.getExpireTime() != null ? request.getExpireTime() : EXPIRE_TIME);\n        return builder.withSubject(request.getSubject())\n                .withIssuedAt(new Date())\n                .withExpiresAt(expireTime.getTime())\n                .sign(Algorithm.HMAC256(StringUtils.isNotEmpty(request.getSecret()) ? request.getSecret() : SECRET));\n    }\n\n    @Override\n    public JwtTokenVerifyDTO verify(JwtTokenVerifyRequest request) {\n        JWTVerifier jwtVerifier = JWT.require\n                (Algorithm.HMAC256(StringUtils.isNotEmpty(request.getSecret()) ? request.getSecret() : SECRET))\n                .build();\n        DecodedJWT decodedJWT = null;\n        try {\n            decodedJWT = jwtVerifier.verify(request.getToken());\n        } catch (Exception e) {\n            throw new BusinessException(ResultCode.TOKEN_FAILED);\n        }\n\n        JwtTokenVerifyDTO jwtTokenVerifyDTO = new JwtTokenVerifyDTO();\n        Map<String, Claim> claims = decodedJWT.getClaims();\n        if (MapUtil.isNotEmpty(claims)) {\n            claims.forEach((k, v) -> {\n                jwtTokenVerifyDTO.getPayLoads().put(k, v.asString());\n            });\n        }\n        jwtTokenVerifyDTO.setSubject(decodedJWT.getSubject());\n        jwtTokenVerifyDTO.setExpireTime(decodedJWT.getExpiresAt());\n        return jwtTokenVerifyDTO;\n    }\n}\n```\n#### 3.3. application层\n因为现在登录涉及到token等操作，对于token的生成， 这个不属于userService领域服务范围，因此就涉及到多个服务之间的协作，所以此时使用applicationService来整合多个服务。我们添加一个UserApplicationService类\n```java\npackage com.yang.application.service;\n\nimport com.yang.application.dto.UserLoginDTO;\nimport com.yang.controller.request.LoginUserRequest;\nimport com.yang.controller.request.RegisterUserRequest;\nimport com.yang.domain.data.User;\nimport com.yang.domain.service.UserService;\nimport com.yang.infrastructure.auth.config.JwtTokenProperty;\nimport com.yang.infrastructure.auth.request.JwtTokenGenerateRequest;\nimport com.yang.infrastructure.auth.service.JwtTokenService;\nimport com.yang.infrastructure.common.ResultCode;\nimport com.yang.infrastructure.exception.BusinessException;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\n\nimport javax.annotation.Resource;\nimport java.util.HashMap;\nimport java.util.Map;\n\n@Service\npublic class UserApplicationService {\n    @Autowired\n    private UserService userService;\n\n    @Autowired\n    private JwtTokenProperty jwtTokenProperty;\n\n    @Resource\n    private JwtTokenService jwtTokenService;\n\n    public User register(RegisterUserRequest request) {\n        return userService.register(request);\n    }\n\n    public UserLoginDTO login(LoginUserRequest request) {\n        User user = userService.login(request);\n        if (user == null) {\n            throw new BusinessException(ResultCode.LOGIN_FAILED);\n        }\n        // 生成token\n        UserLoginDTO userLoginDTO = new UserLoginDTO();\n        userLoginDTO.setUser(user);\n\n        JwtTokenGenerateRequest jwtGenerateRequest = convert2JwtTokenGenerateRequest(user);\n        userLoginDTO.setToken(jwtTokenService.generateJwtToken(jwtGenerateRequest));\n        return userLoginDTO;\n    }\n\n    private JwtTokenGenerateRequest convert2JwtTokenGenerateRequest(User user) {\n        JwtTokenGenerateRequest request = new JwtTokenGenerateRequest();\n        request.setSubject(user.getId().toString());\n        request.setExpireTime(jwtTokenProperty.getExpire());\n        request.setSecret(jwtTokenProperty.getSecret());\n\n        Map<String, String> payloads = new HashMap<>();\n        payloads.put(\"username\", user.getUsername());\n        payloads.put(\"id\", user.getId().toString());\n        payloads.put(\"salt\", user.getSalt());\n        request.setPayLoads(payloads);\n\n        return request;\n    }\n}\n```\n#### 3.4. controller层\n我们修改controller层，改用applicationService，并添加一个接口，来测试我们的JwtTokenService解析是否正确\n```java\npackage com.yang.controller;\n\nimport com.yang.application.service.UserApplicationService;\nimport com.yang.application.dto.UserLoginDTO;\nimport com.yang.controller.request.LoginUserRequest;\nimport com.yang.controller.request.RegisterUserRequest;\nimport com.yang.domain.data.User;\nimport com.yang.infrastructure.auth.config.JwtTokenProperty;\nimport com.yang.infrastructure.auth.request.JwtTokenVerifyRequest;\nimport com.yang.infrastructure.auth.response.JwtTokenVerifyDTO;\nimport com.yang.infrastructure.auth.service.JwtTokenService;\nimport com.yang.infrastructure.common.Response;\nimport com.yang.infrastructure.common.ResultCode;\nimport com.yang.infrastructure.exception.BusinessException;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.web.bind.annotation.*;\n\n@RestController\n@RequestMapping(value = \"/user\")\npublic class UserController {\n   @Autowired\n   private UserApplicationService userApplicationService;\n\n    @PostMapping(value = \"/register\")\n    public Response<User> register(@RequestBody RegisterUserRequest request) {\n        User user = userApplicationService.register(request);\n        return Response.success(user);\n    }\n\n    @PostMapping(value = \"/login\")\n    public Response<UserLoginDTO> login(@RequestBody LoginUserRequest request) {\n        UserLoginDTO userLoginDTO = userApplicationService.login(request);\n        if (userLoginDTO == null) {\n            throw new BusinessException(ResultCode.LOGIN_FAILED);\n        }\n        return Response.success(userLoginDTO);\n    }\n    \n    @Autowired\n    private JwtTokenService jwtTokenService;\n    \n    @Autowired\n    private JwtTokenProperty jwtTokenProperty;\n    \n    @GetMapping(value = \"/verify\")\n    public Response<JwtTokenVerifyDTO> verify(@RequestParam(name = \"token\")String token) {\n        JwtTokenVerifyRequest request = new JwtTokenVerifyRequest();\n        request.setToken(token);\n        request.setSecret(jwtTokenProperty.getSecret());\n        JwtTokenVerifyDTO verify = jwtTokenService.verify(request);\n        return Response.success(verify);\n    }\n}\n```\n#### 3.5. 测试\n首先调用登录接口，进行测试\n{% asset_img 10.png %}\n将登录接口返回的token复制，调用verfiy接口，解析成功，说明JwtTokenService没问题\n{% asset_img 11.png %}\n然后我们随意捏造一个token进行访问，结果如下：\n{% asset_img 12.png %}\n### 4. 登录拦截\n后端返回token 给前端后，前端保存这个token,在后续发送请求时，将这个token携带到请求头进行访问，后端解析请求头，解析该token，判断token是否生效，当token有效时，对请求进行放行。也就是说，我们在执行业务代码之前，都会先对请求进行拦截，并校验token的合法性。因此，就需要使用到拦截器。\n#### 4.1. infrastructure层\n在基础设施层，添加和登录拦截有关的类，首先添加一个Spring上下文工具类，帮助获取容器中的bean\n```java\npackage com.yang.infrastructure.utils;\n\nimport org.springframework.beans.BeansException;\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.ApplicationContextAware;\nimport org.springframework.stereotype.Component;\n\n@Component\npublic class SpringContextUtils<T> implements ApplicationContextAware {\n    private static ApplicationContext applicationContext;\n    @Override\n    public void setApplicationContext(ApplicationContext applicationContext) throws BeansException {\n        SpringContextUtils.applicationContext = applicationContext;\n    }\n\n    public static<T>  T getBeanOfType(Class<T> clazz) {\n        return applicationContext.getBean(clazz);\n    }\n\n    public static <T> T getBeanOfName(String name, Class<T> clazz) {\n        return applicationContext.getBean(name, clazz);\n    }\n}\n```\n然后添加一个JwtTokenVerifyInterceptor类，实现HandlerInterceptor，表示判断token是否有效的拦截器。\n```java\npackage com.yang.infrastructure.auth.interceptors;\n\nimport com.yang.infrastructure.auth.config.JwtTokenProperty;\nimport com.yang.infrastructure.auth.request.JwtTokenVerifyRequest;\nimport com.yang.infrastructure.auth.response.JwtTokenVerifyDTO;\nimport com.yang.infrastructure.auth.service.JwtTokenService;\nimport com.yang.infrastructure.common.ResultCode;\nimport com.yang.infrastructure.exception.BusinessException;\nimport com.yang.infrastructure.utils.SpringContextUtils;\nimport org.apache.commons.lang3.StringUtils;\nimport org.springframework.web.servlet.HandlerInterceptor;\n\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\n\npublic class JwtTokenVerifyInterceptor implements HandlerInterceptor {\n    @Override\n    public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception {\n        String token = request.getHeader(\"token\");\n        if (StringUtils.isEmpty(token)) {\n            throw new BusinessException(ResultCode.TOKEN_FAILED);\n        }\n        JwtTokenService jwtTokenService = SpringContextUtils.getBeanOfType(JwtTokenService.class);\n        JwtTokenProperty jwtTokenProperty = SpringContextUtils.getBeanOfType(JwtTokenProperty.class);\n\n        JwtTokenVerifyRequest jwtTokenVerifyRequest = new JwtTokenVerifyRequest();\n        jwtTokenVerifyRequest.setToken(token);\n        jwtTokenVerifyRequest.setSecret(jwtTokenProperty.getSecret());\n\n        JwtTokenVerifyDTO verify = jwtTokenService.verify(jwtTokenVerifyRequest);\n        if (verify == null) {\n            throw new BusinessException(ResultCode.TOKEN_FAILED);\n        }\n        return true;\n    }\n}\n```\n然后添加一个配置类，配置刚才的拦截器\n```\npackage com.yang.infrastructure.configuration;\n\nimport com.yang.infrastructure.auth.interceptors.JwtTokenVerifyInterceptor;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.web.servlet.config.annotation.InterceptorRegistry;\nimport org.springframework.web.servlet.config.annotation.WebMvcConfigurer;\n\n@Configuration\npublic class WebMvcConfiguration implements WebMvcConfigurer {\n\n    @Override\n    public void addInterceptors(InterceptorRegistry registry) {\n        registry.addInterceptor(new JwtTokenVerifyInterceptor())\n                .addPathPatterns(\"/**\") // 拦截所有请求\n                .excludePathPatterns(\"/user/login\", \"/user/register\"); // 排除登录、注册接口\n    }\n}\n```\n#### 4.2. 测试\n首先，我们在请求头，不添加token，访问测试接口，结果如下：\n{% asset_img 13.png %}\n然后在请求头，添加无效的token，访问测试接口，结果如下：\n{% asset_img 14.png %}\n携带登录返回的token，访问测试接口，结果如下：\n{% asset_img 15.png %}\n### 5. token存储\n#### 5.1. 准备工作\n上述实现，虽然能够完成登录拦截的需求，但是有一个问题，我们每次访问接口，都需要对token进行验证，判断这个token是否有效，为减少解析token的耗时，我们可以将token存起来并设置一个过期时间，这个时候，我们就可以使用reids了。此时，我们的调用流程，如下图所示：\n{% asset_img 16.png %}\n因此，我们添加redis的相关依赖：\n```xml\n  <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-data-redis</artifactId>\n        </dependency>\n```\n#### 5.2. infrastructure层\n在基础设施层，添加上redis的配置类和相关的工具类：\n```java\n@Component\npublic class RedisConfiguration {\n\n    @Bean\n    public RedisTemplate redisTemplate(RedisConnectionFactory redisConnectionFactory) {\n        RedisTemplate<String, Object> redisTemplate = new RedisTemplate<>();\n        redisTemplate.setConnectionFactory(redisConnectionFactory);\n\n        StringRedisSerializer stringRedisSerializer = new StringRedisSerializer();\n        Jackson2JsonRedisSerializer jackson2JsonRedisSerializer = new Jackson2JsonRedisSerializer(Object.class);\n        ObjectMapper objectMapper = new ObjectMapper().enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);\n        jackson2JsonRedisSerializer.setObjectMapper(objectMapper);\n\n        redisTemplate.setKeySerializer(stringRedisSerializer);\n        redisTemplate.setHashKeySerializer(stringRedisSerializer);\n        redisTemplate.setValueSerializer(jackson2JsonRedisSerializer);\n        redisTemplate.setHashValueSerializer(jackson2JsonRedisSerializer);\n        return redisTemplate;\n    }\n}\n\n\n\n@Component\npublic class RedisUtils {\n    @Autowired\n    private RedisTemplate<String, Object> redisTemplate;\n\n    public void setKey(String key, Object value) {\n        redisTemplate.opsForValue().set(key, value);\n    }\n\n    public void setKey(String key, Object value, Long expire) {\n        setKey(key, value, expire, TimeUnit.SECONDS);\n    }\n\n    public void setKey(String key, Object value, Long expire, TimeUnit timeUnit) {\n        redisTemplate.opsForValue().set(key, value, expire, timeUnit);\n    }\n\n    public Object getKey(String key) {\n        return redisTemplate.opsForValue().get(key);\n    }\n}\n```\n然后修改JwtTokenVerifyInterceptor拦截器，先查询redis上是否存在对应的token，有的话放行，否则使用JwtTokenService验证token是否有效\n```java\n  @Override\n    public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception {\n        String token = request.getHeader(\"token\");\n        if (StringUtils.isEmpty(token)) {\n            throw new BusinessException(ResultCode.TOKEN_FAILED);\n        }\n        if(verifyByRedis(token)) { // 判断该token在Redis是否存在\n            System.out.println(\"Redis中存在这个token，放行\");\n            return true;\n        }\n        System.out.println(\"Redis中不存在这个token，解析该token\");\n        JwtTokenService jwtTokenService = SpringContextUtils.getBeanOfType(JwtTokenService.class);\n        JwtTokenProperty jwtTokenProperty = SpringContextUtils.getBeanOfType(JwtTokenProperty.class);\n\n        JwtTokenVerifyRequest jwtTokenVerifyRequest = new JwtTokenVerifyRequest();\n        jwtTokenVerifyRequest.setToken(token);\n        jwtTokenVerifyRequest.setSecret(jwtTokenProperty.getSecret());\n\n        JwtTokenVerifyDTO verify = jwtTokenService.verify(jwtTokenVerifyRequest);\n        if (verify == null) {\n            throw new BusinessException(ResultCode.TOKEN_FAILED);\n        }\n        return true;\n    }\n\n    private boolean verifyByRedis(String token) {\n        RedisUtils redisUtils = SpringContextUtils.getBeanOfType(RedisUtils.class);\n        Object key = redisUtils.getKey(\"token:\" + token);\n        return key != null;\n    }\n```\n#### 5.3. application层\n修改登录逻辑中，在生成token后，将token存入redis\n```java\n public UserLoginDTO login(LoginUserRequest request) {\n        User user = userService.login(request);\n        if (user == null) {\n            throw new BusinessException(ResultCode.LOGIN_FAILED);\n        }\n        // 生成token\n        UserLoginDTO userLoginDTO = new UserLoginDTO();\n        userLoginDTO.setUser(user);\n\n        JwtTokenGenerateRequest jwtGenerateRequest = convert2JwtTokenGenerateRequest(user);\n        String token = jwtTokenService.generateJwtToken(jwtGenerateRequest);\n        userLoginDTO.setToken(token);\n\n        // token存储到redis\n        redisUtils.setKey(\"token:\" + token, jwtGenerateRequest, jwtGenerateRequest.getExpireTime());\n        return userLoginDTO;\n    }\n```\n#### 5.4. 测试\n首先访问登录接口，登录成功后，查看redis中是否含有对应的token\n{% asset_img 17.png %}\nredis中存在对应的token，然后我们访问测试接口，查看命令行,此时redis中存在该token，因此直接放行\n{% asset_img 18.png %}\n然后我们删除redis中的这个key，再次访问测试接口，此时redis不存在这个key，因此就需要进行token的解析。\n{% asset_img 19.png %}\n### 6. 用户信息更新\n用户信息，一般情况下更新的频率比较低，但也不是没有，常见的更新有：用户修改密码、用户修改昵称等。我们以用户修改密码为例，进行示例。\n当用户修改密码时，我们只需要使用数据库中的salt，结合用户输入的新密码，生成新的哈希值，存入数据库，此外，因为用户信息更新了，我们最好将用户的token生效，存入redis的token，我们可以很容易地将其删除，但是，前端保存地token信息，我们修改不了，因此，最好是前端在更新操作成功后，主动删除请求头的token，从而时用户再次操作时，提示token失效，进行登录。\n#### 6.1. infrastructure层\n首先，修改RedisUtils工具类，加上删除key的方法\n```java\n public boolean removeKey(String key) {\n        return redisTemplate.delete(key);\n    }\n```\n#### 6.2. domain层\n修改UserService，添加修改密码的相关操作\n```java\n public void updatePassword(UpdatePasswordRequest request) {\n        Integer userId = request.getId();\n        User user = userRepository.findById(userId);\n         if (user == null) {\n            return;\n        }\n        String password = request.getPassword();\n        String newPassword = EncryptUtils.encrypt(password, user.getSalt());\n        user.setPassword(newPassword);\n\n        try {\n            userRepository.updateUser(user);\n        } catch (Exception e) {\n            throw new BusinessException(ResultCode.SERVER_ERROR);\n        }\n    }\n```\n#### 6.3. application层\n在UserApplicationService类，添加修改用户密码的方法\n```java\n public void updatePassword(UpdatePasswordRequest updatePasswordRequest, HttpServletRequest request) {\n        userService.updatePassword(updatePasswordRequest);\n        \n        // 删除token\n        String token = request.getHeader(\"token\");\n        redisUtils.removeKey(\"token:\" + token);\n    }\n```\n#### 6.4. controller层\n在UserController类，添加修改用户密码的方法\n```java\n @PutMapping(value = \"/updatePassword\")\n    public Response updatePassword(@RequestBody UpdatePasswordRequest request, HttpServletRequest httpServletRequest) {\n        userApplicationService.updatePassword(request, httpServletRequest);\n        return Response.success();\n    }\n```\n#### 6.5. 测试\n首先进行登录，登录成功后，在redis中多了一个token\n{% asset_img 20.png %}\n然后调用更新密码接口\n{% asset_img 21.png %}\n再次查看redis，发现token被删除了，然后查看数据库，能看出我们的密码也改变了\n{% asset_img 22.png %}\n{% asset_img 23.png %}\n### 7. 用户上下文\n上面的代码，看似合理，但是有一个问题，更新密码的时候，传了两个值，一个是用户id，另一个才是用户输入的密码。在之前我们提到，我们通过登录拦截，规避了未登录用户操作系统资源的问题，但是对于我们刚才实现的修改密码接口，可能出现这种情况，用户A携带自己登录的token，请求体中id为用户B的id，调用修改密码的接口，这就导致，用户A修改了用户B的密码，这是不合理的，因此，这里将对代码进一步做修改，在进行拦截操作后，将用户信息，存储于用户上下文，然后在修改密码时，直接使用用户上下文中的用户id，而不是依靠前端传递的id。\n#### 7.1. infrastructure层\n首先，我们定义一个用户上下文信息类，用于存储用户的主要信息，包括用户id，token，用户名等。\n```java\npackage com.yang.infrastructure.auth;\n\nimport lombok.Data;\n\nimport java.io.Serializable;\nimport java.util.HashMap;\nimport java.util.Map;\n\n@Data\npublic class UserContextDetails implements Serializable {\n    private Integer id;\n    \n    private String token;\n    \n    private String username;\n    \n    private Map<String, String> extendMap = new HashMap<>();\n}\n```\n添加一个线程上下文类，用于存储用户上下文信息\n```java\npackage com.yang.infrastructure.auth;\n\npublic class UserContextThreadLocal {\n    private static ThreadLocal<UserContextDetails> userContextDetailsThreadLocal = new ThreadLocal<>();\n\n    public static void setUserContextDetails(UserContextDetails userContextDetails) {\n        userContextDetailsThreadLocal.set(userContextDetails);\n    }\n\n    public static UserContextDetails get() {\n        return userContextDetailsThreadLocal.get();\n    }\n\n    public static void remove() {\n        userContextDetailsThreadLocal.remove();\n    }\n    \n    public static Integer getUserId() {\n        return userContextDetailsThreadLocal.get().getId();\n    }\n    \n    public static String getToken() {\n        return userContextDetailsThreadLocal.get().getToken();\n    }\n}\n```\n然后，修改我们的JwtTokenVerifyInterceptor拦截器，这里我们实现了afterCompletion。在preHandler方法中，设置对应的线程上下文，在afterCompletion清除线程上下文，注意，设置线程上下文和清除线程上下文的操作，必须成对出现，否则会造成内存泄露。\n```java\npackage com.yang.infrastructure.auth.interceptors;\n\nimport com.alibaba.fastjson.JSON;\nimport com.alibaba.fastjson.JSONObject;\nimport com.yang.infrastructure.auth.UserContextDetails;\nimport com.yang.infrastructure.auth.UserContextThreadLocal;\nimport com.yang.infrastructure.auth.config.JwtTokenProperty;\nimport com.yang.infrastructure.auth.request.JwtTokenVerifyRequest;\nimport com.yang.infrastructure.auth.response.JwtTokenVerifyDTO;\nimport com.yang.infrastructure.auth.service.JwtTokenService;\nimport com.yang.infrastructure.common.ResultCode;\nimport com.yang.infrastructure.exception.BusinessException;\nimport com.yang.infrastructure.utils.RedisUtils;\nimport com.yang.infrastructure.utils.SpringContextUtils;\nimport org.apache.commons.lang3.StringUtils;\nimport org.springframework.lang.Nullable;\nimport org.springframework.web.servlet.HandlerInterceptor;\n\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\n\npublic class JwtTokenVerifyInterceptor implements HandlerInterceptor {\n    @Override\n    public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception {\n        String token = request.getHeader(\"token\");\n        if (StringUtils.isEmpty(token)) {\n            throw new BusinessException(ResultCode.TOKEN_FAILED);\n        }\n        Object userDetails = getUserDetailsFromRedis(token);\n        if (userDetails != null) { // 判断该token在Redis是否存在\n            // 设置线程上下文\n            System.out.println(\"设置线程上下文====================\");\n            UserContextDetails userContextDetails = (UserContextDetails) userDetails;\n            userContextDetails.setToken(token);\n            UserContextThreadLocal.setUserContextDetails(userContextDetails);\n            return true;\n        }\n\n        JwtTokenService jwtTokenService = SpringContextUtils.getBeanOfType(JwtTokenService.class);\n        JwtTokenProperty jwtTokenProperty = SpringContextUtils.getBeanOfType(JwtTokenProperty.class);\n\n        JwtTokenVerifyRequest jwtTokenVerifyRequest = new JwtTokenVerifyRequest();\n        jwtTokenVerifyRequest.setToken(token);\n        jwtTokenVerifyRequest.setSecret(jwtTokenProperty.getSecret());\n\n        JwtTokenVerifyDTO verify = jwtTokenService.verify(jwtTokenVerifyRequest);\n        if (verify == null) {\n            throw new BusinessException(ResultCode.TOKEN_FAILED);\n        }\n\n        // 设置线程上下文\n        System.out.println(\"设置线程上下文====================\");\n        UserContextDetails userContextDetails = new UserContextDetails();\n        userContextDetails.setId(Integer.valueOf(verify.getSubject()));\n        userContextDetails.setToken(token);\n        userContextDetails.setUsername(verify.getPayLoads().get(\"username\"));\n        userContextDetails.setExtendMap(verify.getPayLoads());\n        UserContextThreadLocal.setUserContextDetails(userContextDetails);\n        return true;\n    }\n\n    private Object getUserDetailsFromRedis(String token) {\n        RedisUtils redisUtils = SpringContextUtils.getBeanOfType(RedisUtils.class);\n        return redisUtils.getKey(\"token:\" + token);\n    }\n\n    @Override\n    public void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, @Nullable Exception ex) throws Exception {\n        System.out.println(\"清除线程上下文=======================\");\n        // 清除线程上下文\n        UserContextThreadLocal.remove();\n    }\n}\n```\n#### 7.2. domain层\n修改UserService的updatePassword方法，userId从线程上下文获取\n```java\n public void updatePassword(UpdatePasswordRequest request) {\n        Integer userId = UserContextThreadLocal.getUserId();\n        User user = userRepository.findById(userId);\n        if (user == null) {\n            return;\n        }\n        String password = request.getPassword();\n        String newPassword = EncryptUtils.encrypt(password, user.getSalt());\n        user.setPassword(newPassword);\n\n        try {\n            userRepository.updateUser(user);\n        } catch (Exception e) {\n            throw new BusinessException(ResultCode.SERVER_ERROR);\n        }\n    }\n```\n#### 7.3. application层\n修改application层updatePassword方法，token从线程上下文获取\n```java\n public void updatePassword(UpdatePasswordRequest updatePasswordRequest) {\n        userService.updatePassword(updatePasswordRequest);\n\n        // 删除token\n        String token = UserContextThreadLocal.getToken();\n        redisUtils.removeKey(\"token:\" + token);\n    }\n```\n#### 7.4. controller层\n修改controller层的updatePassword方法\n```java\n @PutMapping(value = \"/updatePassword\")\n    public Response updatePassword(@RequestBody UpdatePasswordRequest request) {\n        userApplicationService.updatePassword(request);\n        return Response.success();\n    }\n```\n#### 7.5. 测试\n调用用户登录接口，然后查看redis，可以看出，现在存储的value类型，是UserContextDetails类型\n{% asset_img 24.png %}\n调用测试接口，然后查看控制台\n{% asset_img 25.png %}\n然后查看控制台，从控制台中可以看出，设置线程上下文和清除线程上下文成对出现。\n{% asset_img 26.png %}\n测试修改密码接口\n{% asset_img 27.png %}\n修改成功，说明线程上下文的取值没有问题。\n### 8. 参考文档\nhttps://segmentfault.com/a/1190000040003653","source":"_posts/登录、注册学习.md","raw":"---\ntitle: 登录、注册学习\ndate: 2024-04-03 14:16:59\ntags:\n    - SpringBoot\n    - SpringSecurity\n---\n### 1. 引言\n在项目中，登录、注册一般都是项目的必备功能，因为它们的用户管理和身份验证的基础，通过登录和注册，能有效保护用户个人数据，并根据用户权限，进行对应的资源访问控制。此外，还能对注册后的用户进行行为分析，以便提供对应的个性化服务。\n### 2. 登录、注册实现\n#### 2.1. 项目结构介绍\n这里的项目结构，借鉴周志明老师提出的凤凰架构，将项目分为四层：\n1）domain： 领域层，负责实现业务逻辑，即表达业务概念、处理业务状态信息以及业务规这些行为，提供对应的领域服务。\n2）infrastructure：基础设施层，向其他层提供通用的技术能力，譬如持久化能力、远程访问通信、工具集等。\n3）application：应用层，负责软件本身对外暴露的能力，通过整合各个领域服务，进行协助，对外提供服务，相当于各个领域服务的门面，类似于MVC架构中的service层。\n4）controller：负责向用户显示信息或解释用户发出的命令，即MVC架构中的controller层。\n{% asset_img 1.png %}\n#### 2.2. 简单实现\n##### 2.2.1. 准备工作\n首先引入下列依赖：\n```xml\n<dependencies>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-web</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>mysql</groupId>\n            <artifactId>mysql-connector-java</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>com.baomidou</groupId>\n            <artifactId>mybatis-plus-boot-starter</artifactId>\n            <version>3.4.3</version>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-test</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>org.projectlombok</groupId>\n            <artifactId>lombok</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>org.apache.commons</groupId>\n            <artifactId>commons-lang3</artifactId>\n        </dependency>\n    </dependencies>\n```\n创建对应的数据库，数据库表结构如下：\n{% asset_img 2.png %}\n这里的username添加了唯一索引，因为用户名一般都是唯一的。\n##### 2.2.2. domain层\n创建对应的实体类，以及相关的repository仓储层和domainservice领域服务\n```java\n@Data\n@TableName(value = \"t_user\")\npublic class User implements Serializable {\n    @TableId(type = IdType.AUTO)\n    private Integer id;\n\n    private String username;\n\n    private String password;\n\n    // 是否冻结 0未冻结 1已冻结\n    private Integer freeze;\n\n    private Date createTime;\n\n    private Date updateTime;\n\n    private Map<String, String> featuresMap;\n\n    private String features;\n}\n\n\n\npublic interface IUserRepository {\n\n    boolean saveUser(User user);\n\n\n    User findByUsernameAndPassword(String username, String password);\n}\n\n\n\n@Repository\npublic class UserRepository implements IUserRepository {\n    @Autowired\n    private UserMapper userMapper;\n\n    private static final int UN_FREEZE = 0;\n    private static final int FREEZE = 1;\n\n    @Override\n    public boolean saveUser(User user) {\n        user.setCreateTime(new Date());\n        user.setUpdateTime(new Date());\n        user.setFreeze(UN_FREEZE);\n        user.setFeaturesMap(new HashMap<>());\n        user.setFeatures(JSONObject.toJSONString(user.getFeaturesMap()));\n        return userMapper.insert(user) > 0;\n    }\n\n    @Override\n    public User findByUsernameAndPassword(String username, String password) {\n        LambdaQueryWrapper<User> queryWrapper = new LambdaQueryWrapper<>();\n        queryWrapper.eq(User::getUsername, username);\n        queryWrapper.eq(User::getPassword, password);\n        return userMapper.selectOne(queryWrapper);\n    }\n\n\n}\n\n\n@Service\npublic class UserService {\n    @Resource\n    private IUserRepository userRepository;\n\n    public User register(RegisterUserRequest request) {\n        User user = new User();\n        user.setUsername(request.getUsername());\n        user.setPassword(request.getPassword());\n        try {\n            userRepository.saveUser(user);\n            return user;\n        } catch (Exception e) {\n            e.printStackTrace();\n            throw new BusinessException(ResultCode.SERVER_ERROR);\n        }\n    }\n\n    public User login(LoginUserRequest request) {\n        return userRepository.findByUsernameAndPassword(request.getUsername(), request.getPassword());\n    }\n}\n```\n\n##### 2.2.3. controller层\n添加userController，在该类中添加注册和登录的接口\n```java\n@RestController\n@RequestMapping(value = \"/user\")\npublic class UserController {\n    @Autowired\n    private UserService userService;\n\n    @PostMapping(value = \"/register\")\n    public Response<User> register(@RequestBody RegisterUserRequest request) {\n        User user = userService.register(request);\n        return Response.success(user);\n    }\n\n    @PostMapping(value = \"/login\")\n    public Response<User> login(@RequestBody LoginUserRequest request) {\n        User user = userService.login(request);\n        if (user == null) {\n            throw new BusinessException(ResultCode.LOGIN_FAILED);\n        }\n        return Response.success(user);\n    }\n}\n\n\n\n@Data\npublic class LoginUserRequest implements Serializable {\n    private String username;\n\n    private String password;\n}\n\n\n\n@Data\npublic class RegisterUserRequest implements Serializable {\n    private String username;\n\n    private String password;\n\n}\n```\n##### 2.2.4. infrastructure层\n添加基础设施，比如异常类、返回结果类、错误码，全局异常处理等\n```java\npublic enum ResultCode {\n    SUCCESS(200, \"操作成功\"),\n    ACCESS_DENIED(403, \"没有权限\"),\n    FAILED(400, \"操作失败\"),\n\n    LOGIN_FAILED(400, \"用户不存在或密码错误\"),\n    SERVER_ERROR(500, \"服务器错误\");\n\n    private int code;\n\n    private String msg;\n\n    ResultCode(int code, String msg) {\n        this.code = code;\n        this.msg = msg;\n    }\n\n    public int getCode() {\n        return this.code;\n    }\n\n    public String getMsg() {\n        return this.msg;\n    }\n}\n\n\n\n\npublic class Response <T> {\n    private int code;\n\n    private String msg;\n\n    private T data;\n\n    private Response(Integer code, String msg) {\n        this.code = code;\n        this.msg = msg;\n    }\n\n    private Response(Integer code, String msg, T data) {\n        this.code = code;\n        this.msg = msg;\n        this.data = data;\n    }\n\n    private Response(ResultCode resultCode) {\n        this.code = resultCode.getCode();\n        this.msg = resultCode.getMsg();\n    }\n\n    private Response(ResultCode resultCode, T data) {\n        this.code = resultCode.getCode();\n        this.msg = resultCode.getMsg();\n        this.data = data;\n    }\n\n    public static <T> Response<T> success() {\n        return new Response<>(ResultCode.SUCCESS);\n    }\n\n    public static <T> Response<T> success(T data) {\n        return new Response<>(ResultCode.SUCCESS, data);\n    }\n\n    public static <T> Response<T> fail() {\n        return new Response<>(ResultCode.FAILED);\n    }\n\n    public static <T> Response<T> error() {\n        return new Response<>(ResultCode.SERVER_ERROR);\n    }\n\n    public static <T> Response<T> fail(ResultCode resultCode) {\n        return new Response<>(resultCode);\n    }\n\n    public static <T> Response<T> fail(String msg) {\n        return new Response<>(ResultCode.FAILED.getCode(), msg);\n    }\n\n    public int getCode() {\n        return this.code;\n    }\n\n    public String getMsg() {\n        return this.msg;\n    }\n\n    public T getData() {\n        return this.data;\n    }\n}\n\n\n\npublic class BusinessException extends RuntimeException {\n    private ResultCode resultCode;\n\n    public BusinessException(ResultCode resultCode) {\n        super(resultCode.getMsg());\n        this.resultCode = resultCode;\n    }\n\n    public ResultCode getResultCode() {\n        return this.resultCode;\n    }\n}\n\n\n\n@RestControllerAdvice\npublic class GlobalExceptionHandler {\n    @ExceptionHandler(value = BusinessException.class)\n    public Response handleBusinessException(BusinessException businessException) {\n        return Response.fail(businessException.getResultCode());\n    }\n\n    @ExceptionHandler(value = Exception.class)\n    public Response handleException(Exception e) {\n        return Response.fail(e.getMessage());\n    }\n}\n```\n##### 2.2.5. application层\n因为现在的功能比较简单，不涉及到多个领域对象的交互，所以这里暂时不添加相关的应用服务。\n##### 2.2.6. 测试\n所以接口测试工具，分别对注册接口和登录接口进行访问\n{% asset_img 3.png %}\n{% asset_img 4.png %}\n#### 2.3. 密码加密\n上述流程虽然能够跑通，但是存在一个问题，用户密码在数据库中，以明文的方式进行存储，这样不太合理，容易将用户数据泄露出去。因此，这里进行修改。\n在用户密码加密中，我们经常会使用到盐（Salt），盐是一种随机值，它与用户密码组合起来，形成一个组合密码，然后使用加密哈希函数（比如SHA-）对组合密码进行加密，生成哈希值，并将加密后的哈希值存储在数据库中，当用户登录时，系统会取出存储的哈希值，通过与用户输入的密码组合，进行哈希加密，然后比对与数据库中存储的值是否一致。\n##### 2.3.1. 修改表结构\n在之前的表设计中，我们预留了一个features字段，表示扩展信息，我们其实可以将盐存入到扩展信息中，但是因为盐我们在登录中进场使用到，因此，还是单独作为一个字段，修改后的表结构如下：\n{% asset_img 5.png %}\n##### 2.3.2. infrastructure层\n在基础设施层中，添加上加密工具类\n```java\npackage com.yang.infrastructure.utils;\n\nimport cn.hutool.crypto.SecureUtil;\nimport cn.hutool.crypto.digest.Digester;\n\nimport java.util.concurrent.ThreadLocalRandom;\n\npublic class EncryptUtils {\n    private static final Digester sha256 = SecureUtil.sha256();\n    \n    private static final char[] saltChars = \"0123456789abcdefghijklmnopqrstuvwxyz\".toCharArray();\n    \n    private static final int SALT_LEN = 6;\n\n    /**\n     * 加密\n     * @param originPwd\n     * @param salt\n     * @return\n     */\n    public static String encrypt(String originPwd, String salt) {\n        String newPwd = salt + originPwd;\n        byte[] digest = sha256.digest(newPwd);\n        return new String(digest);\n    }\n\n    /**\n     * 生成盐\n     * @return\n     */\n    public static String generateSalt() {\n        StringBuilder sb = new StringBuilder();\n        ThreadLocalRandom threadLocalRandom = ThreadLocalRandom.current();\n        for (int i = 0; i < SALT_LEN; i++) {\n            int index = threadLocalRandom.nextInt(saltChars.length);\n            sb.append(saltChars[index]);\n        }\n        return sb.toString();\n    }\n}\n```\n##### 2.3.3. domain\n修改domain层中的userService，在注册的时候，设置盐，并对密码进行加密，在登录的时候，根据盐和输入密码，生成哈希值，与数据库中的哈希值进行对比。\n```java\npackage com.yang.domain.service;\n\nimport com.yang.controller.request.LoginUserRequest;\nimport com.yang.controller.request.RegisterUserRequest;\nimport com.yang.domain.data.User;\nimport com.yang.domain.repository.IUserRepository;\nimport com.yang.infrastructure.common.ResultCode;\nimport com.yang.infrastructure.exception.BusinessException;\nimport com.yang.infrastructure.utils.EncryptUtils;\nimport org.springframework.stereotype.Service;\n\nimport javax.annotation.Resource;\n\n@Service\npublic class UserService {\n    @Resource\n    private IUserRepository userRepository;\n\n    public User register(RegisterUserRequest request) {\n        User user = new User();\n        user.setUsername(request.getUsername());\n        // 设置盐\n        user.setSalt(EncryptUtils.generateSalt());\n        user.setPassword(EncryptUtils.encrypt(request.getPassword(), user.getSalt()));\n        try {\n            userRepository.saveUser(user);\n            return user;\n        } catch (Exception e) {\n            e.printStackTrace();\n            throw new BusinessException(ResultCode.SERVER_ERROR);\n        }\n    }\n\n    public User login(LoginUserRequest request) {\n        User user = userRepository.findByUsername(request.getUsername());\n        String salt = user.getSalt();\n        String password = EncryptUtils.encrypt(request.getPassword(), salt);\n        if (password.equals(user.getPassword())) {\n            return user;\n        }\n        return null;\n    }\n}\n```\n##### 2.3.4. 测试\n重新运行项目，调用注册接口和登录接口\n{% asset_img 6.png %}\n{% asset_img 7.png %}\n查看数据库，可以看出此时的password确实是经过加密后生成的。\n{% asset_img 8.png %}\n### 3. Token生成\n#### 3.1. 准备工作\n一般情况下，除了登录和注册接口，不需要进行登录拦截之外，其他的接口，都需要对用户的登录状态进行拦截，判断用户是否登录，如若未登录，则提示用户需要进行登录。对此，我们在用户登录成功后，可以返回一个token作为登录凭证返回给前端。\n{% asset_img 9.png %}\n这里我们在构建token的时候，使用JWT来构建，JWT(JSON Web Token)是为了在网络应用环境间传递声明而执行的一种基于JSON的开放标准。JWT主要由三部分组成：\n1）头部（Header），通常包含两部分信息，alg(alogirthm，指定用于签名或加密令牌的算法），typ（类型，表明令牌的类型为JWT）\n```json\n{\n  \"alg\": \"HS256\",\n  \"typ\": \"JWT\"\n}\n```\n2）有效载荷（Payload），一个json对象，包含一系列声明，比如sub（subject主题，通常是用户id），name（用户名称），exp（过期时间）等。\n3）签名：对前两部分的串行化后的字符串使用指定的算法（如SHA256或RSA签名）生成的一个加密串，它的作用是保证令牌的完整性和真实性，保证传输过程中没有被修改。\n这三个部分之间用.分隔，构成JWT的完整结构，如：\n```\neyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7H8RU\n```\n为整合JWT，我们引入下列依赖：\n```xml\n <dependency>\n            <groupId>com.auth0</groupId>\n            <artifactId>java-jwt</artifactId>\n            <version>3.10.3</version>\n        </dependency>\n```\n#### 3.2. infrastructure层\n在基础设施层，我们添加和鉴权相关的信息，首先添加一个jwt配置类，用于配置jwt使用的密钥和过期时间\n```java\npackage com.yang.infrastructure.auth.config;\n\nimport lombok.Data;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.stereotype.Component;\n\n@Component\n@Data\npublic class JwtTokenProperty {\n\n    @Value(\"${jwt.token.secret}\")\n    private String secret;\n\n    @Value(\"${jwt.token.expire}\")\n    private Integer expire;\n}\n```\n定义一个JwtTokenService接口，以及对应的实现类：\n```java\npublic interface JwtTokenService {\n    String generateJwtToken(JwtTokenGenerateRequest request);\n\n    JwtTokenVerifyDTO verify(JwtTokenVerifyRequest request);\n\n}\n\n\n\n@Component\npublic class JwtTokenServiceImpl implements JwtTokenService{\n    private final Integer EXPIRE_TIME = 604800;\n\n    private final String SECRET = \"helloworld\";\n\n    @Override\n    public String generateJwtToken(JwtTokenGenerateRequest request) {\n        JWTCreator.Builder builder = JWT.create();\n        if (MapUtil.isNotEmpty(request.getPayLoads())) {\n            request.getPayLoads().forEach((k, v) -> {\n                builder.withClaim(k, v);\n            });\n        }\n\n        Calendar expireTime = Calendar.getInstance();\n        expireTime.add(Calendar.SECOND, request.getExpireTime() != null ? request.getExpireTime() : EXPIRE_TIME);\n        return builder.withSubject(request.getSubject())\n                .withIssuedAt(new Date())\n                .withExpiresAt(expireTime.getTime())\n                .sign(Algorithm.HMAC256(StringUtils.isNotEmpty(request.getSecret()) ? request.getSecret() : SECRET));\n    }\n\n    @Override\n    public JwtTokenVerifyDTO verify(JwtTokenVerifyRequest request) {\n        JWTVerifier jwtVerifier = JWT.require\n                (Algorithm.HMAC256(StringUtils.isNotEmpty(request.getSecret()) ? request.getSecret() : SECRET))\n                .build();\n        DecodedJWT decodedJWT = null;\n        try {\n            decodedJWT = jwtVerifier.verify(request.getToken());\n        } catch (Exception e) {\n            throw new BusinessException(ResultCode.TOKEN_FAILED);\n        }\n\n        JwtTokenVerifyDTO jwtTokenVerifyDTO = new JwtTokenVerifyDTO();\n        Map<String, Claim> claims = decodedJWT.getClaims();\n        if (MapUtil.isNotEmpty(claims)) {\n            claims.forEach((k, v) -> {\n                jwtTokenVerifyDTO.getPayLoads().put(k, v.asString());\n            });\n        }\n        jwtTokenVerifyDTO.setSubject(decodedJWT.getSubject());\n        jwtTokenVerifyDTO.setExpireTime(decodedJWT.getExpiresAt());\n        return jwtTokenVerifyDTO;\n    }\n}\n```\n#### 3.3. application层\n因为现在登录涉及到token等操作，对于token的生成， 这个不属于userService领域服务范围，因此就涉及到多个服务之间的协作，所以此时使用applicationService来整合多个服务。我们添加一个UserApplicationService类\n```java\npackage com.yang.application.service;\n\nimport com.yang.application.dto.UserLoginDTO;\nimport com.yang.controller.request.LoginUserRequest;\nimport com.yang.controller.request.RegisterUserRequest;\nimport com.yang.domain.data.User;\nimport com.yang.domain.service.UserService;\nimport com.yang.infrastructure.auth.config.JwtTokenProperty;\nimport com.yang.infrastructure.auth.request.JwtTokenGenerateRequest;\nimport com.yang.infrastructure.auth.service.JwtTokenService;\nimport com.yang.infrastructure.common.ResultCode;\nimport com.yang.infrastructure.exception.BusinessException;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\n\nimport javax.annotation.Resource;\nimport java.util.HashMap;\nimport java.util.Map;\n\n@Service\npublic class UserApplicationService {\n    @Autowired\n    private UserService userService;\n\n    @Autowired\n    private JwtTokenProperty jwtTokenProperty;\n\n    @Resource\n    private JwtTokenService jwtTokenService;\n\n    public User register(RegisterUserRequest request) {\n        return userService.register(request);\n    }\n\n    public UserLoginDTO login(LoginUserRequest request) {\n        User user = userService.login(request);\n        if (user == null) {\n            throw new BusinessException(ResultCode.LOGIN_FAILED);\n        }\n        // 生成token\n        UserLoginDTO userLoginDTO = new UserLoginDTO();\n        userLoginDTO.setUser(user);\n\n        JwtTokenGenerateRequest jwtGenerateRequest = convert2JwtTokenGenerateRequest(user);\n        userLoginDTO.setToken(jwtTokenService.generateJwtToken(jwtGenerateRequest));\n        return userLoginDTO;\n    }\n\n    private JwtTokenGenerateRequest convert2JwtTokenGenerateRequest(User user) {\n        JwtTokenGenerateRequest request = new JwtTokenGenerateRequest();\n        request.setSubject(user.getId().toString());\n        request.setExpireTime(jwtTokenProperty.getExpire());\n        request.setSecret(jwtTokenProperty.getSecret());\n\n        Map<String, String> payloads = new HashMap<>();\n        payloads.put(\"username\", user.getUsername());\n        payloads.put(\"id\", user.getId().toString());\n        payloads.put(\"salt\", user.getSalt());\n        request.setPayLoads(payloads);\n\n        return request;\n    }\n}\n```\n#### 3.4. controller层\n我们修改controller层，改用applicationService，并添加一个接口，来测试我们的JwtTokenService解析是否正确\n```java\npackage com.yang.controller;\n\nimport com.yang.application.service.UserApplicationService;\nimport com.yang.application.dto.UserLoginDTO;\nimport com.yang.controller.request.LoginUserRequest;\nimport com.yang.controller.request.RegisterUserRequest;\nimport com.yang.domain.data.User;\nimport com.yang.infrastructure.auth.config.JwtTokenProperty;\nimport com.yang.infrastructure.auth.request.JwtTokenVerifyRequest;\nimport com.yang.infrastructure.auth.response.JwtTokenVerifyDTO;\nimport com.yang.infrastructure.auth.service.JwtTokenService;\nimport com.yang.infrastructure.common.Response;\nimport com.yang.infrastructure.common.ResultCode;\nimport com.yang.infrastructure.exception.BusinessException;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.web.bind.annotation.*;\n\n@RestController\n@RequestMapping(value = \"/user\")\npublic class UserController {\n   @Autowired\n   private UserApplicationService userApplicationService;\n\n    @PostMapping(value = \"/register\")\n    public Response<User> register(@RequestBody RegisterUserRequest request) {\n        User user = userApplicationService.register(request);\n        return Response.success(user);\n    }\n\n    @PostMapping(value = \"/login\")\n    public Response<UserLoginDTO> login(@RequestBody LoginUserRequest request) {\n        UserLoginDTO userLoginDTO = userApplicationService.login(request);\n        if (userLoginDTO == null) {\n            throw new BusinessException(ResultCode.LOGIN_FAILED);\n        }\n        return Response.success(userLoginDTO);\n    }\n    \n    @Autowired\n    private JwtTokenService jwtTokenService;\n    \n    @Autowired\n    private JwtTokenProperty jwtTokenProperty;\n    \n    @GetMapping(value = \"/verify\")\n    public Response<JwtTokenVerifyDTO> verify(@RequestParam(name = \"token\")String token) {\n        JwtTokenVerifyRequest request = new JwtTokenVerifyRequest();\n        request.setToken(token);\n        request.setSecret(jwtTokenProperty.getSecret());\n        JwtTokenVerifyDTO verify = jwtTokenService.verify(request);\n        return Response.success(verify);\n    }\n}\n```\n#### 3.5. 测试\n首先调用登录接口，进行测试\n{% asset_img 10.png %}\n将登录接口返回的token复制，调用verfiy接口，解析成功，说明JwtTokenService没问题\n{% asset_img 11.png %}\n然后我们随意捏造一个token进行访问，结果如下：\n{% asset_img 12.png %}\n### 4. 登录拦截\n后端返回token 给前端后，前端保存这个token,在后续发送请求时，将这个token携带到请求头进行访问，后端解析请求头，解析该token，判断token是否生效，当token有效时，对请求进行放行。也就是说，我们在执行业务代码之前，都会先对请求进行拦截，并校验token的合法性。因此，就需要使用到拦截器。\n#### 4.1. infrastructure层\n在基础设施层，添加和登录拦截有关的类，首先添加一个Spring上下文工具类，帮助获取容器中的bean\n```java\npackage com.yang.infrastructure.utils;\n\nimport org.springframework.beans.BeansException;\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.ApplicationContextAware;\nimport org.springframework.stereotype.Component;\n\n@Component\npublic class SpringContextUtils<T> implements ApplicationContextAware {\n    private static ApplicationContext applicationContext;\n    @Override\n    public void setApplicationContext(ApplicationContext applicationContext) throws BeansException {\n        SpringContextUtils.applicationContext = applicationContext;\n    }\n\n    public static<T>  T getBeanOfType(Class<T> clazz) {\n        return applicationContext.getBean(clazz);\n    }\n\n    public static <T> T getBeanOfName(String name, Class<T> clazz) {\n        return applicationContext.getBean(name, clazz);\n    }\n}\n```\n然后添加一个JwtTokenVerifyInterceptor类，实现HandlerInterceptor，表示判断token是否有效的拦截器。\n```java\npackage com.yang.infrastructure.auth.interceptors;\n\nimport com.yang.infrastructure.auth.config.JwtTokenProperty;\nimport com.yang.infrastructure.auth.request.JwtTokenVerifyRequest;\nimport com.yang.infrastructure.auth.response.JwtTokenVerifyDTO;\nimport com.yang.infrastructure.auth.service.JwtTokenService;\nimport com.yang.infrastructure.common.ResultCode;\nimport com.yang.infrastructure.exception.BusinessException;\nimport com.yang.infrastructure.utils.SpringContextUtils;\nimport org.apache.commons.lang3.StringUtils;\nimport org.springframework.web.servlet.HandlerInterceptor;\n\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\n\npublic class JwtTokenVerifyInterceptor implements HandlerInterceptor {\n    @Override\n    public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception {\n        String token = request.getHeader(\"token\");\n        if (StringUtils.isEmpty(token)) {\n            throw new BusinessException(ResultCode.TOKEN_FAILED);\n        }\n        JwtTokenService jwtTokenService = SpringContextUtils.getBeanOfType(JwtTokenService.class);\n        JwtTokenProperty jwtTokenProperty = SpringContextUtils.getBeanOfType(JwtTokenProperty.class);\n\n        JwtTokenVerifyRequest jwtTokenVerifyRequest = new JwtTokenVerifyRequest();\n        jwtTokenVerifyRequest.setToken(token);\n        jwtTokenVerifyRequest.setSecret(jwtTokenProperty.getSecret());\n\n        JwtTokenVerifyDTO verify = jwtTokenService.verify(jwtTokenVerifyRequest);\n        if (verify == null) {\n            throw new BusinessException(ResultCode.TOKEN_FAILED);\n        }\n        return true;\n    }\n}\n```\n然后添加一个配置类，配置刚才的拦截器\n```\npackage com.yang.infrastructure.configuration;\n\nimport com.yang.infrastructure.auth.interceptors.JwtTokenVerifyInterceptor;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.web.servlet.config.annotation.InterceptorRegistry;\nimport org.springframework.web.servlet.config.annotation.WebMvcConfigurer;\n\n@Configuration\npublic class WebMvcConfiguration implements WebMvcConfigurer {\n\n    @Override\n    public void addInterceptors(InterceptorRegistry registry) {\n        registry.addInterceptor(new JwtTokenVerifyInterceptor())\n                .addPathPatterns(\"/**\") // 拦截所有请求\n                .excludePathPatterns(\"/user/login\", \"/user/register\"); // 排除登录、注册接口\n    }\n}\n```\n#### 4.2. 测试\n首先，我们在请求头，不添加token，访问测试接口，结果如下：\n{% asset_img 13.png %}\n然后在请求头，添加无效的token，访问测试接口，结果如下：\n{% asset_img 14.png %}\n携带登录返回的token，访问测试接口，结果如下：\n{% asset_img 15.png %}\n### 5. token存储\n#### 5.1. 准备工作\n上述实现，虽然能够完成登录拦截的需求，但是有一个问题，我们每次访问接口，都需要对token进行验证，判断这个token是否有效，为减少解析token的耗时，我们可以将token存起来并设置一个过期时间，这个时候，我们就可以使用reids了。此时，我们的调用流程，如下图所示：\n{% asset_img 16.png %}\n因此，我们添加redis的相关依赖：\n```xml\n  <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-data-redis</artifactId>\n        </dependency>\n```\n#### 5.2. infrastructure层\n在基础设施层，添加上redis的配置类和相关的工具类：\n```java\n@Component\npublic class RedisConfiguration {\n\n    @Bean\n    public RedisTemplate redisTemplate(RedisConnectionFactory redisConnectionFactory) {\n        RedisTemplate<String, Object> redisTemplate = new RedisTemplate<>();\n        redisTemplate.setConnectionFactory(redisConnectionFactory);\n\n        StringRedisSerializer stringRedisSerializer = new StringRedisSerializer();\n        Jackson2JsonRedisSerializer jackson2JsonRedisSerializer = new Jackson2JsonRedisSerializer(Object.class);\n        ObjectMapper objectMapper = new ObjectMapper().enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);\n        jackson2JsonRedisSerializer.setObjectMapper(objectMapper);\n\n        redisTemplate.setKeySerializer(stringRedisSerializer);\n        redisTemplate.setHashKeySerializer(stringRedisSerializer);\n        redisTemplate.setValueSerializer(jackson2JsonRedisSerializer);\n        redisTemplate.setHashValueSerializer(jackson2JsonRedisSerializer);\n        return redisTemplate;\n    }\n}\n\n\n\n@Component\npublic class RedisUtils {\n    @Autowired\n    private RedisTemplate<String, Object> redisTemplate;\n\n    public void setKey(String key, Object value) {\n        redisTemplate.opsForValue().set(key, value);\n    }\n\n    public void setKey(String key, Object value, Long expire) {\n        setKey(key, value, expire, TimeUnit.SECONDS);\n    }\n\n    public void setKey(String key, Object value, Long expire, TimeUnit timeUnit) {\n        redisTemplate.opsForValue().set(key, value, expire, timeUnit);\n    }\n\n    public Object getKey(String key) {\n        return redisTemplate.opsForValue().get(key);\n    }\n}\n```\n然后修改JwtTokenVerifyInterceptor拦截器，先查询redis上是否存在对应的token，有的话放行，否则使用JwtTokenService验证token是否有效\n```java\n  @Override\n    public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception {\n        String token = request.getHeader(\"token\");\n        if (StringUtils.isEmpty(token)) {\n            throw new BusinessException(ResultCode.TOKEN_FAILED);\n        }\n        if(verifyByRedis(token)) { // 判断该token在Redis是否存在\n            System.out.println(\"Redis中存在这个token，放行\");\n            return true;\n        }\n        System.out.println(\"Redis中不存在这个token，解析该token\");\n        JwtTokenService jwtTokenService = SpringContextUtils.getBeanOfType(JwtTokenService.class);\n        JwtTokenProperty jwtTokenProperty = SpringContextUtils.getBeanOfType(JwtTokenProperty.class);\n\n        JwtTokenVerifyRequest jwtTokenVerifyRequest = new JwtTokenVerifyRequest();\n        jwtTokenVerifyRequest.setToken(token);\n        jwtTokenVerifyRequest.setSecret(jwtTokenProperty.getSecret());\n\n        JwtTokenVerifyDTO verify = jwtTokenService.verify(jwtTokenVerifyRequest);\n        if (verify == null) {\n            throw new BusinessException(ResultCode.TOKEN_FAILED);\n        }\n        return true;\n    }\n\n    private boolean verifyByRedis(String token) {\n        RedisUtils redisUtils = SpringContextUtils.getBeanOfType(RedisUtils.class);\n        Object key = redisUtils.getKey(\"token:\" + token);\n        return key != null;\n    }\n```\n#### 5.3. application层\n修改登录逻辑中，在生成token后，将token存入redis\n```java\n public UserLoginDTO login(LoginUserRequest request) {\n        User user = userService.login(request);\n        if (user == null) {\n            throw new BusinessException(ResultCode.LOGIN_FAILED);\n        }\n        // 生成token\n        UserLoginDTO userLoginDTO = new UserLoginDTO();\n        userLoginDTO.setUser(user);\n\n        JwtTokenGenerateRequest jwtGenerateRequest = convert2JwtTokenGenerateRequest(user);\n        String token = jwtTokenService.generateJwtToken(jwtGenerateRequest);\n        userLoginDTO.setToken(token);\n\n        // token存储到redis\n        redisUtils.setKey(\"token:\" + token, jwtGenerateRequest, jwtGenerateRequest.getExpireTime());\n        return userLoginDTO;\n    }\n```\n#### 5.4. 测试\n首先访问登录接口，登录成功后，查看redis中是否含有对应的token\n{% asset_img 17.png %}\nredis中存在对应的token，然后我们访问测试接口，查看命令行,此时redis中存在该token，因此直接放行\n{% asset_img 18.png %}\n然后我们删除redis中的这个key，再次访问测试接口，此时redis不存在这个key，因此就需要进行token的解析。\n{% asset_img 19.png %}\n### 6. 用户信息更新\n用户信息，一般情况下更新的频率比较低，但也不是没有，常见的更新有：用户修改密码、用户修改昵称等。我们以用户修改密码为例，进行示例。\n当用户修改密码时，我们只需要使用数据库中的salt，结合用户输入的新密码，生成新的哈希值，存入数据库，此外，因为用户信息更新了，我们最好将用户的token生效，存入redis的token，我们可以很容易地将其删除，但是，前端保存地token信息，我们修改不了，因此，最好是前端在更新操作成功后，主动删除请求头的token，从而时用户再次操作时，提示token失效，进行登录。\n#### 6.1. infrastructure层\n首先，修改RedisUtils工具类，加上删除key的方法\n```java\n public boolean removeKey(String key) {\n        return redisTemplate.delete(key);\n    }\n```\n#### 6.2. domain层\n修改UserService，添加修改密码的相关操作\n```java\n public void updatePassword(UpdatePasswordRequest request) {\n        Integer userId = request.getId();\n        User user = userRepository.findById(userId);\n         if (user == null) {\n            return;\n        }\n        String password = request.getPassword();\n        String newPassword = EncryptUtils.encrypt(password, user.getSalt());\n        user.setPassword(newPassword);\n\n        try {\n            userRepository.updateUser(user);\n        } catch (Exception e) {\n            throw new BusinessException(ResultCode.SERVER_ERROR);\n        }\n    }\n```\n#### 6.3. application层\n在UserApplicationService类，添加修改用户密码的方法\n```java\n public void updatePassword(UpdatePasswordRequest updatePasswordRequest, HttpServletRequest request) {\n        userService.updatePassword(updatePasswordRequest);\n        \n        // 删除token\n        String token = request.getHeader(\"token\");\n        redisUtils.removeKey(\"token:\" + token);\n    }\n```\n#### 6.4. controller层\n在UserController类，添加修改用户密码的方法\n```java\n @PutMapping(value = \"/updatePassword\")\n    public Response updatePassword(@RequestBody UpdatePasswordRequest request, HttpServletRequest httpServletRequest) {\n        userApplicationService.updatePassword(request, httpServletRequest);\n        return Response.success();\n    }\n```\n#### 6.5. 测试\n首先进行登录，登录成功后，在redis中多了一个token\n{% asset_img 20.png %}\n然后调用更新密码接口\n{% asset_img 21.png %}\n再次查看redis，发现token被删除了，然后查看数据库，能看出我们的密码也改变了\n{% asset_img 22.png %}\n{% asset_img 23.png %}\n### 7. 用户上下文\n上面的代码，看似合理，但是有一个问题，更新密码的时候，传了两个值，一个是用户id，另一个才是用户输入的密码。在之前我们提到，我们通过登录拦截，规避了未登录用户操作系统资源的问题，但是对于我们刚才实现的修改密码接口，可能出现这种情况，用户A携带自己登录的token，请求体中id为用户B的id，调用修改密码的接口，这就导致，用户A修改了用户B的密码，这是不合理的，因此，这里将对代码进一步做修改，在进行拦截操作后，将用户信息，存储于用户上下文，然后在修改密码时，直接使用用户上下文中的用户id，而不是依靠前端传递的id。\n#### 7.1. infrastructure层\n首先，我们定义一个用户上下文信息类，用于存储用户的主要信息，包括用户id，token，用户名等。\n```java\npackage com.yang.infrastructure.auth;\n\nimport lombok.Data;\n\nimport java.io.Serializable;\nimport java.util.HashMap;\nimport java.util.Map;\n\n@Data\npublic class UserContextDetails implements Serializable {\n    private Integer id;\n    \n    private String token;\n    \n    private String username;\n    \n    private Map<String, String> extendMap = new HashMap<>();\n}\n```\n添加一个线程上下文类，用于存储用户上下文信息\n```java\npackage com.yang.infrastructure.auth;\n\npublic class UserContextThreadLocal {\n    private static ThreadLocal<UserContextDetails> userContextDetailsThreadLocal = new ThreadLocal<>();\n\n    public static void setUserContextDetails(UserContextDetails userContextDetails) {\n        userContextDetailsThreadLocal.set(userContextDetails);\n    }\n\n    public static UserContextDetails get() {\n        return userContextDetailsThreadLocal.get();\n    }\n\n    public static void remove() {\n        userContextDetailsThreadLocal.remove();\n    }\n    \n    public static Integer getUserId() {\n        return userContextDetailsThreadLocal.get().getId();\n    }\n    \n    public static String getToken() {\n        return userContextDetailsThreadLocal.get().getToken();\n    }\n}\n```\n然后，修改我们的JwtTokenVerifyInterceptor拦截器，这里我们实现了afterCompletion。在preHandler方法中，设置对应的线程上下文，在afterCompletion清除线程上下文，注意，设置线程上下文和清除线程上下文的操作，必须成对出现，否则会造成内存泄露。\n```java\npackage com.yang.infrastructure.auth.interceptors;\n\nimport com.alibaba.fastjson.JSON;\nimport com.alibaba.fastjson.JSONObject;\nimport com.yang.infrastructure.auth.UserContextDetails;\nimport com.yang.infrastructure.auth.UserContextThreadLocal;\nimport com.yang.infrastructure.auth.config.JwtTokenProperty;\nimport com.yang.infrastructure.auth.request.JwtTokenVerifyRequest;\nimport com.yang.infrastructure.auth.response.JwtTokenVerifyDTO;\nimport com.yang.infrastructure.auth.service.JwtTokenService;\nimport com.yang.infrastructure.common.ResultCode;\nimport com.yang.infrastructure.exception.BusinessException;\nimport com.yang.infrastructure.utils.RedisUtils;\nimport com.yang.infrastructure.utils.SpringContextUtils;\nimport org.apache.commons.lang3.StringUtils;\nimport org.springframework.lang.Nullable;\nimport org.springframework.web.servlet.HandlerInterceptor;\n\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\n\npublic class JwtTokenVerifyInterceptor implements HandlerInterceptor {\n    @Override\n    public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception {\n        String token = request.getHeader(\"token\");\n        if (StringUtils.isEmpty(token)) {\n            throw new BusinessException(ResultCode.TOKEN_FAILED);\n        }\n        Object userDetails = getUserDetailsFromRedis(token);\n        if (userDetails != null) { // 判断该token在Redis是否存在\n            // 设置线程上下文\n            System.out.println(\"设置线程上下文====================\");\n            UserContextDetails userContextDetails = (UserContextDetails) userDetails;\n            userContextDetails.setToken(token);\n            UserContextThreadLocal.setUserContextDetails(userContextDetails);\n            return true;\n        }\n\n        JwtTokenService jwtTokenService = SpringContextUtils.getBeanOfType(JwtTokenService.class);\n        JwtTokenProperty jwtTokenProperty = SpringContextUtils.getBeanOfType(JwtTokenProperty.class);\n\n        JwtTokenVerifyRequest jwtTokenVerifyRequest = new JwtTokenVerifyRequest();\n        jwtTokenVerifyRequest.setToken(token);\n        jwtTokenVerifyRequest.setSecret(jwtTokenProperty.getSecret());\n\n        JwtTokenVerifyDTO verify = jwtTokenService.verify(jwtTokenVerifyRequest);\n        if (verify == null) {\n            throw new BusinessException(ResultCode.TOKEN_FAILED);\n        }\n\n        // 设置线程上下文\n        System.out.println(\"设置线程上下文====================\");\n        UserContextDetails userContextDetails = new UserContextDetails();\n        userContextDetails.setId(Integer.valueOf(verify.getSubject()));\n        userContextDetails.setToken(token);\n        userContextDetails.setUsername(verify.getPayLoads().get(\"username\"));\n        userContextDetails.setExtendMap(verify.getPayLoads());\n        UserContextThreadLocal.setUserContextDetails(userContextDetails);\n        return true;\n    }\n\n    private Object getUserDetailsFromRedis(String token) {\n        RedisUtils redisUtils = SpringContextUtils.getBeanOfType(RedisUtils.class);\n        return redisUtils.getKey(\"token:\" + token);\n    }\n\n    @Override\n    public void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, @Nullable Exception ex) throws Exception {\n        System.out.println(\"清除线程上下文=======================\");\n        // 清除线程上下文\n        UserContextThreadLocal.remove();\n    }\n}\n```\n#### 7.2. domain层\n修改UserService的updatePassword方法，userId从线程上下文获取\n```java\n public void updatePassword(UpdatePasswordRequest request) {\n        Integer userId = UserContextThreadLocal.getUserId();\n        User user = userRepository.findById(userId);\n        if (user == null) {\n            return;\n        }\n        String password = request.getPassword();\n        String newPassword = EncryptUtils.encrypt(password, user.getSalt());\n        user.setPassword(newPassword);\n\n        try {\n            userRepository.updateUser(user);\n        } catch (Exception e) {\n            throw new BusinessException(ResultCode.SERVER_ERROR);\n        }\n    }\n```\n#### 7.3. application层\n修改application层updatePassword方法，token从线程上下文获取\n```java\n public void updatePassword(UpdatePasswordRequest updatePasswordRequest) {\n        userService.updatePassword(updatePasswordRequest);\n\n        // 删除token\n        String token = UserContextThreadLocal.getToken();\n        redisUtils.removeKey(\"token:\" + token);\n    }\n```\n#### 7.4. controller层\n修改controller层的updatePassword方法\n```java\n @PutMapping(value = \"/updatePassword\")\n    public Response updatePassword(@RequestBody UpdatePasswordRequest request) {\n        userApplicationService.updatePassword(request);\n        return Response.success();\n    }\n```\n#### 7.5. 测试\n调用用户登录接口，然后查看redis，可以看出，现在存储的value类型，是UserContextDetails类型\n{% asset_img 24.png %}\n调用测试接口，然后查看控制台\n{% asset_img 25.png %}\n然后查看控制台，从控制台中可以看出，设置线程上下文和清除线程上下文成对出现。\n{% asset_img 26.png %}\n测试修改密码接口\n{% asset_img 27.png %}\n修改成功，说明线程上下文的取值没有问题。\n### 8. 参考文档\nhttps://segmentfault.com/a/1190000040003653","slug":"登录、注册学习","published":1,"updated":"2024-04-03T07:05:14.899Z","comments":1,"layout":"post","photos":[],"_id":"clujgs3wr0000qgvl00krchh9","content":"<h3 id=\"1-引言\"><a href=\"#1-引言\" class=\"headerlink\" title=\"1. 引言\"></a>1. 引言</h3><p>在项目中，登录、注册一般都是项目的必备功能，因为它们的用户管理和身份验证的基础，通过登录和注册，能有效保护用户个人数据，并根据用户权限，进行对应的资源访问控制。此外，还能对注册后的用户进行行为分析，以便提供对应的个性化服务。</p>\n<h3 id=\"2-登录、注册实现\"><a href=\"#2-登录、注册实现\" class=\"headerlink\" title=\"2. 登录、注册实现\"></a>2. 登录、注册实现</h3><h4 id=\"2-1-项目结构介绍\"><a href=\"#2-1-项目结构介绍\" class=\"headerlink\" title=\"2.1. 项目结构介绍\"></a>2.1. 项目结构介绍</h4><p>这里的项目结构，借鉴周志明老师提出的凤凰架构，将项目分为四层：<br>1）domain： 领域层，负责实现业务逻辑，即表达业务概念、处理业务状态信息以及业务规这些行为，提供对应的领域服务。<br>2）infrastructure：基础设施层，向其他层提供通用的技术能力，譬如持久化能力、远程访问通信、工具集等。<br>3）application：应用层，负责软件本身对外暴露的能力，通过整合各个领域服务，进行协助，对外提供服务，相当于各个领域服务的门面，类似于MVC架构中的service层。<br>4）controller：负责向用户显示信息或解释用户发出的命令，即MVC架构中的controller层。</p>\n<img src=\"/2024/04/03/%E7%99%BB%E5%BD%95%E3%80%81%E6%B3%A8%E5%86%8C%E5%AD%A6%E4%B9%A0/1.png\" class=\"\">\n<h4 id=\"2-2-简单实现\"><a href=\"#2-2-简单实现\" class=\"headerlink\" title=\"2.2. 简单实现\"></a>2.2. 简单实现</h4><h5 id=\"2-2-1-准备工作\"><a href=\"#2-2-1-准备工作\" class=\"headerlink\" title=\"2.2.1. 准备工作\"></a>2.2.1. 准备工作</h5><p>首先引入下列依赖：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependencies</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>spring-boot-starter-web<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>mysql<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>mysql-connector-java<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>com.baomidou<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>3.4.3<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>spring-boot-starter-test<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.projectlombok<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>lombok<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.apache.commons<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>commons-lang3<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<p>创建对应的数据库，数据库表结构如下：</p>\n<img src=\"/2024/04/03/%E7%99%BB%E5%BD%95%E3%80%81%E6%B3%A8%E5%86%8C%E5%AD%A6%E4%B9%A0/2.png\" class=\"\">\n<p>这里的username添加了唯一索引，因为用户名一般都是唯一的。</p>\n<h5 id=\"2-2-2-domain层\"><a href=\"#2-2-2-domain层\" class=\"headerlink\" title=\"2.2.2. domain层\"></a>2.2.2. domain层</h5><p>创建对应的实体类，以及相关的repository仓储层和domainservice领域服务</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Data</span><br><span class=\"hljs-meta\">@TableName(value = &quot;t_user&quot;)</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">User</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">Serializable</span> &#123;<br>    <span class=\"hljs-meta\">@TableId(type = IdType.AUTO)</span><br>    <span class=\"hljs-keyword\">private</span> Integer id;<br><br>    <span class=\"hljs-keyword\">private</span> String username;<br><br>    <span class=\"hljs-keyword\">private</span> String password;<br><br>    <span class=\"hljs-comment\">// 是否冻结 0未冻结 1已冻结</span><br>    <span class=\"hljs-keyword\">private</span> Integer freeze;<br><br>    <span class=\"hljs-keyword\">private</span> Date createTime;<br><br>    <span class=\"hljs-keyword\">private</span> Date updateTime;<br><br>    <span class=\"hljs-keyword\">private</span> Map&lt;String, String&gt; featuresMap;<br><br>    <span class=\"hljs-keyword\">private</span> String features;<br>&#125;<br><br><br><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">IUserRepository</span> &#123;<br><br>    <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">saveUser</span><span class=\"hljs-params\">(User user)</span>;<br><br><br>    User <span class=\"hljs-title function_\">findByUsernameAndPassword</span><span class=\"hljs-params\">(String username, String password)</span>;<br>&#125;<br><br><br><br><span class=\"hljs-meta\">@Repository</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">UserRepository</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">IUserRepository</span> &#123;<br>    <span class=\"hljs-meta\">@Autowired</span><br>    <span class=\"hljs-keyword\">private</span> UserMapper userMapper;<br><br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">UN_FREEZE</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>;<br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">FREEZE</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">1</span>;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">saveUser</span><span class=\"hljs-params\">(User user)</span> &#123;<br>        user.setCreateTime(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Date</span>());<br>        user.setUpdateTime(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Date</span>());<br>        user.setFreeze(UN_FREEZE);<br>        user.setFeaturesMap(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">HashMap</span>&lt;&gt;());<br>        user.setFeatures(JSONObject.toJSONString(user.getFeaturesMap()));<br>        <span class=\"hljs-keyword\">return</span> userMapper.insert(user) &gt; <span class=\"hljs-number\">0</span>;<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> User <span class=\"hljs-title function_\">findByUsernameAndPassword</span><span class=\"hljs-params\">(String username, String password)</span> &#123;<br>        LambdaQueryWrapper&lt;User&gt; queryWrapper = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">LambdaQueryWrapper</span>&lt;&gt;();<br>        queryWrapper.eq(User::getUsername, username);<br>        queryWrapper.eq(User::getPassword, password);<br>        <span class=\"hljs-keyword\">return</span> userMapper.selectOne(queryWrapper);<br>    &#125;<br><br><br>&#125;<br><br><br><span class=\"hljs-meta\">@Service</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">UserService</span> &#123;<br>    <span class=\"hljs-meta\">@Resource</span><br>    <span class=\"hljs-keyword\">private</span> IUserRepository userRepository;<br><br>    <span class=\"hljs-keyword\">public</span> User <span class=\"hljs-title function_\">register</span><span class=\"hljs-params\">(RegisterUserRequest request)</span> &#123;<br>        <span class=\"hljs-type\">User</span> <span class=\"hljs-variable\">user</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">User</span>();<br>        user.setUsername(request.getUsername());<br>        user.setPassword(request.getPassword());<br>        <span class=\"hljs-keyword\">try</span> &#123;<br>            userRepository.saveUser(user);<br>            <span class=\"hljs-keyword\">return</span> user;<br>        &#125; <span class=\"hljs-keyword\">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>            <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">BusinessException</span>(ResultCode.SERVER_ERROR);<br>        &#125;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> User <span class=\"hljs-title function_\">login</span><span class=\"hljs-params\">(LoginUserRequest request)</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> userRepository.findByUsernameAndPassword(request.getUsername(), request.getPassword());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h5 id=\"2-2-3-controller层\"><a href=\"#2-2-3-controller层\" class=\"headerlink\" title=\"2.2.3. controller层\"></a>2.2.3. controller层</h5><p>添加userController，在该类中添加注册和登录的接口</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@RestController</span><br><span class=\"hljs-meta\">@RequestMapping(value = &quot;/user&quot;)</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">UserController</span> &#123;<br>    <span class=\"hljs-meta\">@Autowired</span><br>    <span class=\"hljs-keyword\">private</span> UserService userService;<br><br>    <span class=\"hljs-meta\">@PostMapping(value = &quot;/register&quot;)</span><br>    <span class=\"hljs-keyword\">public</span> Response&lt;User&gt; <span class=\"hljs-title function_\">register</span><span class=\"hljs-params\">(<span class=\"hljs-meta\">@RequestBody</span> RegisterUserRequest request)</span> &#123;<br>        <span class=\"hljs-type\">User</span> <span class=\"hljs-variable\">user</span> <span class=\"hljs-operator\">=</span> userService.register(request);<br>        <span class=\"hljs-keyword\">return</span> Response.success(user);<br>    &#125;<br><br>    <span class=\"hljs-meta\">@PostMapping(value = &quot;/login&quot;)</span><br>    <span class=\"hljs-keyword\">public</span> Response&lt;User&gt; <span class=\"hljs-title function_\">login</span><span class=\"hljs-params\">(<span class=\"hljs-meta\">@RequestBody</span> LoginUserRequest request)</span> &#123;<br>        <span class=\"hljs-type\">User</span> <span class=\"hljs-variable\">user</span> <span class=\"hljs-operator\">=</span> userService.login(request);<br>        <span class=\"hljs-keyword\">if</span> (user == <span class=\"hljs-literal\">null</span>) &#123;<br>            <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">BusinessException</span>(ResultCode.LOGIN_FAILED);<br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> Response.success(user);<br>    &#125;<br>&#125;<br><br><br><br><span class=\"hljs-meta\">@Data</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">LoginUserRequest</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">Serializable</span> &#123;<br>    <span class=\"hljs-keyword\">private</span> String username;<br><br>    <span class=\"hljs-keyword\">private</span> String password;<br>&#125;<br><br><br><br><span class=\"hljs-meta\">@Data</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">RegisterUserRequest</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">Serializable</span> &#123;<br>    <span class=\"hljs-keyword\">private</span> String username;<br><br>    <span class=\"hljs-keyword\">private</span> String password;<br><br>&#125;<br></code></pre></td></tr></table></figure>\n<h5 id=\"2-2-4-infrastructure层\"><a href=\"#2-2-4-infrastructure层\" class=\"headerlink\" title=\"2.2.4. infrastructure层\"></a>2.2.4. infrastructure层</h5><p>添加基础设施，比如异常类、返回结果类、错误码，全局异常处理等</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">enum</span> <span class=\"hljs-title class_\">ResultCode</span> &#123;<br>    SUCCESS(<span class=\"hljs-number\">200</span>, <span class=\"hljs-string\">&quot;操作成功&quot;</span>),<br>    ACCESS_DENIED(<span class=\"hljs-number\">403</span>, <span class=\"hljs-string\">&quot;没有权限&quot;</span>),<br>    FAILED(<span class=\"hljs-number\">400</span>, <span class=\"hljs-string\">&quot;操作失败&quot;</span>),<br><br>    LOGIN_FAILED(<span class=\"hljs-number\">400</span>, <span class=\"hljs-string\">&quot;用户不存在或密码错误&quot;</span>),<br>    SERVER_ERROR(<span class=\"hljs-number\">500</span>, <span class=\"hljs-string\">&quot;服务器错误&quot;</span>);<br><br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">int</span> code;<br><br>    <span class=\"hljs-keyword\">private</span> String msg;<br><br>    ResultCode(<span class=\"hljs-type\">int</span> code, String msg) &#123;<br>        <span class=\"hljs-built_in\">this</span>.code = code;<br>        <span class=\"hljs-built_in\">this</span>.msg = msg;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">getCode</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>.code;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title function_\">getMsg</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>.msg;<br>    &#125;<br>&#125;<br><br><br><br><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Response</span> &lt;T&gt; &#123;<br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">int</span> code;<br><br>    <span class=\"hljs-keyword\">private</span> String msg;<br><br>    <span class=\"hljs-keyword\">private</span> T data;<br><br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-title function_\">Response</span><span class=\"hljs-params\">(Integer code, String msg)</span> &#123;<br>        <span class=\"hljs-built_in\">this</span>.code = code;<br>        <span class=\"hljs-built_in\">this</span>.msg = msg;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-title function_\">Response</span><span class=\"hljs-params\">(Integer code, String msg, T data)</span> &#123;<br>        <span class=\"hljs-built_in\">this</span>.code = code;<br>        <span class=\"hljs-built_in\">this</span>.msg = msg;<br>        <span class=\"hljs-built_in\">this</span>.data = data;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-title function_\">Response</span><span class=\"hljs-params\">(ResultCode resultCode)</span> &#123;<br>        <span class=\"hljs-built_in\">this</span>.code = resultCode.getCode();<br>        <span class=\"hljs-built_in\">this</span>.msg = resultCode.getMsg();<br>    &#125;<br><br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-title function_\">Response</span><span class=\"hljs-params\">(ResultCode resultCode, T data)</span> &#123;<br>        <span class=\"hljs-built_in\">this</span>.code = resultCode.getCode();<br>        <span class=\"hljs-built_in\">this</span>.msg = resultCode.getMsg();<br>        <span class=\"hljs-built_in\">this</span>.data = data;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> &lt;T&gt; Response&lt;T&gt; <span class=\"hljs-title function_\">success</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Response</span>&lt;&gt;(ResultCode.SUCCESS);<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> &lt;T&gt; Response&lt;T&gt; <span class=\"hljs-title function_\">success</span><span class=\"hljs-params\">(T data)</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Response</span>&lt;&gt;(ResultCode.SUCCESS, data);<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> &lt;T&gt; Response&lt;T&gt; <span class=\"hljs-title function_\">fail</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Response</span>&lt;&gt;(ResultCode.FAILED);<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> &lt;T&gt; Response&lt;T&gt; <span class=\"hljs-title function_\">error</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Response</span>&lt;&gt;(ResultCode.SERVER_ERROR);<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> &lt;T&gt; Response&lt;T&gt; <span class=\"hljs-title function_\">fail</span><span class=\"hljs-params\">(ResultCode resultCode)</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Response</span>&lt;&gt;(resultCode);<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> &lt;T&gt; Response&lt;T&gt; <span class=\"hljs-title function_\">fail</span><span class=\"hljs-params\">(String msg)</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Response</span>&lt;&gt;(ResultCode.FAILED.getCode(), msg);<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">getCode</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>.code;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title function_\">getMsg</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>.msg;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> T <span class=\"hljs-title function_\">getData</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>.data;<br>    &#125;<br>&#125;<br><br><br><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">BusinessException</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">RuntimeException</span> &#123;<br>    <span class=\"hljs-keyword\">private</span> ResultCode resultCode;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">BusinessException</span><span class=\"hljs-params\">(ResultCode resultCode)</span> &#123;<br>        <span class=\"hljs-built_in\">super</span>(resultCode.getMsg());<br>        <span class=\"hljs-built_in\">this</span>.resultCode = resultCode;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> ResultCode <span class=\"hljs-title function_\">getResultCode</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>.resultCode;<br>    &#125;<br>&#125;<br><br><br><br><span class=\"hljs-meta\">@RestControllerAdvice</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">GlobalExceptionHandler</span> &#123;<br>    <span class=\"hljs-meta\">@ExceptionHandler(value = BusinessException.class)</span><br>    <span class=\"hljs-keyword\">public</span> Response <span class=\"hljs-title function_\">handleBusinessException</span><span class=\"hljs-params\">(BusinessException businessException)</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> Response.fail(businessException.getResultCode());<br>    &#125;<br><br>    <span class=\"hljs-meta\">@ExceptionHandler(value = Exception.class)</span><br>    <span class=\"hljs-keyword\">public</span> Response <span class=\"hljs-title function_\">handleException</span><span class=\"hljs-params\">(Exception e)</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> Response.fail(e.getMessage());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h5 id=\"2-2-5-application层\"><a href=\"#2-2-5-application层\" class=\"headerlink\" title=\"2.2.5. application层\"></a>2.2.5. application层</h5><p>因为现在的功能比较简单，不涉及到多个领域对象的交互，所以这里暂时不添加相关的应用服务。</p>\n<h5 id=\"2-2-6-测试\"><a href=\"#2-2-6-测试\" class=\"headerlink\" title=\"2.2.6. 测试\"></a>2.2.6. 测试</h5><p>所以接口测试工具，分别对注册接口和登录接口进行访问</p>\n<img src=\"/2024/04/03/%E7%99%BB%E5%BD%95%E3%80%81%E6%B3%A8%E5%86%8C%E5%AD%A6%E4%B9%A0/3.png\" class=\"\">\n<img src=\"/2024/04/03/%E7%99%BB%E5%BD%95%E3%80%81%E6%B3%A8%E5%86%8C%E5%AD%A6%E4%B9%A0/4.png\" class=\"\">\n<h4 id=\"2-3-密码加密\"><a href=\"#2-3-密码加密\" class=\"headerlink\" title=\"2.3. 密码加密\"></a>2.3. 密码加密</h4><p>上述流程虽然能够跑通，但是存在一个问题，用户密码在数据库中，以明文的方式进行存储，这样不太合理，容易将用户数据泄露出去。因此，这里进行修改。<br>在用户密码加密中，我们经常会使用到盐（Salt），盐是一种随机值，它与用户密码组合起来，形成一个组合密码，然后使用加密哈希函数（比如SHA-）对组合密码进行加密，生成哈希值，并将加密后的哈希值存储在数据库中，当用户登录时，系统会取出存储的哈希值，通过与用户输入的密码组合，进行哈希加密，然后比对与数据库中存储的值是否一致。</p>\n<h5 id=\"2-3-1-修改表结构\"><a href=\"#2-3-1-修改表结构\" class=\"headerlink\" title=\"2.3.1. 修改表结构\"></a>2.3.1. 修改表结构</h5><p>在之前的表设计中，我们预留了一个features字段，表示扩展信息，我们其实可以将盐存入到扩展信息中，但是因为盐我们在登录中进场使用到，因此，还是单独作为一个字段，修改后的表结构如下：</p>\n<img src=\"/2024/04/03/%E7%99%BB%E5%BD%95%E3%80%81%E6%B3%A8%E5%86%8C%E5%AD%A6%E4%B9%A0/5.png\" class=\"\">\n<h5 id=\"2-3-2-infrastructure层\"><a href=\"#2-3-2-infrastructure层\" class=\"headerlink\" title=\"2.3.2. infrastructure层\"></a>2.3.2. infrastructure层</h5><p>在基础设施层中，添加上加密工具类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> com.yang.infrastructure.utils;<br><br><span class=\"hljs-keyword\">import</span> cn.hutool.crypto.SecureUtil;<br><span class=\"hljs-keyword\">import</span> cn.hutool.crypto.digest.Digester;<br><br><span class=\"hljs-keyword\">import</span> java.util.concurrent.ThreadLocalRandom;<br><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">EncryptUtils</span> &#123;<br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">Digester</span> <span class=\"hljs-variable\">sha256</span> <span class=\"hljs-operator\">=</span> SecureUtil.sha256();<br>    <br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">char</span>[] saltChars = <span class=\"hljs-string\">&quot;0123456789abcdefghijklmnopqrstuvwxyz&quot;</span>.toCharArray();<br>    <br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">SALT_LEN</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">6</span>;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 加密</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@param</span> originPwd</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@param</span> salt</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@return</span></span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> String <span class=\"hljs-title function_\">encrypt</span><span class=\"hljs-params\">(String originPwd, String salt)</span> &#123;<br>        <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">newPwd</span> <span class=\"hljs-operator\">=</span> salt + originPwd;<br>        <span class=\"hljs-type\">byte</span>[] digest = sha256.digest(newPwd);<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">String</span>(digest);<br>    &#125;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 生成盐</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@return</span></span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> String <span class=\"hljs-title function_\">generateSalt</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-type\">StringBuilder</span> <span class=\"hljs-variable\">sb</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">StringBuilder</span>();<br>        <span class=\"hljs-type\">ThreadLocalRandom</span> <span class=\"hljs-variable\">threadLocalRandom</span> <span class=\"hljs-operator\">=</span> ThreadLocalRandom.current();<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; SALT_LEN; i++) &#123;<br>            <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">index</span> <span class=\"hljs-operator\">=</span> threadLocalRandom.nextInt(saltChars.length);<br>            sb.append(saltChars[index]);<br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> sb.toString();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h5 id=\"2-3-3-domain\"><a href=\"#2-3-3-domain\" class=\"headerlink\" title=\"2.3.3. domain\"></a>2.3.3. domain</h5><p>修改domain层中的userService，在注册的时候，设置盐，并对密码进行加密，在登录的时候，根据盐和输入密码，生成哈希值，与数据库中的哈希值进行对比。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> com.yang.domain.service;<br><br><span class=\"hljs-keyword\">import</span> com.yang.controller.request.LoginUserRequest;<br><span class=\"hljs-keyword\">import</span> com.yang.controller.request.RegisterUserRequest;<br><span class=\"hljs-keyword\">import</span> com.yang.domain.data.User;<br><span class=\"hljs-keyword\">import</span> com.yang.domain.repository.IUserRepository;<br><span class=\"hljs-keyword\">import</span> com.yang.infrastructure.common.ResultCode;<br><span class=\"hljs-keyword\">import</span> com.yang.infrastructure.exception.BusinessException;<br><span class=\"hljs-keyword\">import</span> com.yang.infrastructure.utils.EncryptUtils;<br><span class=\"hljs-keyword\">import</span> org.springframework.stereotype.Service;<br><br><span class=\"hljs-keyword\">import</span> javax.annotation.Resource;<br><br><span class=\"hljs-meta\">@Service</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">UserService</span> &#123;<br>    <span class=\"hljs-meta\">@Resource</span><br>    <span class=\"hljs-keyword\">private</span> IUserRepository userRepository;<br><br>    <span class=\"hljs-keyword\">public</span> User <span class=\"hljs-title function_\">register</span><span class=\"hljs-params\">(RegisterUserRequest request)</span> &#123;<br>        <span class=\"hljs-type\">User</span> <span class=\"hljs-variable\">user</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">User</span>();<br>        user.setUsername(request.getUsername());<br>        <span class=\"hljs-comment\">// 设置盐</span><br>        user.setSalt(EncryptUtils.generateSalt());<br>        user.setPassword(EncryptUtils.encrypt(request.getPassword(), user.getSalt()));<br>        <span class=\"hljs-keyword\">try</span> &#123;<br>            userRepository.saveUser(user);<br>            <span class=\"hljs-keyword\">return</span> user;<br>        &#125; <span class=\"hljs-keyword\">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>            <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">BusinessException</span>(ResultCode.SERVER_ERROR);<br>        &#125;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> User <span class=\"hljs-title function_\">login</span><span class=\"hljs-params\">(LoginUserRequest request)</span> &#123;<br>        <span class=\"hljs-type\">User</span> <span class=\"hljs-variable\">user</span> <span class=\"hljs-operator\">=</span> userRepository.findByUsername(request.getUsername());<br>        <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">salt</span> <span class=\"hljs-operator\">=</span> user.getSalt();<br>        <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">password</span> <span class=\"hljs-operator\">=</span> EncryptUtils.encrypt(request.getPassword(), salt);<br>        <span class=\"hljs-keyword\">if</span> (password.equals(user.getPassword())) &#123;<br>            <span class=\"hljs-keyword\">return</span> user;<br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h5 id=\"2-3-4-测试\"><a href=\"#2-3-4-测试\" class=\"headerlink\" title=\"2.3.4. 测试\"></a>2.3.4. 测试</h5><p>重新运行项目，调用注册接口和登录接口</p>\n<img src=\"/2024/04/03/%E7%99%BB%E5%BD%95%E3%80%81%E6%B3%A8%E5%86%8C%E5%AD%A6%E4%B9%A0/6.png\" class=\"\">\n<img src=\"/2024/04/03/%E7%99%BB%E5%BD%95%E3%80%81%E6%B3%A8%E5%86%8C%E5%AD%A6%E4%B9%A0/7.png\" class=\"\">\n<p>查看数据库，可以看出此时的password确实是经过加密后生成的。</p>\n<img src=\"/2024/04/03/%E7%99%BB%E5%BD%95%E3%80%81%E6%B3%A8%E5%86%8C%E5%AD%A6%E4%B9%A0/8.png\" class=\"\">\n<h3 id=\"3-Token生成\"><a href=\"#3-Token生成\" class=\"headerlink\" title=\"3. Token生成\"></a>3. Token生成</h3><h4 id=\"3-1-准备工作\"><a href=\"#3-1-准备工作\" class=\"headerlink\" title=\"3.1. 准备工作\"></a>3.1. 准备工作</h4><p>一般情况下，除了登录和注册接口，不需要进行登录拦截之外，其他的接口，都需要对用户的登录状态进行拦截，判断用户是否登录，如若未登录，则提示用户需要进行登录。对此，我们在用户登录成功后，可以返回一个token作为登录凭证返回给前端。</p>\n<img src=\"/2024/04/03/%E7%99%BB%E5%BD%95%E3%80%81%E6%B3%A8%E5%86%8C%E5%AD%A6%E4%B9%A0/9.png\" class=\"\">\n<p>这里我们在构建token的时候，使用JWT来构建，JWT(JSON Web Token)是为了在网络应用环境间传递声明而执行的一种基于JSON的开放标准。JWT主要由三部分组成：<br>1）头部（Header），通常包含两部分信息，alg(alogirthm，指定用于签名或加密令牌的算法），typ（类型，表明令牌的类型为JWT）</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs json\"><span class=\"hljs-punctuation\">&#123;</span><br>  <span class=\"hljs-attr\">&quot;alg&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;HS256&quot;</span><span class=\"hljs-punctuation\">,</span><br>  <span class=\"hljs-attr\">&quot;typ&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;JWT&quot;</span><br><span class=\"hljs-punctuation\">&#125;</span><br></code></pre></td></tr></table></figure>\n<p>2）有效载荷（Payload），一个json对象，包含一系列声明，比如sub（subject主题，通常是用户id），name（用户名称），exp（过期时间）等。<br>3）签名：对前两部分的串行化后的字符串使用指定的算法（如SHA256或RSA签名）生成的一个加密串，它的作用是保证令牌的完整性和真实性，保证传输过程中没有被修改。<br>这三个部分之间用.分隔，构成JWT的完整结构，如：</p>\n<figure class=\"highlight gcode\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs gcode\">eyJhbGciOiJIUzI<span class=\"hljs-number\">1</span><span class=\"hljs-symbol\">NiIsInR5</span>cCI<span class=\"hljs-number\">6</span>IkpX<span class=\"hljs-attr\">VCJ9</span>.eyJzdWIiOiIxMj<span class=\"hljs-name\">M0</span><span class=\"hljs-symbol\">NTY3</span>ODkwIiwibmFtZSI<span class=\"hljs-number\">6</span>Ikpva<span class=\"hljs-name\">G4</span>gR<span class=\"hljs-name\">G9</span>lIiwiaWF<span class=\"hljs-number\">0</span>Ijox<span class=\"hljs-symbol\">NTE2</span>Mj<span class=\"hljs-name\">M5</span>MDIyfQ.TJVA<span class=\"hljs-number\">95</span><span class=\"hljs-keyword\">Or</span><span class=\"hljs-name\">M7</span>E<span class=\"hljs-number\">2</span>cBab<span class=\"hljs-number\">30</span>RMHrHDcEfxjoYZgeFO<span class=\"hljs-symbol\">NFh7</span>H<span class=\"hljs-number\">8</span>RU<br></code></pre></td></tr></table></figure>\n<p>为整合JWT，我们引入下列依赖：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span><br>           <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>com.auth0<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span><br>           <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>java-jwt<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span><br>           <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>3.10.3<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span><br>       <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<h4 id=\"3-2-infrastructure层\"><a href=\"#3-2-infrastructure层\" class=\"headerlink\" title=\"3.2. infrastructure层\"></a>3.2. infrastructure层</h4><p>在基础设施层，我们添加和鉴权相关的信息，首先添加一个jwt配置类，用于配置jwt使用的密钥和过期时间</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> com.yang.infrastructure.auth.config;<br><br><span class=\"hljs-keyword\">import</span> lombok.Data;<br><span class=\"hljs-keyword\">import</span> org.springframework.beans.factory.annotation.Value;<br><span class=\"hljs-keyword\">import</span> org.springframework.stereotype.Component;<br><br><span class=\"hljs-meta\">@Component</span><br><span class=\"hljs-meta\">@Data</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">JwtTokenProperty</span> &#123;<br><br>    <span class=\"hljs-meta\">@Value(&quot;$&#123;jwt.token.secret&#125;&quot;)</span><br>    <span class=\"hljs-keyword\">private</span> String secret;<br><br>    <span class=\"hljs-meta\">@Value(&quot;$&#123;jwt.token.expire&#125;&quot;)</span><br>    <span class=\"hljs-keyword\">private</span> Integer expire;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>定义一个JwtTokenService接口，以及对应的实现类：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">JwtTokenService</span> &#123;<br>    String <span class=\"hljs-title function_\">generateJwtToken</span><span class=\"hljs-params\">(JwtTokenGenerateRequest request)</span>;<br><br>    JwtTokenVerifyDTO <span class=\"hljs-title function_\">verify</span><span class=\"hljs-params\">(JwtTokenVerifyRequest request)</span>;<br><br>&#125;<br><br><br><br><span class=\"hljs-meta\">@Component</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">JwtTokenServiceImpl</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">JwtTokenService</span>&#123;<br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">Integer</span> <span class=\"hljs-variable\">EXPIRE_TIME</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">604800</span>;<br><br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">SECRET</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;helloworld&quot;</span>;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title function_\">generateJwtToken</span><span class=\"hljs-params\">(JwtTokenGenerateRequest request)</span> &#123;<br>        JWTCreator.<span class=\"hljs-type\">Builder</span> <span class=\"hljs-variable\">builder</span> <span class=\"hljs-operator\">=</span> JWT.create();<br>        <span class=\"hljs-keyword\">if</span> (MapUtil.isNotEmpty(request.getPayLoads())) &#123;<br>            request.getPayLoads().forEach((k, v) -&gt; &#123;<br>                builder.withClaim(k, v);<br>            &#125;);<br>        &#125;<br><br>        <span class=\"hljs-type\">Calendar</span> <span class=\"hljs-variable\">expireTime</span> <span class=\"hljs-operator\">=</span> Calendar.getInstance();<br>        expireTime.add(Calendar.SECOND, request.getExpireTime() != <span class=\"hljs-literal\">null</span> ? request.getExpireTime() : EXPIRE_TIME);<br>        <span class=\"hljs-keyword\">return</span> builder.withSubject(request.getSubject())<br>                .withIssuedAt(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Date</span>())<br>                .withExpiresAt(expireTime.getTime())<br>                .sign(Algorithm.HMAC256(StringUtils.isNotEmpty(request.getSecret()) ? request.getSecret() : SECRET));<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> JwtTokenVerifyDTO <span class=\"hljs-title function_\">verify</span><span class=\"hljs-params\">(JwtTokenVerifyRequest request)</span> &#123;<br>        <span class=\"hljs-type\">JWTVerifier</span> <span class=\"hljs-variable\">jwtVerifier</span> <span class=\"hljs-operator\">=</span> JWT.require<br>                (Algorithm.HMAC256(StringUtils.isNotEmpty(request.getSecret()) ? request.getSecret() : SECRET))<br>                .build();<br>        <span class=\"hljs-type\">DecodedJWT</span> <span class=\"hljs-variable\">decodedJWT</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-literal\">null</span>;<br>        <span class=\"hljs-keyword\">try</span> &#123;<br>            decodedJWT = jwtVerifier.verify(request.getToken());<br>        &#125; <span class=\"hljs-keyword\">catch</span> (Exception e) &#123;<br>            <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">BusinessException</span>(ResultCode.TOKEN_FAILED);<br>        &#125;<br><br>        <span class=\"hljs-type\">JwtTokenVerifyDTO</span> <span class=\"hljs-variable\">jwtTokenVerifyDTO</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">JwtTokenVerifyDTO</span>();<br>        Map&lt;String, Claim&gt; claims = decodedJWT.getClaims();<br>        <span class=\"hljs-keyword\">if</span> (MapUtil.isNotEmpty(claims)) &#123;<br>            claims.forEach((k, v) -&gt; &#123;<br>                jwtTokenVerifyDTO.getPayLoads().put(k, v.asString());<br>            &#125;);<br>        &#125;<br>        jwtTokenVerifyDTO.setSubject(decodedJWT.getSubject());<br>        jwtTokenVerifyDTO.setExpireTime(decodedJWT.getExpiresAt());<br>        <span class=\"hljs-keyword\">return</span> jwtTokenVerifyDTO;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h4 id=\"3-3-application层\"><a href=\"#3-3-application层\" class=\"headerlink\" title=\"3.3. application层\"></a>3.3. application层</h4><p>因为现在登录涉及到token等操作，对于token的生成， 这个不属于userService领域服务范围，因此就涉及到多个服务之间的协作，所以此时使用applicationService来整合多个服务。我们添加一个UserApplicationService类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> com.yang.application.service;<br><br><span class=\"hljs-keyword\">import</span> com.yang.application.dto.UserLoginDTO;<br><span class=\"hljs-keyword\">import</span> com.yang.controller.request.LoginUserRequest;<br><span class=\"hljs-keyword\">import</span> com.yang.controller.request.RegisterUserRequest;<br><span class=\"hljs-keyword\">import</span> com.yang.domain.data.User;<br><span class=\"hljs-keyword\">import</span> com.yang.domain.service.UserService;<br><span class=\"hljs-keyword\">import</span> com.yang.infrastructure.auth.config.JwtTokenProperty;<br><span class=\"hljs-keyword\">import</span> com.yang.infrastructure.auth.request.JwtTokenGenerateRequest;<br><span class=\"hljs-keyword\">import</span> com.yang.infrastructure.auth.service.JwtTokenService;<br><span class=\"hljs-keyword\">import</span> com.yang.infrastructure.common.ResultCode;<br><span class=\"hljs-keyword\">import</span> com.yang.infrastructure.exception.BusinessException;<br><span class=\"hljs-keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class=\"hljs-keyword\">import</span> org.springframework.stereotype.Service;<br><br><span class=\"hljs-keyword\">import</span> javax.annotation.Resource;<br><span class=\"hljs-keyword\">import</span> java.util.HashMap;<br><span class=\"hljs-keyword\">import</span> java.util.Map;<br><br><span class=\"hljs-meta\">@Service</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">UserApplicationService</span> &#123;<br>    <span class=\"hljs-meta\">@Autowired</span><br>    <span class=\"hljs-keyword\">private</span> UserService userService;<br><br>    <span class=\"hljs-meta\">@Autowired</span><br>    <span class=\"hljs-keyword\">private</span> JwtTokenProperty jwtTokenProperty;<br><br>    <span class=\"hljs-meta\">@Resource</span><br>    <span class=\"hljs-keyword\">private</span> JwtTokenService jwtTokenService;<br><br>    <span class=\"hljs-keyword\">public</span> User <span class=\"hljs-title function_\">register</span><span class=\"hljs-params\">(RegisterUserRequest request)</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> userService.register(request);<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> UserLoginDTO <span class=\"hljs-title function_\">login</span><span class=\"hljs-params\">(LoginUserRequest request)</span> &#123;<br>        <span class=\"hljs-type\">User</span> <span class=\"hljs-variable\">user</span> <span class=\"hljs-operator\">=</span> userService.login(request);<br>        <span class=\"hljs-keyword\">if</span> (user == <span class=\"hljs-literal\">null</span>) &#123;<br>            <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">BusinessException</span>(ResultCode.LOGIN_FAILED);<br>        &#125;<br>        <span class=\"hljs-comment\">// 生成token</span><br>        <span class=\"hljs-type\">UserLoginDTO</span> <span class=\"hljs-variable\">userLoginDTO</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">UserLoginDTO</span>();<br>        userLoginDTO.setUser(user);<br><br>        <span class=\"hljs-type\">JwtTokenGenerateRequest</span> <span class=\"hljs-variable\">jwtGenerateRequest</span> <span class=\"hljs-operator\">=</span> convert2JwtTokenGenerateRequest(user);<br>        userLoginDTO.setToken(jwtTokenService.generateJwtToken(jwtGenerateRequest));<br>        <span class=\"hljs-keyword\">return</span> userLoginDTO;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">private</span> JwtTokenGenerateRequest <span class=\"hljs-title function_\">convert2JwtTokenGenerateRequest</span><span class=\"hljs-params\">(User user)</span> &#123;<br>        <span class=\"hljs-type\">JwtTokenGenerateRequest</span> <span class=\"hljs-variable\">request</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">JwtTokenGenerateRequest</span>();<br>        request.setSubject(user.getId().toString());<br>        request.setExpireTime(jwtTokenProperty.getExpire());<br>        request.setSecret(jwtTokenProperty.getSecret());<br><br>        Map&lt;String, String&gt; payloads = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">HashMap</span>&lt;&gt;();<br>        payloads.put(<span class=\"hljs-string\">&quot;username&quot;</span>, user.getUsername());<br>        payloads.put(<span class=\"hljs-string\">&quot;id&quot;</span>, user.getId().toString());<br>        payloads.put(<span class=\"hljs-string\">&quot;salt&quot;</span>, user.getSalt());<br>        request.setPayLoads(payloads);<br><br>        <span class=\"hljs-keyword\">return</span> request;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h4 id=\"3-4-controller层\"><a href=\"#3-4-controller层\" class=\"headerlink\" title=\"3.4. controller层\"></a>3.4. controller层</h4><p>我们修改controller层，改用applicationService，并添加一个接口，来测试我们的JwtTokenService解析是否正确</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> com.yang.controller;<br><br><span class=\"hljs-keyword\">import</span> com.yang.application.service.UserApplicationService;<br><span class=\"hljs-keyword\">import</span> com.yang.application.dto.UserLoginDTO;<br><span class=\"hljs-keyword\">import</span> com.yang.controller.request.LoginUserRequest;<br><span class=\"hljs-keyword\">import</span> com.yang.controller.request.RegisterUserRequest;<br><span class=\"hljs-keyword\">import</span> com.yang.domain.data.User;<br><span class=\"hljs-keyword\">import</span> com.yang.infrastructure.auth.config.JwtTokenProperty;<br><span class=\"hljs-keyword\">import</span> com.yang.infrastructure.auth.request.JwtTokenVerifyRequest;<br><span class=\"hljs-keyword\">import</span> com.yang.infrastructure.auth.response.JwtTokenVerifyDTO;<br><span class=\"hljs-keyword\">import</span> com.yang.infrastructure.auth.service.JwtTokenService;<br><span class=\"hljs-keyword\">import</span> com.yang.infrastructure.common.Response;<br><span class=\"hljs-keyword\">import</span> com.yang.infrastructure.common.ResultCode;<br><span class=\"hljs-keyword\">import</span> com.yang.infrastructure.exception.BusinessException;<br><span class=\"hljs-keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class=\"hljs-keyword\">import</span> org.springframework.web.bind.annotation.*;<br><br><span class=\"hljs-meta\">@RestController</span><br><span class=\"hljs-meta\">@RequestMapping(value = &quot;/user&quot;)</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">UserController</span> &#123;<br>   <span class=\"hljs-meta\">@Autowired</span><br>   <span class=\"hljs-keyword\">private</span> UserApplicationService userApplicationService;<br><br>    <span class=\"hljs-meta\">@PostMapping(value = &quot;/register&quot;)</span><br>    <span class=\"hljs-keyword\">public</span> Response&lt;User&gt; <span class=\"hljs-title function_\">register</span><span class=\"hljs-params\">(<span class=\"hljs-meta\">@RequestBody</span> RegisterUserRequest request)</span> &#123;<br>        <span class=\"hljs-type\">User</span> <span class=\"hljs-variable\">user</span> <span class=\"hljs-operator\">=</span> userApplicationService.register(request);<br>        <span class=\"hljs-keyword\">return</span> Response.success(user);<br>    &#125;<br><br>    <span class=\"hljs-meta\">@PostMapping(value = &quot;/login&quot;)</span><br>    <span class=\"hljs-keyword\">public</span> Response&lt;UserLoginDTO&gt; <span class=\"hljs-title function_\">login</span><span class=\"hljs-params\">(<span class=\"hljs-meta\">@RequestBody</span> LoginUserRequest request)</span> &#123;<br>        <span class=\"hljs-type\">UserLoginDTO</span> <span class=\"hljs-variable\">userLoginDTO</span> <span class=\"hljs-operator\">=</span> userApplicationService.login(request);<br>        <span class=\"hljs-keyword\">if</span> (userLoginDTO == <span class=\"hljs-literal\">null</span>) &#123;<br>            <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">BusinessException</span>(ResultCode.LOGIN_FAILED);<br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> Response.success(userLoginDTO);<br>    &#125;<br>    <br>    <span class=\"hljs-meta\">@Autowired</span><br>    <span class=\"hljs-keyword\">private</span> JwtTokenService jwtTokenService;<br>    <br>    <span class=\"hljs-meta\">@Autowired</span><br>    <span class=\"hljs-keyword\">private</span> JwtTokenProperty jwtTokenProperty;<br>    <br>    <span class=\"hljs-meta\">@GetMapping(value = &quot;/verify&quot;)</span><br>    <span class=\"hljs-keyword\">public</span> Response&lt;JwtTokenVerifyDTO&gt; <span class=\"hljs-title function_\">verify</span><span class=\"hljs-params\">(<span class=\"hljs-meta\">@RequestParam(name = &quot;token&quot;)</span>String token)</span> &#123;<br>        <span class=\"hljs-type\">JwtTokenVerifyRequest</span> <span class=\"hljs-variable\">request</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">JwtTokenVerifyRequest</span>();<br>        request.setToken(token);<br>        request.setSecret(jwtTokenProperty.getSecret());<br>        <span class=\"hljs-type\">JwtTokenVerifyDTO</span> <span class=\"hljs-variable\">verify</span> <span class=\"hljs-operator\">=</span> jwtTokenService.verify(request);<br>        <span class=\"hljs-keyword\">return</span> Response.success(verify);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h4 id=\"3-5-测试\"><a href=\"#3-5-测试\" class=\"headerlink\" title=\"3.5. 测试\"></a>3.5. 测试</h4><p>首先调用登录接口，进行测试</p>\n<img src=\"/2024/04/03/%E7%99%BB%E5%BD%95%E3%80%81%E6%B3%A8%E5%86%8C%E5%AD%A6%E4%B9%A0/10.png\" class=\"\">\n<p>将登录接口返回的token复制，调用verfiy接口，解析成功，说明JwtTokenService没问题</p>\n<img src=\"/2024/04/03/%E7%99%BB%E5%BD%95%E3%80%81%E6%B3%A8%E5%86%8C%E5%AD%A6%E4%B9%A0/11.png\" class=\"\">\n<p>然后我们随意捏造一个token进行访问，结果如下：</p>\n<img src=\"/2024/04/03/%E7%99%BB%E5%BD%95%E3%80%81%E6%B3%A8%E5%86%8C%E5%AD%A6%E4%B9%A0/12.png\" class=\"\">\n<h3 id=\"4-登录拦截\"><a href=\"#4-登录拦截\" class=\"headerlink\" title=\"4. 登录拦截\"></a>4. 登录拦截</h3><p>后端返回token 给前端后，前端保存这个token,在后续发送请求时，将这个token携带到请求头进行访问，后端解析请求头，解析该token，判断token是否生效，当token有效时，对请求进行放行。也就是说，我们在执行业务代码之前，都会先对请求进行拦截，并校验token的合法性。因此，就需要使用到拦截器。</p>\n<h4 id=\"4-1-infrastructure层\"><a href=\"#4-1-infrastructure层\" class=\"headerlink\" title=\"4.1. infrastructure层\"></a>4.1. infrastructure层</h4><p>在基础设施层，添加和登录拦截有关的类，首先添加一个Spring上下文工具类，帮助获取容器中的bean</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> com.yang.infrastructure.utils;<br><br><span class=\"hljs-keyword\">import</span> org.springframework.beans.BeansException;<br><span class=\"hljs-keyword\">import</span> org.springframework.context.ApplicationContext;<br><span class=\"hljs-keyword\">import</span> org.springframework.context.ApplicationContextAware;<br><span class=\"hljs-keyword\">import</span> org.springframework.stereotype.Component;<br><br><span class=\"hljs-meta\">@Component</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">SpringContextUtils</span>&lt;T&gt; <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">ApplicationContextAware</span> &#123;<br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> ApplicationContext applicationContext;<br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">setApplicationContext</span><span class=\"hljs-params\">(ApplicationContext applicationContext)</span> <span class=\"hljs-keyword\">throws</span> BeansException &#123;<br>        SpringContextUtils.applicationContext = applicationContext;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span>&lt;T&gt;  T <span class=\"hljs-title function_\">getBeanOfType</span><span class=\"hljs-params\">(Class&lt;T&gt; clazz)</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> applicationContext.getBean(clazz);<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> &lt;T&gt; T <span class=\"hljs-title function_\">getBeanOfName</span><span class=\"hljs-params\">(String name, Class&lt;T&gt; clazz)</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> applicationContext.getBean(name, clazz);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>然后添加一个JwtTokenVerifyInterceptor类，实现HandlerInterceptor，表示判断token是否有效的拦截器。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> com.yang.infrastructure.auth.interceptors;<br><br><span class=\"hljs-keyword\">import</span> com.yang.infrastructure.auth.config.JwtTokenProperty;<br><span class=\"hljs-keyword\">import</span> com.yang.infrastructure.auth.request.JwtTokenVerifyRequest;<br><span class=\"hljs-keyword\">import</span> com.yang.infrastructure.auth.response.JwtTokenVerifyDTO;<br><span class=\"hljs-keyword\">import</span> com.yang.infrastructure.auth.service.JwtTokenService;<br><span class=\"hljs-keyword\">import</span> com.yang.infrastructure.common.ResultCode;<br><span class=\"hljs-keyword\">import</span> com.yang.infrastructure.exception.BusinessException;<br><span class=\"hljs-keyword\">import</span> com.yang.infrastructure.utils.SpringContextUtils;<br><span class=\"hljs-keyword\">import</span> org.apache.commons.lang3.StringUtils;<br><span class=\"hljs-keyword\">import</span> org.springframework.web.servlet.HandlerInterceptor;<br><br><span class=\"hljs-keyword\">import</span> javax.servlet.http.HttpServletRequest;<br><span class=\"hljs-keyword\">import</span> javax.servlet.http.HttpServletResponse;<br><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">JwtTokenVerifyInterceptor</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">HandlerInterceptor</span> &#123;<br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">preHandle</span><span class=\"hljs-params\">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class=\"hljs-keyword\">throws</span> Exception &#123;<br>        <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">token</span> <span class=\"hljs-operator\">=</span> request.getHeader(<span class=\"hljs-string\">&quot;token&quot;</span>);<br>        <span class=\"hljs-keyword\">if</span> (StringUtils.isEmpty(token)) &#123;<br>            <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">BusinessException</span>(ResultCode.TOKEN_FAILED);<br>        &#125;<br>        <span class=\"hljs-type\">JwtTokenService</span> <span class=\"hljs-variable\">jwtTokenService</span> <span class=\"hljs-operator\">=</span> SpringContextUtils.getBeanOfType(JwtTokenService.class);<br>        <span class=\"hljs-type\">JwtTokenProperty</span> <span class=\"hljs-variable\">jwtTokenProperty</span> <span class=\"hljs-operator\">=</span> SpringContextUtils.getBeanOfType(JwtTokenProperty.class);<br><br>        <span class=\"hljs-type\">JwtTokenVerifyRequest</span> <span class=\"hljs-variable\">jwtTokenVerifyRequest</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">JwtTokenVerifyRequest</span>();<br>        jwtTokenVerifyRequest.setToken(token);<br>        jwtTokenVerifyRequest.setSecret(jwtTokenProperty.getSecret());<br><br>        <span class=\"hljs-type\">JwtTokenVerifyDTO</span> <span class=\"hljs-variable\">verify</span> <span class=\"hljs-operator\">=</span> jwtTokenService.verify(jwtTokenVerifyRequest);<br>        <span class=\"hljs-keyword\">if</span> (verify == <span class=\"hljs-literal\">null</span>) &#123;<br>            <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">BusinessException</span>(ResultCode.TOKEN_FAILED);<br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>然后添加一个配置类，配置刚才的拦截器</p>\n<figure class=\"highlight haxe\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs haxe\"><span class=\"hljs-keyword\">package</span> com.yang.infrastructure.configuration;<br><br><span class=\"hljs-keyword\">import</span> com.yang.infrastructure.auth.interceptors.JwtTokenVerifyInterceptor;<br><span class=\"hljs-keyword\">import</span> org.springframework.context.annotation.Configuration;<br><span class=\"hljs-keyword\">import</span> org.springframework.web.servlet.config.annotation.InterceptorRegistry;<br><span class=\"hljs-keyword\">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurer;<br><br><span class=\"hljs-meta\">@Configuration</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title class_\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">WebMvcConfiguration</span> <span class=\"hljs-keyword\"><span class=\"hljs-keyword\">implements</span> <span class=\"hljs-type\">WebMvcConfigurer</span></span> </span>&#123;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> void addInterceptors(InterceptorRegistry registry) &#123;<br>        registry.addInterceptor(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-type\">JwtTokenVerifyInterceptor</span>())<br>                .addPathPatterns(<span class=\"hljs-string\">&quot;/**&quot;</span>) <span class=\"hljs-comment\">// 拦截所有请求</span><br>                .excludePathPatterns(<span class=\"hljs-string\">&quot;/user/login&quot;</span>, <span class=\"hljs-string\">&quot;/user/register&quot;</span>); <span class=\"hljs-comment\">// 排除登录、注册接口</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h4 id=\"4-2-测试\"><a href=\"#4-2-测试\" class=\"headerlink\" title=\"4.2. 测试\"></a>4.2. 测试</h4><p>首先，我们在请求头，不添加token，访问测试接口，结果如下：</p>\n<img src=\"/2024/04/03/%E7%99%BB%E5%BD%95%E3%80%81%E6%B3%A8%E5%86%8C%E5%AD%A6%E4%B9%A0/13.png\" class=\"\">\n<p>然后在请求头，添加无效的token，访问测试接口，结果如下：</p>\n<img src=\"/2024/04/03/%E7%99%BB%E5%BD%95%E3%80%81%E6%B3%A8%E5%86%8C%E5%AD%A6%E4%B9%A0/14.png\" class=\"\">\n<p>携带登录返回的token，访问测试接口，结果如下：</p>\n<img src=\"/2024/04/03/%E7%99%BB%E5%BD%95%E3%80%81%E6%B3%A8%E5%86%8C%E5%AD%A6%E4%B9%A0/15.png\" class=\"\">\n<h3 id=\"5-token存储\"><a href=\"#5-token存储\" class=\"headerlink\" title=\"5. token存储\"></a>5. token存储</h3><h4 id=\"5-1-准备工作\"><a href=\"#5-1-准备工作\" class=\"headerlink\" title=\"5.1. 准备工作\"></a>5.1. 准备工作</h4><p>上述实现，虽然能够完成登录拦截的需求，但是有一个问题，我们每次访问接口，都需要对token进行验证，判断这个token是否有效，为减少解析token的耗时，我们可以将token存起来并设置一个过期时间，这个时候，我们就可以使用reids了。此时，我们的调用流程，如下图所示：</p>\n<img src=\"/2024/04/03/%E7%99%BB%E5%BD%95%E3%80%81%E6%B3%A8%E5%86%8C%E5%AD%A6%E4%B9%A0/16.png\" class=\"\">\n<p>因此，我们添加redis的相关依赖：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span><br>          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span><br>          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<h4 id=\"5-2-infrastructure层\"><a href=\"#5-2-infrastructure层\" class=\"headerlink\" title=\"5.2. infrastructure层\"></a>5.2. infrastructure层</h4><p>在基础设施层，添加上redis的配置类和相关的工具类：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Component</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">RedisConfiguration</span> &#123;<br><br>    <span class=\"hljs-meta\">@Bean</span><br>    <span class=\"hljs-keyword\">public</span> RedisTemplate <span class=\"hljs-title function_\">redisTemplate</span><span class=\"hljs-params\">(RedisConnectionFactory redisConnectionFactory)</span> &#123;<br>        RedisTemplate&lt;String, Object&gt; redisTemplate = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">RedisTemplate</span>&lt;&gt;();<br>        redisTemplate.setConnectionFactory(redisConnectionFactory);<br><br>        <span class=\"hljs-type\">StringRedisSerializer</span> <span class=\"hljs-variable\">stringRedisSerializer</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">StringRedisSerializer</span>();<br>        <span class=\"hljs-type\">Jackson2JsonRedisSerializer</span> <span class=\"hljs-variable\">jackson2JsonRedisSerializer</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Jackson2JsonRedisSerializer</span>(Object.class);<br>        <span class=\"hljs-type\">ObjectMapper</span> <span class=\"hljs-variable\">objectMapper</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ObjectMapper</span>().enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);<br>        jackson2JsonRedisSerializer.setObjectMapper(objectMapper);<br><br>        redisTemplate.setKeySerializer(stringRedisSerializer);<br>        redisTemplate.setHashKeySerializer(stringRedisSerializer);<br>        redisTemplate.setValueSerializer(jackson2JsonRedisSerializer);<br>        redisTemplate.setHashValueSerializer(jackson2JsonRedisSerializer);<br>        <span class=\"hljs-keyword\">return</span> redisTemplate;<br>    &#125;<br>&#125;<br><br><br><br><span class=\"hljs-meta\">@Component</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">RedisUtils</span> &#123;<br>    <span class=\"hljs-meta\">@Autowired</span><br>    <span class=\"hljs-keyword\">private</span> RedisTemplate&lt;String, Object&gt; redisTemplate;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">setKey</span><span class=\"hljs-params\">(String key, Object value)</span> &#123;<br>        redisTemplate.opsForValue().set(key, value);<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">setKey</span><span class=\"hljs-params\">(String key, Object value, Long expire)</span> &#123;<br>        setKey(key, value, expire, TimeUnit.SECONDS);<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">setKey</span><span class=\"hljs-params\">(String key, Object value, Long expire, TimeUnit timeUnit)</span> &#123;<br>        redisTemplate.opsForValue().set(key, value, expire, timeUnit);<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> Object <span class=\"hljs-title function_\">getKey</span><span class=\"hljs-params\">(String key)</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> redisTemplate.opsForValue().get(key);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>然后修改JwtTokenVerifyInterceptor拦截器，先查询redis上是否存在对应的token，有的话放行，否则使用JwtTokenService验证token是否有效</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Override</span><br>  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">preHandle</span><span class=\"hljs-params\">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class=\"hljs-keyword\">throws</span> Exception &#123;<br>      <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">token</span> <span class=\"hljs-operator\">=</span> request.getHeader(<span class=\"hljs-string\">&quot;token&quot;</span>);<br>      <span class=\"hljs-keyword\">if</span> (StringUtils.isEmpty(token)) &#123;<br>          <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">BusinessException</span>(ResultCode.TOKEN_FAILED);<br>      &#125;<br>      <span class=\"hljs-keyword\">if</span>(verifyByRedis(token)) &#123; <span class=\"hljs-comment\">// 判断该token在Redis是否存在</span><br>          System.out.println(<span class=\"hljs-string\">&quot;Redis中存在这个token，放行&quot;</span>);<br>          <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;<br>      &#125;<br>      System.out.println(<span class=\"hljs-string\">&quot;Redis中不存在这个token，解析该token&quot;</span>);<br>      <span class=\"hljs-type\">JwtTokenService</span> <span class=\"hljs-variable\">jwtTokenService</span> <span class=\"hljs-operator\">=</span> SpringContextUtils.getBeanOfType(JwtTokenService.class);<br>      <span class=\"hljs-type\">JwtTokenProperty</span> <span class=\"hljs-variable\">jwtTokenProperty</span> <span class=\"hljs-operator\">=</span> SpringContextUtils.getBeanOfType(JwtTokenProperty.class);<br><br>      <span class=\"hljs-type\">JwtTokenVerifyRequest</span> <span class=\"hljs-variable\">jwtTokenVerifyRequest</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">JwtTokenVerifyRequest</span>();<br>      jwtTokenVerifyRequest.setToken(token);<br>      jwtTokenVerifyRequest.setSecret(jwtTokenProperty.getSecret());<br><br>      <span class=\"hljs-type\">JwtTokenVerifyDTO</span> <span class=\"hljs-variable\">verify</span> <span class=\"hljs-operator\">=</span> jwtTokenService.verify(jwtTokenVerifyRequest);<br>      <span class=\"hljs-keyword\">if</span> (verify == <span class=\"hljs-literal\">null</span>) &#123;<br>          <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">BusinessException</span>(ResultCode.TOKEN_FAILED);<br>      &#125;<br>      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;<br>  &#125;<br><br>  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">verifyByRedis</span><span class=\"hljs-params\">(String token)</span> &#123;<br>      <span class=\"hljs-type\">RedisUtils</span> <span class=\"hljs-variable\">redisUtils</span> <span class=\"hljs-operator\">=</span> SpringContextUtils.getBeanOfType(RedisUtils.class);<br>      <span class=\"hljs-type\">Object</span> <span class=\"hljs-variable\">key</span> <span class=\"hljs-operator\">=</span> redisUtils.getKey(<span class=\"hljs-string\">&quot;token:&quot;</span> + token);<br>      <span class=\"hljs-keyword\">return</span> key != <span class=\"hljs-literal\">null</span>;<br>  &#125;<br></code></pre></td></tr></table></figure>\n<h4 id=\"5-3-application层\"><a href=\"#5-3-application层\" class=\"headerlink\" title=\"5.3. application层\"></a>5.3. application层</h4><p>修改登录逻辑中，在生成token后，将token存入redis</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> UserLoginDTO <span class=\"hljs-title function_\">login</span><span class=\"hljs-params\">(LoginUserRequest request)</span> &#123;<br>       <span class=\"hljs-type\">User</span> <span class=\"hljs-variable\">user</span> <span class=\"hljs-operator\">=</span> userService.login(request);<br>       <span class=\"hljs-keyword\">if</span> (user == <span class=\"hljs-literal\">null</span>) &#123;<br>           <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">BusinessException</span>(ResultCode.LOGIN_FAILED);<br>       &#125;<br>       <span class=\"hljs-comment\">// 生成token</span><br>       <span class=\"hljs-type\">UserLoginDTO</span> <span class=\"hljs-variable\">userLoginDTO</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">UserLoginDTO</span>();<br>       userLoginDTO.setUser(user);<br><br>       <span class=\"hljs-type\">JwtTokenGenerateRequest</span> <span class=\"hljs-variable\">jwtGenerateRequest</span> <span class=\"hljs-operator\">=</span> convert2JwtTokenGenerateRequest(user);<br>       <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">token</span> <span class=\"hljs-operator\">=</span> jwtTokenService.generateJwtToken(jwtGenerateRequest);<br>       userLoginDTO.setToken(token);<br><br>       <span class=\"hljs-comment\">// token存储到redis</span><br>       redisUtils.setKey(<span class=\"hljs-string\">&quot;token:&quot;</span> + token, jwtGenerateRequest, jwtGenerateRequest.getExpireTime());<br>       <span class=\"hljs-keyword\">return</span> userLoginDTO;<br>   &#125;<br></code></pre></td></tr></table></figure>\n<h4 id=\"5-4-测试\"><a href=\"#5-4-测试\" class=\"headerlink\" title=\"5.4. 测试\"></a>5.4. 测试</h4><p>首先访问登录接口，登录成功后，查看redis中是否含有对应的token</p>\n<img src=\"/2024/04/03/%E7%99%BB%E5%BD%95%E3%80%81%E6%B3%A8%E5%86%8C%E5%AD%A6%E4%B9%A0/17.png\" class=\"\">\n<p>redis中存在对应的token，然后我们访问测试接口，查看命令行,此时redis中存在该token，因此直接放行</p>\n<img src=\"/2024/04/03/%E7%99%BB%E5%BD%95%E3%80%81%E6%B3%A8%E5%86%8C%E5%AD%A6%E4%B9%A0/18.png\" class=\"\">\n<p>然后我们删除redis中的这个key，再次访问测试接口，此时redis不存在这个key，因此就需要进行token的解析。</p>\n<img src=\"/2024/04/03/%E7%99%BB%E5%BD%95%E3%80%81%E6%B3%A8%E5%86%8C%E5%AD%A6%E4%B9%A0/19.png\" class=\"\">\n<h3 id=\"6-用户信息更新\"><a href=\"#6-用户信息更新\" class=\"headerlink\" title=\"6. 用户信息更新\"></a>6. 用户信息更新</h3><p>用户信息，一般情况下更新的频率比较低，但也不是没有，常见的更新有：用户修改密码、用户修改昵称等。我们以用户修改密码为例，进行示例。<br>当用户修改密码时，我们只需要使用数据库中的salt，结合用户输入的新密码，生成新的哈希值，存入数据库，此外，因为用户信息更新了，我们最好将用户的token生效，存入redis的token，我们可以很容易地将其删除，但是，前端保存地token信息，我们修改不了，因此，最好是前端在更新操作成功后，主动删除请求头的token，从而时用户再次操作时，提示token失效，进行登录。</p>\n<h4 id=\"6-1-infrastructure层\"><a href=\"#6-1-infrastructure层\" class=\"headerlink\" title=\"6.1. infrastructure层\"></a>6.1. infrastructure层</h4><p>首先，修改RedisUtils工具类，加上删除key的方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">removeKey</span><span class=\"hljs-params\">(String key)</span> &#123;<br>       <span class=\"hljs-keyword\">return</span> redisTemplate.delete(key);<br>   &#125;<br></code></pre></td></tr></table></figure>\n<h4 id=\"6-2-domain层\"><a href=\"#6-2-domain层\" class=\"headerlink\" title=\"6.2. domain层\"></a>6.2. domain层</h4><p>修改UserService，添加修改密码的相关操作</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">updatePassword</span><span class=\"hljs-params\">(UpdatePasswordRequest request)</span> &#123;<br>       <span class=\"hljs-type\">Integer</span> <span class=\"hljs-variable\">userId</span> <span class=\"hljs-operator\">=</span> request.getId();<br>       <span class=\"hljs-type\">User</span> <span class=\"hljs-variable\">user</span> <span class=\"hljs-operator\">=</span> userRepository.findById(userId);<br>        <span class=\"hljs-keyword\">if</span> (user == <span class=\"hljs-literal\">null</span>) &#123;<br>           <span class=\"hljs-keyword\">return</span>;<br>       &#125;<br>       <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">password</span> <span class=\"hljs-operator\">=</span> request.getPassword();<br>       <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">newPassword</span> <span class=\"hljs-operator\">=</span> EncryptUtils.encrypt(password, user.getSalt());<br>       user.setPassword(newPassword);<br><br>       <span class=\"hljs-keyword\">try</span> &#123;<br>           userRepository.updateUser(user);<br>       &#125; <span class=\"hljs-keyword\">catch</span> (Exception e) &#123;<br>           <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">BusinessException</span>(ResultCode.SERVER_ERROR);<br>       &#125;<br>   &#125;<br></code></pre></td></tr></table></figure>\n<h4 id=\"6-3-application层\"><a href=\"#6-3-application层\" class=\"headerlink\" title=\"6.3. application层\"></a>6.3. application层</h4><p>在UserApplicationService类，添加修改用户密码的方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">updatePassword</span><span class=\"hljs-params\">(UpdatePasswordRequest updatePasswordRequest, HttpServletRequest request)</span> &#123;<br>       userService.updatePassword(updatePasswordRequest);<br>       <br>       <span class=\"hljs-comment\">// 删除token</span><br>       <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">token</span> <span class=\"hljs-operator\">=</span> request.getHeader(<span class=\"hljs-string\">&quot;token&quot;</span>);<br>       redisUtils.removeKey(<span class=\"hljs-string\">&quot;token:&quot;</span> + token);<br>   &#125;<br></code></pre></td></tr></table></figure>\n<h4 id=\"6-4-controller层\"><a href=\"#6-4-controller层\" class=\"headerlink\" title=\"6.4. controller层\"></a>6.4. controller层</h4><p>在UserController类，添加修改用户密码的方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@PutMapping(value = &quot;/updatePassword&quot;)</span><br>   <span class=\"hljs-keyword\">public</span> Response <span class=\"hljs-title function_\">updatePassword</span><span class=\"hljs-params\">(<span class=\"hljs-meta\">@RequestBody</span> UpdatePasswordRequest request, HttpServletRequest httpServletRequest)</span> &#123;<br>       userApplicationService.updatePassword(request, httpServletRequest);<br>       <span class=\"hljs-keyword\">return</span> Response.success();<br>   &#125;<br></code></pre></td></tr></table></figure>\n<h4 id=\"6-5-测试\"><a href=\"#6-5-测试\" class=\"headerlink\" title=\"6.5. 测试\"></a>6.5. 测试</h4><p>首先进行登录，登录成功后，在redis中多了一个token</p>\n<img src=\"/2024/04/03/%E7%99%BB%E5%BD%95%E3%80%81%E6%B3%A8%E5%86%8C%E5%AD%A6%E4%B9%A0/20.png\" class=\"\">\n<p>然后调用更新密码接口</p>\n<img src=\"/2024/04/03/%E7%99%BB%E5%BD%95%E3%80%81%E6%B3%A8%E5%86%8C%E5%AD%A6%E4%B9%A0/21.png\" class=\"\">\n<p>再次查看redis，发现token被删除了，然后查看数据库，能看出我们的密码也改变了</p>\n<img src=\"/2024/04/03/%E7%99%BB%E5%BD%95%E3%80%81%E6%B3%A8%E5%86%8C%E5%AD%A6%E4%B9%A0/22.png\" class=\"\">\n<img src=\"/2024/04/03/%E7%99%BB%E5%BD%95%E3%80%81%E6%B3%A8%E5%86%8C%E5%AD%A6%E4%B9%A0/23.png\" class=\"\">\n<h3 id=\"7-用户上下文\"><a href=\"#7-用户上下文\" class=\"headerlink\" title=\"7. 用户上下文\"></a>7. 用户上下文</h3><p>上面的代码，看似合理，但是有一个问题，更新密码的时候，传了两个值，一个是用户id，另一个才是用户输入的密码。在之前我们提到，我们通过登录拦截，规避了未登录用户操作系统资源的问题，但是对于我们刚才实现的修改密码接口，可能出现这种情况，用户A携带自己登录的token，请求体中id为用户B的id，调用修改密码的接口，这就导致，用户A修改了用户B的密码，这是不合理的，因此，这里将对代码进一步做修改，在进行拦截操作后，将用户信息，存储于用户上下文，然后在修改密码时，直接使用用户上下文中的用户id，而不是依靠前端传递的id。</p>\n<h4 id=\"7-1-infrastructure层\"><a href=\"#7-1-infrastructure层\" class=\"headerlink\" title=\"7.1. infrastructure层\"></a>7.1. infrastructure层</h4><p>首先，我们定义一个用户上下文信息类，用于存储用户的主要信息，包括用户id，token，用户名等。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> com.yang.infrastructure.auth;<br><br><span class=\"hljs-keyword\">import</span> lombok.Data;<br><br><span class=\"hljs-keyword\">import</span> java.io.Serializable;<br><span class=\"hljs-keyword\">import</span> java.util.HashMap;<br><span class=\"hljs-keyword\">import</span> java.util.Map;<br><br><span class=\"hljs-meta\">@Data</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">UserContextDetails</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">Serializable</span> &#123;<br>    <span class=\"hljs-keyword\">private</span> Integer id;<br>    <br>    <span class=\"hljs-keyword\">private</span> String token;<br>    <br>    <span class=\"hljs-keyword\">private</span> String username;<br>    <br>    <span class=\"hljs-keyword\">private</span> Map&lt;String, String&gt; extendMap = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">HashMap</span>&lt;&gt;();<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>添加一个线程上下文类，用于存储用户上下文信息</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> com.yang.infrastructure.auth;<br><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">UserContextThreadLocal</span> &#123;<br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> ThreadLocal&lt;UserContextDetails&gt; userContextDetailsThreadLocal = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ThreadLocal</span>&lt;&gt;();<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">setUserContextDetails</span><span class=\"hljs-params\">(UserContextDetails userContextDetails)</span> &#123;<br>        userContextDetailsThreadLocal.set(userContextDetails);<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> UserContextDetails <span class=\"hljs-title function_\">get</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> userContextDetailsThreadLocal.get();<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">remove</span><span class=\"hljs-params\">()</span> &#123;<br>        userContextDetailsThreadLocal.remove();<br>    &#125;<br>    <br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> Integer <span class=\"hljs-title function_\">getUserId</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> userContextDetailsThreadLocal.get().getId();<br>    &#125;<br>    <br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> String <span class=\"hljs-title function_\">getToken</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> userContextDetailsThreadLocal.get().getToken();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>然后，修改我们的JwtTokenVerifyInterceptor拦截器，这里我们实现了afterCompletion。在preHandler方法中，设置对应的线程上下文，在afterCompletion清除线程上下文，注意，设置线程上下文和清除线程上下文的操作，必须成对出现，否则会造成内存泄露。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> com.yang.infrastructure.auth.interceptors;<br><br><span class=\"hljs-keyword\">import</span> com.alibaba.fastjson.JSON;<br><span class=\"hljs-keyword\">import</span> com.alibaba.fastjson.JSONObject;<br><span class=\"hljs-keyword\">import</span> com.yang.infrastructure.auth.UserContextDetails;<br><span class=\"hljs-keyword\">import</span> com.yang.infrastructure.auth.UserContextThreadLocal;<br><span class=\"hljs-keyword\">import</span> com.yang.infrastructure.auth.config.JwtTokenProperty;<br><span class=\"hljs-keyword\">import</span> com.yang.infrastructure.auth.request.JwtTokenVerifyRequest;<br><span class=\"hljs-keyword\">import</span> com.yang.infrastructure.auth.response.JwtTokenVerifyDTO;<br><span class=\"hljs-keyword\">import</span> com.yang.infrastructure.auth.service.JwtTokenService;<br><span class=\"hljs-keyword\">import</span> com.yang.infrastructure.common.ResultCode;<br><span class=\"hljs-keyword\">import</span> com.yang.infrastructure.exception.BusinessException;<br><span class=\"hljs-keyword\">import</span> com.yang.infrastructure.utils.RedisUtils;<br><span class=\"hljs-keyword\">import</span> com.yang.infrastructure.utils.SpringContextUtils;<br><span class=\"hljs-keyword\">import</span> org.apache.commons.lang3.StringUtils;<br><span class=\"hljs-keyword\">import</span> org.springframework.lang.Nullable;<br><span class=\"hljs-keyword\">import</span> org.springframework.web.servlet.HandlerInterceptor;<br><br><span class=\"hljs-keyword\">import</span> javax.servlet.http.HttpServletRequest;<br><span class=\"hljs-keyword\">import</span> javax.servlet.http.HttpServletResponse;<br><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">JwtTokenVerifyInterceptor</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">HandlerInterceptor</span> &#123;<br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">preHandle</span><span class=\"hljs-params\">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class=\"hljs-keyword\">throws</span> Exception &#123;<br>        <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">token</span> <span class=\"hljs-operator\">=</span> request.getHeader(<span class=\"hljs-string\">&quot;token&quot;</span>);<br>        <span class=\"hljs-keyword\">if</span> (StringUtils.isEmpty(token)) &#123;<br>            <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">BusinessException</span>(ResultCode.TOKEN_FAILED);<br>        &#125;<br>        <span class=\"hljs-type\">Object</span> <span class=\"hljs-variable\">userDetails</span> <span class=\"hljs-operator\">=</span> getUserDetailsFromRedis(token);<br>        <span class=\"hljs-keyword\">if</span> (userDetails != <span class=\"hljs-literal\">null</span>) &#123; <span class=\"hljs-comment\">// 判断该token在Redis是否存在</span><br>            <span class=\"hljs-comment\">// 设置线程上下文</span><br>            System.out.println(<span class=\"hljs-string\">&quot;设置线程上下文====================&quot;</span>);<br>            <span class=\"hljs-type\">UserContextDetails</span> <span class=\"hljs-variable\">userContextDetails</span> <span class=\"hljs-operator\">=</span> (UserContextDetails) userDetails;<br>            userContextDetails.setToken(token);<br>            UserContextThreadLocal.setUserContextDetails(userContextDetails);<br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;<br>        &#125;<br><br>        <span class=\"hljs-type\">JwtTokenService</span> <span class=\"hljs-variable\">jwtTokenService</span> <span class=\"hljs-operator\">=</span> SpringContextUtils.getBeanOfType(JwtTokenService.class);<br>        <span class=\"hljs-type\">JwtTokenProperty</span> <span class=\"hljs-variable\">jwtTokenProperty</span> <span class=\"hljs-operator\">=</span> SpringContextUtils.getBeanOfType(JwtTokenProperty.class);<br><br>        <span class=\"hljs-type\">JwtTokenVerifyRequest</span> <span class=\"hljs-variable\">jwtTokenVerifyRequest</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">JwtTokenVerifyRequest</span>();<br>        jwtTokenVerifyRequest.setToken(token);<br>        jwtTokenVerifyRequest.setSecret(jwtTokenProperty.getSecret());<br><br>        <span class=\"hljs-type\">JwtTokenVerifyDTO</span> <span class=\"hljs-variable\">verify</span> <span class=\"hljs-operator\">=</span> jwtTokenService.verify(jwtTokenVerifyRequest);<br>        <span class=\"hljs-keyword\">if</span> (verify == <span class=\"hljs-literal\">null</span>) &#123;<br>            <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">BusinessException</span>(ResultCode.TOKEN_FAILED);<br>        &#125;<br><br>        <span class=\"hljs-comment\">// 设置线程上下文</span><br>        System.out.println(<span class=\"hljs-string\">&quot;设置线程上下文====================&quot;</span>);<br>        <span class=\"hljs-type\">UserContextDetails</span> <span class=\"hljs-variable\">userContextDetails</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">UserContextDetails</span>();<br>        userContextDetails.setId(Integer.valueOf(verify.getSubject()));<br>        userContextDetails.setToken(token);<br>        userContextDetails.setUsername(verify.getPayLoads().get(<span class=\"hljs-string\">&quot;username&quot;</span>));<br>        userContextDetails.setExtendMap(verify.getPayLoads());<br>        UserContextThreadLocal.setUserContextDetails(userContextDetails);<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">private</span> Object <span class=\"hljs-title function_\">getUserDetailsFromRedis</span><span class=\"hljs-params\">(String token)</span> &#123;<br>        <span class=\"hljs-type\">RedisUtils</span> <span class=\"hljs-variable\">redisUtils</span> <span class=\"hljs-operator\">=</span> SpringContextUtils.getBeanOfType(RedisUtils.class);<br>        <span class=\"hljs-keyword\">return</span> redisUtils.getKey(<span class=\"hljs-string\">&quot;token:&quot;</span> + token);<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">afterCompletion</span><span class=\"hljs-params\">(HttpServletRequest request, HttpServletResponse response, Object handler, <span class=\"hljs-meta\">@Nullable</span> Exception ex)</span> <span class=\"hljs-keyword\">throws</span> Exception &#123;<br>        System.out.println(<span class=\"hljs-string\">&quot;清除线程上下文=======================&quot;</span>);<br>        <span class=\"hljs-comment\">// 清除线程上下文</span><br>        UserContextThreadLocal.remove();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h4 id=\"7-2-domain层\"><a href=\"#7-2-domain层\" class=\"headerlink\" title=\"7.2. domain层\"></a>7.2. domain层</h4><p>修改UserService的updatePassword方法，userId从线程上下文获取</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">updatePassword</span><span class=\"hljs-params\">(UpdatePasswordRequest request)</span> &#123;<br>       <span class=\"hljs-type\">Integer</span> <span class=\"hljs-variable\">userId</span> <span class=\"hljs-operator\">=</span> UserContextThreadLocal.getUserId();<br>       <span class=\"hljs-type\">User</span> <span class=\"hljs-variable\">user</span> <span class=\"hljs-operator\">=</span> userRepository.findById(userId);<br>       <span class=\"hljs-keyword\">if</span> (user == <span class=\"hljs-literal\">null</span>) &#123;<br>           <span class=\"hljs-keyword\">return</span>;<br>       &#125;<br>       <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">password</span> <span class=\"hljs-operator\">=</span> request.getPassword();<br>       <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">newPassword</span> <span class=\"hljs-operator\">=</span> EncryptUtils.encrypt(password, user.getSalt());<br>       user.setPassword(newPassword);<br><br>       <span class=\"hljs-keyword\">try</span> &#123;<br>           userRepository.updateUser(user);<br>       &#125; <span class=\"hljs-keyword\">catch</span> (Exception e) &#123;<br>           <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">BusinessException</span>(ResultCode.SERVER_ERROR);<br>       &#125;<br>   &#125;<br></code></pre></td></tr></table></figure>\n<h4 id=\"7-3-application层\"><a href=\"#7-3-application层\" class=\"headerlink\" title=\"7.3. application层\"></a>7.3. application层</h4><p>修改application层updatePassword方法，token从线程上下文获取</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">updatePassword</span><span class=\"hljs-params\">(UpdatePasswordRequest updatePasswordRequest)</span> &#123;<br>       userService.updatePassword(updatePasswordRequest);<br><br>       <span class=\"hljs-comment\">// 删除token</span><br>       <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">token</span> <span class=\"hljs-operator\">=</span> UserContextThreadLocal.getToken();<br>       redisUtils.removeKey(<span class=\"hljs-string\">&quot;token:&quot;</span> + token);<br>   &#125;<br></code></pre></td></tr></table></figure>\n<h4 id=\"7-4-controller层\"><a href=\"#7-4-controller层\" class=\"headerlink\" title=\"7.4. controller层\"></a>7.4. controller层</h4><p>修改controller层的updatePassword方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@PutMapping(value = &quot;/updatePassword&quot;)</span><br>   <span class=\"hljs-keyword\">public</span> Response <span class=\"hljs-title function_\">updatePassword</span><span class=\"hljs-params\">(<span class=\"hljs-meta\">@RequestBody</span> UpdatePasswordRequest request)</span> &#123;<br>       userApplicationService.updatePassword(request);<br>       <span class=\"hljs-keyword\">return</span> Response.success();<br>   &#125;<br></code></pre></td></tr></table></figure>\n<h4 id=\"7-5-测试\"><a href=\"#7-5-测试\" class=\"headerlink\" title=\"7.5. 测试\"></a>7.5. 测试</h4><p>调用用户登录接口，然后查看redis，可以看出，现在存储的value类型，是UserContextDetails类型</p>\n<img src=\"/2024/04/03/%E7%99%BB%E5%BD%95%E3%80%81%E6%B3%A8%E5%86%8C%E5%AD%A6%E4%B9%A0/24.png\" class=\"\">\n<p>调用测试接口，然后查看控制台</p>\n<img src=\"/2024/04/03/%E7%99%BB%E5%BD%95%E3%80%81%E6%B3%A8%E5%86%8C%E5%AD%A6%E4%B9%A0/25.png\" class=\"\">\n<p>然后查看控制台，从控制台中可以看出，设置线程上下文和清除线程上下文成对出现。</p>\n<img src=\"/2024/04/03/%E7%99%BB%E5%BD%95%E3%80%81%E6%B3%A8%E5%86%8C%E5%AD%A6%E4%B9%A0/26.png\" class=\"\">\n<p>测试修改密码接口</p>\n<img src=\"/2024/04/03/%E7%99%BB%E5%BD%95%E3%80%81%E6%B3%A8%E5%86%8C%E5%AD%A6%E4%B9%A0/27.png\" class=\"\">\n<p>修改成功，说明线程上下文的取值没有问题。</p>\n<h3 id=\"8-参考文档\"><a href=\"#8-参考文档\" class=\"headerlink\" title=\"8. 参考文档\"></a>8. 参考文档</h3><p><a href=\"https://segmentfault.com/a/1190000040003653\">https://segmentfault.com/a/1190000040003653</a></p>\n","excerpt":"","more":"<h3 id=\"1-引言\"><a href=\"#1-引言\" class=\"headerlink\" title=\"1. 引言\"></a>1. 引言</h3><p>在项目中，登录、注册一般都是项目的必备功能，因为它们的用户管理和身份验证的基础，通过登录和注册，能有效保护用户个人数据，并根据用户权限，进行对应的资源访问控制。此外，还能对注册后的用户进行行为分析，以便提供对应的个性化服务。</p>\n<h3 id=\"2-登录、注册实现\"><a href=\"#2-登录、注册实现\" class=\"headerlink\" title=\"2. 登录、注册实现\"></a>2. 登录、注册实现</h3><h4 id=\"2-1-项目结构介绍\"><a href=\"#2-1-项目结构介绍\" class=\"headerlink\" title=\"2.1. 项目结构介绍\"></a>2.1. 项目结构介绍</h4><p>这里的项目结构，借鉴周志明老师提出的凤凰架构，将项目分为四层：<br>1）domain： 领域层，负责实现业务逻辑，即表达业务概念、处理业务状态信息以及业务规这些行为，提供对应的领域服务。<br>2）infrastructure：基础设施层，向其他层提供通用的技术能力，譬如持久化能力、远程访问通信、工具集等。<br>3）application：应用层，负责软件本身对外暴露的能力，通过整合各个领域服务，进行协助，对外提供服务，相当于各个领域服务的门面，类似于MVC架构中的service层。<br>4）controller：负责向用户显示信息或解释用户发出的命令，即MVC架构中的controller层。</p>\n<img src=\"/2024/04/03/%E7%99%BB%E5%BD%95%E3%80%81%E6%B3%A8%E5%86%8C%E5%AD%A6%E4%B9%A0/1.png\" class=\"\">\n<h4 id=\"2-2-简单实现\"><a href=\"#2-2-简单实现\" class=\"headerlink\" title=\"2.2. 简单实现\"></a>2.2. 简单实现</h4><h5 id=\"2-2-1-准备工作\"><a href=\"#2-2-1-准备工作\" class=\"headerlink\" title=\"2.2.1. 准备工作\"></a>2.2.1. 准备工作</h5><p>首先引入下列依赖：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependencies</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>spring-boot-starter-web<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>mysql<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>mysql-connector-java<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>com.baomidou<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>3.4.3<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>spring-boot-starter-test<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.projectlombok<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>lombok<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.apache.commons<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>commons-lang3<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<p>创建对应的数据库，数据库表结构如下：</p>\n<img src=\"/2024/04/03/%E7%99%BB%E5%BD%95%E3%80%81%E6%B3%A8%E5%86%8C%E5%AD%A6%E4%B9%A0/2.png\" class=\"\">\n<p>这里的username添加了唯一索引，因为用户名一般都是唯一的。</p>\n<h5 id=\"2-2-2-domain层\"><a href=\"#2-2-2-domain层\" class=\"headerlink\" title=\"2.2.2. domain层\"></a>2.2.2. domain层</h5><p>创建对应的实体类，以及相关的repository仓储层和domainservice领域服务</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Data</span><br><span class=\"hljs-meta\">@TableName(value = &quot;t_user&quot;)</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">User</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">Serializable</span> &#123;<br>    <span class=\"hljs-meta\">@TableId(type = IdType.AUTO)</span><br>    <span class=\"hljs-keyword\">private</span> Integer id;<br><br>    <span class=\"hljs-keyword\">private</span> String username;<br><br>    <span class=\"hljs-keyword\">private</span> String password;<br><br>    <span class=\"hljs-comment\">// 是否冻结 0未冻结 1已冻结</span><br>    <span class=\"hljs-keyword\">private</span> Integer freeze;<br><br>    <span class=\"hljs-keyword\">private</span> Date createTime;<br><br>    <span class=\"hljs-keyword\">private</span> Date updateTime;<br><br>    <span class=\"hljs-keyword\">private</span> Map&lt;String, String&gt; featuresMap;<br><br>    <span class=\"hljs-keyword\">private</span> String features;<br>&#125;<br><br><br><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">IUserRepository</span> &#123;<br><br>    <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">saveUser</span><span class=\"hljs-params\">(User user)</span>;<br><br><br>    User <span class=\"hljs-title function_\">findByUsernameAndPassword</span><span class=\"hljs-params\">(String username, String password)</span>;<br>&#125;<br><br><br><br><span class=\"hljs-meta\">@Repository</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">UserRepository</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">IUserRepository</span> &#123;<br>    <span class=\"hljs-meta\">@Autowired</span><br>    <span class=\"hljs-keyword\">private</span> UserMapper userMapper;<br><br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">UN_FREEZE</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>;<br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">FREEZE</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">1</span>;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">saveUser</span><span class=\"hljs-params\">(User user)</span> &#123;<br>        user.setCreateTime(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Date</span>());<br>        user.setUpdateTime(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Date</span>());<br>        user.setFreeze(UN_FREEZE);<br>        user.setFeaturesMap(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">HashMap</span>&lt;&gt;());<br>        user.setFeatures(JSONObject.toJSONString(user.getFeaturesMap()));<br>        <span class=\"hljs-keyword\">return</span> userMapper.insert(user) &gt; <span class=\"hljs-number\">0</span>;<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> User <span class=\"hljs-title function_\">findByUsernameAndPassword</span><span class=\"hljs-params\">(String username, String password)</span> &#123;<br>        LambdaQueryWrapper&lt;User&gt; queryWrapper = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">LambdaQueryWrapper</span>&lt;&gt;();<br>        queryWrapper.eq(User::getUsername, username);<br>        queryWrapper.eq(User::getPassword, password);<br>        <span class=\"hljs-keyword\">return</span> userMapper.selectOne(queryWrapper);<br>    &#125;<br><br><br>&#125;<br><br><br><span class=\"hljs-meta\">@Service</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">UserService</span> &#123;<br>    <span class=\"hljs-meta\">@Resource</span><br>    <span class=\"hljs-keyword\">private</span> IUserRepository userRepository;<br><br>    <span class=\"hljs-keyword\">public</span> User <span class=\"hljs-title function_\">register</span><span class=\"hljs-params\">(RegisterUserRequest request)</span> &#123;<br>        <span class=\"hljs-type\">User</span> <span class=\"hljs-variable\">user</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">User</span>();<br>        user.setUsername(request.getUsername());<br>        user.setPassword(request.getPassword());<br>        <span class=\"hljs-keyword\">try</span> &#123;<br>            userRepository.saveUser(user);<br>            <span class=\"hljs-keyword\">return</span> user;<br>        &#125; <span class=\"hljs-keyword\">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>            <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">BusinessException</span>(ResultCode.SERVER_ERROR);<br>        &#125;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> User <span class=\"hljs-title function_\">login</span><span class=\"hljs-params\">(LoginUserRequest request)</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> userRepository.findByUsernameAndPassword(request.getUsername(), request.getPassword());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h5 id=\"2-2-3-controller层\"><a href=\"#2-2-3-controller层\" class=\"headerlink\" title=\"2.2.3. controller层\"></a>2.2.3. controller层</h5><p>添加userController，在该类中添加注册和登录的接口</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@RestController</span><br><span class=\"hljs-meta\">@RequestMapping(value = &quot;/user&quot;)</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">UserController</span> &#123;<br>    <span class=\"hljs-meta\">@Autowired</span><br>    <span class=\"hljs-keyword\">private</span> UserService userService;<br><br>    <span class=\"hljs-meta\">@PostMapping(value = &quot;/register&quot;)</span><br>    <span class=\"hljs-keyword\">public</span> Response&lt;User&gt; <span class=\"hljs-title function_\">register</span><span class=\"hljs-params\">(<span class=\"hljs-meta\">@RequestBody</span> RegisterUserRequest request)</span> &#123;<br>        <span class=\"hljs-type\">User</span> <span class=\"hljs-variable\">user</span> <span class=\"hljs-operator\">=</span> userService.register(request);<br>        <span class=\"hljs-keyword\">return</span> Response.success(user);<br>    &#125;<br><br>    <span class=\"hljs-meta\">@PostMapping(value = &quot;/login&quot;)</span><br>    <span class=\"hljs-keyword\">public</span> Response&lt;User&gt; <span class=\"hljs-title function_\">login</span><span class=\"hljs-params\">(<span class=\"hljs-meta\">@RequestBody</span> LoginUserRequest request)</span> &#123;<br>        <span class=\"hljs-type\">User</span> <span class=\"hljs-variable\">user</span> <span class=\"hljs-operator\">=</span> userService.login(request);<br>        <span class=\"hljs-keyword\">if</span> (user == <span class=\"hljs-literal\">null</span>) &#123;<br>            <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">BusinessException</span>(ResultCode.LOGIN_FAILED);<br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> Response.success(user);<br>    &#125;<br>&#125;<br><br><br><br><span class=\"hljs-meta\">@Data</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">LoginUserRequest</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">Serializable</span> &#123;<br>    <span class=\"hljs-keyword\">private</span> String username;<br><br>    <span class=\"hljs-keyword\">private</span> String password;<br>&#125;<br><br><br><br><span class=\"hljs-meta\">@Data</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">RegisterUserRequest</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">Serializable</span> &#123;<br>    <span class=\"hljs-keyword\">private</span> String username;<br><br>    <span class=\"hljs-keyword\">private</span> String password;<br><br>&#125;<br></code></pre></td></tr></table></figure>\n<h5 id=\"2-2-4-infrastructure层\"><a href=\"#2-2-4-infrastructure层\" class=\"headerlink\" title=\"2.2.4. infrastructure层\"></a>2.2.4. infrastructure层</h5><p>添加基础设施，比如异常类、返回结果类、错误码，全局异常处理等</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">enum</span> <span class=\"hljs-title class_\">ResultCode</span> &#123;<br>    SUCCESS(<span class=\"hljs-number\">200</span>, <span class=\"hljs-string\">&quot;操作成功&quot;</span>),<br>    ACCESS_DENIED(<span class=\"hljs-number\">403</span>, <span class=\"hljs-string\">&quot;没有权限&quot;</span>),<br>    FAILED(<span class=\"hljs-number\">400</span>, <span class=\"hljs-string\">&quot;操作失败&quot;</span>),<br><br>    LOGIN_FAILED(<span class=\"hljs-number\">400</span>, <span class=\"hljs-string\">&quot;用户不存在或密码错误&quot;</span>),<br>    SERVER_ERROR(<span class=\"hljs-number\">500</span>, <span class=\"hljs-string\">&quot;服务器错误&quot;</span>);<br><br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">int</span> code;<br><br>    <span class=\"hljs-keyword\">private</span> String msg;<br><br>    ResultCode(<span class=\"hljs-type\">int</span> code, String msg) &#123;<br>        <span class=\"hljs-built_in\">this</span>.code = code;<br>        <span class=\"hljs-built_in\">this</span>.msg = msg;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">getCode</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>.code;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title function_\">getMsg</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>.msg;<br>    &#125;<br>&#125;<br><br><br><br><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Response</span> &lt;T&gt; &#123;<br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">int</span> code;<br><br>    <span class=\"hljs-keyword\">private</span> String msg;<br><br>    <span class=\"hljs-keyword\">private</span> T data;<br><br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-title function_\">Response</span><span class=\"hljs-params\">(Integer code, String msg)</span> &#123;<br>        <span class=\"hljs-built_in\">this</span>.code = code;<br>        <span class=\"hljs-built_in\">this</span>.msg = msg;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-title function_\">Response</span><span class=\"hljs-params\">(Integer code, String msg, T data)</span> &#123;<br>        <span class=\"hljs-built_in\">this</span>.code = code;<br>        <span class=\"hljs-built_in\">this</span>.msg = msg;<br>        <span class=\"hljs-built_in\">this</span>.data = data;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-title function_\">Response</span><span class=\"hljs-params\">(ResultCode resultCode)</span> &#123;<br>        <span class=\"hljs-built_in\">this</span>.code = resultCode.getCode();<br>        <span class=\"hljs-built_in\">this</span>.msg = resultCode.getMsg();<br>    &#125;<br><br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-title function_\">Response</span><span class=\"hljs-params\">(ResultCode resultCode, T data)</span> &#123;<br>        <span class=\"hljs-built_in\">this</span>.code = resultCode.getCode();<br>        <span class=\"hljs-built_in\">this</span>.msg = resultCode.getMsg();<br>        <span class=\"hljs-built_in\">this</span>.data = data;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> &lt;T&gt; Response&lt;T&gt; <span class=\"hljs-title function_\">success</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Response</span>&lt;&gt;(ResultCode.SUCCESS);<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> &lt;T&gt; Response&lt;T&gt; <span class=\"hljs-title function_\">success</span><span class=\"hljs-params\">(T data)</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Response</span>&lt;&gt;(ResultCode.SUCCESS, data);<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> &lt;T&gt; Response&lt;T&gt; <span class=\"hljs-title function_\">fail</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Response</span>&lt;&gt;(ResultCode.FAILED);<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> &lt;T&gt; Response&lt;T&gt; <span class=\"hljs-title function_\">error</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Response</span>&lt;&gt;(ResultCode.SERVER_ERROR);<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> &lt;T&gt; Response&lt;T&gt; <span class=\"hljs-title function_\">fail</span><span class=\"hljs-params\">(ResultCode resultCode)</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Response</span>&lt;&gt;(resultCode);<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> &lt;T&gt; Response&lt;T&gt; <span class=\"hljs-title function_\">fail</span><span class=\"hljs-params\">(String msg)</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Response</span>&lt;&gt;(ResultCode.FAILED.getCode(), msg);<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">getCode</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>.code;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title function_\">getMsg</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>.msg;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> T <span class=\"hljs-title function_\">getData</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>.data;<br>    &#125;<br>&#125;<br><br><br><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">BusinessException</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">RuntimeException</span> &#123;<br>    <span class=\"hljs-keyword\">private</span> ResultCode resultCode;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">BusinessException</span><span class=\"hljs-params\">(ResultCode resultCode)</span> &#123;<br>        <span class=\"hljs-built_in\">super</span>(resultCode.getMsg());<br>        <span class=\"hljs-built_in\">this</span>.resultCode = resultCode;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> ResultCode <span class=\"hljs-title function_\">getResultCode</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>.resultCode;<br>    &#125;<br>&#125;<br><br><br><br><span class=\"hljs-meta\">@RestControllerAdvice</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">GlobalExceptionHandler</span> &#123;<br>    <span class=\"hljs-meta\">@ExceptionHandler(value = BusinessException.class)</span><br>    <span class=\"hljs-keyword\">public</span> Response <span class=\"hljs-title function_\">handleBusinessException</span><span class=\"hljs-params\">(BusinessException businessException)</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> Response.fail(businessException.getResultCode());<br>    &#125;<br><br>    <span class=\"hljs-meta\">@ExceptionHandler(value = Exception.class)</span><br>    <span class=\"hljs-keyword\">public</span> Response <span class=\"hljs-title function_\">handleException</span><span class=\"hljs-params\">(Exception e)</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> Response.fail(e.getMessage());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h5 id=\"2-2-5-application层\"><a href=\"#2-2-5-application层\" class=\"headerlink\" title=\"2.2.5. application层\"></a>2.2.5. application层</h5><p>因为现在的功能比较简单，不涉及到多个领域对象的交互，所以这里暂时不添加相关的应用服务。</p>\n<h5 id=\"2-2-6-测试\"><a href=\"#2-2-6-测试\" class=\"headerlink\" title=\"2.2.6. 测试\"></a>2.2.6. 测试</h5><p>所以接口测试工具，分别对注册接口和登录接口进行访问</p>\n<img src=\"/2024/04/03/%E7%99%BB%E5%BD%95%E3%80%81%E6%B3%A8%E5%86%8C%E5%AD%A6%E4%B9%A0/3.png\" class=\"\">\n<img src=\"/2024/04/03/%E7%99%BB%E5%BD%95%E3%80%81%E6%B3%A8%E5%86%8C%E5%AD%A6%E4%B9%A0/4.png\" class=\"\">\n<h4 id=\"2-3-密码加密\"><a href=\"#2-3-密码加密\" class=\"headerlink\" title=\"2.3. 密码加密\"></a>2.3. 密码加密</h4><p>上述流程虽然能够跑通，但是存在一个问题，用户密码在数据库中，以明文的方式进行存储，这样不太合理，容易将用户数据泄露出去。因此，这里进行修改。<br>在用户密码加密中，我们经常会使用到盐（Salt），盐是一种随机值，它与用户密码组合起来，形成一个组合密码，然后使用加密哈希函数（比如SHA-）对组合密码进行加密，生成哈希值，并将加密后的哈希值存储在数据库中，当用户登录时，系统会取出存储的哈希值，通过与用户输入的密码组合，进行哈希加密，然后比对与数据库中存储的值是否一致。</p>\n<h5 id=\"2-3-1-修改表结构\"><a href=\"#2-3-1-修改表结构\" class=\"headerlink\" title=\"2.3.1. 修改表结构\"></a>2.3.1. 修改表结构</h5><p>在之前的表设计中，我们预留了一个features字段，表示扩展信息，我们其实可以将盐存入到扩展信息中，但是因为盐我们在登录中进场使用到，因此，还是单独作为一个字段，修改后的表结构如下：</p>\n<img src=\"/2024/04/03/%E7%99%BB%E5%BD%95%E3%80%81%E6%B3%A8%E5%86%8C%E5%AD%A6%E4%B9%A0/5.png\" class=\"\">\n<h5 id=\"2-3-2-infrastructure层\"><a href=\"#2-3-2-infrastructure层\" class=\"headerlink\" title=\"2.3.2. infrastructure层\"></a>2.3.2. infrastructure层</h5><p>在基础设施层中，添加上加密工具类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> com.yang.infrastructure.utils;<br><br><span class=\"hljs-keyword\">import</span> cn.hutool.crypto.SecureUtil;<br><span class=\"hljs-keyword\">import</span> cn.hutool.crypto.digest.Digester;<br><br><span class=\"hljs-keyword\">import</span> java.util.concurrent.ThreadLocalRandom;<br><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">EncryptUtils</span> &#123;<br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">Digester</span> <span class=\"hljs-variable\">sha256</span> <span class=\"hljs-operator\">=</span> SecureUtil.sha256();<br>    <br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">char</span>[] saltChars = <span class=\"hljs-string\">&quot;0123456789abcdefghijklmnopqrstuvwxyz&quot;</span>.toCharArray();<br>    <br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">SALT_LEN</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">6</span>;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 加密</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@param</span> originPwd</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@param</span> salt</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@return</span></span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> String <span class=\"hljs-title function_\">encrypt</span><span class=\"hljs-params\">(String originPwd, String salt)</span> &#123;<br>        <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">newPwd</span> <span class=\"hljs-operator\">=</span> salt + originPwd;<br>        <span class=\"hljs-type\">byte</span>[] digest = sha256.digest(newPwd);<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">String</span>(digest);<br>    &#125;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 生成盐</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@return</span></span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> String <span class=\"hljs-title function_\">generateSalt</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-type\">StringBuilder</span> <span class=\"hljs-variable\">sb</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">StringBuilder</span>();<br>        <span class=\"hljs-type\">ThreadLocalRandom</span> <span class=\"hljs-variable\">threadLocalRandom</span> <span class=\"hljs-operator\">=</span> ThreadLocalRandom.current();<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; SALT_LEN; i++) &#123;<br>            <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">index</span> <span class=\"hljs-operator\">=</span> threadLocalRandom.nextInt(saltChars.length);<br>            sb.append(saltChars[index]);<br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> sb.toString();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h5 id=\"2-3-3-domain\"><a href=\"#2-3-3-domain\" class=\"headerlink\" title=\"2.3.3. domain\"></a>2.3.3. domain</h5><p>修改domain层中的userService，在注册的时候，设置盐，并对密码进行加密，在登录的时候，根据盐和输入密码，生成哈希值，与数据库中的哈希值进行对比。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> com.yang.domain.service;<br><br><span class=\"hljs-keyword\">import</span> com.yang.controller.request.LoginUserRequest;<br><span class=\"hljs-keyword\">import</span> com.yang.controller.request.RegisterUserRequest;<br><span class=\"hljs-keyword\">import</span> com.yang.domain.data.User;<br><span class=\"hljs-keyword\">import</span> com.yang.domain.repository.IUserRepository;<br><span class=\"hljs-keyword\">import</span> com.yang.infrastructure.common.ResultCode;<br><span class=\"hljs-keyword\">import</span> com.yang.infrastructure.exception.BusinessException;<br><span class=\"hljs-keyword\">import</span> com.yang.infrastructure.utils.EncryptUtils;<br><span class=\"hljs-keyword\">import</span> org.springframework.stereotype.Service;<br><br><span class=\"hljs-keyword\">import</span> javax.annotation.Resource;<br><br><span class=\"hljs-meta\">@Service</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">UserService</span> &#123;<br>    <span class=\"hljs-meta\">@Resource</span><br>    <span class=\"hljs-keyword\">private</span> IUserRepository userRepository;<br><br>    <span class=\"hljs-keyword\">public</span> User <span class=\"hljs-title function_\">register</span><span class=\"hljs-params\">(RegisterUserRequest request)</span> &#123;<br>        <span class=\"hljs-type\">User</span> <span class=\"hljs-variable\">user</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">User</span>();<br>        user.setUsername(request.getUsername());<br>        <span class=\"hljs-comment\">// 设置盐</span><br>        user.setSalt(EncryptUtils.generateSalt());<br>        user.setPassword(EncryptUtils.encrypt(request.getPassword(), user.getSalt()));<br>        <span class=\"hljs-keyword\">try</span> &#123;<br>            userRepository.saveUser(user);<br>            <span class=\"hljs-keyword\">return</span> user;<br>        &#125; <span class=\"hljs-keyword\">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>            <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">BusinessException</span>(ResultCode.SERVER_ERROR);<br>        &#125;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> User <span class=\"hljs-title function_\">login</span><span class=\"hljs-params\">(LoginUserRequest request)</span> &#123;<br>        <span class=\"hljs-type\">User</span> <span class=\"hljs-variable\">user</span> <span class=\"hljs-operator\">=</span> userRepository.findByUsername(request.getUsername());<br>        <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">salt</span> <span class=\"hljs-operator\">=</span> user.getSalt();<br>        <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">password</span> <span class=\"hljs-operator\">=</span> EncryptUtils.encrypt(request.getPassword(), salt);<br>        <span class=\"hljs-keyword\">if</span> (password.equals(user.getPassword())) &#123;<br>            <span class=\"hljs-keyword\">return</span> user;<br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h5 id=\"2-3-4-测试\"><a href=\"#2-3-4-测试\" class=\"headerlink\" title=\"2.3.4. 测试\"></a>2.3.4. 测试</h5><p>重新运行项目，调用注册接口和登录接口</p>\n<img src=\"/2024/04/03/%E7%99%BB%E5%BD%95%E3%80%81%E6%B3%A8%E5%86%8C%E5%AD%A6%E4%B9%A0/6.png\" class=\"\">\n<img src=\"/2024/04/03/%E7%99%BB%E5%BD%95%E3%80%81%E6%B3%A8%E5%86%8C%E5%AD%A6%E4%B9%A0/7.png\" class=\"\">\n<p>查看数据库，可以看出此时的password确实是经过加密后生成的。</p>\n<img src=\"/2024/04/03/%E7%99%BB%E5%BD%95%E3%80%81%E6%B3%A8%E5%86%8C%E5%AD%A6%E4%B9%A0/8.png\" class=\"\">\n<h3 id=\"3-Token生成\"><a href=\"#3-Token生成\" class=\"headerlink\" title=\"3. Token生成\"></a>3. Token生成</h3><h4 id=\"3-1-准备工作\"><a href=\"#3-1-准备工作\" class=\"headerlink\" title=\"3.1. 准备工作\"></a>3.1. 准备工作</h4><p>一般情况下，除了登录和注册接口，不需要进行登录拦截之外，其他的接口，都需要对用户的登录状态进行拦截，判断用户是否登录，如若未登录，则提示用户需要进行登录。对此，我们在用户登录成功后，可以返回一个token作为登录凭证返回给前端。</p>\n<img src=\"/2024/04/03/%E7%99%BB%E5%BD%95%E3%80%81%E6%B3%A8%E5%86%8C%E5%AD%A6%E4%B9%A0/9.png\" class=\"\">\n<p>这里我们在构建token的时候，使用JWT来构建，JWT(JSON Web Token)是为了在网络应用环境间传递声明而执行的一种基于JSON的开放标准。JWT主要由三部分组成：<br>1）头部（Header），通常包含两部分信息，alg(alogirthm，指定用于签名或加密令牌的算法），typ（类型，表明令牌的类型为JWT）</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs json\"><span class=\"hljs-punctuation\">&#123;</span><br>  <span class=\"hljs-attr\">&quot;alg&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;HS256&quot;</span><span class=\"hljs-punctuation\">,</span><br>  <span class=\"hljs-attr\">&quot;typ&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;JWT&quot;</span><br><span class=\"hljs-punctuation\">&#125;</span><br></code></pre></td></tr></table></figure>\n<p>2）有效载荷（Payload），一个json对象，包含一系列声明，比如sub（subject主题，通常是用户id），name（用户名称），exp（过期时间）等。<br>3）签名：对前两部分的串行化后的字符串使用指定的算法（如SHA256或RSA签名）生成的一个加密串，它的作用是保证令牌的完整性和真实性，保证传输过程中没有被修改。<br>这三个部分之间用.分隔，构成JWT的完整结构，如：</p>\n<figure class=\"highlight gcode\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs gcode\">eyJhbGciOiJIUzI<span class=\"hljs-number\">1</span><span class=\"hljs-symbol\">NiIsInR5</span>cCI<span class=\"hljs-number\">6</span>IkpX<span class=\"hljs-attr\">VCJ9</span>.eyJzdWIiOiIxMj<span class=\"hljs-name\">M0</span><span class=\"hljs-symbol\">NTY3</span>ODkwIiwibmFtZSI<span class=\"hljs-number\">6</span>Ikpva<span class=\"hljs-name\">G4</span>gR<span class=\"hljs-name\">G9</span>lIiwiaWF<span class=\"hljs-number\">0</span>Ijox<span class=\"hljs-symbol\">NTE2</span>Mj<span class=\"hljs-name\">M5</span>MDIyfQ.TJVA<span class=\"hljs-number\">95</span><span class=\"hljs-keyword\">Or</span><span class=\"hljs-name\">M7</span>E<span class=\"hljs-number\">2</span>cBab<span class=\"hljs-number\">30</span>RMHrHDcEfxjoYZgeFO<span class=\"hljs-symbol\">NFh7</span>H<span class=\"hljs-number\">8</span>RU<br></code></pre></td></tr></table></figure>\n<p>为整合JWT，我们引入下列依赖：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span><br>           <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>com.auth0<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span><br>           <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>java-jwt<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span><br>           <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>3.10.3<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span><br>       <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<h4 id=\"3-2-infrastructure层\"><a href=\"#3-2-infrastructure层\" class=\"headerlink\" title=\"3.2. infrastructure层\"></a>3.2. infrastructure层</h4><p>在基础设施层，我们添加和鉴权相关的信息，首先添加一个jwt配置类，用于配置jwt使用的密钥和过期时间</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> com.yang.infrastructure.auth.config;<br><br><span class=\"hljs-keyword\">import</span> lombok.Data;<br><span class=\"hljs-keyword\">import</span> org.springframework.beans.factory.annotation.Value;<br><span class=\"hljs-keyword\">import</span> org.springframework.stereotype.Component;<br><br><span class=\"hljs-meta\">@Component</span><br><span class=\"hljs-meta\">@Data</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">JwtTokenProperty</span> &#123;<br><br>    <span class=\"hljs-meta\">@Value(&quot;$&#123;jwt.token.secret&#125;&quot;)</span><br>    <span class=\"hljs-keyword\">private</span> String secret;<br><br>    <span class=\"hljs-meta\">@Value(&quot;$&#123;jwt.token.expire&#125;&quot;)</span><br>    <span class=\"hljs-keyword\">private</span> Integer expire;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>定义一个JwtTokenService接口，以及对应的实现类：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">JwtTokenService</span> &#123;<br>    String <span class=\"hljs-title function_\">generateJwtToken</span><span class=\"hljs-params\">(JwtTokenGenerateRequest request)</span>;<br><br>    JwtTokenVerifyDTO <span class=\"hljs-title function_\">verify</span><span class=\"hljs-params\">(JwtTokenVerifyRequest request)</span>;<br><br>&#125;<br><br><br><br><span class=\"hljs-meta\">@Component</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">JwtTokenServiceImpl</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">JwtTokenService</span>&#123;<br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">Integer</span> <span class=\"hljs-variable\">EXPIRE_TIME</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">604800</span>;<br><br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">SECRET</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;helloworld&quot;</span>;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title function_\">generateJwtToken</span><span class=\"hljs-params\">(JwtTokenGenerateRequest request)</span> &#123;<br>        JWTCreator.<span class=\"hljs-type\">Builder</span> <span class=\"hljs-variable\">builder</span> <span class=\"hljs-operator\">=</span> JWT.create();<br>        <span class=\"hljs-keyword\">if</span> (MapUtil.isNotEmpty(request.getPayLoads())) &#123;<br>            request.getPayLoads().forEach((k, v) -&gt; &#123;<br>                builder.withClaim(k, v);<br>            &#125;);<br>        &#125;<br><br>        <span class=\"hljs-type\">Calendar</span> <span class=\"hljs-variable\">expireTime</span> <span class=\"hljs-operator\">=</span> Calendar.getInstance();<br>        expireTime.add(Calendar.SECOND, request.getExpireTime() != <span class=\"hljs-literal\">null</span> ? request.getExpireTime() : EXPIRE_TIME);<br>        <span class=\"hljs-keyword\">return</span> builder.withSubject(request.getSubject())<br>                .withIssuedAt(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Date</span>())<br>                .withExpiresAt(expireTime.getTime())<br>                .sign(Algorithm.HMAC256(StringUtils.isNotEmpty(request.getSecret()) ? request.getSecret() : SECRET));<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> JwtTokenVerifyDTO <span class=\"hljs-title function_\">verify</span><span class=\"hljs-params\">(JwtTokenVerifyRequest request)</span> &#123;<br>        <span class=\"hljs-type\">JWTVerifier</span> <span class=\"hljs-variable\">jwtVerifier</span> <span class=\"hljs-operator\">=</span> JWT.require<br>                (Algorithm.HMAC256(StringUtils.isNotEmpty(request.getSecret()) ? request.getSecret() : SECRET))<br>                .build();<br>        <span class=\"hljs-type\">DecodedJWT</span> <span class=\"hljs-variable\">decodedJWT</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-literal\">null</span>;<br>        <span class=\"hljs-keyword\">try</span> &#123;<br>            decodedJWT = jwtVerifier.verify(request.getToken());<br>        &#125; <span class=\"hljs-keyword\">catch</span> (Exception e) &#123;<br>            <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">BusinessException</span>(ResultCode.TOKEN_FAILED);<br>        &#125;<br><br>        <span class=\"hljs-type\">JwtTokenVerifyDTO</span> <span class=\"hljs-variable\">jwtTokenVerifyDTO</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">JwtTokenVerifyDTO</span>();<br>        Map&lt;String, Claim&gt; claims = decodedJWT.getClaims();<br>        <span class=\"hljs-keyword\">if</span> (MapUtil.isNotEmpty(claims)) &#123;<br>            claims.forEach((k, v) -&gt; &#123;<br>                jwtTokenVerifyDTO.getPayLoads().put(k, v.asString());<br>            &#125;);<br>        &#125;<br>        jwtTokenVerifyDTO.setSubject(decodedJWT.getSubject());<br>        jwtTokenVerifyDTO.setExpireTime(decodedJWT.getExpiresAt());<br>        <span class=\"hljs-keyword\">return</span> jwtTokenVerifyDTO;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h4 id=\"3-3-application层\"><a href=\"#3-3-application层\" class=\"headerlink\" title=\"3.3. application层\"></a>3.3. application层</h4><p>因为现在登录涉及到token等操作，对于token的生成， 这个不属于userService领域服务范围，因此就涉及到多个服务之间的协作，所以此时使用applicationService来整合多个服务。我们添加一个UserApplicationService类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> com.yang.application.service;<br><br><span class=\"hljs-keyword\">import</span> com.yang.application.dto.UserLoginDTO;<br><span class=\"hljs-keyword\">import</span> com.yang.controller.request.LoginUserRequest;<br><span class=\"hljs-keyword\">import</span> com.yang.controller.request.RegisterUserRequest;<br><span class=\"hljs-keyword\">import</span> com.yang.domain.data.User;<br><span class=\"hljs-keyword\">import</span> com.yang.domain.service.UserService;<br><span class=\"hljs-keyword\">import</span> com.yang.infrastructure.auth.config.JwtTokenProperty;<br><span class=\"hljs-keyword\">import</span> com.yang.infrastructure.auth.request.JwtTokenGenerateRequest;<br><span class=\"hljs-keyword\">import</span> com.yang.infrastructure.auth.service.JwtTokenService;<br><span class=\"hljs-keyword\">import</span> com.yang.infrastructure.common.ResultCode;<br><span class=\"hljs-keyword\">import</span> com.yang.infrastructure.exception.BusinessException;<br><span class=\"hljs-keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class=\"hljs-keyword\">import</span> org.springframework.stereotype.Service;<br><br><span class=\"hljs-keyword\">import</span> javax.annotation.Resource;<br><span class=\"hljs-keyword\">import</span> java.util.HashMap;<br><span class=\"hljs-keyword\">import</span> java.util.Map;<br><br><span class=\"hljs-meta\">@Service</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">UserApplicationService</span> &#123;<br>    <span class=\"hljs-meta\">@Autowired</span><br>    <span class=\"hljs-keyword\">private</span> UserService userService;<br><br>    <span class=\"hljs-meta\">@Autowired</span><br>    <span class=\"hljs-keyword\">private</span> JwtTokenProperty jwtTokenProperty;<br><br>    <span class=\"hljs-meta\">@Resource</span><br>    <span class=\"hljs-keyword\">private</span> JwtTokenService jwtTokenService;<br><br>    <span class=\"hljs-keyword\">public</span> User <span class=\"hljs-title function_\">register</span><span class=\"hljs-params\">(RegisterUserRequest request)</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> userService.register(request);<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> UserLoginDTO <span class=\"hljs-title function_\">login</span><span class=\"hljs-params\">(LoginUserRequest request)</span> &#123;<br>        <span class=\"hljs-type\">User</span> <span class=\"hljs-variable\">user</span> <span class=\"hljs-operator\">=</span> userService.login(request);<br>        <span class=\"hljs-keyword\">if</span> (user == <span class=\"hljs-literal\">null</span>) &#123;<br>            <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">BusinessException</span>(ResultCode.LOGIN_FAILED);<br>        &#125;<br>        <span class=\"hljs-comment\">// 生成token</span><br>        <span class=\"hljs-type\">UserLoginDTO</span> <span class=\"hljs-variable\">userLoginDTO</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">UserLoginDTO</span>();<br>        userLoginDTO.setUser(user);<br><br>        <span class=\"hljs-type\">JwtTokenGenerateRequest</span> <span class=\"hljs-variable\">jwtGenerateRequest</span> <span class=\"hljs-operator\">=</span> convert2JwtTokenGenerateRequest(user);<br>        userLoginDTO.setToken(jwtTokenService.generateJwtToken(jwtGenerateRequest));<br>        <span class=\"hljs-keyword\">return</span> userLoginDTO;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">private</span> JwtTokenGenerateRequest <span class=\"hljs-title function_\">convert2JwtTokenGenerateRequest</span><span class=\"hljs-params\">(User user)</span> &#123;<br>        <span class=\"hljs-type\">JwtTokenGenerateRequest</span> <span class=\"hljs-variable\">request</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">JwtTokenGenerateRequest</span>();<br>        request.setSubject(user.getId().toString());<br>        request.setExpireTime(jwtTokenProperty.getExpire());<br>        request.setSecret(jwtTokenProperty.getSecret());<br><br>        Map&lt;String, String&gt; payloads = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">HashMap</span>&lt;&gt;();<br>        payloads.put(<span class=\"hljs-string\">&quot;username&quot;</span>, user.getUsername());<br>        payloads.put(<span class=\"hljs-string\">&quot;id&quot;</span>, user.getId().toString());<br>        payloads.put(<span class=\"hljs-string\">&quot;salt&quot;</span>, user.getSalt());<br>        request.setPayLoads(payloads);<br><br>        <span class=\"hljs-keyword\">return</span> request;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h4 id=\"3-4-controller层\"><a href=\"#3-4-controller层\" class=\"headerlink\" title=\"3.4. controller层\"></a>3.4. controller层</h4><p>我们修改controller层，改用applicationService，并添加一个接口，来测试我们的JwtTokenService解析是否正确</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> com.yang.controller;<br><br><span class=\"hljs-keyword\">import</span> com.yang.application.service.UserApplicationService;<br><span class=\"hljs-keyword\">import</span> com.yang.application.dto.UserLoginDTO;<br><span class=\"hljs-keyword\">import</span> com.yang.controller.request.LoginUserRequest;<br><span class=\"hljs-keyword\">import</span> com.yang.controller.request.RegisterUserRequest;<br><span class=\"hljs-keyword\">import</span> com.yang.domain.data.User;<br><span class=\"hljs-keyword\">import</span> com.yang.infrastructure.auth.config.JwtTokenProperty;<br><span class=\"hljs-keyword\">import</span> com.yang.infrastructure.auth.request.JwtTokenVerifyRequest;<br><span class=\"hljs-keyword\">import</span> com.yang.infrastructure.auth.response.JwtTokenVerifyDTO;<br><span class=\"hljs-keyword\">import</span> com.yang.infrastructure.auth.service.JwtTokenService;<br><span class=\"hljs-keyword\">import</span> com.yang.infrastructure.common.Response;<br><span class=\"hljs-keyword\">import</span> com.yang.infrastructure.common.ResultCode;<br><span class=\"hljs-keyword\">import</span> com.yang.infrastructure.exception.BusinessException;<br><span class=\"hljs-keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class=\"hljs-keyword\">import</span> org.springframework.web.bind.annotation.*;<br><br><span class=\"hljs-meta\">@RestController</span><br><span class=\"hljs-meta\">@RequestMapping(value = &quot;/user&quot;)</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">UserController</span> &#123;<br>   <span class=\"hljs-meta\">@Autowired</span><br>   <span class=\"hljs-keyword\">private</span> UserApplicationService userApplicationService;<br><br>    <span class=\"hljs-meta\">@PostMapping(value = &quot;/register&quot;)</span><br>    <span class=\"hljs-keyword\">public</span> Response&lt;User&gt; <span class=\"hljs-title function_\">register</span><span class=\"hljs-params\">(<span class=\"hljs-meta\">@RequestBody</span> RegisterUserRequest request)</span> &#123;<br>        <span class=\"hljs-type\">User</span> <span class=\"hljs-variable\">user</span> <span class=\"hljs-operator\">=</span> userApplicationService.register(request);<br>        <span class=\"hljs-keyword\">return</span> Response.success(user);<br>    &#125;<br><br>    <span class=\"hljs-meta\">@PostMapping(value = &quot;/login&quot;)</span><br>    <span class=\"hljs-keyword\">public</span> Response&lt;UserLoginDTO&gt; <span class=\"hljs-title function_\">login</span><span class=\"hljs-params\">(<span class=\"hljs-meta\">@RequestBody</span> LoginUserRequest request)</span> &#123;<br>        <span class=\"hljs-type\">UserLoginDTO</span> <span class=\"hljs-variable\">userLoginDTO</span> <span class=\"hljs-operator\">=</span> userApplicationService.login(request);<br>        <span class=\"hljs-keyword\">if</span> (userLoginDTO == <span class=\"hljs-literal\">null</span>) &#123;<br>            <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">BusinessException</span>(ResultCode.LOGIN_FAILED);<br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> Response.success(userLoginDTO);<br>    &#125;<br>    <br>    <span class=\"hljs-meta\">@Autowired</span><br>    <span class=\"hljs-keyword\">private</span> JwtTokenService jwtTokenService;<br>    <br>    <span class=\"hljs-meta\">@Autowired</span><br>    <span class=\"hljs-keyword\">private</span> JwtTokenProperty jwtTokenProperty;<br>    <br>    <span class=\"hljs-meta\">@GetMapping(value = &quot;/verify&quot;)</span><br>    <span class=\"hljs-keyword\">public</span> Response&lt;JwtTokenVerifyDTO&gt; <span class=\"hljs-title function_\">verify</span><span class=\"hljs-params\">(<span class=\"hljs-meta\">@RequestParam(name = &quot;token&quot;)</span>String token)</span> &#123;<br>        <span class=\"hljs-type\">JwtTokenVerifyRequest</span> <span class=\"hljs-variable\">request</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">JwtTokenVerifyRequest</span>();<br>        request.setToken(token);<br>        request.setSecret(jwtTokenProperty.getSecret());<br>        <span class=\"hljs-type\">JwtTokenVerifyDTO</span> <span class=\"hljs-variable\">verify</span> <span class=\"hljs-operator\">=</span> jwtTokenService.verify(request);<br>        <span class=\"hljs-keyword\">return</span> Response.success(verify);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h4 id=\"3-5-测试\"><a href=\"#3-5-测试\" class=\"headerlink\" title=\"3.5. 测试\"></a>3.5. 测试</h4><p>首先调用登录接口，进行测试</p>\n<img src=\"/2024/04/03/%E7%99%BB%E5%BD%95%E3%80%81%E6%B3%A8%E5%86%8C%E5%AD%A6%E4%B9%A0/10.png\" class=\"\">\n<p>将登录接口返回的token复制，调用verfiy接口，解析成功，说明JwtTokenService没问题</p>\n<img src=\"/2024/04/03/%E7%99%BB%E5%BD%95%E3%80%81%E6%B3%A8%E5%86%8C%E5%AD%A6%E4%B9%A0/11.png\" class=\"\">\n<p>然后我们随意捏造一个token进行访问，结果如下：</p>\n<img src=\"/2024/04/03/%E7%99%BB%E5%BD%95%E3%80%81%E6%B3%A8%E5%86%8C%E5%AD%A6%E4%B9%A0/12.png\" class=\"\">\n<h3 id=\"4-登录拦截\"><a href=\"#4-登录拦截\" class=\"headerlink\" title=\"4. 登录拦截\"></a>4. 登录拦截</h3><p>后端返回token 给前端后，前端保存这个token,在后续发送请求时，将这个token携带到请求头进行访问，后端解析请求头，解析该token，判断token是否生效，当token有效时，对请求进行放行。也就是说，我们在执行业务代码之前，都会先对请求进行拦截，并校验token的合法性。因此，就需要使用到拦截器。</p>\n<h4 id=\"4-1-infrastructure层\"><a href=\"#4-1-infrastructure层\" class=\"headerlink\" title=\"4.1. infrastructure层\"></a>4.1. infrastructure层</h4><p>在基础设施层，添加和登录拦截有关的类，首先添加一个Spring上下文工具类，帮助获取容器中的bean</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> com.yang.infrastructure.utils;<br><br><span class=\"hljs-keyword\">import</span> org.springframework.beans.BeansException;<br><span class=\"hljs-keyword\">import</span> org.springframework.context.ApplicationContext;<br><span class=\"hljs-keyword\">import</span> org.springframework.context.ApplicationContextAware;<br><span class=\"hljs-keyword\">import</span> org.springframework.stereotype.Component;<br><br><span class=\"hljs-meta\">@Component</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">SpringContextUtils</span>&lt;T&gt; <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">ApplicationContextAware</span> &#123;<br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> ApplicationContext applicationContext;<br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">setApplicationContext</span><span class=\"hljs-params\">(ApplicationContext applicationContext)</span> <span class=\"hljs-keyword\">throws</span> BeansException &#123;<br>        SpringContextUtils.applicationContext = applicationContext;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span>&lt;T&gt;  T <span class=\"hljs-title function_\">getBeanOfType</span><span class=\"hljs-params\">(Class&lt;T&gt; clazz)</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> applicationContext.getBean(clazz);<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> &lt;T&gt; T <span class=\"hljs-title function_\">getBeanOfName</span><span class=\"hljs-params\">(String name, Class&lt;T&gt; clazz)</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> applicationContext.getBean(name, clazz);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>然后添加一个JwtTokenVerifyInterceptor类，实现HandlerInterceptor，表示判断token是否有效的拦截器。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> com.yang.infrastructure.auth.interceptors;<br><br><span class=\"hljs-keyword\">import</span> com.yang.infrastructure.auth.config.JwtTokenProperty;<br><span class=\"hljs-keyword\">import</span> com.yang.infrastructure.auth.request.JwtTokenVerifyRequest;<br><span class=\"hljs-keyword\">import</span> com.yang.infrastructure.auth.response.JwtTokenVerifyDTO;<br><span class=\"hljs-keyword\">import</span> com.yang.infrastructure.auth.service.JwtTokenService;<br><span class=\"hljs-keyword\">import</span> com.yang.infrastructure.common.ResultCode;<br><span class=\"hljs-keyword\">import</span> com.yang.infrastructure.exception.BusinessException;<br><span class=\"hljs-keyword\">import</span> com.yang.infrastructure.utils.SpringContextUtils;<br><span class=\"hljs-keyword\">import</span> org.apache.commons.lang3.StringUtils;<br><span class=\"hljs-keyword\">import</span> org.springframework.web.servlet.HandlerInterceptor;<br><br><span class=\"hljs-keyword\">import</span> javax.servlet.http.HttpServletRequest;<br><span class=\"hljs-keyword\">import</span> javax.servlet.http.HttpServletResponse;<br><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">JwtTokenVerifyInterceptor</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">HandlerInterceptor</span> &#123;<br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">preHandle</span><span class=\"hljs-params\">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class=\"hljs-keyword\">throws</span> Exception &#123;<br>        <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">token</span> <span class=\"hljs-operator\">=</span> request.getHeader(<span class=\"hljs-string\">&quot;token&quot;</span>);<br>        <span class=\"hljs-keyword\">if</span> (StringUtils.isEmpty(token)) &#123;<br>            <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">BusinessException</span>(ResultCode.TOKEN_FAILED);<br>        &#125;<br>        <span class=\"hljs-type\">JwtTokenService</span> <span class=\"hljs-variable\">jwtTokenService</span> <span class=\"hljs-operator\">=</span> SpringContextUtils.getBeanOfType(JwtTokenService.class);<br>        <span class=\"hljs-type\">JwtTokenProperty</span> <span class=\"hljs-variable\">jwtTokenProperty</span> <span class=\"hljs-operator\">=</span> SpringContextUtils.getBeanOfType(JwtTokenProperty.class);<br><br>        <span class=\"hljs-type\">JwtTokenVerifyRequest</span> <span class=\"hljs-variable\">jwtTokenVerifyRequest</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">JwtTokenVerifyRequest</span>();<br>        jwtTokenVerifyRequest.setToken(token);<br>        jwtTokenVerifyRequest.setSecret(jwtTokenProperty.getSecret());<br><br>        <span class=\"hljs-type\">JwtTokenVerifyDTO</span> <span class=\"hljs-variable\">verify</span> <span class=\"hljs-operator\">=</span> jwtTokenService.verify(jwtTokenVerifyRequest);<br>        <span class=\"hljs-keyword\">if</span> (verify == <span class=\"hljs-literal\">null</span>) &#123;<br>            <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">BusinessException</span>(ResultCode.TOKEN_FAILED);<br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>然后添加一个配置类，配置刚才的拦截器</p>\n<figure class=\"highlight haxe\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs haxe\"><span class=\"hljs-keyword\">package</span> com.yang.infrastructure.configuration;<br><br><span class=\"hljs-keyword\">import</span> com.yang.infrastructure.auth.interceptors.JwtTokenVerifyInterceptor;<br><span class=\"hljs-keyword\">import</span> org.springframework.context.annotation.Configuration;<br><span class=\"hljs-keyword\">import</span> org.springframework.web.servlet.config.annotation.InterceptorRegistry;<br><span class=\"hljs-keyword\">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurer;<br><br><span class=\"hljs-meta\">@Configuration</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title class_\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">WebMvcConfiguration</span> <span class=\"hljs-keyword\"><span class=\"hljs-keyword\">implements</span> <span class=\"hljs-type\">WebMvcConfigurer</span></span> </span>&#123;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> void addInterceptors(InterceptorRegistry registry) &#123;<br>        registry.addInterceptor(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-type\">JwtTokenVerifyInterceptor</span>())<br>                .addPathPatterns(<span class=\"hljs-string\">&quot;/**&quot;</span>) <span class=\"hljs-comment\">// 拦截所有请求</span><br>                .excludePathPatterns(<span class=\"hljs-string\">&quot;/user/login&quot;</span>, <span class=\"hljs-string\">&quot;/user/register&quot;</span>); <span class=\"hljs-comment\">// 排除登录、注册接口</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h4 id=\"4-2-测试\"><a href=\"#4-2-测试\" class=\"headerlink\" title=\"4.2. 测试\"></a>4.2. 测试</h4><p>首先，我们在请求头，不添加token，访问测试接口，结果如下：</p>\n<img src=\"/2024/04/03/%E7%99%BB%E5%BD%95%E3%80%81%E6%B3%A8%E5%86%8C%E5%AD%A6%E4%B9%A0/13.png\" class=\"\">\n<p>然后在请求头，添加无效的token，访问测试接口，结果如下：</p>\n<img src=\"/2024/04/03/%E7%99%BB%E5%BD%95%E3%80%81%E6%B3%A8%E5%86%8C%E5%AD%A6%E4%B9%A0/14.png\" class=\"\">\n<p>携带登录返回的token，访问测试接口，结果如下：</p>\n<img src=\"/2024/04/03/%E7%99%BB%E5%BD%95%E3%80%81%E6%B3%A8%E5%86%8C%E5%AD%A6%E4%B9%A0/15.png\" class=\"\">\n<h3 id=\"5-token存储\"><a href=\"#5-token存储\" class=\"headerlink\" title=\"5. token存储\"></a>5. token存储</h3><h4 id=\"5-1-准备工作\"><a href=\"#5-1-准备工作\" class=\"headerlink\" title=\"5.1. 准备工作\"></a>5.1. 准备工作</h4><p>上述实现，虽然能够完成登录拦截的需求，但是有一个问题，我们每次访问接口，都需要对token进行验证，判断这个token是否有效，为减少解析token的耗时，我们可以将token存起来并设置一个过期时间，这个时候，我们就可以使用reids了。此时，我们的调用流程，如下图所示：</p>\n<img src=\"/2024/04/03/%E7%99%BB%E5%BD%95%E3%80%81%E6%B3%A8%E5%86%8C%E5%AD%A6%E4%B9%A0/16.png\" class=\"\">\n<p>因此，我们添加redis的相关依赖：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span><br>          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span><br>          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<h4 id=\"5-2-infrastructure层\"><a href=\"#5-2-infrastructure层\" class=\"headerlink\" title=\"5.2. infrastructure层\"></a>5.2. infrastructure层</h4><p>在基础设施层，添加上redis的配置类和相关的工具类：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Component</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">RedisConfiguration</span> &#123;<br><br>    <span class=\"hljs-meta\">@Bean</span><br>    <span class=\"hljs-keyword\">public</span> RedisTemplate <span class=\"hljs-title function_\">redisTemplate</span><span class=\"hljs-params\">(RedisConnectionFactory redisConnectionFactory)</span> &#123;<br>        RedisTemplate&lt;String, Object&gt; redisTemplate = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">RedisTemplate</span>&lt;&gt;();<br>        redisTemplate.setConnectionFactory(redisConnectionFactory);<br><br>        <span class=\"hljs-type\">StringRedisSerializer</span> <span class=\"hljs-variable\">stringRedisSerializer</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">StringRedisSerializer</span>();<br>        <span class=\"hljs-type\">Jackson2JsonRedisSerializer</span> <span class=\"hljs-variable\">jackson2JsonRedisSerializer</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Jackson2JsonRedisSerializer</span>(Object.class);<br>        <span class=\"hljs-type\">ObjectMapper</span> <span class=\"hljs-variable\">objectMapper</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ObjectMapper</span>().enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);<br>        jackson2JsonRedisSerializer.setObjectMapper(objectMapper);<br><br>        redisTemplate.setKeySerializer(stringRedisSerializer);<br>        redisTemplate.setHashKeySerializer(stringRedisSerializer);<br>        redisTemplate.setValueSerializer(jackson2JsonRedisSerializer);<br>        redisTemplate.setHashValueSerializer(jackson2JsonRedisSerializer);<br>        <span class=\"hljs-keyword\">return</span> redisTemplate;<br>    &#125;<br>&#125;<br><br><br><br><span class=\"hljs-meta\">@Component</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">RedisUtils</span> &#123;<br>    <span class=\"hljs-meta\">@Autowired</span><br>    <span class=\"hljs-keyword\">private</span> RedisTemplate&lt;String, Object&gt; redisTemplate;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">setKey</span><span class=\"hljs-params\">(String key, Object value)</span> &#123;<br>        redisTemplate.opsForValue().set(key, value);<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">setKey</span><span class=\"hljs-params\">(String key, Object value, Long expire)</span> &#123;<br>        setKey(key, value, expire, TimeUnit.SECONDS);<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">setKey</span><span class=\"hljs-params\">(String key, Object value, Long expire, TimeUnit timeUnit)</span> &#123;<br>        redisTemplate.opsForValue().set(key, value, expire, timeUnit);<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> Object <span class=\"hljs-title function_\">getKey</span><span class=\"hljs-params\">(String key)</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> redisTemplate.opsForValue().get(key);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>然后修改JwtTokenVerifyInterceptor拦截器，先查询redis上是否存在对应的token，有的话放行，否则使用JwtTokenService验证token是否有效</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Override</span><br>  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">preHandle</span><span class=\"hljs-params\">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class=\"hljs-keyword\">throws</span> Exception &#123;<br>      <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">token</span> <span class=\"hljs-operator\">=</span> request.getHeader(<span class=\"hljs-string\">&quot;token&quot;</span>);<br>      <span class=\"hljs-keyword\">if</span> (StringUtils.isEmpty(token)) &#123;<br>          <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">BusinessException</span>(ResultCode.TOKEN_FAILED);<br>      &#125;<br>      <span class=\"hljs-keyword\">if</span>(verifyByRedis(token)) &#123; <span class=\"hljs-comment\">// 判断该token在Redis是否存在</span><br>          System.out.println(<span class=\"hljs-string\">&quot;Redis中存在这个token，放行&quot;</span>);<br>          <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;<br>      &#125;<br>      System.out.println(<span class=\"hljs-string\">&quot;Redis中不存在这个token，解析该token&quot;</span>);<br>      <span class=\"hljs-type\">JwtTokenService</span> <span class=\"hljs-variable\">jwtTokenService</span> <span class=\"hljs-operator\">=</span> SpringContextUtils.getBeanOfType(JwtTokenService.class);<br>      <span class=\"hljs-type\">JwtTokenProperty</span> <span class=\"hljs-variable\">jwtTokenProperty</span> <span class=\"hljs-operator\">=</span> SpringContextUtils.getBeanOfType(JwtTokenProperty.class);<br><br>      <span class=\"hljs-type\">JwtTokenVerifyRequest</span> <span class=\"hljs-variable\">jwtTokenVerifyRequest</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">JwtTokenVerifyRequest</span>();<br>      jwtTokenVerifyRequest.setToken(token);<br>      jwtTokenVerifyRequest.setSecret(jwtTokenProperty.getSecret());<br><br>      <span class=\"hljs-type\">JwtTokenVerifyDTO</span> <span class=\"hljs-variable\">verify</span> <span class=\"hljs-operator\">=</span> jwtTokenService.verify(jwtTokenVerifyRequest);<br>      <span class=\"hljs-keyword\">if</span> (verify == <span class=\"hljs-literal\">null</span>) &#123;<br>          <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">BusinessException</span>(ResultCode.TOKEN_FAILED);<br>      &#125;<br>      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;<br>  &#125;<br><br>  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">verifyByRedis</span><span class=\"hljs-params\">(String token)</span> &#123;<br>      <span class=\"hljs-type\">RedisUtils</span> <span class=\"hljs-variable\">redisUtils</span> <span class=\"hljs-operator\">=</span> SpringContextUtils.getBeanOfType(RedisUtils.class);<br>      <span class=\"hljs-type\">Object</span> <span class=\"hljs-variable\">key</span> <span class=\"hljs-operator\">=</span> redisUtils.getKey(<span class=\"hljs-string\">&quot;token:&quot;</span> + token);<br>      <span class=\"hljs-keyword\">return</span> key != <span class=\"hljs-literal\">null</span>;<br>  &#125;<br></code></pre></td></tr></table></figure>\n<h4 id=\"5-3-application层\"><a href=\"#5-3-application层\" class=\"headerlink\" title=\"5.3. application层\"></a>5.3. application层</h4><p>修改登录逻辑中，在生成token后，将token存入redis</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> UserLoginDTO <span class=\"hljs-title function_\">login</span><span class=\"hljs-params\">(LoginUserRequest request)</span> &#123;<br>       <span class=\"hljs-type\">User</span> <span class=\"hljs-variable\">user</span> <span class=\"hljs-operator\">=</span> userService.login(request);<br>       <span class=\"hljs-keyword\">if</span> (user == <span class=\"hljs-literal\">null</span>) &#123;<br>           <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">BusinessException</span>(ResultCode.LOGIN_FAILED);<br>       &#125;<br>       <span class=\"hljs-comment\">// 生成token</span><br>       <span class=\"hljs-type\">UserLoginDTO</span> <span class=\"hljs-variable\">userLoginDTO</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">UserLoginDTO</span>();<br>       userLoginDTO.setUser(user);<br><br>       <span class=\"hljs-type\">JwtTokenGenerateRequest</span> <span class=\"hljs-variable\">jwtGenerateRequest</span> <span class=\"hljs-operator\">=</span> convert2JwtTokenGenerateRequest(user);<br>       <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">token</span> <span class=\"hljs-operator\">=</span> jwtTokenService.generateJwtToken(jwtGenerateRequest);<br>       userLoginDTO.setToken(token);<br><br>       <span class=\"hljs-comment\">// token存储到redis</span><br>       redisUtils.setKey(<span class=\"hljs-string\">&quot;token:&quot;</span> + token, jwtGenerateRequest, jwtGenerateRequest.getExpireTime());<br>       <span class=\"hljs-keyword\">return</span> userLoginDTO;<br>   &#125;<br></code></pre></td></tr></table></figure>\n<h4 id=\"5-4-测试\"><a href=\"#5-4-测试\" class=\"headerlink\" title=\"5.4. 测试\"></a>5.4. 测试</h4><p>首先访问登录接口，登录成功后，查看redis中是否含有对应的token</p>\n<img src=\"/2024/04/03/%E7%99%BB%E5%BD%95%E3%80%81%E6%B3%A8%E5%86%8C%E5%AD%A6%E4%B9%A0/17.png\" class=\"\">\n<p>redis中存在对应的token，然后我们访问测试接口，查看命令行,此时redis中存在该token，因此直接放行</p>\n<img src=\"/2024/04/03/%E7%99%BB%E5%BD%95%E3%80%81%E6%B3%A8%E5%86%8C%E5%AD%A6%E4%B9%A0/18.png\" class=\"\">\n<p>然后我们删除redis中的这个key，再次访问测试接口，此时redis不存在这个key，因此就需要进行token的解析。</p>\n<img src=\"/2024/04/03/%E7%99%BB%E5%BD%95%E3%80%81%E6%B3%A8%E5%86%8C%E5%AD%A6%E4%B9%A0/19.png\" class=\"\">\n<h3 id=\"6-用户信息更新\"><a href=\"#6-用户信息更新\" class=\"headerlink\" title=\"6. 用户信息更新\"></a>6. 用户信息更新</h3><p>用户信息，一般情况下更新的频率比较低，但也不是没有，常见的更新有：用户修改密码、用户修改昵称等。我们以用户修改密码为例，进行示例。<br>当用户修改密码时，我们只需要使用数据库中的salt，结合用户输入的新密码，生成新的哈希值，存入数据库，此外，因为用户信息更新了，我们最好将用户的token生效，存入redis的token，我们可以很容易地将其删除，但是，前端保存地token信息，我们修改不了，因此，最好是前端在更新操作成功后，主动删除请求头的token，从而时用户再次操作时，提示token失效，进行登录。</p>\n<h4 id=\"6-1-infrastructure层\"><a href=\"#6-1-infrastructure层\" class=\"headerlink\" title=\"6.1. infrastructure层\"></a>6.1. infrastructure层</h4><p>首先，修改RedisUtils工具类，加上删除key的方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">removeKey</span><span class=\"hljs-params\">(String key)</span> &#123;<br>       <span class=\"hljs-keyword\">return</span> redisTemplate.delete(key);<br>   &#125;<br></code></pre></td></tr></table></figure>\n<h4 id=\"6-2-domain层\"><a href=\"#6-2-domain层\" class=\"headerlink\" title=\"6.2. domain层\"></a>6.2. domain层</h4><p>修改UserService，添加修改密码的相关操作</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">updatePassword</span><span class=\"hljs-params\">(UpdatePasswordRequest request)</span> &#123;<br>       <span class=\"hljs-type\">Integer</span> <span class=\"hljs-variable\">userId</span> <span class=\"hljs-operator\">=</span> request.getId();<br>       <span class=\"hljs-type\">User</span> <span class=\"hljs-variable\">user</span> <span class=\"hljs-operator\">=</span> userRepository.findById(userId);<br>        <span class=\"hljs-keyword\">if</span> (user == <span class=\"hljs-literal\">null</span>) &#123;<br>           <span class=\"hljs-keyword\">return</span>;<br>       &#125;<br>       <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">password</span> <span class=\"hljs-operator\">=</span> request.getPassword();<br>       <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">newPassword</span> <span class=\"hljs-operator\">=</span> EncryptUtils.encrypt(password, user.getSalt());<br>       user.setPassword(newPassword);<br><br>       <span class=\"hljs-keyword\">try</span> &#123;<br>           userRepository.updateUser(user);<br>       &#125; <span class=\"hljs-keyword\">catch</span> (Exception e) &#123;<br>           <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">BusinessException</span>(ResultCode.SERVER_ERROR);<br>       &#125;<br>   &#125;<br></code></pre></td></tr></table></figure>\n<h4 id=\"6-3-application层\"><a href=\"#6-3-application层\" class=\"headerlink\" title=\"6.3. application层\"></a>6.3. application层</h4><p>在UserApplicationService类，添加修改用户密码的方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">updatePassword</span><span class=\"hljs-params\">(UpdatePasswordRequest updatePasswordRequest, HttpServletRequest request)</span> &#123;<br>       userService.updatePassword(updatePasswordRequest);<br>       <br>       <span class=\"hljs-comment\">// 删除token</span><br>       <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">token</span> <span class=\"hljs-operator\">=</span> request.getHeader(<span class=\"hljs-string\">&quot;token&quot;</span>);<br>       redisUtils.removeKey(<span class=\"hljs-string\">&quot;token:&quot;</span> + token);<br>   &#125;<br></code></pre></td></tr></table></figure>\n<h4 id=\"6-4-controller层\"><a href=\"#6-4-controller层\" class=\"headerlink\" title=\"6.4. controller层\"></a>6.4. controller层</h4><p>在UserController类，添加修改用户密码的方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@PutMapping(value = &quot;/updatePassword&quot;)</span><br>   <span class=\"hljs-keyword\">public</span> Response <span class=\"hljs-title function_\">updatePassword</span><span class=\"hljs-params\">(<span class=\"hljs-meta\">@RequestBody</span> UpdatePasswordRequest request, HttpServletRequest httpServletRequest)</span> &#123;<br>       userApplicationService.updatePassword(request, httpServletRequest);<br>       <span class=\"hljs-keyword\">return</span> Response.success();<br>   &#125;<br></code></pre></td></tr></table></figure>\n<h4 id=\"6-5-测试\"><a href=\"#6-5-测试\" class=\"headerlink\" title=\"6.5. 测试\"></a>6.5. 测试</h4><p>首先进行登录，登录成功后，在redis中多了一个token</p>\n<img src=\"/2024/04/03/%E7%99%BB%E5%BD%95%E3%80%81%E6%B3%A8%E5%86%8C%E5%AD%A6%E4%B9%A0/20.png\" class=\"\">\n<p>然后调用更新密码接口</p>\n<img src=\"/2024/04/03/%E7%99%BB%E5%BD%95%E3%80%81%E6%B3%A8%E5%86%8C%E5%AD%A6%E4%B9%A0/21.png\" class=\"\">\n<p>再次查看redis，发现token被删除了，然后查看数据库，能看出我们的密码也改变了</p>\n<img src=\"/2024/04/03/%E7%99%BB%E5%BD%95%E3%80%81%E6%B3%A8%E5%86%8C%E5%AD%A6%E4%B9%A0/22.png\" class=\"\">\n<img src=\"/2024/04/03/%E7%99%BB%E5%BD%95%E3%80%81%E6%B3%A8%E5%86%8C%E5%AD%A6%E4%B9%A0/23.png\" class=\"\">\n<h3 id=\"7-用户上下文\"><a href=\"#7-用户上下文\" class=\"headerlink\" title=\"7. 用户上下文\"></a>7. 用户上下文</h3><p>上面的代码，看似合理，但是有一个问题，更新密码的时候，传了两个值，一个是用户id，另一个才是用户输入的密码。在之前我们提到，我们通过登录拦截，规避了未登录用户操作系统资源的问题，但是对于我们刚才实现的修改密码接口，可能出现这种情况，用户A携带自己登录的token，请求体中id为用户B的id，调用修改密码的接口，这就导致，用户A修改了用户B的密码，这是不合理的，因此，这里将对代码进一步做修改，在进行拦截操作后，将用户信息，存储于用户上下文，然后在修改密码时，直接使用用户上下文中的用户id，而不是依靠前端传递的id。</p>\n<h4 id=\"7-1-infrastructure层\"><a href=\"#7-1-infrastructure层\" class=\"headerlink\" title=\"7.1. infrastructure层\"></a>7.1. infrastructure层</h4><p>首先，我们定义一个用户上下文信息类，用于存储用户的主要信息，包括用户id，token，用户名等。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> com.yang.infrastructure.auth;<br><br><span class=\"hljs-keyword\">import</span> lombok.Data;<br><br><span class=\"hljs-keyword\">import</span> java.io.Serializable;<br><span class=\"hljs-keyword\">import</span> java.util.HashMap;<br><span class=\"hljs-keyword\">import</span> java.util.Map;<br><br><span class=\"hljs-meta\">@Data</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">UserContextDetails</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">Serializable</span> &#123;<br>    <span class=\"hljs-keyword\">private</span> Integer id;<br>    <br>    <span class=\"hljs-keyword\">private</span> String token;<br>    <br>    <span class=\"hljs-keyword\">private</span> String username;<br>    <br>    <span class=\"hljs-keyword\">private</span> Map&lt;String, String&gt; extendMap = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">HashMap</span>&lt;&gt;();<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>添加一个线程上下文类，用于存储用户上下文信息</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> com.yang.infrastructure.auth;<br><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">UserContextThreadLocal</span> &#123;<br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> ThreadLocal&lt;UserContextDetails&gt; userContextDetailsThreadLocal = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ThreadLocal</span>&lt;&gt;();<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">setUserContextDetails</span><span class=\"hljs-params\">(UserContextDetails userContextDetails)</span> &#123;<br>        userContextDetailsThreadLocal.set(userContextDetails);<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> UserContextDetails <span class=\"hljs-title function_\">get</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> userContextDetailsThreadLocal.get();<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">remove</span><span class=\"hljs-params\">()</span> &#123;<br>        userContextDetailsThreadLocal.remove();<br>    &#125;<br>    <br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> Integer <span class=\"hljs-title function_\">getUserId</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> userContextDetailsThreadLocal.get().getId();<br>    &#125;<br>    <br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> String <span class=\"hljs-title function_\">getToken</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> userContextDetailsThreadLocal.get().getToken();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>然后，修改我们的JwtTokenVerifyInterceptor拦截器，这里我们实现了afterCompletion。在preHandler方法中，设置对应的线程上下文，在afterCompletion清除线程上下文，注意，设置线程上下文和清除线程上下文的操作，必须成对出现，否则会造成内存泄露。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> com.yang.infrastructure.auth.interceptors;<br><br><span class=\"hljs-keyword\">import</span> com.alibaba.fastjson.JSON;<br><span class=\"hljs-keyword\">import</span> com.alibaba.fastjson.JSONObject;<br><span class=\"hljs-keyword\">import</span> com.yang.infrastructure.auth.UserContextDetails;<br><span class=\"hljs-keyword\">import</span> com.yang.infrastructure.auth.UserContextThreadLocal;<br><span class=\"hljs-keyword\">import</span> com.yang.infrastructure.auth.config.JwtTokenProperty;<br><span class=\"hljs-keyword\">import</span> com.yang.infrastructure.auth.request.JwtTokenVerifyRequest;<br><span class=\"hljs-keyword\">import</span> com.yang.infrastructure.auth.response.JwtTokenVerifyDTO;<br><span class=\"hljs-keyword\">import</span> com.yang.infrastructure.auth.service.JwtTokenService;<br><span class=\"hljs-keyword\">import</span> com.yang.infrastructure.common.ResultCode;<br><span class=\"hljs-keyword\">import</span> com.yang.infrastructure.exception.BusinessException;<br><span class=\"hljs-keyword\">import</span> com.yang.infrastructure.utils.RedisUtils;<br><span class=\"hljs-keyword\">import</span> com.yang.infrastructure.utils.SpringContextUtils;<br><span class=\"hljs-keyword\">import</span> org.apache.commons.lang3.StringUtils;<br><span class=\"hljs-keyword\">import</span> org.springframework.lang.Nullable;<br><span class=\"hljs-keyword\">import</span> org.springframework.web.servlet.HandlerInterceptor;<br><br><span class=\"hljs-keyword\">import</span> javax.servlet.http.HttpServletRequest;<br><span class=\"hljs-keyword\">import</span> javax.servlet.http.HttpServletResponse;<br><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">JwtTokenVerifyInterceptor</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">HandlerInterceptor</span> &#123;<br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">preHandle</span><span class=\"hljs-params\">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class=\"hljs-keyword\">throws</span> Exception &#123;<br>        <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">token</span> <span class=\"hljs-operator\">=</span> request.getHeader(<span class=\"hljs-string\">&quot;token&quot;</span>);<br>        <span class=\"hljs-keyword\">if</span> (StringUtils.isEmpty(token)) &#123;<br>            <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">BusinessException</span>(ResultCode.TOKEN_FAILED);<br>        &#125;<br>        <span class=\"hljs-type\">Object</span> <span class=\"hljs-variable\">userDetails</span> <span class=\"hljs-operator\">=</span> getUserDetailsFromRedis(token);<br>        <span class=\"hljs-keyword\">if</span> (userDetails != <span class=\"hljs-literal\">null</span>) &#123; <span class=\"hljs-comment\">// 判断该token在Redis是否存在</span><br>            <span class=\"hljs-comment\">// 设置线程上下文</span><br>            System.out.println(<span class=\"hljs-string\">&quot;设置线程上下文====================&quot;</span>);<br>            <span class=\"hljs-type\">UserContextDetails</span> <span class=\"hljs-variable\">userContextDetails</span> <span class=\"hljs-operator\">=</span> (UserContextDetails) userDetails;<br>            userContextDetails.setToken(token);<br>            UserContextThreadLocal.setUserContextDetails(userContextDetails);<br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;<br>        &#125;<br><br>        <span class=\"hljs-type\">JwtTokenService</span> <span class=\"hljs-variable\">jwtTokenService</span> <span class=\"hljs-operator\">=</span> SpringContextUtils.getBeanOfType(JwtTokenService.class);<br>        <span class=\"hljs-type\">JwtTokenProperty</span> <span class=\"hljs-variable\">jwtTokenProperty</span> <span class=\"hljs-operator\">=</span> SpringContextUtils.getBeanOfType(JwtTokenProperty.class);<br><br>        <span class=\"hljs-type\">JwtTokenVerifyRequest</span> <span class=\"hljs-variable\">jwtTokenVerifyRequest</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">JwtTokenVerifyRequest</span>();<br>        jwtTokenVerifyRequest.setToken(token);<br>        jwtTokenVerifyRequest.setSecret(jwtTokenProperty.getSecret());<br><br>        <span class=\"hljs-type\">JwtTokenVerifyDTO</span> <span class=\"hljs-variable\">verify</span> <span class=\"hljs-operator\">=</span> jwtTokenService.verify(jwtTokenVerifyRequest);<br>        <span class=\"hljs-keyword\">if</span> (verify == <span class=\"hljs-literal\">null</span>) &#123;<br>            <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">BusinessException</span>(ResultCode.TOKEN_FAILED);<br>        &#125;<br><br>        <span class=\"hljs-comment\">// 设置线程上下文</span><br>        System.out.println(<span class=\"hljs-string\">&quot;设置线程上下文====================&quot;</span>);<br>        <span class=\"hljs-type\">UserContextDetails</span> <span class=\"hljs-variable\">userContextDetails</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">UserContextDetails</span>();<br>        userContextDetails.setId(Integer.valueOf(verify.getSubject()));<br>        userContextDetails.setToken(token);<br>        userContextDetails.setUsername(verify.getPayLoads().get(<span class=\"hljs-string\">&quot;username&quot;</span>));<br>        userContextDetails.setExtendMap(verify.getPayLoads());<br>        UserContextThreadLocal.setUserContextDetails(userContextDetails);<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">private</span> Object <span class=\"hljs-title function_\">getUserDetailsFromRedis</span><span class=\"hljs-params\">(String token)</span> &#123;<br>        <span class=\"hljs-type\">RedisUtils</span> <span class=\"hljs-variable\">redisUtils</span> <span class=\"hljs-operator\">=</span> SpringContextUtils.getBeanOfType(RedisUtils.class);<br>        <span class=\"hljs-keyword\">return</span> redisUtils.getKey(<span class=\"hljs-string\">&quot;token:&quot;</span> + token);<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">afterCompletion</span><span class=\"hljs-params\">(HttpServletRequest request, HttpServletResponse response, Object handler, <span class=\"hljs-meta\">@Nullable</span> Exception ex)</span> <span class=\"hljs-keyword\">throws</span> Exception &#123;<br>        System.out.println(<span class=\"hljs-string\">&quot;清除线程上下文=======================&quot;</span>);<br>        <span class=\"hljs-comment\">// 清除线程上下文</span><br>        UserContextThreadLocal.remove();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h4 id=\"7-2-domain层\"><a href=\"#7-2-domain层\" class=\"headerlink\" title=\"7.2. domain层\"></a>7.2. domain层</h4><p>修改UserService的updatePassword方法，userId从线程上下文获取</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">updatePassword</span><span class=\"hljs-params\">(UpdatePasswordRequest request)</span> &#123;<br>       <span class=\"hljs-type\">Integer</span> <span class=\"hljs-variable\">userId</span> <span class=\"hljs-operator\">=</span> UserContextThreadLocal.getUserId();<br>       <span class=\"hljs-type\">User</span> <span class=\"hljs-variable\">user</span> <span class=\"hljs-operator\">=</span> userRepository.findById(userId);<br>       <span class=\"hljs-keyword\">if</span> (user == <span class=\"hljs-literal\">null</span>) &#123;<br>           <span class=\"hljs-keyword\">return</span>;<br>       &#125;<br>       <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">password</span> <span class=\"hljs-operator\">=</span> request.getPassword();<br>       <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">newPassword</span> <span class=\"hljs-operator\">=</span> EncryptUtils.encrypt(password, user.getSalt());<br>       user.setPassword(newPassword);<br><br>       <span class=\"hljs-keyword\">try</span> &#123;<br>           userRepository.updateUser(user);<br>       &#125; <span class=\"hljs-keyword\">catch</span> (Exception e) &#123;<br>           <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">BusinessException</span>(ResultCode.SERVER_ERROR);<br>       &#125;<br>   &#125;<br></code></pre></td></tr></table></figure>\n<h4 id=\"7-3-application层\"><a href=\"#7-3-application层\" class=\"headerlink\" title=\"7.3. application层\"></a>7.3. application层</h4><p>修改application层updatePassword方法，token从线程上下文获取</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">updatePassword</span><span class=\"hljs-params\">(UpdatePasswordRequest updatePasswordRequest)</span> &#123;<br>       userService.updatePassword(updatePasswordRequest);<br><br>       <span class=\"hljs-comment\">// 删除token</span><br>       <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">token</span> <span class=\"hljs-operator\">=</span> UserContextThreadLocal.getToken();<br>       redisUtils.removeKey(<span class=\"hljs-string\">&quot;token:&quot;</span> + token);<br>   &#125;<br></code></pre></td></tr></table></figure>\n<h4 id=\"7-4-controller层\"><a href=\"#7-4-controller层\" class=\"headerlink\" title=\"7.4. controller层\"></a>7.4. controller层</h4><p>修改controller层的updatePassword方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@PutMapping(value = &quot;/updatePassword&quot;)</span><br>   <span class=\"hljs-keyword\">public</span> Response <span class=\"hljs-title function_\">updatePassword</span><span class=\"hljs-params\">(<span class=\"hljs-meta\">@RequestBody</span> UpdatePasswordRequest request)</span> &#123;<br>       userApplicationService.updatePassword(request);<br>       <span class=\"hljs-keyword\">return</span> Response.success();<br>   &#125;<br></code></pre></td></tr></table></figure>\n<h4 id=\"7-5-测试\"><a href=\"#7-5-测试\" class=\"headerlink\" title=\"7.5. 测试\"></a>7.5. 测试</h4><p>调用用户登录接口，然后查看redis，可以看出，现在存储的value类型，是UserContextDetails类型</p>\n<img src=\"/2024/04/03/%E7%99%BB%E5%BD%95%E3%80%81%E6%B3%A8%E5%86%8C%E5%AD%A6%E4%B9%A0/24.png\" class=\"\">\n<p>调用测试接口，然后查看控制台</p>\n<img src=\"/2024/04/03/%E7%99%BB%E5%BD%95%E3%80%81%E6%B3%A8%E5%86%8C%E5%AD%A6%E4%B9%A0/25.png\" class=\"\">\n<p>然后查看控制台，从控制台中可以看出，设置线程上下文和清除线程上下文成对出现。</p>\n<img src=\"/2024/04/03/%E7%99%BB%E5%BD%95%E3%80%81%E6%B3%A8%E5%86%8C%E5%AD%A6%E4%B9%A0/26.png\" class=\"\">\n<p>测试修改密码接口</p>\n<img src=\"/2024/04/03/%E7%99%BB%E5%BD%95%E3%80%81%E6%B3%A8%E5%86%8C%E5%AD%A6%E4%B9%A0/27.png\" class=\"\">\n<p>修改成功，说明线程上下文的取值没有问题。</p>\n<h3 id=\"8-参考文档\"><a href=\"#8-参考文档\" class=\"headerlink\" title=\"8. 参考文档\"></a>8. 参考文档</h3><p><a href=\"https://segmentfault.com/a/1190000040003653\">https://segmentfault.com/a/1190000040003653</a></p>\n"},{"title":"鉴权学习","date":"2024-04-03T07:15:49.000Z","_content":"### 1. 引言\n鉴权指身份认证授权，在计算机安全领域，是指验证一个实体的身份并决定这个实体是否被授权执行某项任务的过程，简单来说，就是确认一个用户或者系统是否拥有进行某项操作的权权利。\n鉴权通常包含两个方面：\n1）身份认证（Authentication）：确定一个用户或实体是否为其声称的个体。这通常通过用户名和密码、生物特征识别、智能卡等方式实现。我们在上一篇提到的内容，就属于身份认证的相关内容。\n2）授权（Authorization）：在身份被确认之后，鉴权系统还会检查该用户是否有权限执行特定的操作。例如，一个用户可能有权访问某个系统，但没有权限修改数据。\n我们在上一章登录、注册学习的基础上，添加一个权限表和一个用户权限表。\n{% asset_img 1.png %}\n{% asset_img 2.png %}\n以大学为例，一般有学生、辅导员、教务员、讲师、教授等身份，如下图所示：\n{% asset_img 3.png %}\n### 2. 修改用户注册\n对于每个用户，都应该有对应的权限，用户和权限的关系，可以是一对多的，比如在大学内，一个人，既可以是学生，也可以是辅导员，比如兼职辅导员；既可以是讲师，也可以是班主任。因此，我们修改用户注册接口，在新增用户的同时，添加用户的权限。\n#### 2.1. infrastructure层\n修改UserContextDetails类，加上用户权限信息\n```java\n@Data\npublic class UserContextDetails implements Serializable {\n    private Integer id;\n\n    private String token;\n\n    private String username;\n\n    private Map<String, String> extendMap = new HashMap<>();\n\n    // 权限\n    private List<PermissionDetails> permissionDetails = new ArrayList<>();\n}\n```\n修改JwtTokenVerifyInterceptor类，在获取UserContextDetails时，填充用户权限信息\n```java\n @Override\n    public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception {\n        String token = request.getHeader(\"token\");\n        if (StringUtils.isEmpty(token)) {\n            throw new BusinessException(ResultCode.TOKEN_FAILED);\n        }\n        Object userDetails = getUserDetailsFromRedis(token);\n        if (userDetails != null) { // 判断该token在Redis是否存在\n            // 设置线程上下文\n            System.out.println(\"设置线程上下文====================\");\n            UserContextDetails userContextDetails = (UserContextDetails) userDetails;\n            userContextDetails.setToken(token);\n            UserContextThreadLocal.setUserContextDetails(userContextDetails);\n            return true;\n        }\n\n        JwtTokenService jwtTokenService = SpringContextUtils.getBeanOfType(JwtTokenService.class);\n        JwtTokenProperty jwtTokenProperty = SpringContextUtils.getBeanOfType(JwtTokenProperty.class);\n\n        JwtTokenVerifyRequest jwtTokenVerifyRequest = new JwtTokenVerifyRequest();\n        jwtTokenVerifyRequest.setToken(token);\n        jwtTokenVerifyRequest.setSecret(jwtTokenProperty.getSecret());\n\n        JwtTokenVerifyDTO verify = jwtTokenService.verify(jwtTokenVerifyRequest);\n        if (verify == null) {\n            throw new BusinessException(ResultCode.TOKEN_FAILED);\n        }\n\n        // 设置线程上下文\n        System.out.println(\"设置线程上下文====================\");\n        UserContextDetails userContextDetails = new UserContextDetails();\n        userContextDetails.setId(Integer.valueOf(verify.getSubject()));\n        userContextDetails.setToken(token);\n        userContextDetails.setUsername(verify.getPayLoads().get(\"username\"));\n        userContextDetails.setExtendMap(verify.getPayLoads());\n        List<Role> roles = JSONObject.parseArray(verify.getPayLoads().get(\"roles\"), Role.class);\n        userContextDetails.setPermissionDetails(roles.stream().map(role -> {\n            PermissionDetails permissionDetails = new PermissionDetails();\n            permissionDetails.setName(role.getCode());\n            return permissionDetails;\n        }).collect(Collectors.toList()));\n        UserContextThreadLocal.setUserContextDetails(userContextDetails);\n        return true;\n    }\n```\n#### 2.2. domain层\n添加Role和UserRole相关的实体类、存储类、领域服务类，这里不贴代码了，比较简单。\n添加RoleEnum枚举类\n```java\npackage com.yang.domain.common;\n\npublic enum RoleEnum {\n    STUDENT(1, \"STUDENT\"),\n    COUNSELOR(2, \"COUNSELOR\"),\n    ACADEMIC_ADMINISTRATOR(3, \"ACADEMIC_ADMINISTRATOR\");\n\n    private int code;\n\n    private String description;\n\n    RoleEnum(int code, String description) {\n        this.code = code;\n        this.description = description;\n    }\n\n    public int getCode() {\n        return this.code;\n    }\n\n    public String getDescription() {\n        return this.description;\n    }\n\n    public RoleEnum findByCode(int code) {\n        for (RoleEnum role : values()) {\n            if (role.getCode() == code) {\n                return role;\n            }\n        }\n        return null;\n    }\n}\n```\n修改user实体类，加上权限列表属性\n```java\n@Data\n@TableName(value = \"t_user\")\npublic class User implements Serializable {\n    @TableId(type = IdType.AUTO)\n    private Integer id;\n\n    private String username;\n\n    private String password;\n\n    private String salt;\n\n    // 是否冻结 0未冻结 1已冻结\n    private Integer freeze;\n\n    private Date createTime;\n\n    private Date updateTime;\n\n    @TableField(exist = false)\n    private Map<String, String> featuresMap;\n\n    private String features;\n\n    @TableField(exist = false)\n    private List<Role> roles;\n}\n```\n修改userRepository，在获取用户的时候，填充用户的权限信息\n```java\n@Repository\npublic class UserRepository implements IUserRepository {\n    @Autowired\n    private UserMapper userMapper;\n\n    @Autowired\n    private IUserRoleRepository userRoleRepository;\n\n    @Autowired\n    private IRoleRepository roleRepository;\n\n    private static final int UN_FREEZE = 0;\n    private static final int FREEZE = 1;\n\n    @Override\n    public boolean saveUser(User user) {\n        user.setCreateTime(new Date());\n        user.setUpdateTime(new Date());\n        user.setFreeze(UN_FREEZE);\n        user.setFeaturesMap(new HashMap<>());\n        user.setFeatures(JSONObject.toJSONString(user.getFeaturesMap()));\n        return userMapper.insert(user) > 0;\n    }\n\n    @Override\n    public User findByUsernameAndPassword(String username, String password) {\n        LambdaQueryWrapper<User> queryWrapper = new LambdaQueryWrapper<>();\n        queryWrapper.eq(User::getUsername, username);\n        queryWrapper.eq(User::getPassword, password);\n        User user = userMapper.selectOne(queryWrapper);\n        if (user != null) {\n            user.setRoles(findRoleByUserId(user.getId()));\n        }\n        return user;\n    }\n\n    @Override\n    public User findByUsername(String username) {\n        LambdaQueryWrapper<User> queryWrapper = new LambdaQueryWrapper<>();\n        queryWrapper.eq(User::getUsername, username);\n        User user = userMapper.selectOne(queryWrapper);\n        if (user != null) {\n            user.setRoles(findRoleByUserId(user.getId()));\n        }\n        return user;\n    }\n\n    @Override\n    public User findById(Integer id) {\n        User user = userMapper.selectById(id);\n        if (user != null) {\n            user.setRoles(findRoleByUserId(user.getId()));\n        }\n        return user;\n    }\n\n    @Override\n    public boolean updateUser(User user) {\n        user.setUpdateTime(new Date());\n        return userMapper.updateById(user) > 0;\n    }\n\n    private List<Role> findRoleByUserId(Integer userId) {\n        List<UserRole> userRoles = userRoleRepository.findUserRoleByUserId(userId);\n        if (CollectionUtils.isEmpty(userRoles)) {\n            return new ArrayList<>();\n        }\n        List<Integer> roleIdList = userRoles.stream().map(UserRole::getRoleId)\n                .distinct().collect(Collectors.toList());\n        return roleRepository.findRoleInIds(roleIdList);\n    }\n}\n```\n#### 2.3. application层\n修改用户注册接口,添加用户之后，插入一条用户权限记录。\n```java\n  public User register(RegisterUserRequest request) {\n        User user = userService.register(request);\n\n        Integer roleId = request.getRoleId();\n        if (roleId == null || roleService.findById(roleId) == null) {\n            roleId = RoleEnum.STUDENT.getCode();\n        }\n        \n        UserRole userRole = new UserRole();\n        userRole.setUserId(user.getId());\n        userRole.setRoleId(roleId);\n        \n        userRoleService.save(userRole);\n        return user;\n    }\n```\n在登录的时候，生成token时，将权限信息作为payloads的一部分，修改UserApplicationService的login方法：\n```java\n  public UserLoginDTO login(LoginUserRequest request) {\n        User user = userService.login(request);\n        if (user == null) {\n            throw new BusinessException(ResultCode.LOGIN_FAILED);\n        }\n        // 生成token\n        UserLoginDTO userLoginDTO = new UserLoginDTO();\n        userLoginDTO.setUser(user);\n\n        JwtTokenGenerateRequest jwtGenerateRequest = userLoginConvertor.convert2JwtTokenGenerateRequest(user);\n        String token = jwtTokenService.generateJwtToken(jwtGenerateRequest);\n        userLoginDTO.setToken(token);\n\n        UserContextDetails userContextDetails = userLoginConvertor.convert2UserContextDetails(user);\n        // token存储到redis\n        redisUtils.setKey(\"token:\" + token, userContextDetails, jwtGenerateRequest.getExpireTime());\n        return userLoginDTO;\n    }\n```\n将和UserDetailsContext相关的转化，收敛到UserLoginConvertor，方便维护\n```java\n@Component\npublic class UserLoginConvertor {\n    @Autowired\n    private JwtTokenProperty jwtTokenProperty;\n\n    public JwtTokenGenerateRequest convert2JwtTokenGenerateRequest(User user) {\n        JwtTokenGenerateRequest request = new JwtTokenGenerateRequest();\n        request.setSubject(user.getId().toString());\n        request.setExpireTime(jwtTokenProperty.getExpire());\n        request.setSecret(jwtTokenProperty.getSecret());\n        request.setPayLoads(convert2Payloads(user));\n\n        return request;\n    }\n\n    private Map<String, String> convert2Payloads(User user) {\n        Map<String, String> payloads = new HashMap<>();\n        payloads.put(\"username\", user.getUsername());\n        payloads.put(\"id\", user.getId().toString());\n        payloads.put(\"salt\", user.getSalt());\n        payloads.put(\"roles\", JSONObject.toJSONString(user.getRoles()));\n        return payloads;\n    }\n\n    public UserContextDetails convert2UserContextDetails(User user) {\n        UserContextDetails userContextDetails = new UserContextDetails();\n        userContextDetails.setId(user.getId());\n        userContextDetails.setUsername(user.getUsername());\n        userContextDetails.setExtendMap(convert2Payloads(user));\n        userContextDetails.setPermissionDetails(user.getRoles().stream().map(role -> {\n            PermissionDetails permissionDetails = new PermissionDetails();\n            permissionDetails.setName(role.getCode());\n            return permissionDetails;\n        }).collect(Collectors.toList()));\n        return userContextDetails;\n    }\n\n}\n```\n#### 2.4. 测试\n我们调用注册接口，分别添加张三、李四、王五的信息，他们分别是学生、辅导员、教务员，测试结果如下：\n{% asset_img 4.png %}\n{% asset_img 5.png %}\n调用登录接口，然后查看对应的redis内容，可以看到确实有权限信息\n{% asset_img 6.png %}\n### 3. 基于注解的鉴权\n对于不同的角色，其权限一般是不同的，以请假为例，当学生因为某些原因不能上学时，可以请假，而请假一般需要有辅导员或教务员批准，因此，学生有请假的权限，教务员和辅导员有审批假条的权限。\n#### 3.1. infrastructure层\n首先，添加一个权限注解\n```java\n@Documented\n@Retention(value = RetentionPolicy.RUNTIME)\n@Target(value = ElementType.METHOD)\npublic @interface Permission {\n    String[] code();\n}\n```\n然后添加一个切面类，解析该注解中，要求的权限，然后获取用户上下文，根据用户上下文中的权限，来判断是否有符合的，如果都不符合，那么抛出权限不足的异常。\n```java\npackage com.yang.infrastructure.auth.aspect;\n\nimport com.yang.infrastructure.auth.PermissionDetails;\nimport com.yang.infrastructure.auth.UserContextDetails;\nimport com.yang.infrastructure.auth.UserContextThreadLocal;\nimport com.yang.infrastructure.auth.annotations.Permission;\nimport com.yang.infrastructure.common.ResultCode;\nimport com.yang.infrastructure.exception.BusinessException;\nimport org.aspectj.lang.JoinPoint;\nimport org.aspectj.lang.annotation.Aspect;\nimport org.aspectj.lang.annotation.Before;\nimport org.aspectj.lang.annotation.Pointcut;\nimport org.aspectj.lang.reflect.MethodSignature;\nimport org.springframework.stereotype.Component;\nimport org.springframework.util.CollectionUtils;\n\nimport java.util.List;\nimport java.util.Set;\nimport java.util.stream.Collectors;\n\n@Aspect\n@Component\npublic class PermissionAspect {\n    @Pointcut(value = \"@annotation(com.yang.infrastructure.auth.annotations.Permission)\")\n    public void pointCut() {\n    }\n\n    @Before(value = \"pointCut()\")\n    public void beforeAdvice(JoinPoint joinPoint) {\n        MethodSignature methodSignature = (MethodSignature) joinPoint.getSignature();\n        Permission permission = methodSignature.getMethod().getAnnotation(Permission.class);\n\n        // 获取注解中要求的权限\n        String[] code = permission.code();\n        if (code == null || code.length == 0) {\n            // 没有指定权限时，不进行拦截\n            return;\n        }\n\n        // 指定权限，先获取当前用户的权限列表\n        UserContextDetails userContextDetails = UserContextThreadLocal.get();\n        List<PermissionDetails> permissionDetails = userContextDetails.getPermissionDetails();\n\n        if (CollectionUtils.isEmpty(permissionDetails)) {\n            throw new BusinessException(ResultCode.ACCESS_DENIED);\n        }\n\n        Set<String> ownPermissionSet = permissionDetails.stream().map(PermissionDetails::getName)\n                .collect(Collectors.toSet());\n\n        boolean containPermission = false;\n        for (String c : code) {\n            if (ownPermissionSet.contains(c)) {\n                containPermission = true;\n                break;\n            }\n        }\n\n        if (!containPermission) {\n            throw new BusinessException(ResultCode.ACCESS_DENIED);\n        }\n    }\n}\n```\n#### 3.2. controller层\ncontroller层中，添加一个LeaveController类，用于测试，其中，学生可以提出申请离校，而辅导员和教务员可以进行审批。\n```java\npackage com.yang.controller;\n\nimport com.yang.controller.request.leave.AskForLeaveRequest;\nimport com.yang.infrastructure.auth.UserContextDetails;\nimport com.yang.infrastructure.auth.UserContextThreadLocal;\nimport com.yang.infrastructure.auth.annotations.Permission;\nimport com.yang.infrastructure.common.Response;\nimport org.springframework.web.bind.annotation.PostMapping;\nimport org.springframework.web.bind.annotation.RequestBody;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\n@RestController\n@RequestMapping(value = \"/leave\")\npublic class LeaveController {\n\n    @PostMapping(\"/apply\")\n    @Permission(code = \"STUDENT\")\n    public Response applyForLeave(@RequestBody AskForLeaveRequest request) {\n        UserContextDetails userContextDetails = UserContextThreadLocal.get();\n        System.out.println(userContextDetails.getUsername() + \"申请离校，离校时间：\" + request.getLeaveDays()\n        + \"，离校原因：\" + request.getReason());\n        System.out.println(userContextDetails.getPermissionDetails());\n        return Response.success();\n    }\n\n    @PostMapping(\"/approval\")\n    @Permission(code = {\"COUNSELOR\", \"ACADEMIC_ADMINISTRATOR\"})\n    public Response approvalLeave() {\n        UserContextDetails userContextDetails = UserContextThreadLocal.get();\n        System.out.println(userContextDetails.getUsername() + \"审批离校申请\");\n        System.out.println(userContextDetails.getPermissionDetails());\n        return Response.success();\n    }\n}\n```\n#### 3.3. 测试\n首先用学生账号登录，然后分别访问/apply接口和/approval接口\n{% asset_img 7.png %}\n{% asset_img 8.png %}\n然后登录一个辅导员账号，再次访问/apply和/approval接口\n{% asset_img 9.png %}\n{% asset_img 10.png %}\n我们查看控制台，也能看到该账户的权限确实是辅导员权限\n{% asset_img 11.png %}\n### 4. 基于拦截器的鉴权\n虽然上述基于注解的鉴权，能完成用户的权限校验，但是如果我们有很多个接口，他们的权限要求都是一样的，比如以/student开头地请求，都需要学生权限，如果是基于注解地鉴权，我们就需要对这些接口一个一个地加上注解，进行鉴权，这样很麻烦。因此，我们可以使用拦截器，对符合某些路径地请求，进行权限校验。\n#### 4.1. infrastructure层\n我们在基础设施层，加上对应地拦截器，拦截用户请求，并解析出请求地路径，根据路径，找出该路径需要匹配地权限，最后再根据用户上下文，判断是否满足该权限。\n```java\npackage com.yang.infrastructure.auth.interceptors;\n\nimport com.yang.infrastructure.auth.PermissionDetails;\nimport com.yang.infrastructure.auth.UserContextDetails;\nimport com.yang.infrastructure.auth.UserContextThreadLocal;\nimport com.yang.infrastructure.common.ResultCode;\nimport com.yang.infrastructure.exception.BusinessException;\nimport org.apache.commons.lang3.StringUtils;\nimport org.springframework.util.CollectionUtils;\nimport org.springframework.web.servlet.HandlerInterceptor;\n\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Optional;\nimport java.util.Set;\nimport java.util.concurrent.ConcurrentHashMap;\nimport java.util.function.Function;\nimport java.util.stream.Collectors;\n\npublic class PermissionVerifyInterceptor implements HandlerInterceptor {\n    private Map<String, String> uri2PermissionMap = new ConcurrentHashMap<>();\n\n    public void addPermission(String permission, String... uris) {\n        if (uris.length > 0) {\n            for (String url : uris) {\n                uri2PermissionMap.put(url, permission);\n            }\n        }\n    }\n\n    public void addPermission(String permission, List<String> uriList) {\n        if (CollectionUtils.isEmpty(uriList)) {\n            return;\n        }\n        for (String uri : uriList) {\n            uri2PermissionMap.put(uri, permission);\n        }\n    }\n\n    @Override\n    public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception {\n        String requestURI = request.getRequestURI();\n\n        String permission = getPermissionOfUri(requestURI);\n        if (StringUtils.isEmpty(permission)) {\n            // 没有权限要求，直接通过\n            return true;\n        }\n        UserContextDetails userContextDetails = UserContextThreadLocal.get();\n        List<PermissionDetails> permissionDetails = userContextDetails.getPermissionDetails();\n        if (CollectionUtils.isEmpty(permissionDetails)) {\n            throw new BusinessException(ResultCode.ACCESS_DENIED);\n        }\n\n        long count = permissionDetails.stream()\n                .filter(permissionDetail -> permissionDetail.getName().equals(permission))\n                .count();\n        if (count <= 0) {\n            throw new BusinessException(ResultCode.ACCESS_DENIED);\n        }\n        return true;\n    }\n\n    private String getPermissionOfUri(String uri) {\n        Set<String> keySet = this.uri2PermissionMap.keySet();\n        if (keySet.contains(uri)) {\n            return uri2PermissionMap.get(uri);\n        }\n\n        Map<String, String> map = keySet.stream().filter(key -> key.endsWith(\"*\"))\n                .collect(Collectors.toMap(key -> {\n                    int index = key.lastIndexOf(\"*\");\n                    String tempKey = key.substring(0, index);\n                    return tempKey;\n                }, Function.identity()));\n\n        for (String key : map.keySet()) {\n            if (uri.startsWith(key)) {\n                String originKey = map.get(key);\n                return uri2PermissionMap.get(originKey);\n            }\n        }\n        return null;\n    }\n}\n```\n然后将这个拦截器，添加到配置中\n```java\npackage com.yang.infrastructure.configuration;\n\nimport com.yang.infrastructure.auth.interceptors.JwtTokenVerifyInterceptor;\nimport com.yang.infrastructure.auth.interceptors.PermissionVerifyInterceptor;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.web.servlet.config.annotation.InterceptorRegistry;\nimport org.springframework.web.servlet.config.annotation.WebMvcConfigurer;\n\n@Configuration\npublic class WebMvcConfiguration implements WebMvcConfigurer {\n\n    @Override\n    public void addInterceptors(InterceptorRegistry registry) {\n        registry.addInterceptor(new JwtTokenVerifyInterceptor())\n                .addPathPatterns(\"/**\") // 拦截所有请求\n                .excludePathPatterns(\"/user/login\", \"/user/register\"); // 排除登录、注册接口\n\n        PermissionVerifyInterceptor permissionVerifyInterceptor = new PermissionVerifyInterceptor();\n        permissionVerifyInterceptor.addPermission(\"STUDENT\", \"/student/needPermission\");\n        permissionVerifyInterceptor.addPermission(\"COUNSELOR\", \"/counselor/*\");\n\n        registry.addInterceptor(permissionVerifyInterceptor)\n                .addPathPatterns(\"/**\") // 拦截所有请求\n                .excludePathPatterns(\"/user/login\", \"/user/register\"); // 排除登录、注册接口\n    }\n}\n```\n#### 4.2. 测试\n首先，使用辅导员的token，依次访问/student/needPermission, /student/notPermission和/counselor的相关接口\n{% asset_img 12.png %}\n{% asset_img 13.png %}\n{% asset_img 14.png %}\n然后使用普通学生的token，依次访问/student/needPermission, /student/notPermission和/counselor的相关接口\n{% asset_img 15.png %}\n{% asset_img 16.png %}\n{% asset_img 17.png %}\n","source":"_posts/鉴权学习.md","raw":"---\ntitle: 鉴权学习\ndate: 2024-04-03 15:15:49\ntags:\n    - SpringBoot\n    - SpringSecurity\n---\n### 1. 引言\n鉴权指身份认证授权，在计算机安全领域，是指验证一个实体的身份并决定这个实体是否被授权执行某项任务的过程，简单来说，就是确认一个用户或者系统是否拥有进行某项操作的权权利。\n鉴权通常包含两个方面：\n1）身份认证（Authentication）：确定一个用户或实体是否为其声称的个体。这通常通过用户名和密码、生物特征识别、智能卡等方式实现。我们在上一篇提到的内容，就属于身份认证的相关内容。\n2）授权（Authorization）：在身份被确认之后，鉴权系统还会检查该用户是否有权限执行特定的操作。例如，一个用户可能有权访问某个系统，但没有权限修改数据。\n我们在上一章登录、注册学习的基础上，添加一个权限表和一个用户权限表。\n{% asset_img 1.png %}\n{% asset_img 2.png %}\n以大学为例，一般有学生、辅导员、教务员、讲师、教授等身份，如下图所示：\n{% asset_img 3.png %}\n### 2. 修改用户注册\n对于每个用户，都应该有对应的权限，用户和权限的关系，可以是一对多的，比如在大学内，一个人，既可以是学生，也可以是辅导员，比如兼职辅导员；既可以是讲师，也可以是班主任。因此，我们修改用户注册接口，在新增用户的同时，添加用户的权限。\n#### 2.1. infrastructure层\n修改UserContextDetails类，加上用户权限信息\n```java\n@Data\npublic class UserContextDetails implements Serializable {\n    private Integer id;\n\n    private String token;\n\n    private String username;\n\n    private Map<String, String> extendMap = new HashMap<>();\n\n    // 权限\n    private List<PermissionDetails> permissionDetails = new ArrayList<>();\n}\n```\n修改JwtTokenVerifyInterceptor类，在获取UserContextDetails时，填充用户权限信息\n```java\n @Override\n    public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception {\n        String token = request.getHeader(\"token\");\n        if (StringUtils.isEmpty(token)) {\n            throw new BusinessException(ResultCode.TOKEN_FAILED);\n        }\n        Object userDetails = getUserDetailsFromRedis(token);\n        if (userDetails != null) { // 判断该token在Redis是否存在\n            // 设置线程上下文\n            System.out.println(\"设置线程上下文====================\");\n            UserContextDetails userContextDetails = (UserContextDetails) userDetails;\n            userContextDetails.setToken(token);\n            UserContextThreadLocal.setUserContextDetails(userContextDetails);\n            return true;\n        }\n\n        JwtTokenService jwtTokenService = SpringContextUtils.getBeanOfType(JwtTokenService.class);\n        JwtTokenProperty jwtTokenProperty = SpringContextUtils.getBeanOfType(JwtTokenProperty.class);\n\n        JwtTokenVerifyRequest jwtTokenVerifyRequest = new JwtTokenVerifyRequest();\n        jwtTokenVerifyRequest.setToken(token);\n        jwtTokenVerifyRequest.setSecret(jwtTokenProperty.getSecret());\n\n        JwtTokenVerifyDTO verify = jwtTokenService.verify(jwtTokenVerifyRequest);\n        if (verify == null) {\n            throw new BusinessException(ResultCode.TOKEN_FAILED);\n        }\n\n        // 设置线程上下文\n        System.out.println(\"设置线程上下文====================\");\n        UserContextDetails userContextDetails = new UserContextDetails();\n        userContextDetails.setId(Integer.valueOf(verify.getSubject()));\n        userContextDetails.setToken(token);\n        userContextDetails.setUsername(verify.getPayLoads().get(\"username\"));\n        userContextDetails.setExtendMap(verify.getPayLoads());\n        List<Role> roles = JSONObject.parseArray(verify.getPayLoads().get(\"roles\"), Role.class);\n        userContextDetails.setPermissionDetails(roles.stream().map(role -> {\n            PermissionDetails permissionDetails = new PermissionDetails();\n            permissionDetails.setName(role.getCode());\n            return permissionDetails;\n        }).collect(Collectors.toList()));\n        UserContextThreadLocal.setUserContextDetails(userContextDetails);\n        return true;\n    }\n```\n#### 2.2. domain层\n添加Role和UserRole相关的实体类、存储类、领域服务类，这里不贴代码了，比较简单。\n添加RoleEnum枚举类\n```java\npackage com.yang.domain.common;\n\npublic enum RoleEnum {\n    STUDENT(1, \"STUDENT\"),\n    COUNSELOR(2, \"COUNSELOR\"),\n    ACADEMIC_ADMINISTRATOR(3, \"ACADEMIC_ADMINISTRATOR\");\n\n    private int code;\n\n    private String description;\n\n    RoleEnum(int code, String description) {\n        this.code = code;\n        this.description = description;\n    }\n\n    public int getCode() {\n        return this.code;\n    }\n\n    public String getDescription() {\n        return this.description;\n    }\n\n    public RoleEnum findByCode(int code) {\n        for (RoleEnum role : values()) {\n            if (role.getCode() == code) {\n                return role;\n            }\n        }\n        return null;\n    }\n}\n```\n修改user实体类，加上权限列表属性\n```java\n@Data\n@TableName(value = \"t_user\")\npublic class User implements Serializable {\n    @TableId(type = IdType.AUTO)\n    private Integer id;\n\n    private String username;\n\n    private String password;\n\n    private String salt;\n\n    // 是否冻结 0未冻结 1已冻结\n    private Integer freeze;\n\n    private Date createTime;\n\n    private Date updateTime;\n\n    @TableField(exist = false)\n    private Map<String, String> featuresMap;\n\n    private String features;\n\n    @TableField(exist = false)\n    private List<Role> roles;\n}\n```\n修改userRepository，在获取用户的时候，填充用户的权限信息\n```java\n@Repository\npublic class UserRepository implements IUserRepository {\n    @Autowired\n    private UserMapper userMapper;\n\n    @Autowired\n    private IUserRoleRepository userRoleRepository;\n\n    @Autowired\n    private IRoleRepository roleRepository;\n\n    private static final int UN_FREEZE = 0;\n    private static final int FREEZE = 1;\n\n    @Override\n    public boolean saveUser(User user) {\n        user.setCreateTime(new Date());\n        user.setUpdateTime(new Date());\n        user.setFreeze(UN_FREEZE);\n        user.setFeaturesMap(new HashMap<>());\n        user.setFeatures(JSONObject.toJSONString(user.getFeaturesMap()));\n        return userMapper.insert(user) > 0;\n    }\n\n    @Override\n    public User findByUsernameAndPassword(String username, String password) {\n        LambdaQueryWrapper<User> queryWrapper = new LambdaQueryWrapper<>();\n        queryWrapper.eq(User::getUsername, username);\n        queryWrapper.eq(User::getPassword, password);\n        User user = userMapper.selectOne(queryWrapper);\n        if (user != null) {\n            user.setRoles(findRoleByUserId(user.getId()));\n        }\n        return user;\n    }\n\n    @Override\n    public User findByUsername(String username) {\n        LambdaQueryWrapper<User> queryWrapper = new LambdaQueryWrapper<>();\n        queryWrapper.eq(User::getUsername, username);\n        User user = userMapper.selectOne(queryWrapper);\n        if (user != null) {\n            user.setRoles(findRoleByUserId(user.getId()));\n        }\n        return user;\n    }\n\n    @Override\n    public User findById(Integer id) {\n        User user = userMapper.selectById(id);\n        if (user != null) {\n            user.setRoles(findRoleByUserId(user.getId()));\n        }\n        return user;\n    }\n\n    @Override\n    public boolean updateUser(User user) {\n        user.setUpdateTime(new Date());\n        return userMapper.updateById(user) > 0;\n    }\n\n    private List<Role> findRoleByUserId(Integer userId) {\n        List<UserRole> userRoles = userRoleRepository.findUserRoleByUserId(userId);\n        if (CollectionUtils.isEmpty(userRoles)) {\n            return new ArrayList<>();\n        }\n        List<Integer> roleIdList = userRoles.stream().map(UserRole::getRoleId)\n                .distinct().collect(Collectors.toList());\n        return roleRepository.findRoleInIds(roleIdList);\n    }\n}\n```\n#### 2.3. application层\n修改用户注册接口,添加用户之后，插入一条用户权限记录。\n```java\n  public User register(RegisterUserRequest request) {\n        User user = userService.register(request);\n\n        Integer roleId = request.getRoleId();\n        if (roleId == null || roleService.findById(roleId) == null) {\n            roleId = RoleEnum.STUDENT.getCode();\n        }\n        \n        UserRole userRole = new UserRole();\n        userRole.setUserId(user.getId());\n        userRole.setRoleId(roleId);\n        \n        userRoleService.save(userRole);\n        return user;\n    }\n```\n在登录的时候，生成token时，将权限信息作为payloads的一部分，修改UserApplicationService的login方法：\n```java\n  public UserLoginDTO login(LoginUserRequest request) {\n        User user = userService.login(request);\n        if (user == null) {\n            throw new BusinessException(ResultCode.LOGIN_FAILED);\n        }\n        // 生成token\n        UserLoginDTO userLoginDTO = new UserLoginDTO();\n        userLoginDTO.setUser(user);\n\n        JwtTokenGenerateRequest jwtGenerateRequest = userLoginConvertor.convert2JwtTokenGenerateRequest(user);\n        String token = jwtTokenService.generateJwtToken(jwtGenerateRequest);\n        userLoginDTO.setToken(token);\n\n        UserContextDetails userContextDetails = userLoginConvertor.convert2UserContextDetails(user);\n        // token存储到redis\n        redisUtils.setKey(\"token:\" + token, userContextDetails, jwtGenerateRequest.getExpireTime());\n        return userLoginDTO;\n    }\n```\n将和UserDetailsContext相关的转化，收敛到UserLoginConvertor，方便维护\n```java\n@Component\npublic class UserLoginConvertor {\n    @Autowired\n    private JwtTokenProperty jwtTokenProperty;\n\n    public JwtTokenGenerateRequest convert2JwtTokenGenerateRequest(User user) {\n        JwtTokenGenerateRequest request = new JwtTokenGenerateRequest();\n        request.setSubject(user.getId().toString());\n        request.setExpireTime(jwtTokenProperty.getExpire());\n        request.setSecret(jwtTokenProperty.getSecret());\n        request.setPayLoads(convert2Payloads(user));\n\n        return request;\n    }\n\n    private Map<String, String> convert2Payloads(User user) {\n        Map<String, String> payloads = new HashMap<>();\n        payloads.put(\"username\", user.getUsername());\n        payloads.put(\"id\", user.getId().toString());\n        payloads.put(\"salt\", user.getSalt());\n        payloads.put(\"roles\", JSONObject.toJSONString(user.getRoles()));\n        return payloads;\n    }\n\n    public UserContextDetails convert2UserContextDetails(User user) {\n        UserContextDetails userContextDetails = new UserContextDetails();\n        userContextDetails.setId(user.getId());\n        userContextDetails.setUsername(user.getUsername());\n        userContextDetails.setExtendMap(convert2Payloads(user));\n        userContextDetails.setPermissionDetails(user.getRoles().stream().map(role -> {\n            PermissionDetails permissionDetails = new PermissionDetails();\n            permissionDetails.setName(role.getCode());\n            return permissionDetails;\n        }).collect(Collectors.toList()));\n        return userContextDetails;\n    }\n\n}\n```\n#### 2.4. 测试\n我们调用注册接口，分别添加张三、李四、王五的信息，他们分别是学生、辅导员、教务员，测试结果如下：\n{% asset_img 4.png %}\n{% asset_img 5.png %}\n调用登录接口，然后查看对应的redis内容，可以看到确实有权限信息\n{% asset_img 6.png %}\n### 3. 基于注解的鉴权\n对于不同的角色，其权限一般是不同的，以请假为例，当学生因为某些原因不能上学时，可以请假，而请假一般需要有辅导员或教务员批准，因此，学生有请假的权限，教务员和辅导员有审批假条的权限。\n#### 3.1. infrastructure层\n首先，添加一个权限注解\n```java\n@Documented\n@Retention(value = RetentionPolicy.RUNTIME)\n@Target(value = ElementType.METHOD)\npublic @interface Permission {\n    String[] code();\n}\n```\n然后添加一个切面类，解析该注解中，要求的权限，然后获取用户上下文，根据用户上下文中的权限，来判断是否有符合的，如果都不符合，那么抛出权限不足的异常。\n```java\npackage com.yang.infrastructure.auth.aspect;\n\nimport com.yang.infrastructure.auth.PermissionDetails;\nimport com.yang.infrastructure.auth.UserContextDetails;\nimport com.yang.infrastructure.auth.UserContextThreadLocal;\nimport com.yang.infrastructure.auth.annotations.Permission;\nimport com.yang.infrastructure.common.ResultCode;\nimport com.yang.infrastructure.exception.BusinessException;\nimport org.aspectj.lang.JoinPoint;\nimport org.aspectj.lang.annotation.Aspect;\nimport org.aspectj.lang.annotation.Before;\nimport org.aspectj.lang.annotation.Pointcut;\nimport org.aspectj.lang.reflect.MethodSignature;\nimport org.springframework.stereotype.Component;\nimport org.springframework.util.CollectionUtils;\n\nimport java.util.List;\nimport java.util.Set;\nimport java.util.stream.Collectors;\n\n@Aspect\n@Component\npublic class PermissionAspect {\n    @Pointcut(value = \"@annotation(com.yang.infrastructure.auth.annotations.Permission)\")\n    public void pointCut() {\n    }\n\n    @Before(value = \"pointCut()\")\n    public void beforeAdvice(JoinPoint joinPoint) {\n        MethodSignature methodSignature = (MethodSignature) joinPoint.getSignature();\n        Permission permission = methodSignature.getMethod().getAnnotation(Permission.class);\n\n        // 获取注解中要求的权限\n        String[] code = permission.code();\n        if (code == null || code.length == 0) {\n            // 没有指定权限时，不进行拦截\n            return;\n        }\n\n        // 指定权限，先获取当前用户的权限列表\n        UserContextDetails userContextDetails = UserContextThreadLocal.get();\n        List<PermissionDetails> permissionDetails = userContextDetails.getPermissionDetails();\n\n        if (CollectionUtils.isEmpty(permissionDetails)) {\n            throw new BusinessException(ResultCode.ACCESS_DENIED);\n        }\n\n        Set<String> ownPermissionSet = permissionDetails.stream().map(PermissionDetails::getName)\n                .collect(Collectors.toSet());\n\n        boolean containPermission = false;\n        for (String c : code) {\n            if (ownPermissionSet.contains(c)) {\n                containPermission = true;\n                break;\n            }\n        }\n\n        if (!containPermission) {\n            throw new BusinessException(ResultCode.ACCESS_DENIED);\n        }\n    }\n}\n```\n#### 3.2. controller层\ncontroller层中，添加一个LeaveController类，用于测试，其中，学生可以提出申请离校，而辅导员和教务员可以进行审批。\n```java\npackage com.yang.controller;\n\nimport com.yang.controller.request.leave.AskForLeaveRequest;\nimport com.yang.infrastructure.auth.UserContextDetails;\nimport com.yang.infrastructure.auth.UserContextThreadLocal;\nimport com.yang.infrastructure.auth.annotations.Permission;\nimport com.yang.infrastructure.common.Response;\nimport org.springframework.web.bind.annotation.PostMapping;\nimport org.springframework.web.bind.annotation.RequestBody;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\n@RestController\n@RequestMapping(value = \"/leave\")\npublic class LeaveController {\n\n    @PostMapping(\"/apply\")\n    @Permission(code = \"STUDENT\")\n    public Response applyForLeave(@RequestBody AskForLeaveRequest request) {\n        UserContextDetails userContextDetails = UserContextThreadLocal.get();\n        System.out.println(userContextDetails.getUsername() + \"申请离校，离校时间：\" + request.getLeaveDays()\n        + \"，离校原因：\" + request.getReason());\n        System.out.println(userContextDetails.getPermissionDetails());\n        return Response.success();\n    }\n\n    @PostMapping(\"/approval\")\n    @Permission(code = {\"COUNSELOR\", \"ACADEMIC_ADMINISTRATOR\"})\n    public Response approvalLeave() {\n        UserContextDetails userContextDetails = UserContextThreadLocal.get();\n        System.out.println(userContextDetails.getUsername() + \"审批离校申请\");\n        System.out.println(userContextDetails.getPermissionDetails());\n        return Response.success();\n    }\n}\n```\n#### 3.3. 测试\n首先用学生账号登录，然后分别访问/apply接口和/approval接口\n{% asset_img 7.png %}\n{% asset_img 8.png %}\n然后登录一个辅导员账号，再次访问/apply和/approval接口\n{% asset_img 9.png %}\n{% asset_img 10.png %}\n我们查看控制台，也能看到该账户的权限确实是辅导员权限\n{% asset_img 11.png %}\n### 4. 基于拦截器的鉴权\n虽然上述基于注解的鉴权，能完成用户的权限校验，但是如果我们有很多个接口，他们的权限要求都是一样的，比如以/student开头地请求，都需要学生权限，如果是基于注解地鉴权，我们就需要对这些接口一个一个地加上注解，进行鉴权，这样很麻烦。因此，我们可以使用拦截器，对符合某些路径地请求，进行权限校验。\n#### 4.1. infrastructure层\n我们在基础设施层，加上对应地拦截器，拦截用户请求，并解析出请求地路径，根据路径，找出该路径需要匹配地权限，最后再根据用户上下文，判断是否满足该权限。\n```java\npackage com.yang.infrastructure.auth.interceptors;\n\nimport com.yang.infrastructure.auth.PermissionDetails;\nimport com.yang.infrastructure.auth.UserContextDetails;\nimport com.yang.infrastructure.auth.UserContextThreadLocal;\nimport com.yang.infrastructure.common.ResultCode;\nimport com.yang.infrastructure.exception.BusinessException;\nimport org.apache.commons.lang3.StringUtils;\nimport org.springframework.util.CollectionUtils;\nimport org.springframework.web.servlet.HandlerInterceptor;\n\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Optional;\nimport java.util.Set;\nimport java.util.concurrent.ConcurrentHashMap;\nimport java.util.function.Function;\nimport java.util.stream.Collectors;\n\npublic class PermissionVerifyInterceptor implements HandlerInterceptor {\n    private Map<String, String> uri2PermissionMap = new ConcurrentHashMap<>();\n\n    public void addPermission(String permission, String... uris) {\n        if (uris.length > 0) {\n            for (String url : uris) {\n                uri2PermissionMap.put(url, permission);\n            }\n        }\n    }\n\n    public void addPermission(String permission, List<String> uriList) {\n        if (CollectionUtils.isEmpty(uriList)) {\n            return;\n        }\n        for (String uri : uriList) {\n            uri2PermissionMap.put(uri, permission);\n        }\n    }\n\n    @Override\n    public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception {\n        String requestURI = request.getRequestURI();\n\n        String permission = getPermissionOfUri(requestURI);\n        if (StringUtils.isEmpty(permission)) {\n            // 没有权限要求，直接通过\n            return true;\n        }\n        UserContextDetails userContextDetails = UserContextThreadLocal.get();\n        List<PermissionDetails> permissionDetails = userContextDetails.getPermissionDetails();\n        if (CollectionUtils.isEmpty(permissionDetails)) {\n            throw new BusinessException(ResultCode.ACCESS_DENIED);\n        }\n\n        long count = permissionDetails.stream()\n                .filter(permissionDetail -> permissionDetail.getName().equals(permission))\n                .count();\n        if (count <= 0) {\n            throw new BusinessException(ResultCode.ACCESS_DENIED);\n        }\n        return true;\n    }\n\n    private String getPermissionOfUri(String uri) {\n        Set<String> keySet = this.uri2PermissionMap.keySet();\n        if (keySet.contains(uri)) {\n            return uri2PermissionMap.get(uri);\n        }\n\n        Map<String, String> map = keySet.stream().filter(key -> key.endsWith(\"*\"))\n                .collect(Collectors.toMap(key -> {\n                    int index = key.lastIndexOf(\"*\");\n                    String tempKey = key.substring(0, index);\n                    return tempKey;\n                }, Function.identity()));\n\n        for (String key : map.keySet()) {\n            if (uri.startsWith(key)) {\n                String originKey = map.get(key);\n                return uri2PermissionMap.get(originKey);\n            }\n        }\n        return null;\n    }\n}\n```\n然后将这个拦截器，添加到配置中\n```java\npackage com.yang.infrastructure.configuration;\n\nimport com.yang.infrastructure.auth.interceptors.JwtTokenVerifyInterceptor;\nimport com.yang.infrastructure.auth.interceptors.PermissionVerifyInterceptor;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.web.servlet.config.annotation.InterceptorRegistry;\nimport org.springframework.web.servlet.config.annotation.WebMvcConfigurer;\n\n@Configuration\npublic class WebMvcConfiguration implements WebMvcConfigurer {\n\n    @Override\n    public void addInterceptors(InterceptorRegistry registry) {\n        registry.addInterceptor(new JwtTokenVerifyInterceptor())\n                .addPathPatterns(\"/**\") // 拦截所有请求\n                .excludePathPatterns(\"/user/login\", \"/user/register\"); // 排除登录、注册接口\n\n        PermissionVerifyInterceptor permissionVerifyInterceptor = new PermissionVerifyInterceptor();\n        permissionVerifyInterceptor.addPermission(\"STUDENT\", \"/student/needPermission\");\n        permissionVerifyInterceptor.addPermission(\"COUNSELOR\", \"/counselor/*\");\n\n        registry.addInterceptor(permissionVerifyInterceptor)\n                .addPathPatterns(\"/**\") // 拦截所有请求\n                .excludePathPatterns(\"/user/login\", \"/user/register\"); // 排除登录、注册接口\n    }\n}\n```\n#### 4.2. 测试\n首先，使用辅导员的token，依次访问/student/needPermission, /student/notPermission和/counselor的相关接口\n{% asset_img 12.png %}\n{% asset_img 13.png %}\n{% asset_img 14.png %}\n然后使用普通学生的token，依次访问/student/needPermission, /student/notPermission和/counselor的相关接口\n{% asset_img 15.png %}\n{% asset_img 16.png %}\n{% asset_img 17.png %}\n","slug":"鉴权学习","published":1,"updated":"2024-04-03T07:23:20.854Z","comments":1,"layout":"post","photos":[],"_id":"clujhemkw0000esvl9dij87qe","content":"<h3 id=\"1-引言\"><a href=\"#1-引言\" class=\"headerlink\" title=\"1. 引言\"></a>1. 引言</h3><p>鉴权指身份认证授权，在计算机安全领域，是指验证一个实体的身份并决定这个实体是否被授权执行某项任务的过程，简单来说，就是确认一个用户或者系统是否拥有进行某项操作的权权利。<br>鉴权通常包含两个方面：<br>1）身份认证（Authentication）：确定一个用户或实体是否为其声称的个体。这通常通过用户名和密码、生物特征识别、智能卡等方式实现。我们在上一篇提到的内容，就属于身份认证的相关内容。<br>2）授权（Authorization）：在身份被确认之后，鉴权系统还会检查该用户是否有权限执行特定的操作。例如，一个用户可能有权访问某个系统，但没有权限修改数据。<br>我们在上一章登录、注册学习的基础上，添加一个权限表和一个用户权限表。</p>\n<img src=\"/2024/04/03/%E9%89%B4%E6%9D%83%E5%AD%A6%E4%B9%A0/1.png\" class=\"\">\n<img src=\"/2024/04/03/%E9%89%B4%E6%9D%83%E5%AD%A6%E4%B9%A0/2.png\" class=\"\">\n<p>以大学为例，一般有学生、辅导员、教务员、讲师、教授等身份，如下图所示：</p>\n<img src=\"/2024/04/03/%E9%89%B4%E6%9D%83%E5%AD%A6%E4%B9%A0/3.png\" class=\"\">\n<h3 id=\"2-修改用户注册\"><a href=\"#2-修改用户注册\" class=\"headerlink\" title=\"2. 修改用户注册\"></a>2. 修改用户注册</h3><p>对于每个用户，都应该有对应的权限，用户和权限的关系，可以是一对多的，比如在大学内，一个人，既可以是学生，也可以是辅导员，比如兼职辅导员；既可以是讲师，也可以是班主任。因此，我们修改用户注册接口，在新增用户的同时，添加用户的权限。</p>\n<h4 id=\"2-1-infrastructure层\"><a href=\"#2-1-infrastructure层\" class=\"headerlink\" title=\"2.1. infrastructure层\"></a>2.1. infrastructure层</h4><p>修改UserContextDetails类，加上用户权限信息</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Data</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">UserContextDetails</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">Serializable</span> &#123;<br>    <span class=\"hljs-keyword\">private</span> Integer id;<br><br>    <span class=\"hljs-keyword\">private</span> String token;<br><br>    <span class=\"hljs-keyword\">private</span> String username;<br><br>    <span class=\"hljs-keyword\">private</span> Map&lt;String, String&gt; extendMap = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">HashMap</span>&lt;&gt;();<br><br>    <span class=\"hljs-comment\">// 权限</span><br>    <span class=\"hljs-keyword\">private</span> List&lt;PermissionDetails&gt; permissionDetails = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayList</span>&lt;&gt;();<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>修改JwtTokenVerifyInterceptor类，在获取UserContextDetails时，填充用户权限信息</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Override</span><br>   <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">preHandle</span><span class=\"hljs-params\">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class=\"hljs-keyword\">throws</span> Exception &#123;<br>       <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">token</span> <span class=\"hljs-operator\">=</span> request.getHeader(<span class=\"hljs-string\">&quot;token&quot;</span>);<br>       <span class=\"hljs-keyword\">if</span> (StringUtils.isEmpty(token)) &#123;<br>           <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">BusinessException</span>(ResultCode.TOKEN_FAILED);<br>       &#125;<br>       <span class=\"hljs-type\">Object</span> <span class=\"hljs-variable\">userDetails</span> <span class=\"hljs-operator\">=</span> getUserDetailsFromRedis(token);<br>       <span class=\"hljs-keyword\">if</span> (userDetails != <span class=\"hljs-literal\">null</span>) &#123; <span class=\"hljs-comment\">// 判断该token在Redis是否存在</span><br>           <span class=\"hljs-comment\">// 设置线程上下文</span><br>           System.out.println(<span class=\"hljs-string\">&quot;设置线程上下文====================&quot;</span>);<br>           <span class=\"hljs-type\">UserContextDetails</span> <span class=\"hljs-variable\">userContextDetails</span> <span class=\"hljs-operator\">=</span> (UserContextDetails) userDetails;<br>           userContextDetails.setToken(token);<br>           UserContextThreadLocal.setUserContextDetails(userContextDetails);<br>           <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;<br>       &#125;<br><br>       <span class=\"hljs-type\">JwtTokenService</span> <span class=\"hljs-variable\">jwtTokenService</span> <span class=\"hljs-operator\">=</span> SpringContextUtils.getBeanOfType(JwtTokenService.class);<br>       <span class=\"hljs-type\">JwtTokenProperty</span> <span class=\"hljs-variable\">jwtTokenProperty</span> <span class=\"hljs-operator\">=</span> SpringContextUtils.getBeanOfType(JwtTokenProperty.class);<br><br>       <span class=\"hljs-type\">JwtTokenVerifyRequest</span> <span class=\"hljs-variable\">jwtTokenVerifyRequest</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">JwtTokenVerifyRequest</span>();<br>       jwtTokenVerifyRequest.setToken(token);<br>       jwtTokenVerifyRequest.setSecret(jwtTokenProperty.getSecret());<br><br>       <span class=\"hljs-type\">JwtTokenVerifyDTO</span> <span class=\"hljs-variable\">verify</span> <span class=\"hljs-operator\">=</span> jwtTokenService.verify(jwtTokenVerifyRequest);<br>       <span class=\"hljs-keyword\">if</span> (verify == <span class=\"hljs-literal\">null</span>) &#123;<br>           <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">BusinessException</span>(ResultCode.TOKEN_FAILED);<br>       &#125;<br><br>       <span class=\"hljs-comment\">// 设置线程上下文</span><br>       System.out.println(<span class=\"hljs-string\">&quot;设置线程上下文====================&quot;</span>);<br>       <span class=\"hljs-type\">UserContextDetails</span> <span class=\"hljs-variable\">userContextDetails</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">UserContextDetails</span>();<br>       userContextDetails.setId(Integer.valueOf(verify.getSubject()));<br>       userContextDetails.setToken(token);<br>       userContextDetails.setUsername(verify.getPayLoads().get(<span class=\"hljs-string\">&quot;username&quot;</span>));<br>       userContextDetails.setExtendMap(verify.getPayLoads());<br>       List&lt;Role&gt; roles = JSONObject.parseArray(verify.getPayLoads().get(<span class=\"hljs-string\">&quot;roles&quot;</span>), Role.class);<br>       userContextDetails.setPermissionDetails(roles.stream().map(role -&gt; &#123;<br>           <span class=\"hljs-type\">PermissionDetails</span> <span class=\"hljs-variable\">permissionDetails</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">PermissionDetails</span>();<br>           permissionDetails.setName(role.getCode());<br>           <span class=\"hljs-keyword\">return</span> permissionDetails;<br>       &#125;).collect(Collectors.toList()));<br>       UserContextThreadLocal.setUserContextDetails(userContextDetails);<br>       <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;<br>   &#125;<br></code></pre></td></tr></table></figure>\n<h4 id=\"2-2-domain层\"><a href=\"#2-2-domain层\" class=\"headerlink\" title=\"2.2. domain层\"></a>2.2. domain层</h4><p>添加Role和UserRole相关的实体类、存储类、领域服务类，这里不贴代码了，比较简单。<br>添加RoleEnum枚举类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> com.yang.domain.common;<br><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">enum</span> <span class=\"hljs-title class_\">RoleEnum</span> &#123;<br>    STUDENT(<span class=\"hljs-number\">1</span>, <span class=\"hljs-string\">&quot;STUDENT&quot;</span>),<br>    COUNSELOR(<span class=\"hljs-number\">2</span>, <span class=\"hljs-string\">&quot;COUNSELOR&quot;</span>),<br>    ACADEMIC_ADMINISTRATOR(<span class=\"hljs-number\">3</span>, <span class=\"hljs-string\">&quot;ACADEMIC_ADMINISTRATOR&quot;</span>);<br><br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">int</span> code;<br><br>    <span class=\"hljs-keyword\">private</span> String description;<br><br>    RoleEnum(<span class=\"hljs-type\">int</span> code, String description) &#123;<br>        <span class=\"hljs-built_in\">this</span>.code = code;<br>        <span class=\"hljs-built_in\">this</span>.description = description;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">getCode</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>.code;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title function_\">getDescription</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>.description;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> RoleEnum <span class=\"hljs-title function_\">findByCode</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> code)</span> &#123;<br>        <span class=\"hljs-keyword\">for</span> (RoleEnum role : values()) &#123;<br>            <span class=\"hljs-keyword\">if</span> (role.getCode() == code) &#123;<br>                <span class=\"hljs-keyword\">return</span> role;<br>            &#125;<br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>修改user实体类，加上权限列表属性</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Data</span><br><span class=\"hljs-meta\">@TableName(value = &quot;t_user&quot;)</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">User</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">Serializable</span> &#123;<br>    <span class=\"hljs-meta\">@TableId(type = IdType.AUTO)</span><br>    <span class=\"hljs-keyword\">private</span> Integer id;<br><br>    <span class=\"hljs-keyword\">private</span> String username;<br><br>    <span class=\"hljs-keyword\">private</span> String password;<br><br>    <span class=\"hljs-keyword\">private</span> String salt;<br><br>    <span class=\"hljs-comment\">// 是否冻结 0未冻结 1已冻结</span><br>    <span class=\"hljs-keyword\">private</span> Integer freeze;<br><br>    <span class=\"hljs-keyword\">private</span> Date createTime;<br><br>    <span class=\"hljs-keyword\">private</span> Date updateTime;<br><br>    <span class=\"hljs-meta\">@TableField(exist = false)</span><br>    <span class=\"hljs-keyword\">private</span> Map&lt;String, String&gt; featuresMap;<br><br>    <span class=\"hljs-keyword\">private</span> String features;<br><br>    <span class=\"hljs-meta\">@TableField(exist = false)</span><br>    <span class=\"hljs-keyword\">private</span> List&lt;Role&gt; roles;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>修改userRepository，在获取用户的时候，填充用户的权限信息</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Repository</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">UserRepository</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">IUserRepository</span> &#123;<br>    <span class=\"hljs-meta\">@Autowired</span><br>    <span class=\"hljs-keyword\">private</span> UserMapper userMapper;<br><br>    <span class=\"hljs-meta\">@Autowired</span><br>    <span class=\"hljs-keyword\">private</span> IUserRoleRepository userRoleRepository;<br><br>    <span class=\"hljs-meta\">@Autowired</span><br>    <span class=\"hljs-keyword\">private</span> IRoleRepository roleRepository;<br><br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">UN_FREEZE</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>;<br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">FREEZE</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">1</span>;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">saveUser</span><span class=\"hljs-params\">(User user)</span> &#123;<br>        user.setCreateTime(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Date</span>());<br>        user.setUpdateTime(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Date</span>());<br>        user.setFreeze(UN_FREEZE);<br>        user.setFeaturesMap(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">HashMap</span>&lt;&gt;());<br>        user.setFeatures(JSONObject.toJSONString(user.getFeaturesMap()));<br>        <span class=\"hljs-keyword\">return</span> userMapper.insert(user) &gt; <span class=\"hljs-number\">0</span>;<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> User <span class=\"hljs-title function_\">findByUsernameAndPassword</span><span class=\"hljs-params\">(String username, String password)</span> &#123;<br>        LambdaQueryWrapper&lt;User&gt; queryWrapper = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">LambdaQueryWrapper</span>&lt;&gt;();<br>        queryWrapper.eq(User::getUsername, username);<br>        queryWrapper.eq(User::getPassword, password);<br>        <span class=\"hljs-type\">User</span> <span class=\"hljs-variable\">user</span> <span class=\"hljs-operator\">=</span> userMapper.selectOne(queryWrapper);<br>        <span class=\"hljs-keyword\">if</span> (user != <span class=\"hljs-literal\">null</span>) &#123;<br>            user.setRoles(findRoleByUserId(user.getId()));<br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> user;<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> User <span class=\"hljs-title function_\">findByUsername</span><span class=\"hljs-params\">(String username)</span> &#123;<br>        LambdaQueryWrapper&lt;User&gt; queryWrapper = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">LambdaQueryWrapper</span>&lt;&gt;();<br>        queryWrapper.eq(User::getUsername, username);<br>        <span class=\"hljs-type\">User</span> <span class=\"hljs-variable\">user</span> <span class=\"hljs-operator\">=</span> userMapper.selectOne(queryWrapper);<br>        <span class=\"hljs-keyword\">if</span> (user != <span class=\"hljs-literal\">null</span>) &#123;<br>            user.setRoles(findRoleByUserId(user.getId()));<br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> user;<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> User <span class=\"hljs-title function_\">findById</span><span class=\"hljs-params\">(Integer id)</span> &#123;<br>        <span class=\"hljs-type\">User</span> <span class=\"hljs-variable\">user</span> <span class=\"hljs-operator\">=</span> userMapper.selectById(id);<br>        <span class=\"hljs-keyword\">if</span> (user != <span class=\"hljs-literal\">null</span>) &#123;<br>            user.setRoles(findRoleByUserId(user.getId()));<br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> user;<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">updateUser</span><span class=\"hljs-params\">(User user)</span> &#123;<br>        user.setUpdateTime(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Date</span>());<br>        <span class=\"hljs-keyword\">return</span> userMapper.updateById(user) &gt; <span class=\"hljs-number\">0</span>;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">private</span> List&lt;Role&gt; <span class=\"hljs-title function_\">findRoleByUserId</span><span class=\"hljs-params\">(Integer userId)</span> &#123;<br>        List&lt;UserRole&gt; userRoles = userRoleRepository.findUserRoleByUserId(userId);<br>        <span class=\"hljs-keyword\">if</span> (CollectionUtils.isEmpty(userRoles)) &#123;<br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayList</span>&lt;&gt;();<br>        &#125;<br>        List&lt;Integer&gt; roleIdList = userRoles.stream().map(UserRole::getRoleId)<br>                .distinct().collect(Collectors.toList());<br>        <span class=\"hljs-keyword\">return</span> roleRepository.findRoleInIds(roleIdList);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h4 id=\"2-3-application层\"><a href=\"#2-3-application层\" class=\"headerlink\" title=\"2.3. application层\"></a>2.3. application层</h4><p>修改用户注册接口,添加用户之后，插入一条用户权限记录。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> User <span class=\"hljs-title function_\">register</span><span class=\"hljs-params\">(RegisterUserRequest request)</span> &#123;<br>      <span class=\"hljs-type\">User</span> <span class=\"hljs-variable\">user</span> <span class=\"hljs-operator\">=</span> userService.register(request);<br><br>      <span class=\"hljs-type\">Integer</span> <span class=\"hljs-variable\">roleId</span> <span class=\"hljs-operator\">=</span> request.getRoleId();<br>      <span class=\"hljs-keyword\">if</span> (roleId == <span class=\"hljs-literal\">null</span> || roleService.findById(roleId) == <span class=\"hljs-literal\">null</span>) &#123;<br>          roleId = RoleEnum.STUDENT.getCode();<br>      &#125;<br>      <br>      <span class=\"hljs-type\">UserRole</span> <span class=\"hljs-variable\">userRole</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">UserRole</span>();<br>      userRole.setUserId(user.getId());<br>      userRole.setRoleId(roleId);<br>      <br>      userRoleService.save(userRole);<br>      <span class=\"hljs-keyword\">return</span> user;<br>  &#125;<br></code></pre></td></tr></table></figure>\n<p>在登录的时候，生成token时，将权限信息作为payloads的一部分，修改UserApplicationService的login方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> UserLoginDTO <span class=\"hljs-title function_\">login</span><span class=\"hljs-params\">(LoginUserRequest request)</span> &#123;<br>      <span class=\"hljs-type\">User</span> <span class=\"hljs-variable\">user</span> <span class=\"hljs-operator\">=</span> userService.login(request);<br>      <span class=\"hljs-keyword\">if</span> (user == <span class=\"hljs-literal\">null</span>) &#123;<br>          <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">BusinessException</span>(ResultCode.LOGIN_FAILED);<br>      &#125;<br>      <span class=\"hljs-comment\">// 生成token</span><br>      <span class=\"hljs-type\">UserLoginDTO</span> <span class=\"hljs-variable\">userLoginDTO</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">UserLoginDTO</span>();<br>      userLoginDTO.setUser(user);<br><br>      <span class=\"hljs-type\">JwtTokenGenerateRequest</span> <span class=\"hljs-variable\">jwtGenerateRequest</span> <span class=\"hljs-operator\">=</span> userLoginConvertor.convert2JwtTokenGenerateRequest(user);<br>      <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">token</span> <span class=\"hljs-operator\">=</span> jwtTokenService.generateJwtToken(jwtGenerateRequest);<br>      userLoginDTO.setToken(token);<br><br>      <span class=\"hljs-type\">UserContextDetails</span> <span class=\"hljs-variable\">userContextDetails</span> <span class=\"hljs-operator\">=</span> userLoginConvertor.convert2UserContextDetails(user);<br>      <span class=\"hljs-comment\">// token存储到redis</span><br>      redisUtils.setKey(<span class=\"hljs-string\">&quot;token:&quot;</span> + token, userContextDetails, jwtGenerateRequest.getExpireTime());<br>      <span class=\"hljs-keyword\">return</span> userLoginDTO;<br>  &#125;<br></code></pre></td></tr></table></figure>\n<p>将和UserDetailsContext相关的转化，收敛到UserLoginConvertor，方便维护</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Component</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">UserLoginConvertor</span> &#123;<br>    <span class=\"hljs-meta\">@Autowired</span><br>    <span class=\"hljs-keyword\">private</span> JwtTokenProperty jwtTokenProperty;<br><br>    <span class=\"hljs-keyword\">public</span> JwtTokenGenerateRequest <span class=\"hljs-title function_\">convert2JwtTokenGenerateRequest</span><span class=\"hljs-params\">(User user)</span> &#123;<br>        <span class=\"hljs-type\">JwtTokenGenerateRequest</span> <span class=\"hljs-variable\">request</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">JwtTokenGenerateRequest</span>();<br>        request.setSubject(user.getId().toString());<br>        request.setExpireTime(jwtTokenProperty.getExpire());<br>        request.setSecret(jwtTokenProperty.getSecret());<br>        request.setPayLoads(convert2Payloads(user));<br><br>        <span class=\"hljs-keyword\">return</span> request;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">private</span> Map&lt;String, String&gt; <span class=\"hljs-title function_\">convert2Payloads</span><span class=\"hljs-params\">(User user)</span> &#123;<br>        Map&lt;String, String&gt; payloads = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">HashMap</span>&lt;&gt;();<br>        payloads.put(<span class=\"hljs-string\">&quot;username&quot;</span>, user.getUsername());<br>        payloads.put(<span class=\"hljs-string\">&quot;id&quot;</span>, user.getId().toString());<br>        payloads.put(<span class=\"hljs-string\">&quot;salt&quot;</span>, user.getSalt());<br>        payloads.put(<span class=\"hljs-string\">&quot;roles&quot;</span>, JSONObject.toJSONString(user.getRoles()));<br>        <span class=\"hljs-keyword\">return</span> payloads;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> UserContextDetails <span class=\"hljs-title function_\">convert2UserContextDetails</span><span class=\"hljs-params\">(User user)</span> &#123;<br>        <span class=\"hljs-type\">UserContextDetails</span> <span class=\"hljs-variable\">userContextDetails</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">UserContextDetails</span>();<br>        userContextDetails.setId(user.getId());<br>        userContextDetails.setUsername(user.getUsername());<br>        userContextDetails.setExtendMap(convert2Payloads(user));<br>        userContextDetails.setPermissionDetails(user.getRoles().stream().map(role -&gt; &#123;<br>            <span class=\"hljs-type\">PermissionDetails</span> <span class=\"hljs-variable\">permissionDetails</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">PermissionDetails</span>();<br>            permissionDetails.setName(role.getCode());<br>            <span class=\"hljs-keyword\">return</span> permissionDetails;<br>        &#125;).collect(Collectors.toList()));<br>        <span class=\"hljs-keyword\">return</span> userContextDetails;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>\n<h4 id=\"2-4-测试\"><a href=\"#2-4-测试\" class=\"headerlink\" title=\"2.4. 测试\"></a>2.4. 测试</h4><p>我们调用注册接口，分别添加张三、李四、王五的信息，他们分别是学生、辅导员、教务员，测试结果如下：</p>\n<img src=\"/2024/04/03/%E9%89%B4%E6%9D%83%E5%AD%A6%E4%B9%A0/4.png\" class=\"\">\n<img src=\"/2024/04/03/%E9%89%B4%E6%9D%83%E5%AD%A6%E4%B9%A0/5.png\" class=\"\">\n<p>调用登录接口，然后查看对应的redis内容，可以看到确实有权限信息</p>\n<img src=\"/2024/04/03/%E9%89%B4%E6%9D%83%E5%AD%A6%E4%B9%A0/6.png\" class=\"\">\n<h3 id=\"3-基于注解的鉴权\"><a href=\"#3-基于注解的鉴权\" class=\"headerlink\" title=\"3. 基于注解的鉴权\"></a>3. 基于注解的鉴权</h3><p>对于不同的角色，其权限一般是不同的，以请假为例，当学生因为某些原因不能上学时，可以请假，而请假一般需要有辅导员或教务员批准，因此，学生有请假的权限，教务员和辅导员有审批假条的权限。</p>\n<h4 id=\"3-1-infrastructure层\"><a href=\"#3-1-infrastructure层\" class=\"headerlink\" title=\"3.1. infrastructure层\"></a>3.1. infrastructure层</h4><p>首先，添加一个权限注解</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Documented</span><br><span class=\"hljs-meta\">@Retention(value = RetentionPolicy.RUNTIME)</span><br><span class=\"hljs-meta\">@Target(value = ElementType.METHOD)</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-meta\">@interface</span> Permission &#123;<br>    String[] code();<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>然后添加一个切面类，解析该注解中，要求的权限，然后获取用户上下文，根据用户上下文中的权限，来判断是否有符合的，如果都不符合，那么抛出权限不足的异常。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> com.yang.infrastructure.auth.aspect;<br><br><span class=\"hljs-keyword\">import</span> com.yang.infrastructure.auth.PermissionDetails;<br><span class=\"hljs-keyword\">import</span> com.yang.infrastructure.auth.UserContextDetails;<br><span class=\"hljs-keyword\">import</span> com.yang.infrastructure.auth.UserContextThreadLocal;<br><span class=\"hljs-keyword\">import</span> com.yang.infrastructure.auth.annotations.Permission;<br><span class=\"hljs-keyword\">import</span> com.yang.infrastructure.common.ResultCode;<br><span class=\"hljs-keyword\">import</span> com.yang.infrastructure.exception.BusinessException;<br><span class=\"hljs-keyword\">import</span> org.aspectj.lang.JoinPoint;<br><span class=\"hljs-keyword\">import</span> org.aspectj.lang.annotation.Aspect;<br><span class=\"hljs-keyword\">import</span> org.aspectj.lang.annotation.Before;<br><span class=\"hljs-keyword\">import</span> org.aspectj.lang.annotation.Pointcut;<br><span class=\"hljs-keyword\">import</span> org.aspectj.lang.reflect.MethodSignature;<br><span class=\"hljs-keyword\">import</span> org.springframework.stereotype.Component;<br><span class=\"hljs-keyword\">import</span> org.springframework.util.CollectionUtils;<br><br><span class=\"hljs-keyword\">import</span> java.util.List;<br><span class=\"hljs-keyword\">import</span> java.util.Set;<br><span class=\"hljs-keyword\">import</span> java.util.stream.Collectors;<br><br><span class=\"hljs-meta\">@Aspect</span><br><span class=\"hljs-meta\">@Component</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">PermissionAspect</span> &#123;<br>    <span class=\"hljs-meta\">@Pointcut(value = &quot;@annotation(com.yang.infrastructure.auth.annotations.Permission)&quot;)</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">pointCut</span><span class=\"hljs-params\">()</span> &#123;<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Before(value = &quot;pointCut()&quot;)</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">beforeAdvice</span><span class=\"hljs-params\">(JoinPoint joinPoint)</span> &#123;<br>        <span class=\"hljs-type\">MethodSignature</span> <span class=\"hljs-variable\">methodSignature</span> <span class=\"hljs-operator\">=</span> (MethodSignature) joinPoint.getSignature();<br>        <span class=\"hljs-type\">Permission</span> <span class=\"hljs-variable\">permission</span> <span class=\"hljs-operator\">=</span> methodSignature.getMethod().getAnnotation(Permission.class);<br><br>        <span class=\"hljs-comment\">// 获取注解中要求的权限</span><br>        String[] code = permission.code();<br>        <span class=\"hljs-keyword\">if</span> (code == <span class=\"hljs-literal\">null</span> || code.length == <span class=\"hljs-number\">0</span>) &#123;<br>            <span class=\"hljs-comment\">// 没有指定权限时，不进行拦截</span><br>            <span class=\"hljs-keyword\">return</span>;<br>        &#125;<br><br>        <span class=\"hljs-comment\">// 指定权限，先获取当前用户的权限列表</span><br>        <span class=\"hljs-type\">UserContextDetails</span> <span class=\"hljs-variable\">userContextDetails</span> <span class=\"hljs-operator\">=</span> UserContextThreadLocal.get();<br>        List&lt;PermissionDetails&gt; permissionDetails = userContextDetails.getPermissionDetails();<br><br>        <span class=\"hljs-keyword\">if</span> (CollectionUtils.isEmpty(permissionDetails)) &#123;<br>            <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">BusinessException</span>(ResultCode.ACCESS_DENIED);<br>        &#125;<br><br>        Set&lt;String&gt; ownPermissionSet = permissionDetails.stream().map(PermissionDetails::getName)<br>                .collect(Collectors.toSet());<br><br>        <span class=\"hljs-type\">boolean</span> <span class=\"hljs-variable\">containPermission</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-literal\">false</span>;<br>        <span class=\"hljs-keyword\">for</span> (String c : code) &#123;<br>            <span class=\"hljs-keyword\">if</span> (ownPermissionSet.contains(c)) &#123;<br>                containPermission = <span class=\"hljs-literal\">true</span>;<br>                <span class=\"hljs-keyword\">break</span>;<br>            &#125;<br>        &#125;<br><br>        <span class=\"hljs-keyword\">if</span> (!containPermission) &#123;<br>            <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">BusinessException</span>(ResultCode.ACCESS_DENIED);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h4 id=\"3-2-controller层\"><a href=\"#3-2-controller层\" class=\"headerlink\" title=\"3.2. controller层\"></a>3.2. controller层</h4><p>controller层中，添加一个LeaveController类，用于测试，其中，学生可以提出申请离校，而辅导员和教务员可以进行审批。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> com.yang.controller;<br><br><span class=\"hljs-keyword\">import</span> com.yang.controller.request.leave.AskForLeaveRequest;<br><span class=\"hljs-keyword\">import</span> com.yang.infrastructure.auth.UserContextDetails;<br><span class=\"hljs-keyword\">import</span> com.yang.infrastructure.auth.UserContextThreadLocal;<br><span class=\"hljs-keyword\">import</span> com.yang.infrastructure.auth.annotations.Permission;<br><span class=\"hljs-keyword\">import</span> com.yang.infrastructure.common.Response;<br><span class=\"hljs-keyword\">import</span> org.springframework.web.bind.annotation.PostMapping;<br><span class=\"hljs-keyword\">import</span> org.springframework.web.bind.annotation.RequestBody;<br><span class=\"hljs-keyword\">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><span class=\"hljs-keyword\">import</span> org.springframework.web.bind.annotation.RestController;<br><br><span class=\"hljs-meta\">@RestController</span><br><span class=\"hljs-meta\">@RequestMapping(value = &quot;/leave&quot;)</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">LeaveController</span> &#123;<br><br>    <span class=\"hljs-meta\">@PostMapping(&quot;/apply&quot;)</span><br>    <span class=\"hljs-meta\">@Permission(code = &quot;STUDENT&quot;)</span><br>    <span class=\"hljs-keyword\">public</span> Response <span class=\"hljs-title function_\">applyForLeave</span><span class=\"hljs-params\">(<span class=\"hljs-meta\">@RequestBody</span> AskForLeaveRequest request)</span> &#123;<br>        <span class=\"hljs-type\">UserContextDetails</span> <span class=\"hljs-variable\">userContextDetails</span> <span class=\"hljs-operator\">=</span> UserContextThreadLocal.get();<br>        System.out.println(userContextDetails.getUsername() + <span class=\"hljs-string\">&quot;申请离校，离校时间：&quot;</span> + request.getLeaveDays()<br>        + <span class=\"hljs-string\">&quot;，离校原因：&quot;</span> + request.getReason());<br>        System.out.println(userContextDetails.getPermissionDetails());<br>        <span class=\"hljs-keyword\">return</span> Response.success();<br>    &#125;<br><br>    <span class=\"hljs-meta\">@PostMapping(&quot;/approval&quot;)</span><br>    <span class=\"hljs-meta\">@Permission(code = &#123;&quot;COUNSELOR&quot;, &quot;ACADEMIC_ADMINISTRATOR&quot;&#125;)</span><br>    <span class=\"hljs-keyword\">public</span> Response <span class=\"hljs-title function_\">approvalLeave</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-type\">UserContextDetails</span> <span class=\"hljs-variable\">userContextDetails</span> <span class=\"hljs-operator\">=</span> UserContextThreadLocal.get();<br>        System.out.println(userContextDetails.getUsername() + <span class=\"hljs-string\">&quot;审批离校申请&quot;</span>);<br>        System.out.println(userContextDetails.getPermissionDetails());<br>        <span class=\"hljs-keyword\">return</span> Response.success();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h4 id=\"3-3-测试\"><a href=\"#3-3-测试\" class=\"headerlink\" title=\"3.3. 测试\"></a>3.3. 测试</h4><p>首先用学生账号登录，然后分别访问&#x2F;apply接口和&#x2F;approval接口</p>\n<img src=\"/2024/04/03/%E9%89%B4%E6%9D%83%E5%AD%A6%E4%B9%A0/7.png\" class=\"\">\n<img src=\"/2024/04/03/%E9%89%B4%E6%9D%83%E5%AD%A6%E4%B9%A0/8.png\" class=\"\">\n<p>然后登录一个辅导员账号，再次访问&#x2F;apply和&#x2F;approval接口</p>\n<img src=\"/2024/04/03/%E9%89%B4%E6%9D%83%E5%AD%A6%E4%B9%A0/9.png\" class=\"\">\n<img src=\"/2024/04/03/%E9%89%B4%E6%9D%83%E5%AD%A6%E4%B9%A0/10.png\" class=\"\">\n<p>我们查看控制台，也能看到该账户的权限确实是辅导员权限</p>\n<img src=\"/2024/04/03/%E9%89%B4%E6%9D%83%E5%AD%A6%E4%B9%A0/11.png\" class=\"\">\n<h3 id=\"4-基于拦截器的鉴权\"><a href=\"#4-基于拦截器的鉴权\" class=\"headerlink\" title=\"4. 基于拦截器的鉴权\"></a>4. 基于拦截器的鉴权</h3><p>虽然上述基于注解的鉴权，能完成用户的权限校验，但是如果我们有很多个接口，他们的权限要求都是一样的，比如以&#x2F;student开头地请求，都需要学生权限，如果是基于注解地鉴权，我们就需要对这些接口一个一个地加上注解，进行鉴权，这样很麻烦。因此，我们可以使用拦截器，对符合某些路径地请求，进行权限校验。</p>\n<h4 id=\"4-1-infrastructure层\"><a href=\"#4-1-infrastructure层\" class=\"headerlink\" title=\"4.1. infrastructure层\"></a>4.1. infrastructure层</h4><p>我们在基础设施层，加上对应地拦截器，拦截用户请求，并解析出请求地路径，根据路径，找出该路径需要匹配地权限，最后再根据用户上下文，判断是否满足该权限。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> com.yang.infrastructure.auth.interceptors;<br><br><span class=\"hljs-keyword\">import</span> com.yang.infrastructure.auth.PermissionDetails;<br><span class=\"hljs-keyword\">import</span> com.yang.infrastructure.auth.UserContextDetails;<br><span class=\"hljs-keyword\">import</span> com.yang.infrastructure.auth.UserContextThreadLocal;<br><span class=\"hljs-keyword\">import</span> com.yang.infrastructure.common.ResultCode;<br><span class=\"hljs-keyword\">import</span> com.yang.infrastructure.exception.BusinessException;<br><span class=\"hljs-keyword\">import</span> org.apache.commons.lang3.StringUtils;<br><span class=\"hljs-keyword\">import</span> org.springframework.util.CollectionUtils;<br><span class=\"hljs-keyword\">import</span> org.springframework.web.servlet.HandlerInterceptor;<br><br><span class=\"hljs-keyword\">import</span> javax.servlet.http.HttpServletRequest;<br><span class=\"hljs-keyword\">import</span> javax.servlet.http.HttpServletResponse;<br><span class=\"hljs-keyword\">import</span> java.util.List;<br><span class=\"hljs-keyword\">import</span> java.util.Map;<br><span class=\"hljs-keyword\">import</span> java.util.Optional;<br><span class=\"hljs-keyword\">import</span> java.util.Set;<br><span class=\"hljs-keyword\">import</span> java.util.concurrent.ConcurrentHashMap;<br><span class=\"hljs-keyword\">import</span> java.util.function.Function;<br><span class=\"hljs-keyword\">import</span> java.util.stream.Collectors;<br><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">PermissionVerifyInterceptor</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">HandlerInterceptor</span> &#123;<br>    <span class=\"hljs-keyword\">private</span> Map&lt;String, String&gt; uri2PermissionMap = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ConcurrentHashMap</span>&lt;&gt;();<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">addPermission</span><span class=\"hljs-params\">(String permission, String... uris)</span> &#123;<br>        <span class=\"hljs-keyword\">if</span> (uris.length &gt; <span class=\"hljs-number\">0</span>) &#123;<br>            <span class=\"hljs-keyword\">for</span> (String url : uris) &#123;<br>                uri2PermissionMap.put(url, permission);<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">addPermission</span><span class=\"hljs-params\">(String permission, List&lt;String&gt; uriList)</span> &#123;<br>        <span class=\"hljs-keyword\">if</span> (CollectionUtils.isEmpty(uriList)) &#123;<br>            <span class=\"hljs-keyword\">return</span>;<br>        &#125;<br>        <span class=\"hljs-keyword\">for</span> (String uri : uriList) &#123;<br>            uri2PermissionMap.put(uri, permission);<br>        &#125;<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">preHandle</span><span class=\"hljs-params\">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class=\"hljs-keyword\">throws</span> Exception &#123;<br>        <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">requestURI</span> <span class=\"hljs-operator\">=</span> request.getRequestURI();<br><br>        <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">permission</span> <span class=\"hljs-operator\">=</span> getPermissionOfUri(requestURI);<br>        <span class=\"hljs-keyword\">if</span> (StringUtils.isEmpty(permission)) &#123;<br>            <span class=\"hljs-comment\">// 没有权限要求，直接通过</span><br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;<br>        &#125;<br>        <span class=\"hljs-type\">UserContextDetails</span> <span class=\"hljs-variable\">userContextDetails</span> <span class=\"hljs-operator\">=</span> UserContextThreadLocal.get();<br>        List&lt;PermissionDetails&gt; permissionDetails = userContextDetails.getPermissionDetails();<br>        <span class=\"hljs-keyword\">if</span> (CollectionUtils.isEmpty(permissionDetails)) &#123;<br>            <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">BusinessException</span>(ResultCode.ACCESS_DENIED);<br>        &#125;<br><br>        <span class=\"hljs-type\">long</span> <span class=\"hljs-variable\">count</span> <span class=\"hljs-operator\">=</span> permissionDetails.stream()<br>                .filter(permissionDetail -&gt; permissionDetail.getName().equals(permission))<br>                .count();<br>        <span class=\"hljs-keyword\">if</span> (count &lt;= <span class=\"hljs-number\">0</span>) &#123;<br>            <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">BusinessException</span>(ResultCode.ACCESS_DENIED);<br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">private</span> String <span class=\"hljs-title function_\">getPermissionOfUri</span><span class=\"hljs-params\">(String uri)</span> &#123;<br>        Set&lt;String&gt; keySet = <span class=\"hljs-built_in\">this</span>.uri2PermissionMap.keySet();<br>        <span class=\"hljs-keyword\">if</span> (keySet.contains(uri)) &#123;<br>            <span class=\"hljs-keyword\">return</span> uri2PermissionMap.get(uri);<br>        &#125;<br><br>        Map&lt;String, String&gt; map = keySet.stream().filter(key -&gt; key.endsWith(<span class=\"hljs-string\">&quot;*&quot;</span>))<br>                .collect(Collectors.toMap(key -&gt; &#123;<br>                    <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">index</span> <span class=\"hljs-operator\">=</span> key.lastIndexOf(<span class=\"hljs-string\">&quot;*&quot;</span>);<br>                    <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">tempKey</span> <span class=\"hljs-operator\">=</span> key.substring(<span class=\"hljs-number\">0</span>, index);<br>                    <span class=\"hljs-keyword\">return</span> tempKey;<br>                &#125;, Function.identity()));<br><br>        <span class=\"hljs-keyword\">for</span> (String key : map.keySet()) &#123;<br>            <span class=\"hljs-keyword\">if</span> (uri.startsWith(key)) &#123;<br>                <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">originKey</span> <span class=\"hljs-operator\">=</span> map.get(key);<br>                <span class=\"hljs-keyword\">return</span> uri2PermissionMap.get(originKey);<br>            &#125;<br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>然后将这个拦截器，添加到配置中</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> com.yang.infrastructure.configuration;<br><br><span class=\"hljs-keyword\">import</span> com.yang.infrastructure.auth.interceptors.JwtTokenVerifyInterceptor;<br><span class=\"hljs-keyword\">import</span> com.yang.infrastructure.auth.interceptors.PermissionVerifyInterceptor;<br><span class=\"hljs-keyword\">import</span> org.springframework.context.annotation.Configuration;<br><span class=\"hljs-keyword\">import</span> org.springframework.web.servlet.config.annotation.InterceptorRegistry;<br><span class=\"hljs-keyword\">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurer;<br><br><span class=\"hljs-meta\">@Configuration</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">WebMvcConfiguration</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">WebMvcConfigurer</span> &#123;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">addInterceptors</span><span class=\"hljs-params\">(InterceptorRegistry registry)</span> &#123;<br>        registry.addInterceptor(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">JwtTokenVerifyInterceptor</span>())<br>                .addPathPatterns(<span class=\"hljs-string\">&quot;/**&quot;</span>) <span class=\"hljs-comment\">// 拦截所有请求</span><br>                .excludePathPatterns(<span class=\"hljs-string\">&quot;/user/login&quot;</span>, <span class=\"hljs-string\">&quot;/user/register&quot;</span>); <span class=\"hljs-comment\">// 排除登录、注册接口</span><br><br>        <span class=\"hljs-type\">PermissionVerifyInterceptor</span> <span class=\"hljs-variable\">permissionVerifyInterceptor</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">PermissionVerifyInterceptor</span>();<br>        permissionVerifyInterceptor.addPermission(<span class=\"hljs-string\">&quot;STUDENT&quot;</span>, <span class=\"hljs-string\">&quot;/student/needPermission&quot;</span>);<br>        permissionVerifyInterceptor.addPermission(<span class=\"hljs-string\">&quot;COUNSELOR&quot;</span>, <span class=\"hljs-string\">&quot;/counselor/*&quot;</span>);<br><br>        registry.addInterceptor(permissionVerifyInterceptor)<br>                .addPathPatterns(<span class=\"hljs-string\">&quot;/**&quot;</span>) <span class=\"hljs-comment\">// 拦截所有请求</span><br>                .excludePathPatterns(<span class=\"hljs-string\">&quot;/user/login&quot;</span>, <span class=\"hljs-string\">&quot;/user/register&quot;</span>); <span class=\"hljs-comment\">// 排除登录、注册接口</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h4 id=\"4-2-测试\"><a href=\"#4-2-测试\" class=\"headerlink\" title=\"4.2. 测试\"></a>4.2. 测试</h4><p>首先，使用辅导员的token，依次访问&#x2F;student&#x2F;needPermission, &#x2F;student&#x2F;notPermission和&#x2F;counselor的相关接口</p>\n<img src=\"/2024/04/03/%E9%89%B4%E6%9D%83%E5%AD%A6%E4%B9%A0/12.png\" class=\"\">\n<img src=\"/2024/04/03/%E9%89%B4%E6%9D%83%E5%AD%A6%E4%B9%A0/13.png\" class=\"\">\n<img src=\"/2024/04/03/%E9%89%B4%E6%9D%83%E5%AD%A6%E4%B9%A0/14.png\" class=\"\">\n<p>然后使用普通学生的token，依次访问&#x2F;student&#x2F;needPermission, &#x2F;student&#x2F;notPermission和&#x2F;counselor的相关接口</p>\n<img src=\"/2024/04/03/%E9%89%B4%E6%9D%83%E5%AD%A6%E4%B9%A0/15.png\" class=\"\">\n<img src=\"/2024/04/03/%E9%89%B4%E6%9D%83%E5%AD%A6%E4%B9%A0/16.png\" class=\"\">\n<img src=\"/2024/04/03/%E9%89%B4%E6%9D%83%E5%AD%A6%E4%B9%A0/17.png\" class=\"\">\n","excerpt":"","more":"<h3 id=\"1-引言\"><a href=\"#1-引言\" class=\"headerlink\" title=\"1. 引言\"></a>1. 引言</h3><p>鉴权指身份认证授权，在计算机安全领域，是指验证一个实体的身份并决定这个实体是否被授权执行某项任务的过程，简单来说，就是确认一个用户或者系统是否拥有进行某项操作的权权利。<br>鉴权通常包含两个方面：<br>1）身份认证（Authentication）：确定一个用户或实体是否为其声称的个体。这通常通过用户名和密码、生物特征识别、智能卡等方式实现。我们在上一篇提到的内容，就属于身份认证的相关内容。<br>2）授权（Authorization）：在身份被确认之后，鉴权系统还会检查该用户是否有权限执行特定的操作。例如，一个用户可能有权访问某个系统，但没有权限修改数据。<br>我们在上一章登录、注册学习的基础上，添加一个权限表和一个用户权限表。</p>\n<img src=\"/2024/04/03/%E9%89%B4%E6%9D%83%E5%AD%A6%E4%B9%A0/1.png\" class=\"\">\n<img src=\"/2024/04/03/%E9%89%B4%E6%9D%83%E5%AD%A6%E4%B9%A0/2.png\" class=\"\">\n<p>以大学为例，一般有学生、辅导员、教务员、讲师、教授等身份，如下图所示：</p>\n<img src=\"/2024/04/03/%E9%89%B4%E6%9D%83%E5%AD%A6%E4%B9%A0/3.png\" class=\"\">\n<h3 id=\"2-修改用户注册\"><a href=\"#2-修改用户注册\" class=\"headerlink\" title=\"2. 修改用户注册\"></a>2. 修改用户注册</h3><p>对于每个用户，都应该有对应的权限，用户和权限的关系，可以是一对多的，比如在大学内，一个人，既可以是学生，也可以是辅导员，比如兼职辅导员；既可以是讲师，也可以是班主任。因此，我们修改用户注册接口，在新增用户的同时，添加用户的权限。</p>\n<h4 id=\"2-1-infrastructure层\"><a href=\"#2-1-infrastructure层\" class=\"headerlink\" title=\"2.1. infrastructure层\"></a>2.1. infrastructure层</h4><p>修改UserContextDetails类，加上用户权限信息</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Data</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">UserContextDetails</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">Serializable</span> &#123;<br>    <span class=\"hljs-keyword\">private</span> Integer id;<br><br>    <span class=\"hljs-keyword\">private</span> String token;<br><br>    <span class=\"hljs-keyword\">private</span> String username;<br><br>    <span class=\"hljs-keyword\">private</span> Map&lt;String, String&gt; extendMap = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">HashMap</span>&lt;&gt;();<br><br>    <span class=\"hljs-comment\">// 权限</span><br>    <span class=\"hljs-keyword\">private</span> List&lt;PermissionDetails&gt; permissionDetails = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayList</span>&lt;&gt;();<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>修改JwtTokenVerifyInterceptor类，在获取UserContextDetails时，填充用户权限信息</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Override</span><br>   <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">preHandle</span><span class=\"hljs-params\">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class=\"hljs-keyword\">throws</span> Exception &#123;<br>       <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">token</span> <span class=\"hljs-operator\">=</span> request.getHeader(<span class=\"hljs-string\">&quot;token&quot;</span>);<br>       <span class=\"hljs-keyword\">if</span> (StringUtils.isEmpty(token)) &#123;<br>           <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">BusinessException</span>(ResultCode.TOKEN_FAILED);<br>       &#125;<br>       <span class=\"hljs-type\">Object</span> <span class=\"hljs-variable\">userDetails</span> <span class=\"hljs-operator\">=</span> getUserDetailsFromRedis(token);<br>       <span class=\"hljs-keyword\">if</span> (userDetails != <span class=\"hljs-literal\">null</span>) &#123; <span class=\"hljs-comment\">// 判断该token在Redis是否存在</span><br>           <span class=\"hljs-comment\">// 设置线程上下文</span><br>           System.out.println(<span class=\"hljs-string\">&quot;设置线程上下文====================&quot;</span>);<br>           <span class=\"hljs-type\">UserContextDetails</span> <span class=\"hljs-variable\">userContextDetails</span> <span class=\"hljs-operator\">=</span> (UserContextDetails) userDetails;<br>           userContextDetails.setToken(token);<br>           UserContextThreadLocal.setUserContextDetails(userContextDetails);<br>           <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;<br>       &#125;<br><br>       <span class=\"hljs-type\">JwtTokenService</span> <span class=\"hljs-variable\">jwtTokenService</span> <span class=\"hljs-operator\">=</span> SpringContextUtils.getBeanOfType(JwtTokenService.class);<br>       <span class=\"hljs-type\">JwtTokenProperty</span> <span class=\"hljs-variable\">jwtTokenProperty</span> <span class=\"hljs-operator\">=</span> SpringContextUtils.getBeanOfType(JwtTokenProperty.class);<br><br>       <span class=\"hljs-type\">JwtTokenVerifyRequest</span> <span class=\"hljs-variable\">jwtTokenVerifyRequest</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">JwtTokenVerifyRequest</span>();<br>       jwtTokenVerifyRequest.setToken(token);<br>       jwtTokenVerifyRequest.setSecret(jwtTokenProperty.getSecret());<br><br>       <span class=\"hljs-type\">JwtTokenVerifyDTO</span> <span class=\"hljs-variable\">verify</span> <span class=\"hljs-operator\">=</span> jwtTokenService.verify(jwtTokenVerifyRequest);<br>       <span class=\"hljs-keyword\">if</span> (verify == <span class=\"hljs-literal\">null</span>) &#123;<br>           <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">BusinessException</span>(ResultCode.TOKEN_FAILED);<br>       &#125;<br><br>       <span class=\"hljs-comment\">// 设置线程上下文</span><br>       System.out.println(<span class=\"hljs-string\">&quot;设置线程上下文====================&quot;</span>);<br>       <span class=\"hljs-type\">UserContextDetails</span> <span class=\"hljs-variable\">userContextDetails</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">UserContextDetails</span>();<br>       userContextDetails.setId(Integer.valueOf(verify.getSubject()));<br>       userContextDetails.setToken(token);<br>       userContextDetails.setUsername(verify.getPayLoads().get(<span class=\"hljs-string\">&quot;username&quot;</span>));<br>       userContextDetails.setExtendMap(verify.getPayLoads());<br>       List&lt;Role&gt; roles = JSONObject.parseArray(verify.getPayLoads().get(<span class=\"hljs-string\">&quot;roles&quot;</span>), Role.class);<br>       userContextDetails.setPermissionDetails(roles.stream().map(role -&gt; &#123;<br>           <span class=\"hljs-type\">PermissionDetails</span> <span class=\"hljs-variable\">permissionDetails</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">PermissionDetails</span>();<br>           permissionDetails.setName(role.getCode());<br>           <span class=\"hljs-keyword\">return</span> permissionDetails;<br>       &#125;).collect(Collectors.toList()));<br>       UserContextThreadLocal.setUserContextDetails(userContextDetails);<br>       <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;<br>   &#125;<br></code></pre></td></tr></table></figure>\n<h4 id=\"2-2-domain层\"><a href=\"#2-2-domain层\" class=\"headerlink\" title=\"2.2. domain层\"></a>2.2. domain层</h4><p>添加Role和UserRole相关的实体类、存储类、领域服务类，这里不贴代码了，比较简单。<br>添加RoleEnum枚举类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> com.yang.domain.common;<br><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">enum</span> <span class=\"hljs-title class_\">RoleEnum</span> &#123;<br>    STUDENT(<span class=\"hljs-number\">1</span>, <span class=\"hljs-string\">&quot;STUDENT&quot;</span>),<br>    COUNSELOR(<span class=\"hljs-number\">2</span>, <span class=\"hljs-string\">&quot;COUNSELOR&quot;</span>),<br>    ACADEMIC_ADMINISTRATOR(<span class=\"hljs-number\">3</span>, <span class=\"hljs-string\">&quot;ACADEMIC_ADMINISTRATOR&quot;</span>);<br><br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">int</span> code;<br><br>    <span class=\"hljs-keyword\">private</span> String description;<br><br>    RoleEnum(<span class=\"hljs-type\">int</span> code, String description) &#123;<br>        <span class=\"hljs-built_in\">this</span>.code = code;<br>        <span class=\"hljs-built_in\">this</span>.description = description;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">getCode</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>.code;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title function_\">getDescription</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>.description;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> RoleEnum <span class=\"hljs-title function_\">findByCode</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> code)</span> &#123;<br>        <span class=\"hljs-keyword\">for</span> (RoleEnum role : values()) &#123;<br>            <span class=\"hljs-keyword\">if</span> (role.getCode() == code) &#123;<br>                <span class=\"hljs-keyword\">return</span> role;<br>            &#125;<br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>修改user实体类，加上权限列表属性</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Data</span><br><span class=\"hljs-meta\">@TableName(value = &quot;t_user&quot;)</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">User</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">Serializable</span> &#123;<br>    <span class=\"hljs-meta\">@TableId(type = IdType.AUTO)</span><br>    <span class=\"hljs-keyword\">private</span> Integer id;<br><br>    <span class=\"hljs-keyword\">private</span> String username;<br><br>    <span class=\"hljs-keyword\">private</span> String password;<br><br>    <span class=\"hljs-keyword\">private</span> String salt;<br><br>    <span class=\"hljs-comment\">// 是否冻结 0未冻结 1已冻结</span><br>    <span class=\"hljs-keyword\">private</span> Integer freeze;<br><br>    <span class=\"hljs-keyword\">private</span> Date createTime;<br><br>    <span class=\"hljs-keyword\">private</span> Date updateTime;<br><br>    <span class=\"hljs-meta\">@TableField(exist = false)</span><br>    <span class=\"hljs-keyword\">private</span> Map&lt;String, String&gt; featuresMap;<br><br>    <span class=\"hljs-keyword\">private</span> String features;<br><br>    <span class=\"hljs-meta\">@TableField(exist = false)</span><br>    <span class=\"hljs-keyword\">private</span> List&lt;Role&gt; roles;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>修改userRepository，在获取用户的时候，填充用户的权限信息</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Repository</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">UserRepository</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">IUserRepository</span> &#123;<br>    <span class=\"hljs-meta\">@Autowired</span><br>    <span class=\"hljs-keyword\">private</span> UserMapper userMapper;<br><br>    <span class=\"hljs-meta\">@Autowired</span><br>    <span class=\"hljs-keyword\">private</span> IUserRoleRepository userRoleRepository;<br><br>    <span class=\"hljs-meta\">@Autowired</span><br>    <span class=\"hljs-keyword\">private</span> IRoleRepository roleRepository;<br><br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">UN_FREEZE</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>;<br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">FREEZE</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">1</span>;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">saveUser</span><span class=\"hljs-params\">(User user)</span> &#123;<br>        user.setCreateTime(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Date</span>());<br>        user.setUpdateTime(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Date</span>());<br>        user.setFreeze(UN_FREEZE);<br>        user.setFeaturesMap(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">HashMap</span>&lt;&gt;());<br>        user.setFeatures(JSONObject.toJSONString(user.getFeaturesMap()));<br>        <span class=\"hljs-keyword\">return</span> userMapper.insert(user) &gt; <span class=\"hljs-number\">0</span>;<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> User <span class=\"hljs-title function_\">findByUsernameAndPassword</span><span class=\"hljs-params\">(String username, String password)</span> &#123;<br>        LambdaQueryWrapper&lt;User&gt; queryWrapper = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">LambdaQueryWrapper</span>&lt;&gt;();<br>        queryWrapper.eq(User::getUsername, username);<br>        queryWrapper.eq(User::getPassword, password);<br>        <span class=\"hljs-type\">User</span> <span class=\"hljs-variable\">user</span> <span class=\"hljs-operator\">=</span> userMapper.selectOne(queryWrapper);<br>        <span class=\"hljs-keyword\">if</span> (user != <span class=\"hljs-literal\">null</span>) &#123;<br>            user.setRoles(findRoleByUserId(user.getId()));<br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> user;<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> User <span class=\"hljs-title function_\">findByUsername</span><span class=\"hljs-params\">(String username)</span> &#123;<br>        LambdaQueryWrapper&lt;User&gt; queryWrapper = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">LambdaQueryWrapper</span>&lt;&gt;();<br>        queryWrapper.eq(User::getUsername, username);<br>        <span class=\"hljs-type\">User</span> <span class=\"hljs-variable\">user</span> <span class=\"hljs-operator\">=</span> userMapper.selectOne(queryWrapper);<br>        <span class=\"hljs-keyword\">if</span> (user != <span class=\"hljs-literal\">null</span>) &#123;<br>            user.setRoles(findRoleByUserId(user.getId()));<br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> user;<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> User <span class=\"hljs-title function_\">findById</span><span class=\"hljs-params\">(Integer id)</span> &#123;<br>        <span class=\"hljs-type\">User</span> <span class=\"hljs-variable\">user</span> <span class=\"hljs-operator\">=</span> userMapper.selectById(id);<br>        <span class=\"hljs-keyword\">if</span> (user != <span class=\"hljs-literal\">null</span>) &#123;<br>            user.setRoles(findRoleByUserId(user.getId()));<br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> user;<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">updateUser</span><span class=\"hljs-params\">(User user)</span> &#123;<br>        user.setUpdateTime(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Date</span>());<br>        <span class=\"hljs-keyword\">return</span> userMapper.updateById(user) &gt; <span class=\"hljs-number\">0</span>;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">private</span> List&lt;Role&gt; <span class=\"hljs-title function_\">findRoleByUserId</span><span class=\"hljs-params\">(Integer userId)</span> &#123;<br>        List&lt;UserRole&gt; userRoles = userRoleRepository.findUserRoleByUserId(userId);<br>        <span class=\"hljs-keyword\">if</span> (CollectionUtils.isEmpty(userRoles)) &#123;<br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayList</span>&lt;&gt;();<br>        &#125;<br>        List&lt;Integer&gt; roleIdList = userRoles.stream().map(UserRole::getRoleId)<br>                .distinct().collect(Collectors.toList());<br>        <span class=\"hljs-keyword\">return</span> roleRepository.findRoleInIds(roleIdList);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h4 id=\"2-3-application层\"><a href=\"#2-3-application层\" class=\"headerlink\" title=\"2.3. application层\"></a>2.3. application层</h4><p>修改用户注册接口,添加用户之后，插入一条用户权限记录。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> User <span class=\"hljs-title function_\">register</span><span class=\"hljs-params\">(RegisterUserRequest request)</span> &#123;<br>      <span class=\"hljs-type\">User</span> <span class=\"hljs-variable\">user</span> <span class=\"hljs-operator\">=</span> userService.register(request);<br><br>      <span class=\"hljs-type\">Integer</span> <span class=\"hljs-variable\">roleId</span> <span class=\"hljs-operator\">=</span> request.getRoleId();<br>      <span class=\"hljs-keyword\">if</span> (roleId == <span class=\"hljs-literal\">null</span> || roleService.findById(roleId) == <span class=\"hljs-literal\">null</span>) &#123;<br>          roleId = RoleEnum.STUDENT.getCode();<br>      &#125;<br>      <br>      <span class=\"hljs-type\">UserRole</span> <span class=\"hljs-variable\">userRole</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">UserRole</span>();<br>      userRole.setUserId(user.getId());<br>      userRole.setRoleId(roleId);<br>      <br>      userRoleService.save(userRole);<br>      <span class=\"hljs-keyword\">return</span> user;<br>  &#125;<br></code></pre></td></tr></table></figure>\n<p>在登录的时候，生成token时，将权限信息作为payloads的一部分，修改UserApplicationService的login方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> UserLoginDTO <span class=\"hljs-title function_\">login</span><span class=\"hljs-params\">(LoginUserRequest request)</span> &#123;<br>      <span class=\"hljs-type\">User</span> <span class=\"hljs-variable\">user</span> <span class=\"hljs-operator\">=</span> userService.login(request);<br>      <span class=\"hljs-keyword\">if</span> (user == <span class=\"hljs-literal\">null</span>) &#123;<br>          <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">BusinessException</span>(ResultCode.LOGIN_FAILED);<br>      &#125;<br>      <span class=\"hljs-comment\">// 生成token</span><br>      <span class=\"hljs-type\">UserLoginDTO</span> <span class=\"hljs-variable\">userLoginDTO</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">UserLoginDTO</span>();<br>      userLoginDTO.setUser(user);<br><br>      <span class=\"hljs-type\">JwtTokenGenerateRequest</span> <span class=\"hljs-variable\">jwtGenerateRequest</span> <span class=\"hljs-operator\">=</span> userLoginConvertor.convert2JwtTokenGenerateRequest(user);<br>      <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">token</span> <span class=\"hljs-operator\">=</span> jwtTokenService.generateJwtToken(jwtGenerateRequest);<br>      userLoginDTO.setToken(token);<br><br>      <span class=\"hljs-type\">UserContextDetails</span> <span class=\"hljs-variable\">userContextDetails</span> <span class=\"hljs-operator\">=</span> userLoginConvertor.convert2UserContextDetails(user);<br>      <span class=\"hljs-comment\">// token存储到redis</span><br>      redisUtils.setKey(<span class=\"hljs-string\">&quot;token:&quot;</span> + token, userContextDetails, jwtGenerateRequest.getExpireTime());<br>      <span class=\"hljs-keyword\">return</span> userLoginDTO;<br>  &#125;<br></code></pre></td></tr></table></figure>\n<p>将和UserDetailsContext相关的转化，收敛到UserLoginConvertor，方便维护</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Component</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">UserLoginConvertor</span> &#123;<br>    <span class=\"hljs-meta\">@Autowired</span><br>    <span class=\"hljs-keyword\">private</span> JwtTokenProperty jwtTokenProperty;<br><br>    <span class=\"hljs-keyword\">public</span> JwtTokenGenerateRequest <span class=\"hljs-title function_\">convert2JwtTokenGenerateRequest</span><span class=\"hljs-params\">(User user)</span> &#123;<br>        <span class=\"hljs-type\">JwtTokenGenerateRequest</span> <span class=\"hljs-variable\">request</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">JwtTokenGenerateRequest</span>();<br>        request.setSubject(user.getId().toString());<br>        request.setExpireTime(jwtTokenProperty.getExpire());<br>        request.setSecret(jwtTokenProperty.getSecret());<br>        request.setPayLoads(convert2Payloads(user));<br><br>        <span class=\"hljs-keyword\">return</span> request;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">private</span> Map&lt;String, String&gt; <span class=\"hljs-title function_\">convert2Payloads</span><span class=\"hljs-params\">(User user)</span> &#123;<br>        Map&lt;String, String&gt; payloads = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">HashMap</span>&lt;&gt;();<br>        payloads.put(<span class=\"hljs-string\">&quot;username&quot;</span>, user.getUsername());<br>        payloads.put(<span class=\"hljs-string\">&quot;id&quot;</span>, user.getId().toString());<br>        payloads.put(<span class=\"hljs-string\">&quot;salt&quot;</span>, user.getSalt());<br>        payloads.put(<span class=\"hljs-string\">&quot;roles&quot;</span>, JSONObject.toJSONString(user.getRoles()));<br>        <span class=\"hljs-keyword\">return</span> payloads;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> UserContextDetails <span class=\"hljs-title function_\">convert2UserContextDetails</span><span class=\"hljs-params\">(User user)</span> &#123;<br>        <span class=\"hljs-type\">UserContextDetails</span> <span class=\"hljs-variable\">userContextDetails</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">UserContextDetails</span>();<br>        userContextDetails.setId(user.getId());<br>        userContextDetails.setUsername(user.getUsername());<br>        userContextDetails.setExtendMap(convert2Payloads(user));<br>        userContextDetails.setPermissionDetails(user.getRoles().stream().map(role -&gt; &#123;<br>            <span class=\"hljs-type\">PermissionDetails</span> <span class=\"hljs-variable\">permissionDetails</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">PermissionDetails</span>();<br>            permissionDetails.setName(role.getCode());<br>            <span class=\"hljs-keyword\">return</span> permissionDetails;<br>        &#125;).collect(Collectors.toList()));<br>        <span class=\"hljs-keyword\">return</span> userContextDetails;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>\n<h4 id=\"2-4-测试\"><a href=\"#2-4-测试\" class=\"headerlink\" title=\"2.4. 测试\"></a>2.4. 测试</h4><p>我们调用注册接口，分别添加张三、李四、王五的信息，他们分别是学生、辅导员、教务员，测试结果如下：</p>\n<img src=\"/2024/04/03/%E9%89%B4%E6%9D%83%E5%AD%A6%E4%B9%A0/4.png\" class=\"\">\n<img src=\"/2024/04/03/%E9%89%B4%E6%9D%83%E5%AD%A6%E4%B9%A0/5.png\" class=\"\">\n<p>调用登录接口，然后查看对应的redis内容，可以看到确实有权限信息</p>\n<img src=\"/2024/04/03/%E9%89%B4%E6%9D%83%E5%AD%A6%E4%B9%A0/6.png\" class=\"\">\n<h3 id=\"3-基于注解的鉴权\"><a href=\"#3-基于注解的鉴权\" class=\"headerlink\" title=\"3. 基于注解的鉴权\"></a>3. 基于注解的鉴权</h3><p>对于不同的角色，其权限一般是不同的，以请假为例，当学生因为某些原因不能上学时，可以请假，而请假一般需要有辅导员或教务员批准，因此，学生有请假的权限，教务员和辅导员有审批假条的权限。</p>\n<h4 id=\"3-1-infrastructure层\"><a href=\"#3-1-infrastructure层\" class=\"headerlink\" title=\"3.1. infrastructure层\"></a>3.1. infrastructure层</h4><p>首先，添加一个权限注解</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Documented</span><br><span class=\"hljs-meta\">@Retention(value = RetentionPolicy.RUNTIME)</span><br><span class=\"hljs-meta\">@Target(value = ElementType.METHOD)</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-meta\">@interface</span> Permission &#123;<br>    String[] code();<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>然后添加一个切面类，解析该注解中，要求的权限，然后获取用户上下文，根据用户上下文中的权限，来判断是否有符合的，如果都不符合，那么抛出权限不足的异常。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> com.yang.infrastructure.auth.aspect;<br><br><span class=\"hljs-keyword\">import</span> com.yang.infrastructure.auth.PermissionDetails;<br><span class=\"hljs-keyword\">import</span> com.yang.infrastructure.auth.UserContextDetails;<br><span class=\"hljs-keyword\">import</span> com.yang.infrastructure.auth.UserContextThreadLocal;<br><span class=\"hljs-keyword\">import</span> com.yang.infrastructure.auth.annotations.Permission;<br><span class=\"hljs-keyword\">import</span> com.yang.infrastructure.common.ResultCode;<br><span class=\"hljs-keyword\">import</span> com.yang.infrastructure.exception.BusinessException;<br><span class=\"hljs-keyword\">import</span> org.aspectj.lang.JoinPoint;<br><span class=\"hljs-keyword\">import</span> org.aspectj.lang.annotation.Aspect;<br><span class=\"hljs-keyword\">import</span> org.aspectj.lang.annotation.Before;<br><span class=\"hljs-keyword\">import</span> org.aspectj.lang.annotation.Pointcut;<br><span class=\"hljs-keyword\">import</span> org.aspectj.lang.reflect.MethodSignature;<br><span class=\"hljs-keyword\">import</span> org.springframework.stereotype.Component;<br><span class=\"hljs-keyword\">import</span> org.springframework.util.CollectionUtils;<br><br><span class=\"hljs-keyword\">import</span> java.util.List;<br><span class=\"hljs-keyword\">import</span> java.util.Set;<br><span class=\"hljs-keyword\">import</span> java.util.stream.Collectors;<br><br><span class=\"hljs-meta\">@Aspect</span><br><span class=\"hljs-meta\">@Component</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">PermissionAspect</span> &#123;<br>    <span class=\"hljs-meta\">@Pointcut(value = &quot;@annotation(com.yang.infrastructure.auth.annotations.Permission)&quot;)</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">pointCut</span><span class=\"hljs-params\">()</span> &#123;<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Before(value = &quot;pointCut()&quot;)</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">beforeAdvice</span><span class=\"hljs-params\">(JoinPoint joinPoint)</span> &#123;<br>        <span class=\"hljs-type\">MethodSignature</span> <span class=\"hljs-variable\">methodSignature</span> <span class=\"hljs-operator\">=</span> (MethodSignature) joinPoint.getSignature();<br>        <span class=\"hljs-type\">Permission</span> <span class=\"hljs-variable\">permission</span> <span class=\"hljs-operator\">=</span> methodSignature.getMethod().getAnnotation(Permission.class);<br><br>        <span class=\"hljs-comment\">// 获取注解中要求的权限</span><br>        String[] code = permission.code();<br>        <span class=\"hljs-keyword\">if</span> (code == <span class=\"hljs-literal\">null</span> || code.length == <span class=\"hljs-number\">0</span>) &#123;<br>            <span class=\"hljs-comment\">// 没有指定权限时，不进行拦截</span><br>            <span class=\"hljs-keyword\">return</span>;<br>        &#125;<br><br>        <span class=\"hljs-comment\">// 指定权限，先获取当前用户的权限列表</span><br>        <span class=\"hljs-type\">UserContextDetails</span> <span class=\"hljs-variable\">userContextDetails</span> <span class=\"hljs-operator\">=</span> UserContextThreadLocal.get();<br>        List&lt;PermissionDetails&gt; permissionDetails = userContextDetails.getPermissionDetails();<br><br>        <span class=\"hljs-keyword\">if</span> (CollectionUtils.isEmpty(permissionDetails)) &#123;<br>            <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">BusinessException</span>(ResultCode.ACCESS_DENIED);<br>        &#125;<br><br>        Set&lt;String&gt; ownPermissionSet = permissionDetails.stream().map(PermissionDetails::getName)<br>                .collect(Collectors.toSet());<br><br>        <span class=\"hljs-type\">boolean</span> <span class=\"hljs-variable\">containPermission</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-literal\">false</span>;<br>        <span class=\"hljs-keyword\">for</span> (String c : code) &#123;<br>            <span class=\"hljs-keyword\">if</span> (ownPermissionSet.contains(c)) &#123;<br>                containPermission = <span class=\"hljs-literal\">true</span>;<br>                <span class=\"hljs-keyword\">break</span>;<br>            &#125;<br>        &#125;<br><br>        <span class=\"hljs-keyword\">if</span> (!containPermission) &#123;<br>            <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">BusinessException</span>(ResultCode.ACCESS_DENIED);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h4 id=\"3-2-controller层\"><a href=\"#3-2-controller层\" class=\"headerlink\" title=\"3.2. controller层\"></a>3.2. controller层</h4><p>controller层中，添加一个LeaveController类，用于测试，其中，学生可以提出申请离校，而辅导员和教务员可以进行审批。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> com.yang.controller;<br><br><span class=\"hljs-keyword\">import</span> com.yang.controller.request.leave.AskForLeaveRequest;<br><span class=\"hljs-keyword\">import</span> com.yang.infrastructure.auth.UserContextDetails;<br><span class=\"hljs-keyword\">import</span> com.yang.infrastructure.auth.UserContextThreadLocal;<br><span class=\"hljs-keyword\">import</span> com.yang.infrastructure.auth.annotations.Permission;<br><span class=\"hljs-keyword\">import</span> com.yang.infrastructure.common.Response;<br><span class=\"hljs-keyword\">import</span> org.springframework.web.bind.annotation.PostMapping;<br><span class=\"hljs-keyword\">import</span> org.springframework.web.bind.annotation.RequestBody;<br><span class=\"hljs-keyword\">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><span class=\"hljs-keyword\">import</span> org.springframework.web.bind.annotation.RestController;<br><br><span class=\"hljs-meta\">@RestController</span><br><span class=\"hljs-meta\">@RequestMapping(value = &quot;/leave&quot;)</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">LeaveController</span> &#123;<br><br>    <span class=\"hljs-meta\">@PostMapping(&quot;/apply&quot;)</span><br>    <span class=\"hljs-meta\">@Permission(code = &quot;STUDENT&quot;)</span><br>    <span class=\"hljs-keyword\">public</span> Response <span class=\"hljs-title function_\">applyForLeave</span><span class=\"hljs-params\">(<span class=\"hljs-meta\">@RequestBody</span> AskForLeaveRequest request)</span> &#123;<br>        <span class=\"hljs-type\">UserContextDetails</span> <span class=\"hljs-variable\">userContextDetails</span> <span class=\"hljs-operator\">=</span> UserContextThreadLocal.get();<br>        System.out.println(userContextDetails.getUsername() + <span class=\"hljs-string\">&quot;申请离校，离校时间：&quot;</span> + request.getLeaveDays()<br>        + <span class=\"hljs-string\">&quot;，离校原因：&quot;</span> + request.getReason());<br>        System.out.println(userContextDetails.getPermissionDetails());<br>        <span class=\"hljs-keyword\">return</span> Response.success();<br>    &#125;<br><br>    <span class=\"hljs-meta\">@PostMapping(&quot;/approval&quot;)</span><br>    <span class=\"hljs-meta\">@Permission(code = &#123;&quot;COUNSELOR&quot;, &quot;ACADEMIC_ADMINISTRATOR&quot;&#125;)</span><br>    <span class=\"hljs-keyword\">public</span> Response <span class=\"hljs-title function_\">approvalLeave</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-type\">UserContextDetails</span> <span class=\"hljs-variable\">userContextDetails</span> <span class=\"hljs-operator\">=</span> UserContextThreadLocal.get();<br>        System.out.println(userContextDetails.getUsername() + <span class=\"hljs-string\">&quot;审批离校申请&quot;</span>);<br>        System.out.println(userContextDetails.getPermissionDetails());<br>        <span class=\"hljs-keyword\">return</span> Response.success();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h4 id=\"3-3-测试\"><a href=\"#3-3-测试\" class=\"headerlink\" title=\"3.3. 测试\"></a>3.3. 测试</h4><p>首先用学生账号登录，然后分别访问&#x2F;apply接口和&#x2F;approval接口</p>\n<img src=\"/2024/04/03/%E9%89%B4%E6%9D%83%E5%AD%A6%E4%B9%A0/7.png\" class=\"\">\n<img src=\"/2024/04/03/%E9%89%B4%E6%9D%83%E5%AD%A6%E4%B9%A0/8.png\" class=\"\">\n<p>然后登录一个辅导员账号，再次访问&#x2F;apply和&#x2F;approval接口</p>\n<img src=\"/2024/04/03/%E9%89%B4%E6%9D%83%E5%AD%A6%E4%B9%A0/9.png\" class=\"\">\n<img src=\"/2024/04/03/%E9%89%B4%E6%9D%83%E5%AD%A6%E4%B9%A0/10.png\" class=\"\">\n<p>我们查看控制台，也能看到该账户的权限确实是辅导员权限</p>\n<img src=\"/2024/04/03/%E9%89%B4%E6%9D%83%E5%AD%A6%E4%B9%A0/11.png\" class=\"\">\n<h3 id=\"4-基于拦截器的鉴权\"><a href=\"#4-基于拦截器的鉴权\" class=\"headerlink\" title=\"4. 基于拦截器的鉴权\"></a>4. 基于拦截器的鉴权</h3><p>虽然上述基于注解的鉴权，能完成用户的权限校验，但是如果我们有很多个接口，他们的权限要求都是一样的，比如以&#x2F;student开头地请求，都需要学生权限，如果是基于注解地鉴权，我们就需要对这些接口一个一个地加上注解，进行鉴权，这样很麻烦。因此，我们可以使用拦截器，对符合某些路径地请求，进行权限校验。</p>\n<h4 id=\"4-1-infrastructure层\"><a href=\"#4-1-infrastructure层\" class=\"headerlink\" title=\"4.1. infrastructure层\"></a>4.1. infrastructure层</h4><p>我们在基础设施层，加上对应地拦截器，拦截用户请求，并解析出请求地路径，根据路径，找出该路径需要匹配地权限，最后再根据用户上下文，判断是否满足该权限。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> com.yang.infrastructure.auth.interceptors;<br><br><span class=\"hljs-keyword\">import</span> com.yang.infrastructure.auth.PermissionDetails;<br><span class=\"hljs-keyword\">import</span> com.yang.infrastructure.auth.UserContextDetails;<br><span class=\"hljs-keyword\">import</span> com.yang.infrastructure.auth.UserContextThreadLocal;<br><span class=\"hljs-keyword\">import</span> com.yang.infrastructure.common.ResultCode;<br><span class=\"hljs-keyword\">import</span> com.yang.infrastructure.exception.BusinessException;<br><span class=\"hljs-keyword\">import</span> org.apache.commons.lang3.StringUtils;<br><span class=\"hljs-keyword\">import</span> org.springframework.util.CollectionUtils;<br><span class=\"hljs-keyword\">import</span> org.springframework.web.servlet.HandlerInterceptor;<br><br><span class=\"hljs-keyword\">import</span> javax.servlet.http.HttpServletRequest;<br><span class=\"hljs-keyword\">import</span> javax.servlet.http.HttpServletResponse;<br><span class=\"hljs-keyword\">import</span> java.util.List;<br><span class=\"hljs-keyword\">import</span> java.util.Map;<br><span class=\"hljs-keyword\">import</span> java.util.Optional;<br><span class=\"hljs-keyword\">import</span> java.util.Set;<br><span class=\"hljs-keyword\">import</span> java.util.concurrent.ConcurrentHashMap;<br><span class=\"hljs-keyword\">import</span> java.util.function.Function;<br><span class=\"hljs-keyword\">import</span> java.util.stream.Collectors;<br><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">PermissionVerifyInterceptor</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">HandlerInterceptor</span> &#123;<br>    <span class=\"hljs-keyword\">private</span> Map&lt;String, String&gt; uri2PermissionMap = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ConcurrentHashMap</span>&lt;&gt;();<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">addPermission</span><span class=\"hljs-params\">(String permission, String... uris)</span> &#123;<br>        <span class=\"hljs-keyword\">if</span> (uris.length &gt; <span class=\"hljs-number\">0</span>) &#123;<br>            <span class=\"hljs-keyword\">for</span> (String url : uris) &#123;<br>                uri2PermissionMap.put(url, permission);<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">addPermission</span><span class=\"hljs-params\">(String permission, List&lt;String&gt; uriList)</span> &#123;<br>        <span class=\"hljs-keyword\">if</span> (CollectionUtils.isEmpty(uriList)) &#123;<br>            <span class=\"hljs-keyword\">return</span>;<br>        &#125;<br>        <span class=\"hljs-keyword\">for</span> (String uri : uriList) &#123;<br>            uri2PermissionMap.put(uri, permission);<br>        &#125;<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">preHandle</span><span class=\"hljs-params\">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class=\"hljs-keyword\">throws</span> Exception &#123;<br>        <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">requestURI</span> <span class=\"hljs-operator\">=</span> request.getRequestURI();<br><br>        <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">permission</span> <span class=\"hljs-operator\">=</span> getPermissionOfUri(requestURI);<br>        <span class=\"hljs-keyword\">if</span> (StringUtils.isEmpty(permission)) &#123;<br>            <span class=\"hljs-comment\">// 没有权限要求，直接通过</span><br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;<br>        &#125;<br>        <span class=\"hljs-type\">UserContextDetails</span> <span class=\"hljs-variable\">userContextDetails</span> <span class=\"hljs-operator\">=</span> UserContextThreadLocal.get();<br>        List&lt;PermissionDetails&gt; permissionDetails = userContextDetails.getPermissionDetails();<br>        <span class=\"hljs-keyword\">if</span> (CollectionUtils.isEmpty(permissionDetails)) &#123;<br>            <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">BusinessException</span>(ResultCode.ACCESS_DENIED);<br>        &#125;<br><br>        <span class=\"hljs-type\">long</span> <span class=\"hljs-variable\">count</span> <span class=\"hljs-operator\">=</span> permissionDetails.stream()<br>                .filter(permissionDetail -&gt; permissionDetail.getName().equals(permission))<br>                .count();<br>        <span class=\"hljs-keyword\">if</span> (count &lt;= <span class=\"hljs-number\">0</span>) &#123;<br>            <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">BusinessException</span>(ResultCode.ACCESS_DENIED);<br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">private</span> String <span class=\"hljs-title function_\">getPermissionOfUri</span><span class=\"hljs-params\">(String uri)</span> &#123;<br>        Set&lt;String&gt; keySet = <span class=\"hljs-built_in\">this</span>.uri2PermissionMap.keySet();<br>        <span class=\"hljs-keyword\">if</span> (keySet.contains(uri)) &#123;<br>            <span class=\"hljs-keyword\">return</span> uri2PermissionMap.get(uri);<br>        &#125;<br><br>        Map&lt;String, String&gt; map = keySet.stream().filter(key -&gt; key.endsWith(<span class=\"hljs-string\">&quot;*&quot;</span>))<br>                .collect(Collectors.toMap(key -&gt; &#123;<br>                    <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">index</span> <span class=\"hljs-operator\">=</span> key.lastIndexOf(<span class=\"hljs-string\">&quot;*&quot;</span>);<br>                    <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">tempKey</span> <span class=\"hljs-operator\">=</span> key.substring(<span class=\"hljs-number\">0</span>, index);<br>                    <span class=\"hljs-keyword\">return</span> tempKey;<br>                &#125;, Function.identity()));<br><br>        <span class=\"hljs-keyword\">for</span> (String key : map.keySet()) &#123;<br>            <span class=\"hljs-keyword\">if</span> (uri.startsWith(key)) &#123;<br>                <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">originKey</span> <span class=\"hljs-operator\">=</span> map.get(key);<br>                <span class=\"hljs-keyword\">return</span> uri2PermissionMap.get(originKey);<br>            &#125;<br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>然后将这个拦截器，添加到配置中</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> com.yang.infrastructure.configuration;<br><br><span class=\"hljs-keyword\">import</span> com.yang.infrastructure.auth.interceptors.JwtTokenVerifyInterceptor;<br><span class=\"hljs-keyword\">import</span> com.yang.infrastructure.auth.interceptors.PermissionVerifyInterceptor;<br><span class=\"hljs-keyword\">import</span> org.springframework.context.annotation.Configuration;<br><span class=\"hljs-keyword\">import</span> org.springframework.web.servlet.config.annotation.InterceptorRegistry;<br><span class=\"hljs-keyword\">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurer;<br><br><span class=\"hljs-meta\">@Configuration</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">WebMvcConfiguration</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">WebMvcConfigurer</span> &#123;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">addInterceptors</span><span class=\"hljs-params\">(InterceptorRegistry registry)</span> &#123;<br>        registry.addInterceptor(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">JwtTokenVerifyInterceptor</span>())<br>                .addPathPatterns(<span class=\"hljs-string\">&quot;/**&quot;</span>) <span class=\"hljs-comment\">// 拦截所有请求</span><br>                .excludePathPatterns(<span class=\"hljs-string\">&quot;/user/login&quot;</span>, <span class=\"hljs-string\">&quot;/user/register&quot;</span>); <span class=\"hljs-comment\">// 排除登录、注册接口</span><br><br>        <span class=\"hljs-type\">PermissionVerifyInterceptor</span> <span class=\"hljs-variable\">permissionVerifyInterceptor</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">PermissionVerifyInterceptor</span>();<br>        permissionVerifyInterceptor.addPermission(<span class=\"hljs-string\">&quot;STUDENT&quot;</span>, <span class=\"hljs-string\">&quot;/student/needPermission&quot;</span>);<br>        permissionVerifyInterceptor.addPermission(<span class=\"hljs-string\">&quot;COUNSELOR&quot;</span>, <span class=\"hljs-string\">&quot;/counselor/*&quot;</span>);<br><br>        registry.addInterceptor(permissionVerifyInterceptor)<br>                .addPathPatterns(<span class=\"hljs-string\">&quot;/**&quot;</span>) <span class=\"hljs-comment\">// 拦截所有请求</span><br>                .excludePathPatterns(<span class=\"hljs-string\">&quot;/user/login&quot;</span>, <span class=\"hljs-string\">&quot;/user/register&quot;</span>); <span class=\"hljs-comment\">// 排除登录、注册接口</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h4 id=\"4-2-测试\"><a href=\"#4-2-测试\" class=\"headerlink\" title=\"4.2. 测试\"></a>4.2. 测试</h4><p>首先，使用辅导员的token，依次访问&#x2F;student&#x2F;needPermission, &#x2F;student&#x2F;notPermission和&#x2F;counselor的相关接口</p>\n<img src=\"/2024/04/03/%E9%89%B4%E6%9D%83%E5%AD%A6%E4%B9%A0/12.png\" class=\"\">\n<img src=\"/2024/04/03/%E9%89%B4%E6%9D%83%E5%AD%A6%E4%B9%A0/13.png\" class=\"\">\n<img src=\"/2024/04/03/%E9%89%B4%E6%9D%83%E5%AD%A6%E4%B9%A0/14.png\" class=\"\">\n<p>然后使用普通学生的token，依次访问&#x2F;student&#x2F;needPermission, &#x2F;student&#x2F;notPermission和&#x2F;counselor的相关接口</p>\n<img src=\"/2024/04/03/%E9%89%B4%E6%9D%83%E5%AD%A6%E4%B9%A0/15.png\" class=\"\">\n<img src=\"/2024/04/03/%E9%89%B4%E6%9D%83%E5%AD%A6%E4%B9%A0/16.png\" class=\"\">\n<img src=\"/2024/04/03/%E9%89%B4%E6%9D%83%E5%AD%A6%E4%B9%A0/17.png\" class=\"\">\n"},{"title":"SpringSecurity学习1—SpringSecurity认证","date":"2024-04-03T07:28:26.000Z","_content":"### 1. 简介\nSpring Security是一个用于包含应用程序安全性的Java框架，它提供了一套全面的安全解决方案，包括身份验证、授权、防止攻击等功能。它基于过滤器链的概念，可以轻松地集成到任何基于Spring的应用程序中，它支持多种身份验证选项和授权策略，此外，还提供一些附加功能，如集成第三方身份验证提供商和单点登录，以及会话管理和密码编码等。\n### 2. SpringBoot整合SpringSecurity\n#### 2.1. 引言\n代码实现，基于前两章提到的登录、注册和鉴权项目，这里将使用SpringSecurity框架，逐步替代前两章自定义的认证授权实现。首先，注释掉WebMvcConfiguration类，去除该类对我们后续使用SpringSecurity的影响。\n```java\n//package com.yang.infrastructure.configuration;\n//\n//import com.yang.infrastructure.auth.interceptors.JwtTokenVerifyInterceptor;\n//import com.yang.infrastructure.auth.interceptors.PermissionVerifyInterceptor;\n//import org.springframework.context.annotation.Configuration;\n//import org.springframework.web.servlet.config.annotation.InterceptorRegistry;\n//import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;\n//\n//@Configuration\n//public class WebMvcConfiguration implements WebMvcConfigurer {\n//\n//    @Override\n//    public void addInterceptors(InterceptorRegistry registry) {\n//        registry.addInterceptor(new JwtTokenVerifyInterceptor())\n//                .addPathPatterns(\"/**\") // 拦截所有请求\n//                .excludePathPatterns(\"/user/login\", \"/user/register\"); // 排除登录、注册接口\n//\n//        PermissionVerifyInterceptor permissionVerifyInterceptor = new PermissionVerifyInterceptor();\n//        permissionVerifyInterceptor.addPermission(\"STUDENT\", \"/student/needPermission\");\n//        permissionVerifyInterceptor.addPermission(\"COUNSELOR\", \"/counselor/*\");\n//\n//        registry.addInterceptor(permissionVerifyInterceptor)\n//                .addPathPatterns(\"/**\") // 拦截所有请求\n//                .excludePathPatterns(\"/user/login\", \"/user/register\"); // 排除登录、注册接口\n//    }\n//}\n```\n#### 2.2. SpringSecurity完整流程\nSpringSecurity功能的实现主要是一系列过滤器链相互配合完成的\n{% asset_img 1.png %}\nSecurityContextPersistenceFilter：整个拦截过程的入口和出口（也就是第一个和最后一个拦截器），会在请求开始时从配置后的SecurityContextRepository中获取SecurityContext，然后把它设置给SecurityContextHolder，请求完成后将SecurityContextHolder持有的SecurityContext再保存到配置后的SecurityContextRepository，同时清除SecurityContextHolder所持有的SecurityContext；\nUsernamePasswordAuthenticationFilter：用于处理来自表单提交的认证，该表单必须提供对应的用户名和密码，其内部还有登录成功或失败后进行处理的AuthenticationSuccessHandler和AuthenticationFailureHandler，这些都可以根据需求做相关改变；\nFilter Security Interceptor：用于保护web资源，使用AccessDecisionManager对当前用户进行授权访问；\nExceptionTranslationFilter：捕获来着FilterChain所有的异常，并进行处理，但它只会处理两类异常：AuthenticationException和AccessDeniedException，其他异常会继续抛出。\n#### 2.3. 认证流程\n{% asset_img 2.png %}\nAuthenticationManager：定义认证Authentication的方法\nUserDetailsService：加载用户特定数据的核心接口，里面定义了一个根据用户名查询用户信息的方法\nUserDetails接口：提供核心用户信息，通过UserDetailsService根据用户名获取处理的用户信息，要封装成UserDetails对象返回，然后将这些信息封装到Authentication对象中。\n入门案例\n引入依赖\n首先，我们引入SpringSecurity的依赖\n```java\n <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-security</artifactId>\n        </dependency>\n```\n然后定义一个测试接口，用于测试SpringSecurity：\n```java\npackage com.yang.controller;\n\nimport com.yang.infrastructure.common.Response;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\n@RestController\n@RequestMapping(value = \"/security\")\npublic class SecurityController {\n\n    @GetMapping(value = \"/hello\")\n    public Response hello() {\n        return Response.success(\"hello\");\n    }\n}\n```\n启动项目，访问/security/hello接口，此时会跳转到登录界面\n{% asset_img 3.png %}\n在控制台中，我们可以看到如下内容\n{% asset_img 4.png %}\n我们使用user用户名，以及控制台中的密码，在表单提交登录,此时便会跳转到登录成功页面。\n{% asset_img 5.png %}\n#### 2.4.2. UserDetailsService\n在每次启动项目的时候，我们查看控制台时，总是能看到下面生成了一串UUID字符串\n{% asset_img 6.png %}\n这是因为在默认情况下，SpringSecurity自动化地帮我们完成以下三件事情：\n1）开启FormLogin登录认证模式：假设我们还没有登录，然后访问/security/hello测试接口，那么请求会被重定向到页面/login，提示使用用户名和密码登录。\n2）生成用于登录的用户名和密码：用户名是user，密码就是上面启动日志中随机生成的字符串\n3）注册用于认证和鉴权的过滤器：SpringSecurity本质就是通过过滤器或过滤器（链）实现的，每一个接口请求都会按顺序经过这些过滤器的“过滤”，每个过滤器承担各自的职责，组合起来共同完成认证和鉴权，根据配置的不同，注册的过滤器有所不同。\n使用默认用户名和随机密码的方式不够灵活，因此，我们可以实现SpringSecurity提供的UserDetailsService接口。这里先介绍SpringSecurity预置的两种常见的存储介质实现：\n1）InMemoryUserDetailsManager：基于内存的实现\n2）JdbcUserDetailsManager：基于数据库的实现\n我们介绍以下InMemoryUserDetailsManager，我们创建用户实例和InMemoryUserDetailsManager实例，并使用@Bean将InMemoryUserDetailsManager实例注入到SpringSecurity中\n```java\n@Configuration\npublic class SecurityConfig {\n\n    @Bean\n    public UserDetailsManager users() {\n        UserDetails user = User.builder()\n                .username(\"cxy\")\n                .password(\"{bcrypt}$2a$10$CrPsv1X3hM\" +\n                        \".giwVZyNsrKuaRvpJZyGQycJg78xT7Dm68K4DWN/lxS\") // 使用Bcrypt算法加密\n                .roles(\"USER\")\n                .build();\n\n        InMemoryUserDetailsManager manager = new InMemoryUserDetailsManager();\n        manager.createUser(user);\n        return manager;\n    }\n}\n```\n重新启动项目，访问测试接口/security/hello，用户名输入cxy，密码输入123456\n{% asset_img 7.png %}\n{% asset_img 8.png %}\nJdbcUserDetailsManager的实现与InMemoryUserDetailsManager类似，这里就不赘述了。\n除了上面这两种内置实现，我们还可以自定义UserDetailsService的实现。但这里不进行介绍，因为UserDetailsService是基于表单认证这种模式的，而有时候，我们的登录方式、登录页面与它提供的又不一样，因此，我们下面会讲到，如何接入我们自定义的登录接口，登录方式。\n\n#### 2.4.3. 登录和注册放行\n上面这种整合方式，会对所有的请求进行拦截，但是一般情况下，我们是不拦截用户登录和用户注册接口的，而且现在的项目一般是前后端分离，没必要跳转到专门的登录页面。\n这里使用的springboot版本是2.7.0，在Spring Boot 2.7.0之前的版本中，我们需要写个配置类继承WebSecurityConfigurerAdapter，然后重写Adapter中的三个方法进行配置，如下所示：\n```java\n@Configuration\n@EnableWebSecurity\n@EnableGlobalMethodSecurity(prePostEnabled = true)\npublic class OldSecurityConfig extends WebSecurityConfigurerAdapter {\n    @Autowired\n    private UmsAdminService adminService;\n\n    @Override\n    protected void configure(HttpSecurity httpSecurity) throws Exception {\n        //省略HttpSecurity的配置\n    }\n\n    @Override\n    protected void configure(AuthenticationManagerBuilder auth) throws Exception {\n        auth.userDetailsService(userDetailsService())\n                .passwordEncoder(passwordEncoder());\n    }\n    \n    @Bean\n    @Override\n    public AuthenticationManager authenticationManagerBean() throws Exception {\n        return super.authenticationManagerBean();\n    }\n\n}\n```\n但这种方式在SpringBoot 2.7.0中，WebSecurityConfigurerAdapter已经被弃用了，新用法中，无需继承WebSecurityConfigurerAdapter，只需要直接声明一个配置类，再配置一个生成SecurityFilterChainBean方法，配置信息如下，我们对/user/login和/user/register接口，进行放行，而其他接口，都需要进行验证。\n```java\npackage com.yang.infrastructure.auth.config;\n\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.security.config.annotation.web.builders.HttpSecurity;\nimport org.springframework.security.config.http.SessionCreationPolicy;\nimport org.springframework.security.web.SecurityFilterChain;\n\n@Configuration\npublic class SecurityConfig {\n    @Bean\n    SecurityFilterChain filterChain(HttpSecurity httpSecurity) throws Exception {\n        // 登录和注册接口，放行\n        return httpSecurity.authorizeRequests()\n                .antMatchers(\"/user/login\").permitAll()\n                .antMatchers(\"/user/register\").permitAll()\n                .anyRequest().authenticated()\n                .and()\n                .csrf().disable()\n                .sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS) // 设置无状态连接，即不创建session\n                .and()\n                .cors().disable() // 解决跨域问题\n                .build();\n    }\n}\n```\nhttp.authorizeHttpRequests(): 指定哪些请求需要什么样的认证或授权，这里使用anyRequest()和authenticated()表示所有请求均需要认证。\nhttp.authorizeHttpRequests()：表示我们使用HttpBasic认证。\n在上面的配置中，我们配置了登录接口和注册接口允许放行，其他接口进行拦截，然后我们访问登录接口，可以看出登录接口放行通过，能顺利访问。\n{% asset_img 9.png %}\n再访问/security/hello接口，结果是403，说明无权访问。\n{% asset_img 10.png %}\n##### 2.4.4. 异常处理\n在最开始的时候，我们没有配置任何东西时，没有权限便会默认跳转到用户登录界面，现在因为我们没有配置登录表单路径，所以会直接提示403，我们可以在配置类中，配置异常处理方式，方便返回一些格式化的数据供前端做出决策。\n我们创建一个JwtAuthenticationExceptionHandler，该类实现自AuthenticationEntryPoint接口\n```java\npublic class JwtAuthenticationExceptionHandler implements AuthenticationEntryPoint {\n\n    @Override\n    public void commence(HttpServletRequest request, HttpServletResponse response, AuthenticationException authException) throws IOException, ServletException {\n        sendErrorResponse(response);\n    }\n\n    private void sendErrorResponse(HttpServletResponse response) throws IOException {\n        Response<Object> errorResponse = Response.fail(ResultCode.AUTHENTICATION_FAIL);\n        response.setCharacterEncoding(\"UTF-8\");\n        response.setStatus(HttpStatus.UNAUTHORIZED.value());\n        PrintWriter writer = response.getWriter();\n        writer.write(JSONObject.toJSONString(errorResponse));\n        writer.flush();\n    }\n}\n```\n然后我们修改SpringSecurity的配置类，添加上和异常处理相关的配置：\n```java\n@Configuration\npublic class SecurityConfig {\n    @Bean\n    SecurityFilterChain filterChain(HttpSecurity httpSecurity) throws Exception {\n        // 登录和注册接口，放行\n        return httpSecurity.authorizeRequests()\n                .antMatchers(\"/user/login\").permitAll()\n                .antMatchers(\"/user/register\").permitAll()\n                .anyRequest().authenticated()\n                .and()\n                .csrf().disable()\n                .sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS) // 设置无状态连接，即不创建session\n                .and()\n                .cors().disable() // 解决跨域问题\n                .exceptionHandling()\n                .authenticationEntryPoint(new JwtAuthenticationExceptionHandler()) // 未认证异常处理\n                .and()\n                .build();\n    }\n}\n```\n接着再次访问/security/hello接口，结果如下：\n{% asset_img 11.png %}\n同理，在权限不足的情况下，我们也可以实现相关的异常处理类\n```java\npublic class JwtAccessDeniedExceptionHandler implements AccessDeniedHandler {\n    @Override\n    public void handle(HttpServletRequest request, HttpServletResponse response, AccessDeniedException accessDeniedException) throws IOException, ServletException {\n        sendErrorResponse(response);\n    }\n\n    private void sendErrorResponse(HttpServletResponse response) throws IOException {\n        Response<Object> errorResponse = Response.fail(ResultCode.ACCESS_DENIED);\n        response.setCharacterEncoding(\"UTF-8\");\n        response.setStatus(HttpStatus.UNAUTHORIZED.value());\n        PrintWriter writer = response.getWriter();\n        writer.write(JSONObject.toJSONString(errorResponse));\n        writer.flush();\n    }\n}\n```\n修改配置类：\n```java\n@Configuration\npublic class SecurityConfig {\n    @Bean\n    SecurityFilterChain filterChain(HttpSecurity httpSecurity) throws Exception {\n        // 登录和注册接口，放行\n        return httpSecurity.authorizeRequests()\n                .antMatchers(\"/user/login\").permitAll()\n                .antMatchers(\"/user/register\").permitAll()\n                .anyRequest().authenticated()\n                .and()\n                .csrf().disable()\n                .sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS) // 设置无状态连接，即不创建session\n                .and()\n                .cors().disable() // 解决跨域问题\n                .exceptionHandling()\n                .authenticationEntryPoint(new JwtAuthenticationExceptionHandler()) // 未认证异常处理\n                .accessDeniedHandler(new JwtAccessDeniedExceptionHandler()) // 权限不足异常处理\n                .and()\n                .build();\n    }\n}\n```\n##### 2.4.5. 认证过滤器\n当我们登录成功后，一般会返回一个token，然后前端后续将这个token，携带于请求头，想后端发起访问，后端解析这个token，来判断该请求是否认证通过，通过，则放行。在SpringSecurity中，我们可以通过addFilterBefore()将我们自定义过滤器添加上去，然后再我们的自定义过滤器中，实现相关的token解析逻辑。\n首先我们定义一个MyUserDetails类，实现UserDetails接口，UserDetails提供用户的核心信息，在前两篇文章中，用户的核心信息，存储于UserContextDetails类中，这里我们沿用该类，当然，也可以自己重新定义一个类用于保存用户的核心信息，甚至直接把用户实体类作为核心信息，这个依据项目的需要。目前的实现中，除了获取用户名之外，其他都是空实现，因为其他的接口，暂时还不需要。\n```java\npackage com.yang.infrastructure.security;\n\nimport com.yang.infrastructure.auth.UserContextDetails;\nimport lombok.Data;\nimport org.springframework.security.core.GrantedAuthority;\nimport org.springframework.security.core.userdetails.UserDetails;\n\nimport java.util.Collection;\n\n@Data\npublic class MyUserDetails implements UserDetails {\n    private UserContextDetails userContextDetails;\n\n    private String password;\n\n    public MyUserDetails(UserContextDetails userContextDetails) {\n        this.userContextDetails = userContextDetails;\n    }\n\n    public MyUserDetails(UserContextDetails userContextDetails, String password) {\n        this.userContextDetails = userContextDetails;\n        this.password = password;\n    }\n\n    @Override\n    public Collection<? extends GrantedAuthority> getAuthorities() {\n        return null;\n    }\n\n    @Override\n    public String getPassword() {\n        return this.password;\n    }\n\n    @Override\n    public String getUsername() {\n        return userContextDetails.getUsername();\n    }\n\n    @Override\n    public boolean isAccountNonExpired() {\n        return true;\n    }\n\n    @Override\n    public boolean isAccountNonLocked() {\n        return true;\n    }\n\n    @Override\n    public boolean isCredentialsNonExpired() {\n        return true;\n    }\n\n    @Override\n    public boolean isEnabled() {\n        return true;\n    }\n}\n```\n我们我们添加一个JwtTokenVerifyFilter，这个类继承于OncePerRequestFilter，其具体实现如下：\n```java\npackage com.yang.infrastructure.security.filter;\n\nimport com.alibaba.fastjson.JSONObject;\nimport com.yang.domain.data.Role;\nimport com.yang.infrastructure.auth.PermissionDetails;\nimport com.yang.infrastructure.auth.UserContextDetails;\nimport com.yang.infrastructure.auth.config.JwtTokenProperty;\nimport com.yang.infrastructure.auth.request.JwtTokenVerifyRequest;\nimport com.yang.infrastructure.auth.response.JwtTokenVerifyDTO;\nimport com.yang.infrastructure.auth.service.JwtTokenService;\nimport com.yang.infrastructure.security.MyUserDetails;\nimport com.yang.infrastructure.utils.RedisUtils;\nimport com.yang.infrastructure.utils.SpringContextUtils;\nimport org.apache.commons.lang3.StringUtils;\nimport org.springframework.security.authentication.UsernamePasswordAuthenticationToken;\nimport org.springframework.security.core.context.SecurityContextHolder;\nimport org.springframework.security.core.userdetails.UserDetails;\nimport org.springframework.web.filter.OncePerRequestFilter;\n\nimport javax.servlet.FilterChain;\nimport javax.servlet.ServletException;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport java.io.IOException;\nimport java.util.List;\nimport java.util.stream.Collectors;\n\npublic class JwtTokenVerifyFilter extends OncePerRequestFilter {\n    @Override\n    protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain) throws ServletException, IOException {\n        String token = request.getHeader(\"token\");\n        if (StringUtils.isEmpty(token)) {\n            filterChain.doFilter(request, response);\n            return;\n        }\n\n        UserContextDetails userContextDetails = null;\n        Object userDetailsFromRedis = getUserDetailsFromRedis(token);\n        if (userDetailsFromRedis != null) {\n            userContextDetails = (UserContextDetails) userDetailsFromRedis;\n        }\n\n        if (userContextDetails == null) {\n            JwtTokenService jwtTokenService = SpringContextUtils.getBeanOfType(JwtTokenService.class);\n            JwtTokenProperty jwtTokenProperty = SpringContextUtils.getBeanOfType(JwtTokenProperty.class);\n\n            JwtTokenVerifyRequest jwtTokenVerifyRequest = new JwtTokenVerifyRequest();\n            jwtTokenVerifyRequest.setToken(token);\n            jwtTokenVerifyRequest.setSecret(jwtTokenProperty.getSecret());\n\n            JwtTokenVerifyDTO verify = jwtTokenService.verify(jwtTokenVerifyRequest);\n            if (verify == null) {\n                filterChain.doFilter(request, response);\n                return;\n            }\n\n            userContextDetails = new UserContextDetails();\n            userContextDetails.setId(Integer.valueOf(verify.getSubject()));\n            userContextDetails.setToken(token);\n            userContextDetails.setUsername(verify.getPayLoads().get(\"username\"));\n            userContextDetails.setExtendMap(verify.getPayLoads());\n            List<Role> roles = JSONObject.parseArray(verify.getPayLoads().get(\"roles\"), Role.class);\n            userContextDetails.setPermissionDetails(roles.stream().map(role -> {\n                PermissionDetails permissionDetails = new PermissionDetails();\n                permissionDetails.setName(role.getCode());\n                return permissionDetails;\n            }).collect(Collectors.toList()));\n        }\n\n        if (userContextDetails == null) {\n            filterChain.doFilter(request, response);\n            return;\n        }\n        UserDetails userDetails = new MyUserDetails(userContextDetails);\n        UsernamePasswordAuthenticationToken authenticationToken = new UsernamePasswordAuthenticationToken(userDetails, null, null);\n        SecurityContextHolder.getContext().setAuthentication(authenticationToken);\n        filterChain.doFilter(request, response);\n    }\n\n    private Object getUserDetailsFromRedis(String token) {\n        RedisUtils redisUtils = SpringContextUtils.getBeanOfType(RedisUtils.class);\n        return redisUtils.getKey(\"token:\" + token);\n    }\n}\n```\n其实从上面的实现中，会发现，与我们之前的JwtTokenVerifyInterceptor很像，不过我们当时只是简单地通过线程上下文来传递用户核心信息，而SpringSecurity对此进一步作出封装:\n1）UsernamePasswordAuthenticationToken：SpringSecurity用于表示基于用户名和密码地身份验证对象，继承自AbstractAuthenticationToken类，包含了用户名和密码等凭据信息，在身份验证过程中，UsernamePasswordAuthenticationToken用于封装用户提交地身份验证凭据，并在后续身份验证过程中进行传递和处理。\n2）SecurityContextHolder：SpringSecurity用于管理安全上下文地持有者，提供一个静态方法getContext()用于获取当前线程中地安全上下文。\n最后，我们将这个过滤器，添加到SpringSecurity的配置类中\n```java\n@Configuration\npublic class SecurityConfig {\n    @Bean\n    SecurityFilterChain filterChain(HttpSecurity httpSecurity) throws Exception {\n        // 登录和注册接口，放行\n        return httpSecurity.authorizeRequests()\n                .antMatchers(\"/user/login\").permitAll()\n                .antMatchers(\"/user/register\").permitAll()\n                .anyRequest().authenticated()\n                .and()\n                .csrf().disable()\n                .sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS) // 设置无状态连接，即不创建session\n                .and()\n                .cors().disable() // 解决跨域问题\n                .exceptionHandling()\n                .authenticationEntryPoint(new JwtAuthenticationExceptionHandler()) // 未认证异常处理\n                .accessDeniedHandler(new JwtAccessDeniedExceptionHandler()) // 权限不足异常处理\n                .and()\n                .addFilterBefore(new JwtTokenVerifyFilter(), UsernamePasswordAuthenticationFilter.class) // 添加自定义过滤器\n                .build();\n    }\n}\n```\n然后我们启动项目，先进行登录\n{% asset_img 12.png %}\n登录成功后，携带该token，作为请求头，访问/security/hello测试接口,访问成功\n{% asset_img 13.png %}\n然后我们携带一个无效的token，作为请求头，再次访问/security/hello测试接口\n{% asset_img 14.png %}\n\n### 3. 参考文章\nhttps://segmentfault.com/a/1190000041947192\nhttps://blog.csdn.net/m0_37989980/article/details/107519382\nhttps://zhuanlan.zhihu.com/p/455858001","source":"_posts/SpringSecurity学习1—SpringSecurity认证.md","raw":"---\ntitle: SpringSecurity学习1—SpringSecurity认证\ndate: 2024-04-03 15:28:26\ntags:\n    - SpringBoot\n    - SpringSecurity\n---\n### 1. 简介\nSpring Security是一个用于包含应用程序安全性的Java框架，它提供了一套全面的安全解决方案，包括身份验证、授权、防止攻击等功能。它基于过滤器链的概念，可以轻松地集成到任何基于Spring的应用程序中，它支持多种身份验证选项和授权策略，此外，还提供一些附加功能，如集成第三方身份验证提供商和单点登录，以及会话管理和密码编码等。\n### 2. SpringBoot整合SpringSecurity\n#### 2.1. 引言\n代码实现，基于前两章提到的登录、注册和鉴权项目，这里将使用SpringSecurity框架，逐步替代前两章自定义的认证授权实现。首先，注释掉WebMvcConfiguration类，去除该类对我们后续使用SpringSecurity的影响。\n```java\n//package com.yang.infrastructure.configuration;\n//\n//import com.yang.infrastructure.auth.interceptors.JwtTokenVerifyInterceptor;\n//import com.yang.infrastructure.auth.interceptors.PermissionVerifyInterceptor;\n//import org.springframework.context.annotation.Configuration;\n//import org.springframework.web.servlet.config.annotation.InterceptorRegistry;\n//import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;\n//\n//@Configuration\n//public class WebMvcConfiguration implements WebMvcConfigurer {\n//\n//    @Override\n//    public void addInterceptors(InterceptorRegistry registry) {\n//        registry.addInterceptor(new JwtTokenVerifyInterceptor())\n//                .addPathPatterns(\"/**\") // 拦截所有请求\n//                .excludePathPatterns(\"/user/login\", \"/user/register\"); // 排除登录、注册接口\n//\n//        PermissionVerifyInterceptor permissionVerifyInterceptor = new PermissionVerifyInterceptor();\n//        permissionVerifyInterceptor.addPermission(\"STUDENT\", \"/student/needPermission\");\n//        permissionVerifyInterceptor.addPermission(\"COUNSELOR\", \"/counselor/*\");\n//\n//        registry.addInterceptor(permissionVerifyInterceptor)\n//                .addPathPatterns(\"/**\") // 拦截所有请求\n//                .excludePathPatterns(\"/user/login\", \"/user/register\"); // 排除登录、注册接口\n//    }\n//}\n```\n#### 2.2. SpringSecurity完整流程\nSpringSecurity功能的实现主要是一系列过滤器链相互配合完成的\n{% asset_img 1.png %}\nSecurityContextPersistenceFilter：整个拦截过程的入口和出口（也就是第一个和最后一个拦截器），会在请求开始时从配置后的SecurityContextRepository中获取SecurityContext，然后把它设置给SecurityContextHolder，请求完成后将SecurityContextHolder持有的SecurityContext再保存到配置后的SecurityContextRepository，同时清除SecurityContextHolder所持有的SecurityContext；\nUsernamePasswordAuthenticationFilter：用于处理来自表单提交的认证，该表单必须提供对应的用户名和密码，其内部还有登录成功或失败后进行处理的AuthenticationSuccessHandler和AuthenticationFailureHandler，这些都可以根据需求做相关改变；\nFilter Security Interceptor：用于保护web资源，使用AccessDecisionManager对当前用户进行授权访问；\nExceptionTranslationFilter：捕获来着FilterChain所有的异常，并进行处理，但它只会处理两类异常：AuthenticationException和AccessDeniedException，其他异常会继续抛出。\n#### 2.3. 认证流程\n{% asset_img 2.png %}\nAuthenticationManager：定义认证Authentication的方法\nUserDetailsService：加载用户特定数据的核心接口，里面定义了一个根据用户名查询用户信息的方法\nUserDetails接口：提供核心用户信息，通过UserDetailsService根据用户名获取处理的用户信息，要封装成UserDetails对象返回，然后将这些信息封装到Authentication对象中。\n入门案例\n引入依赖\n首先，我们引入SpringSecurity的依赖\n```java\n <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-security</artifactId>\n        </dependency>\n```\n然后定义一个测试接口，用于测试SpringSecurity：\n```java\npackage com.yang.controller;\n\nimport com.yang.infrastructure.common.Response;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\n@RestController\n@RequestMapping(value = \"/security\")\npublic class SecurityController {\n\n    @GetMapping(value = \"/hello\")\n    public Response hello() {\n        return Response.success(\"hello\");\n    }\n}\n```\n启动项目，访问/security/hello接口，此时会跳转到登录界面\n{% asset_img 3.png %}\n在控制台中，我们可以看到如下内容\n{% asset_img 4.png %}\n我们使用user用户名，以及控制台中的密码，在表单提交登录,此时便会跳转到登录成功页面。\n{% asset_img 5.png %}\n#### 2.4.2. UserDetailsService\n在每次启动项目的时候，我们查看控制台时，总是能看到下面生成了一串UUID字符串\n{% asset_img 6.png %}\n这是因为在默认情况下，SpringSecurity自动化地帮我们完成以下三件事情：\n1）开启FormLogin登录认证模式：假设我们还没有登录，然后访问/security/hello测试接口，那么请求会被重定向到页面/login，提示使用用户名和密码登录。\n2）生成用于登录的用户名和密码：用户名是user，密码就是上面启动日志中随机生成的字符串\n3）注册用于认证和鉴权的过滤器：SpringSecurity本质就是通过过滤器或过滤器（链）实现的，每一个接口请求都会按顺序经过这些过滤器的“过滤”，每个过滤器承担各自的职责，组合起来共同完成认证和鉴权，根据配置的不同，注册的过滤器有所不同。\n使用默认用户名和随机密码的方式不够灵活，因此，我们可以实现SpringSecurity提供的UserDetailsService接口。这里先介绍SpringSecurity预置的两种常见的存储介质实现：\n1）InMemoryUserDetailsManager：基于内存的实现\n2）JdbcUserDetailsManager：基于数据库的实现\n我们介绍以下InMemoryUserDetailsManager，我们创建用户实例和InMemoryUserDetailsManager实例，并使用@Bean将InMemoryUserDetailsManager实例注入到SpringSecurity中\n```java\n@Configuration\npublic class SecurityConfig {\n\n    @Bean\n    public UserDetailsManager users() {\n        UserDetails user = User.builder()\n                .username(\"cxy\")\n                .password(\"{bcrypt}$2a$10$CrPsv1X3hM\" +\n                        \".giwVZyNsrKuaRvpJZyGQycJg78xT7Dm68K4DWN/lxS\") // 使用Bcrypt算法加密\n                .roles(\"USER\")\n                .build();\n\n        InMemoryUserDetailsManager manager = new InMemoryUserDetailsManager();\n        manager.createUser(user);\n        return manager;\n    }\n}\n```\n重新启动项目，访问测试接口/security/hello，用户名输入cxy，密码输入123456\n{% asset_img 7.png %}\n{% asset_img 8.png %}\nJdbcUserDetailsManager的实现与InMemoryUserDetailsManager类似，这里就不赘述了。\n除了上面这两种内置实现，我们还可以自定义UserDetailsService的实现。但这里不进行介绍，因为UserDetailsService是基于表单认证这种模式的，而有时候，我们的登录方式、登录页面与它提供的又不一样，因此，我们下面会讲到，如何接入我们自定义的登录接口，登录方式。\n\n#### 2.4.3. 登录和注册放行\n上面这种整合方式，会对所有的请求进行拦截，但是一般情况下，我们是不拦截用户登录和用户注册接口的，而且现在的项目一般是前后端分离，没必要跳转到专门的登录页面。\n这里使用的springboot版本是2.7.0，在Spring Boot 2.7.0之前的版本中，我们需要写个配置类继承WebSecurityConfigurerAdapter，然后重写Adapter中的三个方法进行配置，如下所示：\n```java\n@Configuration\n@EnableWebSecurity\n@EnableGlobalMethodSecurity(prePostEnabled = true)\npublic class OldSecurityConfig extends WebSecurityConfigurerAdapter {\n    @Autowired\n    private UmsAdminService adminService;\n\n    @Override\n    protected void configure(HttpSecurity httpSecurity) throws Exception {\n        //省略HttpSecurity的配置\n    }\n\n    @Override\n    protected void configure(AuthenticationManagerBuilder auth) throws Exception {\n        auth.userDetailsService(userDetailsService())\n                .passwordEncoder(passwordEncoder());\n    }\n    \n    @Bean\n    @Override\n    public AuthenticationManager authenticationManagerBean() throws Exception {\n        return super.authenticationManagerBean();\n    }\n\n}\n```\n但这种方式在SpringBoot 2.7.0中，WebSecurityConfigurerAdapter已经被弃用了，新用法中，无需继承WebSecurityConfigurerAdapter，只需要直接声明一个配置类，再配置一个生成SecurityFilterChainBean方法，配置信息如下，我们对/user/login和/user/register接口，进行放行，而其他接口，都需要进行验证。\n```java\npackage com.yang.infrastructure.auth.config;\n\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.security.config.annotation.web.builders.HttpSecurity;\nimport org.springframework.security.config.http.SessionCreationPolicy;\nimport org.springframework.security.web.SecurityFilterChain;\n\n@Configuration\npublic class SecurityConfig {\n    @Bean\n    SecurityFilterChain filterChain(HttpSecurity httpSecurity) throws Exception {\n        // 登录和注册接口，放行\n        return httpSecurity.authorizeRequests()\n                .antMatchers(\"/user/login\").permitAll()\n                .antMatchers(\"/user/register\").permitAll()\n                .anyRequest().authenticated()\n                .and()\n                .csrf().disable()\n                .sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS) // 设置无状态连接，即不创建session\n                .and()\n                .cors().disable() // 解决跨域问题\n                .build();\n    }\n}\n```\nhttp.authorizeHttpRequests(): 指定哪些请求需要什么样的认证或授权，这里使用anyRequest()和authenticated()表示所有请求均需要认证。\nhttp.authorizeHttpRequests()：表示我们使用HttpBasic认证。\n在上面的配置中，我们配置了登录接口和注册接口允许放行，其他接口进行拦截，然后我们访问登录接口，可以看出登录接口放行通过，能顺利访问。\n{% asset_img 9.png %}\n再访问/security/hello接口，结果是403，说明无权访问。\n{% asset_img 10.png %}\n##### 2.4.4. 异常处理\n在最开始的时候，我们没有配置任何东西时，没有权限便会默认跳转到用户登录界面，现在因为我们没有配置登录表单路径，所以会直接提示403，我们可以在配置类中，配置异常处理方式，方便返回一些格式化的数据供前端做出决策。\n我们创建一个JwtAuthenticationExceptionHandler，该类实现自AuthenticationEntryPoint接口\n```java\npublic class JwtAuthenticationExceptionHandler implements AuthenticationEntryPoint {\n\n    @Override\n    public void commence(HttpServletRequest request, HttpServletResponse response, AuthenticationException authException) throws IOException, ServletException {\n        sendErrorResponse(response);\n    }\n\n    private void sendErrorResponse(HttpServletResponse response) throws IOException {\n        Response<Object> errorResponse = Response.fail(ResultCode.AUTHENTICATION_FAIL);\n        response.setCharacterEncoding(\"UTF-8\");\n        response.setStatus(HttpStatus.UNAUTHORIZED.value());\n        PrintWriter writer = response.getWriter();\n        writer.write(JSONObject.toJSONString(errorResponse));\n        writer.flush();\n    }\n}\n```\n然后我们修改SpringSecurity的配置类，添加上和异常处理相关的配置：\n```java\n@Configuration\npublic class SecurityConfig {\n    @Bean\n    SecurityFilterChain filterChain(HttpSecurity httpSecurity) throws Exception {\n        // 登录和注册接口，放行\n        return httpSecurity.authorizeRequests()\n                .antMatchers(\"/user/login\").permitAll()\n                .antMatchers(\"/user/register\").permitAll()\n                .anyRequest().authenticated()\n                .and()\n                .csrf().disable()\n                .sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS) // 设置无状态连接，即不创建session\n                .and()\n                .cors().disable() // 解决跨域问题\n                .exceptionHandling()\n                .authenticationEntryPoint(new JwtAuthenticationExceptionHandler()) // 未认证异常处理\n                .and()\n                .build();\n    }\n}\n```\n接着再次访问/security/hello接口，结果如下：\n{% asset_img 11.png %}\n同理，在权限不足的情况下，我们也可以实现相关的异常处理类\n```java\npublic class JwtAccessDeniedExceptionHandler implements AccessDeniedHandler {\n    @Override\n    public void handle(HttpServletRequest request, HttpServletResponse response, AccessDeniedException accessDeniedException) throws IOException, ServletException {\n        sendErrorResponse(response);\n    }\n\n    private void sendErrorResponse(HttpServletResponse response) throws IOException {\n        Response<Object> errorResponse = Response.fail(ResultCode.ACCESS_DENIED);\n        response.setCharacterEncoding(\"UTF-8\");\n        response.setStatus(HttpStatus.UNAUTHORIZED.value());\n        PrintWriter writer = response.getWriter();\n        writer.write(JSONObject.toJSONString(errorResponse));\n        writer.flush();\n    }\n}\n```\n修改配置类：\n```java\n@Configuration\npublic class SecurityConfig {\n    @Bean\n    SecurityFilterChain filterChain(HttpSecurity httpSecurity) throws Exception {\n        // 登录和注册接口，放行\n        return httpSecurity.authorizeRequests()\n                .antMatchers(\"/user/login\").permitAll()\n                .antMatchers(\"/user/register\").permitAll()\n                .anyRequest().authenticated()\n                .and()\n                .csrf().disable()\n                .sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS) // 设置无状态连接，即不创建session\n                .and()\n                .cors().disable() // 解决跨域问题\n                .exceptionHandling()\n                .authenticationEntryPoint(new JwtAuthenticationExceptionHandler()) // 未认证异常处理\n                .accessDeniedHandler(new JwtAccessDeniedExceptionHandler()) // 权限不足异常处理\n                .and()\n                .build();\n    }\n}\n```\n##### 2.4.5. 认证过滤器\n当我们登录成功后，一般会返回一个token，然后前端后续将这个token，携带于请求头，想后端发起访问，后端解析这个token，来判断该请求是否认证通过，通过，则放行。在SpringSecurity中，我们可以通过addFilterBefore()将我们自定义过滤器添加上去，然后再我们的自定义过滤器中，实现相关的token解析逻辑。\n首先我们定义一个MyUserDetails类，实现UserDetails接口，UserDetails提供用户的核心信息，在前两篇文章中，用户的核心信息，存储于UserContextDetails类中，这里我们沿用该类，当然，也可以自己重新定义一个类用于保存用户的核心信息，甚至直接把用户实体类作为核心信息，这个依据项目的需要。目前的实现中，除了获取用户名之外，其他都是空实现，因为其他的接口，暂时还不需要。\n```java\npackage com.yang.infrastructure.security;\n\nimport com.yang.infrastructure.auth.UserContextDetails;\nimport lombok.Data;\nimport org.springframework.security.core.GrantedAuthority;\nimport org.springframework.security.core.userdetails.UserDetails;\n\nimport java.util.Collection;\n\n@Data\npublic class MyUserDetails implements UserDetails {\n    private UserContextDetails userContextDetails;\n\n    private String password;\n\n    public MyUserDetails(UserContextDetails userContextDetails) {\n        this.userContextDetails = userContextDetails;\n    }\n\n    public MyUserDetails(UserContextDetails userContextDetails, String password) {\n        this.userContextDetails = userContextDetails;\n        this.password = password;\n    }\n\n    @Override\n    public Collection<? extends GrantedAuthority> getAuthorities() {\n        return null;\n    }\n\n    @Override\n    public String getPassword() {\n        return this.password;\n    }\n\n    @Override\n    public String getUsername() {\n        return userContextDetails.getUsername();\n    }\n\n    @Override\n    public boolean isAccountNonExpired() {\n        return true;\n    }\n\n    @Override\n    public boolean isAccountNonLocked() {\n        return true;\n    }\n\n    @Override\n    public boolean isCredentialsNonExpired() {\n        return true;\n    }\n\n    @Override\n    public boolean isEnabled() {\n        return true;\n    }\n}\n```\n我们我们添加一个JwtTokenVerifyFilter，这个类继承于OncePerRequestFilter，其具体实现如下：\n```java\npackage com.yang.infrastructure.security.filter;\n\nimport com.alibaba.fastjson.JSONObject;\nimport com.yang.domain.data.Role;\nimport com.yang.infrastructure.auth.PermissionDetails;\nimport com.yang.infrastructure.auth.UserContextDetails;\nimport com.yang.infrastructure.auth.config.JwtTokenProperty;\nimport com.yang.infrastructure.auth.request.JwtTokenVerifyRequest;\nimport com.yang.infrastructure.auth.response.JwtTokenVerifyDTO;\nimport com.yang.infrastructure.auth.service.JwtTokenService;\nimport com.yang.infrastructure.security.MyUserDetails;\nimport com.yang.infrastructure.utils.RedisUtils;\nimport com.yang.infrastructure.utils.SpringContextUtils;\nimport org.apache.commons.lang3.StringUtils;\nimport org.springframework.security.authentication.UsernamePasswordAuthenticationToken;\nimport org.springframework.security.core.context.SecurityContextHolder;\nimport org.springframework.security.core.userdetails.UserDetails;\nimport org.springframework.web.filter.OncePerRequestFilter;\n\nimport javax.servlet.FilterChain;\nimport javax.servlet.ServletException;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport java.io.IOException;\nimport java.util.List;\nimport java.util.stream.Collectors;\n\npublic class JwtTokenVerifyFilter extends OncePerRequestFilter {\n    @Override\n    protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain) throws ServletException, IOException {\n        String token = request.getHeader(\"token\");\n        if (StringUtils.isEmpty(token)) {\n            filterChain.doFilter(request, response);\n            return;\n        }\n\n        UserContextDetails userContextDetails = null;\n        Object userDetailsFromRedis = getUserDetailsFromRedis(token);\n        if (userDetailsFromRedis != null) {\n            userContextDetails = (UserContextDetails) userDetailsFromRedis;\n        }\n\n        if (userContextDetails == null) {\n            JwtTokenService jwtTokenService = SpringContextUtils.getBeanOfType(JwtTokenService.class);\n            JwtTokenProperty jwtTokenProperty = SpringContextUtils.getBeanOfType(JwtTokenProperty.class);\n\n            JwtTokenVerifyRequest jwtTokenVerifyRequest = new JwtTokenVerifyRequest();\n            jwtTokenVerifyRequest.setToken(token);\n            jwtTokenVerifyRequest.setSecret(jwtTokenProperty.getSecret());\n\n            JwtTokenVerifyDTO verify = jwtTokenService.verify(jwtTokenVerifyRequest);\n            if (verify == null) {\n                filterChain.doFilter(request, response);\n                return;\n            }\n\n            userContextDetails = new UserContextDetails();\n            userContextDetails.setId(Integer.valueOf(verify.getSubject()));\n            userContextDetails.setToken(token);\n            userContextDetails.setUsername(verify.getPayLoads().get(\"username\"));\n            userContextDetails.setExtendMap(verify.getPayLoads());\n            List<Role> roles = JSONObject.parseArray(verify.getPayLoads().get(\"roles\"), Role.class);\n            userContextDetails.setPermissionDetails(roles.stream().map(role -> {\n                PermissionDetails permissionDetails = new PermissionDetails();\n                permissionDetails.setName(role.getCode());\n                return permissionDetails;\n            }).collect(Collectors.toList()));\n        }\n\n        if (userContextDetails == null) {\n            filterChain.doFilter(request, response);\n            return;\n        }\n        UserDetails userDetails = new MyUserDetails(userContextDetails);\n        UsernamePasswordAuthenticationToken authenticationToken = new UsernamePasswordAuthenticationToken(userDetails, null, null);\n        SecurityContextHolder.getContext().setAuthentication(authenticationToken);\n        filterChain.doFilter(request, response);\n    }\n\n    private Object getUserDetailsFromRedis(String token) {\n        RedisUtils redisUtils = SpringContextUtils.getBeanOfType(RedisUtils.class);\n        return redisUtils.getKey(\"token:\" + token);\n    }\n}\n```\n其实从上面的实现中，会发现，与我们之前的JwtTokenVerifyInterceptor很像，不过我们当时只是简单地通过线程上下文来传递用户核心信息，而SpringSecurity对此进一步作出封装:\n1）UsernamePasswordAuthenticationToken：SpringSecurity用于表示基于用户名和密码地身份验证对象，继承自AbstractAuthenticationToken类，包含了用户名和密码等凭据信息，在身份验证过程中，UsernamePasswordAuthenticationToken用于封装用户提交地身份验证凭据，并在后续身份验证过程中进行传递和处理。\n2）SecurityContextHolder：SpringSecurity用于管理安全上下文地持有者，提供一个静态方法getContext()用于获取当前线程中地安全上下文。\n最后，我们将这个过滤器，添加到SpringSecurity的配置类中\n```java\n@Configuration\npublic class SecurityConfig {\n    @Bean\n    SecurityFilterChain filterChain(HttpSecurity httpSecurity) throws Exception {\n        // 登录和注册接口，放行\n        return httpSecurity.authorizeRequests()\n                .antMatchers(\"/user/login\").permitAll()\n                .antMatchers(\"/user/register\").permitAll()\n                .anyRequest().authenticated()\n                .and()\n                .csrf().disable()\n                .sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS) // 设置无状态连接，即不创建session\n                .and()\n                .cors().disable() // 解决跨域问题\n                .exceptionHandling()\n                .authenticationEntryPoint(new JwtAuthenticationExceptionHandler()) // 未认证异常处理\n                .accessDeniedHandler(new JwtAccessDeniedExceptionHandler()) // 权限不足异常处理\n                .and()\n                .addFilterBefore(new JwtTokenVerifyFilter(), UsernamePasswordAuthenticationFilter.class) // 添加自定义过滤器\n                .build();\n    }\n}\n```\n然后我们启动项目，先进行登录\n{% asset_img 12.png %}\n登录成功后，携带该token，作为请求头，访问/security/hello测试接口,访问成功\n{% asset_img 13.png %}\n然后我们携带一个无效的token，作为请求头，再次访问/security/hello测试接口\n{% asset_img 14.png %}\n\n### 3. 参考文章\nhttps://segmentfault.com/a/1190000041947192\nhttps://blog.csdn.net/m0_37989980/article/details/107519382\nhttps://zhuanlan.zhihu.com/p/455858001","slug":"SpringSecurity学习1—SpringSecurity认证","published":1,"updated":"2024-04-03T07:36:04.173Z","comments":1,"layout":"post","photos":[],"_id":"clujia8lr0000hkvle54q88zn","content":"<h3 id=\"1-简介\"><a href=\"#1-简介\" class=\"headerlink\" title=\"1. 简介\"></a>1. 简介</h3><p>Spring Security是一个用于包含应用程序安全性的Java框架，它提供了一套全面的安全解决方案，包括身份验证、授权、防止攻击等功能。它基于过滤器链的概念，可以轻松地集成到任何基于Spring的应用程序中，它支持多种身份验证选项和授权策略，此外，还提供一些附加功能，如集成第三方身份验证提供商和单点登录，以及会话管理和密码编码等。</p>\n<h3 id=\"2-SpringBoot整合SpringSecurity\"><a href=\"#2-SpringBoot整合SpringSecurity\" class=\"headerlink\" title=\"2. SpringBoot整合SpringSecurity\"></a>2. SpringBoot整合SpringSecurity</h3><h4 id=\"2-1-引言\"><a href=\"#2-1-引言\" class=\"headerlink\" title=\"2.1. 引言\"></a>2.1. 引言</h4><p>代码实现，基于前两章提到的登录、注册和鉴权项目，这里将使用SpringSecurity框架，逐步替代前两章自定义的认证授权实现。首先，注释掉WebMvcConfiguration类，去除该类对我们后续使用SpringSecurity的影响。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">//package com.yang.infrastructure.configuration;</span><br><span class=\"hljs-comment\">//</span><br><span class=\"hljs-comment\">//import com.yang.infrastructure.auth.interceptors.JwtTokenVerifyInterceptor;</span><br><span class=\"hljs-comment\">//import com.yang.infrastructure.auth.interceptors.PermissionVerifyInterceptor;</span><br><span class=\"hljs-comment\">//import org.springframework.context.annotation.Configuration;</span><br><span class=\"hljs-comment\">//import org.springframework.web.servlet.config.annotation.InterceptorRegistry;</span><br><span class=\"hljs-comment\">//import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;</span><br><span class=\"hljs-comment\">//</span><br><span class=\"hljs-comment\">//@Configuration</span><br><span class=\"hljs-comment\">//public class WebMvcConfiguration implements WebMvcConfigurer &#123;</span><br><span class=\"hljs-comment\">//</span><br><span class=\"hljs-comment\">//    @Override</span><br><span class=\"hljs-comment\">//    public void addInterceptors(InterceptorRegistry registry) &#123;</span><br><span class=\"hljs-comment\">//        registry.addInterceptor(new JwtTokenVerifyInterceptor())</span><br><span class=\"hljs-comment\">//                .addPathPatterns(&quot;/**&quot;) // 拦截所有请求</span><br><span class=\"hljs-comment\">//                .excludePathPatterns(&quot;/user/login&quot;, &quot;/user/register&quot;); // 排除登录、注册接口</span><br><span class=\"hljs-comment\">//</span><br><span class=\"hljs-comment\">//        PermissionVerifyInterceptor permissionVerifyInterceptor = new PermissionVerifyInterceptor();</span><br><span class=\"hljs-comment\">//        permissionVerifyInterceptor.addPermission(&quot;STUDENT&quot;, &quot;/student/needPermission&quot;);</span><br><span class=\"hljs-comment\">//        permissionVerifyInterceptor.addPermission(&quot;COUNSELOR&quot;, &quot;/counselor/*&quot;);</span><br><span class=\"hljs-comment\">//</span><br><span class=\"hljs-comment\">//        registry.addInterceptor(permissionVerifyInterceptor)</span><br><span class=\"hljs-comment\">//                .addPathPatterns(&quot;/**&quot;) // 拦截所有请求</span><br><span class=\"hljs-comment\">//                .excludePathPatterns(&quot;/user/login&quot;, &quot;/user/register&quot;); // 排除登录、注册接口</span><br><span class=\"hljs-comment\">//    &#125;</span><br><span class=\"hljs-comment\">//&#125;</span><br></code></pre></td></tr></table></figure>\n<h4 id=\"2-2-SpringSecurity完整流程\"><a href=\"#2-2-SpringSecurity完整流程\" class=\"headerlink\" title=\"2.2. SpringSecurity完整流程\"></a>2.2. SpringSecurity完整流程</h4><p>SpringSecurity功能的实现主要是一系列过滤器链相互配合完成的</p>\n<img src=\"/2024/04/03/SpringSecurity%E5%AD%A6%E4%B9%A01%E2%80%94SpringSecurity%E8%AE%A4%E8%AF%81/1.png\" class=\"\">\n<p>SecurityContextPersistenceFilter：整个拦截过程的入口和出口（也就是第一个和最后一个拦截器），会在请求开始时从配置后的SecurityContextRepository中获取SecurityContext，然后把它设置给SecurityContextHolder，请求完成后将SecurityContextHolder持有的SecurityContext再保存到配置后的SecurityContextRepository，同时清除SecurityContextHolder所持有的SecurityContext；<br>UsernamePasswordAuthenticationFilter：用于处理来自表单提交的认证，该表单必须提供对应的用户名和密码，其内部还有登录成功或失败后进行处理的AuthenticationSuccessHandler和AuthenticationFailureHandler，这些都可以根据需求做相关改变；<br>Filter Security Interceptor：用于保护web资源，使用AccessDecisionManager对当前用户进行授权访问；<br>ExceptionTranslationFilter：捕获来着FilterChain所有的异常，并进行处理，但它只会处理两类异常：AuthenticationException和AccessDeniedException，其他异常会继续抛出。</p>\n<h4 id=\"2-3-认证流程\"><a href=\"#2-3-认证流程\" class=\"headerlink\" title=\"2.3. 认证流程\"></a>2.3. 认证流程</h4><img src=\"/2024/04/03/SpringSecurity%E5%AD%A6%E4%B9%A01%E2%80%94SpringSecurity%E8%AE%A4%E8%AF%81/2.png\" class=\"\">\n<p>AuthenticationManager：定义认证Authentication的方法<br>UserDetailsService：加载用户特定数据的核心接口，里面定义了一个根据用户名查询用户信息的方法<br>UserDetails接口：提供核心用户信息，通过UserDetailsService根据用户名获取处理的用户信息，要封装成UserDetails对象返回，然后将这些信息封装到Authentication对象中。<br>入门案例<br>引入依赖<br>首先，我们引入SpringSecurity的依赖</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">&lt;dependency&gt;<br>           &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;<br>           &lt;artifactId&gt;spring-boot-starter-security&lt;/artifactId&gt;<br>       &lt;/dependency&gt;<br></code></pre></td></tr></table></figure>\n<p>然后定义一个测试接口，用于测试SpringSecurity：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> com.yang.controller;<br><br><span class=\"hljs-keyword\">import</span> com.yang.infrastructure.common.Response;<br><span class=\"hljs-keyword\">import</span> org.springframework.web.bind.annotation.GetMapping;<br><span class=\"hljs-keyword\">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><span class=\"hljs-keyword\">import</span> org.springframework.web.bind.annotation.RestController;<br><br><span class=\"hljs-meta\">@RestController</span><br><span class=\"hljs-meta\">@RequestMapping(value = &quot;/security&quot;)</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">SecurityController</span> &#123;<br><br>    <span class=\"hljs-meta\">@GetMapping(value = &quot;/hello&quot;)</span><br>    <span class=\"hljs-keyword\">public</span> Response <span class=\"hljs-title function_\">hello</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> Response.success(<span class=\"hljs-string\">&quot;hello&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>启动项目，访问&#x2F;security&#x2F;hello接口，此时会跳转到登录界面</p>\n<img src=\"/2024/04/03/SpringSecurity%E5%AD%A6%E4%B9%A01%E2%80%94SpringSecurity%E8%AE%A4%E8%AF%81/3.png\" class=\"\">\n<p>在控制台中，我们可以看到如下内容</p>\n<img src=\"/2024/04/03/SpringSecurity%E5%AD%A6%E4%B9%A01%E2%80%94SpringSecurity%E8%AE%A4%E8%AF%81/4.png\" class=\"\">\n<p>我们使用user用户名，以及控制台中的密码，在表单提交登录,此时便会跳转到登录成功页面。</p>\n<img src=\"/2024/04/03/SpringSecurity%E5%AD%A6%E4%B9%A01%E2%80%94SpringSecurity%E8%AE%A4%E8%AF%81/5.png\" class=\"\">\n<h4 id=\"2-4-2-UserDetailsService\"><a href=\"#2-4-2-UserDetailsService\" class=\"headerlink\" title=\"2.4.2. UserDetailsService\"></a>2.4.2. UserDetailsService</h4><p>在每次启动项目的时候，我们查看控制台时，总是能看到下面生成了一串UUID字符串</p>\n<img src=\"/2024/04/03/SpringSecurity%E5%AD%A6%E4%B9%A01%E2%80%94SpringSecurity%E8%AE%A4%E8%AF%81/6.png\" class=\"\">\n<p>这是因为在默认情况下，SpringSecurity自动化地帮我们完成以下三件事情：<br>1）开启FormLogin登录认证模式：假设我们还没有登录，然后访问&#x2F;security&#x2F;hello测试接口，那么请求会被重定向到页面&#x2F;login，提示使用用户名和密码登录。<br>2）生成用于登录的用户名和密码：用户名是user，密码就是上面启动日志中随机生成的字符串<br>3）注册用于认证和鉴权的过滤器：SpringSecurity本质就是通过过滤器或过滤器（链）实现的，每一个接口请求都会按顺序经过这些过滤器的“过滤”，每个过滤器承担各自的职责，组合起来共同完成认证和鉴权，根据配置的不同，注册的过滤器有所不同。<br>使用默认用户名和随机密码的方式不够灵活，因此，我们可以实现SpringSecurity提供的UserDetailsService接口。这里先介绍SpringSecurity预置的两种常见的存储介质实现：<br>1）InMemoryUserDetailsManager：基于内存的实现<br>2）JdbcUserDetailsManager：基于数据库的实现<br>我们介绍以下InMemoryUserDetailsManager，我们创建用户实例和InMemoryUserDetailsManager实例，并使用@Bean将InMemoryUserDetailsManager实例注入到SpringSecurity中</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Configuration</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">SecurityConfig</span> &#123;<br><br>    <span class=\"hljs-meta\">@Bean</span><br>    <span class=\"hljs-keyword\">public</span> UserDetailsManager <span class=\"hljs-title function_\">users</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-type\">UserDetails</span> <span class=\"hljs-variable\">user</span> <span class=\"hljs-operator\">=</span> User.builder()<br>                .username(<span class=\"hljs-string\">&quot;cxy&quot;</span>)<br>                .password(<span class=\"hljs-string\">&quot;&#123;bcrypt&#125;$2a$10$CrPsv1X3hM&quot;</span> +<br>                        <span class=\"hljs-string\">&quot;.giwVZyNsrKuaRvpJZyGQycJg78xT7Dm68K4DWN/lxS&quot;</span>) <span class=\"hljs-comment\">// 使用Bcrypt算法加密</span><br>                .roles(<span class=\"hljs-string\">&quot;USER&quot;</span>)<br>                .build();<br><br>        <span class=\"hljs-type\">InMemoryUserDetailsManager</span> <span class=\"hljs-variable\">manager</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">InMemoryUserDetailsManager</span>();<br>        manager.createUser(user);<br>        <span class=\"hljs-keyword\">return</span> manager;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>重新启动项目，访问测试接口&#x2F;security&#x2F;hello，用户名输入cxy，密码输入123456</p>\n<img src=\"/2024/04/03/SpringSecurity%E5%AD%A6%E4%B9%A01%E2%80%94SpringSecurity%E8%AE%A4%E8%AF%81/7.png\" class=\"\">\n<img src=\"/2024/04/03/SpringSecurity%E5%AD%A6%E4%B9%A01%E2%80%94SpringSecurity%E8%AE%A4%E8%AF%81/8.png\" class=\"\">\n<p>JdbcUserDetailsManager的实现与InMemoryUserDetailsManager类似，这里就不赘述了。<br>除了上面这两种内置实现，我们还可以自定义UserDetailsService的实现。但这里不进行介绍，因为UserDetailsService是基于表单认证这种模式的，而有时候，我们的登录方式、登录页面与它提供的又不一样，因此，我们下面会讲到，如何接入我们自定义的登录接口，登录方式。</p>\n<h4 id=\"2-4-3-登录和注册放行\"><a href=\"#2-4-3-登录和注册放行\" class=\"headerlink\" title=\"2.4.3. 登录和注册放行\"></a>2.4.3. 登录和注册放行</h4><p>上面这种整合方式，会对所有的请求进行拦截，但是一般情况下，我们是不拦截用户登录和用户注册接口的，而且现在的项目一般是前后端分离，没必要跳转到专门的登录页面。<br>这里使用的springboot版本是2.7.0，在Spring Boot 2.7.0之前的版本中，我们需要写个配置类继承WebSecurityConfigurerAdapter，然后重写Adapter中的三个方法进行配置，如下所示：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Configuration</span><br><span class=\"hljs-meta\">@EnableWebSecurity</span><br><span class=\"hljs-meta\">@EnableGlobalMethodSecurity(prePostEnabled = true)</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">OldSecurityConfig</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">WebSecurityConfigurerAdapter</span> &#123;<br>    <span class=\"hljs-meta\">@Autowired</span><br>    <span class=\"hljs-keyword\">private</span> UmsAdminService adminService;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">protected</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">configure</span><span class=\"hljs-params\">(HttpSecurity httpSecurity)</span> <span class=\"hljs-keyword\">throws</span> Exception &#123;<br>        <span class=\"hljs-comment\">//省略HttpSecurity的配置</span><br>    &#125;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">protected</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">configure</span><span class=\"hljs-params\">(AuthenticationManagerBuilder auth)</span> <span class=\"hljs-keyword\">throws</span> Exception &#123;<br>        auth.userDetailsService(userDetailsService())<br>                .passwordEncoder(passwordEncoder());<br>    &#125;<br>    <br>    <span class=\"hljs-meta\">@Bean</span><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> AuthenticationManager <span class=\"hljs-title function_\">authenticationManagerBean</span><span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">throws</span> Exception &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">super</span>.authenticationManagerBean();<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>\n<p>但这种方式在SpringBoot 2.7.0中，WebSecurityConfigurerAdapter已经被弃用了，新用法中，无需继承WebSecurityConfigurerAdapter，只需要直接声明一个配置类，再配置一个生成SecurityFilterChainBean方法，配置信息如下，我们对&#x2F;user&#x2F;login和&#x2F;user&#x2F;register接口，进行放行，而其他接口，都需要进行验证。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> com.yang.infrastructure.auth.config;<br><br><span class=\"hljs-keyword\">import</span> org.springframework.context.annotation.Bean;<br><span class=\"hljs-keyword\">import</span> org.springframework.context.annotation.Configuration;<br><span class=\"hljs-keyword\">import</span> org.springframework.security.config.annotation.web.builders.HttpSecurity;<br><span class=\"hljs-keyword\">import</span> org.springframework.security.config.http.SessionCreationPolicy;<br><span class=\"hljs-keyword\">import</span> org.springframework.security.web.SecurityFilterChain;<br><br><span class=\"hljs-meta\">@Configuration</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">SecurityConfig</span> &#123;<br>    <span class=\"hljs-meta\">@Bean</span><br>    SecurityFilterChain <span class=\"hljs-title function_\">filterChain</span><span class=\"hljs-params\">(HttpSecurity httpSecurity)</span> <span class=\"hljs-keyword\">throws</span> Exception &#123;<br>        <span class=\"hljs-comment\">// 登录和注册接口，放行</span><br>        <span class=\"hljs-keyword\">return</span> httpSecurity.authorizeRequests()<br>                .antMatchers(<span class=\"hljs-string\">&quot;/user/login&quot;</span>).permitAll()<br>                .antMatchers(<span class=\"hljs-string\">&quot;/user/register&quot;</span>).permitAll()<br>                .anyRequest().authenticated()<br>                .and()<br>                .csrf().disable()<br>                .sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS) <span class=\"hljs-comment\">// 设置无状态连接，即不创建session</span><br>                .and()<br>                .cors().disable() <span class=\"hljs-comment\">// 解决跨域问题</span><br>                .build();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>http.authorizeHttpRequests(): 指定哪些请求需要什么样的认证或授权，这里使用anyRequest()和authenticated()表示所有请求均需要认证。<br>http.authorizeHttpRequests()：表示我们使用HttpBasic认证。<br>在上面的配置中，我们配置了登录接口和注册接口允许放行，其他接口进行拦截，然后我们访问登录接口，可以看出登录接口放行通过，能顺利访问。</p>\n<img src=\"/2024/04/03/SpringSecurity%E5%AD%A6%E4%B9%A01%E2%80%94SpringSecurity%E8%AE%A4%E8%AF%81/9.png\" class=\"\">\n<p>再访问&#x2F;security&#x2F;hello接口，结果是403，说明无权访问。</p>\n<img src=\"/2024/04/03/SpringSecurity%E5%AD%A6%E4%B9%A01%E2%80%94SpringSecurity%E8%AE%A4%E8%AF%81/10.png\" class=\"\">\n<h5 id=\"2-4-4-异常处理\"><a href=\"#2-4-4-异常处理\" class=\"headerlink\" title=\"2.4.4. 异常处理\"></a>2.4.4. 异常处理</h5><p>在最开始的时候，我们没有配置任何东西时，没有权限便会默认跳转到用户登录界面，现在因为我们没有配置登录表单路径，所以会直接提示403，我们可以在配置类中，配置异常处理方式，方便返回一些格式化的数据供前端做出决策。<br>我们创建一个JwtAuthenticationExceptionHandler，该类实现自AuthenticationEntryPoint接口</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">JwtAuthenticationExceptionHandler</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">AuthenticationEntryPoint</span> &#123;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">commence</span><span class=\"hljs-params\">(HttpServletRequest request, HttpServletResponse response, AuthenticationException authException)</span> <span class=\"hljs-keyword\">throws</span> IOException, ServletException &#123;<br>        sendErrorResponse(response);<br>    &#125;<br><br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">sendErrorResponse</span><span class=\"hljs-params\">(HttpServletResponse response)</span> <span class=\"hljs-keyword\">throws</span> IOException &#123;<br>        Response&lt;Object&gt; errorResponse = Response.fail(ResultCode.AUTHENTICATION_FAIL);<br>        response.setCharacterEncoding(<span class=\"hljs-string\">&quot;UTF-8&quot;</span>);<br>        response.setStatus(HttpStatus.UNAUTHORIZED.value());<br>        <span class=\"hljs-type\">PrintWriter</span> <span class=\"hljs-variable\">writer</span> <span class=\"hljs-operator\">=</span> response.getWriter();<br>        writer.write(JSONObject.toJSONString(errorResponse));<br>        writer.flush();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>然后我们修改SpringSecurity的配置类，添加上和异常处理相关的配置：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Configuration</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">SecurityConfig</span> &#123;<br>    <span class=\"hljs-meta\">@Bean</span><br>    SecurityFilterChain <span class=\"hljs-title function_\">filterChain</span><span class=\"hljs-params\">(HttpSecurity httpSecurity)</span> <span class=\"hljs-keyword\">throws</span> Exception &#123;<br>        <span class=\"hljs-comment\">// 登录和注册接口，放行</span><br>        <span class=\"hljs-keyword\">return</span> httpSecurity.authorizeRequests()<br>                .antMatchers(<span class=\"hljs-string\">&quot;/user/login&quot;</span>).permitAll()<br>                .antMatchers(<span class=\"hljs-string\">&quot;/user/register&quot;</span>).permitAll()<br>                .anyRequest().authenticated()<br>                .and()<br>                .csrf().disable()<br>                .sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS) <span class=\"hljs-comment\">// 设置无状态连接，即不创建session</span><br>                .and()<br>                .cors().disable() <span class=\"hljs-comment\">// 解决跨域问题</span><br>                .exceptionHandling()<br>                .authenticationEntryPoint(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">JwtAuthenticationExceptionHandler</span>()) <span class=\"hljs-comment\">// 未认证异常处理</span><br>                .and()<br>                .build();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>接着再次访问&#x2F;security&#x2F;hello接口，结果如下：</p>\n<img src=\"/2024/04/03/SpringSecurity%E5%AD%A6%E4%B9%A01%E2%80%94SpringSecurity%E8%AE%A4%E8%AF%81/11.png\" class=\"\">\n<p>同理，在权限不足的情况下，我们也可以实现相关的异常处理类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">JwtAccessDeniedExceptionHandler</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">AccessDeniedHandler</span> &#123;<br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">handle</span><span class=\"hljs-params\">(HttpServletRequest request, HttpServletResponse response, AccessDeniedException accessDeniedException)</span> <span class=\"hljs-keyword\">throws</span> IOException, ServletException &#123;<br>        sendErrorResponse(response);<br>    &#125;<br><br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">sendErrorResponse</span><span class=\"hljs-params\">(HttpServletResponse response)</span> <span class=\"hljs-keyword\">throws</span> IOException &#123;<br>        Response&lt;Object&gt; errorResponse = Response.fail(ResultCode.ACCESS_DENIED);<br>        response.setCharacterEncoding(<span class=\"hljs-string\">&quot;UTF-8&quot;</span>);<br>        response.setStatus(HttpStatus.UNAUTHORIZED.value());<br>        <span class=\"hljs-type\">PrintWriter</span> <span class=\"hljs-variable\">writer</span> <span class=\"hljs-operator\">=</span> response.getWriter();<br>        writer.write(JSONObject.toJSONString(errorResponse));<br>        writer.flush();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>修改配置类：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Configuration</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">SecurityConfig</span> &#123;<br>    <span class=\"hljs-meta\">@Bean</span><br>    SecurityFilterChain <span class=\"hljs-title function_\">filterChain</span><span class=\"hljs-params\">(HttpSecurity httpSecurity)</span> <span class=\"hljs-keyword\">throws</span> Exception &#123;<br>        <span class=\"hljs-comment\">// 登录和注册接口，放行</span><br>        <span class=\"hljs-keyword\">return</span> httpSecurity.authorizeRequests()<br>                .antMatchers(<span class=\"hljs-string\">&quot;/user/login&quot;</span>).permitAll()<br>                .antMatchers(<span class=\"hljs-string\">&quot;/user/register&quot;</span>).permitAll()<br>                .anyRequest().authenticated()<br>                .and()<br>                .csrf().disable()<br>                .sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS) <span class=\"hljs-comment\">// 设置无状态连接，即不创建session</span><br>                .and()<br>                .cors().disable() <span class=\"hljs-comment\">// 解决跨域问题</span><br>                .exceptionHandling()<br>                .authenticationEntryPoint(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">JwtAuthenticationExceptionHandler</span>()) <span class=\"hljs-comment\">// 未认证异常处理</span><br>                .accessDeniedHandler(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">JwtAccessDeniedExceptionHandler</span>()) <span class=\"hljs-comment\">// 权限不足异常处理</span><br>                .and()<br>                .build();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h5 id=\"2-4-5-认证过滤器\"><a href=\"#2-4-5-认证过滤器\" class=\"headerlink\" title=\"2.4.5. 认证过滤器\"></a>2.4.5. 认证过滤器</h5><p>当我们登录成功后，一般会返回一个token，然后前端后续将这个token，携带于请求头，想后端发起访问，后端解析这个token，来判断该请求是否认证通过，通过，则放行。在SpringSecurity中，我们可以通过addFilterBefore()将我们自定义过滤器添加上去，然后再我们的自定义过滤器中，实现相关的token解析逻辑。<br>首先我们定义一个MyUserDetails类，实现UserDetails接口，UserDetails提供用户的核心信息，在前两篇文章中，用户的核心信息，存储于UserContextDetails类中，这里我们沿用该类，当然，也可以自己重新定义一个类用于保存用户的核心信息，甚至直接把用户实体类作为核心信息，这个依据项目的需要。目前的实现中，除了获取用户名之外，其他都是空实现，因为其他的接口，暂时还不需要。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> com.yang.infrastructure.security;<br><br><span class=\"hljs-keyword\">import</span> com.yang.infrastructure.auth.UserContextDetails;<br><span class=\"hljs-keyword\">import</span> lombok.Data;<br><span class=\"hljs-keyword\">import</span> org.springframework.security.core.GrantedAuthority;<br><span class=\"hljs-keyword\">import</span> org.springframework.security.core.userdetails.UserDetails;<br><br><span class=\"hljs-keyword\">import</span> java.util.Collection;<br><br><span class=\"hljs-meta\">@Data</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MyUserDetails</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">UserDetails</span> &#123;<br>    <span class=\"hljs-keyword\">private</span> UserContextDetails userContextDetails;<br><br>    <span class=\"hljs-keyword\">private</span> String password;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">MyUserDetails</span><span class=\"hljs-params\">(UserContextDetails userContextDetails)</span> &#123;<br>        <span class=\"hljs-built_in\">this</span>.userContextDetails = userContextDetails;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">MyUserDetails</span><span class=\"hljs-params\">(UserContextDetails userContextDetails, String password)</span> &#123;<br>        <span class=\"hljs-built_in\">this</span>.userContextDetails = userContextDetails;<br>        <span class=\"hljs-built_in\">this</span>.password = password;<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> Collection&lt;? <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">GrantedAuthority</span>&gt; getAuthorities() &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>;<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title function_\">getPassword</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>.password;<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title function_\">getUsername</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> userContextDetails.getUsername();<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">isAccountNonExpired</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">isAccountNonLocked</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">isCredentialsNonExpired</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">isEnabled</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>我们我们添加一个JwtTokenVerifyFilter，这个类继承于OncePerRequestFilter，其具体实现如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> com.yang.infrastructure.security.filter;<br><br><span class=\"hljs-keyword\">import</span> com.alibaba.fastjson.JSONObject;<br><span class=\"hljs-keyword\">import</span> com.yang.domain.data.Role;<br><span class=\"hljs-keyword\">import</span> com.yang.infrastructure.auth.PermissionDetails;<br><span class=\"hljs-keyword\">import</span> com.yang.infrastructure.auth.UserContextDetails;<br><span class=\"hljs-keyword\">import</span> com.yang.infrastructure.auth.config.JwtTokenProperty;<br><span class=\"hljs-keyword\">import</span> com.yang.infrastructure.auth.request.JwtTokenVerifyRequest;<br><span class=\"hljs-keyword\">import</span> com.yang.infrastructure.auth.response.JwtTokenVerifyDTO;<br><span class=\"hljs-keyword\">import</span> com.yang.infrastructure.auth.service.JwtTokenService;<br><span class=\"hljs-keyword\">import</span> com.yang.infrastructure.security.MyUserDetails;<br><span class=\"hljs-keyword\">import</span> com.yang.infrastructure.utils.RedisUtils;<br><span class=\"hljs-keyword\">import</span> com.yang.infrastructure.utils.SpringContextUtils;<br><span class=\"hljs-keyword\">import</span> org.apache.commons.lang3.StringUtils;<br><span class=\"hljs-keyword\">import</span> org.springframework.security.authentication.UsernamePasswordAuthenticationToken;<br><span class=\"hljs-keyword\">import</span> org.springframework.security.core.context.SecurityContextHolder;<br><span class=\"hljs-keyword\">import</span> org.springframework.security.core.userdetails.UserDetails;<br><span class=\"hljs-keyword\">import</span> org.springframework.web.filter.OncePerRequestFilter;<br><br><span class=\"hljs-keyword\">import</span> javax.servlet.FilterChain;<br><span class=\"hljs-keyword\">import</span> javax.servlet.ServletException;<br><span class=\"hljs-keyword\">import</span> javax.servlet.http.HttpServletRequest;<br><span class=\"hljs-keyword\">import</span> javax.servlet.http.HttpServletResponse;<br><span class=\"hljs-keyword\">import</span> java.io.IOException;<br><span class=\"hljs-keyword\">import</span> java.util.List;<br><span class=\"hljs-keyword\">import</span> java.util.stream.Collectors;<br><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">JwtTokenVerifyFilter</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">OncePerRequestFilter</span> &#123;<br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">protected</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">doFilterInternal</span><span class=\"hljs-params\">(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)</span> <span class=\"hljs-keyword\">throws</span> ServletException, IOException &#123;<br>        <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">token</span> <span class=\"hljs-operator\">=</span> request.getHeader(<span class=\"hljs-string\">&quot;token&quot;</span>);<br>        <span class=\"hljs-keyword\">if</span> (StringUtils.isEmpty(token)) &#123;<br>            filterChain.doFilter(request, response);<br>            <span class=\"hljs-keyword\">return</span>;<br>        &#125;<br><br>        <span class=\"hljs-type\">UserContextDetails</span> <span class=\"hljs-variable\">userContextDetails</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-literal\">null</span>;<br>        <span class=\"hljs-type\">Object</span> <span class=\"hljs-variable\">userDetailsFromRedis</span> <span class=\"hljs-operator\">=</span> getUserDetailsFromRedis(token);<br>        <span class=\"hljs-keyword\">if</span> (userDetailsFromRedis != <span class=\"hljs-literal\">null</span>) &#123;<br>            userContextDetails = (UserContextDetails) userDetailsFromRedis;<br>        &#125;<br><br>        <span class=\"hljs-keyword\">if</span> (userContextDetails == <span class=\"hljs-literal\">null</span>) &#123;<br>            <span class=\"hljs-type\">JwtTokenService</span> <span class=\"hljs-variable\">jwtTokenService</span> <span class=\"hljs-operator\">=</span> SpringContextUtils.getBeanOfType(JwtTokenService.class);<br>            <span class=\"hljs-type\">JwtTokenProperty</span> <span class=\"hljs-variable\">jwtTokenProperty</span> <span class=\"hljs-operator\">=</span> SpringContextUtils.getBeanOfType(JwtTokenProperty.class);<br><br>            <span class=\"hljs-type\">JwtTokenVerifyRequest</span> <span class=\"hljs-variable\">jwtTokenVerifyRequest</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">JwtTokenVerifyRequest</span>();<br>            jwtTokenVerifyRequest.setToken(token);<br>            jwtTokenVerifyRequest.setSecret(jwtTokenProperty.getSecret());<br><br>            <span class=\"hljs-type\">JwtTokenVerifyDTO</span> <span class=\"hljs-variable\">verify</span> <span class=\"hljs-operator\">=</span> jwtTokenService.verify(jwtTokenVerifyRequest);<br>            <span class=\"hljs-keyword\">if</span> (verify == <span class=\"hljs-literal\">null</span>) &#123;<br>                filterChain.doFilter(request, response);<br>                <span class=\"hljs-keyword\">return</span>;<br>            &#125;<br><br>            userContextDetails = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">UserContextDetails</span>();<br>            userContextDetails.setId(Integer.valueOf(verify.getSubject()));<br>            userContextDetails.setToken(token);<br>            userContextDetails.setUsername(verify.getPayLoads().get(<span class=\"hljs-string\">&quot;username&quot;</span>));<br>            userContextDetails.setExtendMap(verify.getPayLoads());<br>            List&lt;Role&gt; roles = JSONObject.parseArray(verify.getPayLoads().get(<span class=\"hljs-string\">&quot;roles&quot;</span>), Role.class);<br>            userContextDetails.setPermissionDetails(roles.stream().map(role -&gt; &#123;<br>                <span class=\"hljs-type\">PermissionDetails</span> <span class=\"hljs-variable\">permissionDetails</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">PermissionDetails</span>();<br>                permissionDetails.setName(role.getCode());<br>                <span class=\"hljs-keyword\">return</span> permissionDetails;<br>            &#125;).collect(Collectors.toList()));<br>        &#125;<br><br>        <span class=\"hljs-keyword\">if</span> (userContextDetails == <span class=\"hljs-literal\">null</span>) &#123;<br>            filterChain.doFilter(request, response);<br>            <span class=\"hljs-keyword\">return</span>;<br>        &#125;<br>        <span class=\"hljs-type\">UserDetails</span> <span class=\"hljs-variable\">userDetails</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">MyUserDetails</span>(userContextDetails);<br>        <span class=\"hljs-type\">UsernamePasswordAuthenticationToken</span> <span class=\"hljs-variable\">authenticationToken</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">UsernamePasswordAuthenticationToken</span>(userDetails, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-literal\">null</span>);<br>        SecurityContextHolder.getContext().setAuthentication(authenticationToken);<br>        filterChain.doFilter(request, response);<br>    &#125;<br><br>    <span class=\"hljs-keyword\">private</span> Object <span class=\"hljs-title function_\">getUserDetailsFromRedis</span><span class=\"hljs-params\">(String token)</span> &#123;<br>        <span class=\"hljs-type\">RedisUtils</span> <span class=\"hljs-variable\">redisUtils</span> <span class=\"hljs-operator\">=</span> SpringContextUtils.getBeanOfType(RedisUtils.class);<br>        <span class=\"hljs-keyword\">return</span> redisUtils.getKey(<span class=\"hljs-string\">&quot;token:&quot;</span> + token);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>其实从上面的实现中，会发现，与我们之前的JwtTokenVerifyInterceptor很像，不过我们当时只是简单地通过线程上下文来传递用户核心信息，而SpringSecurity对此进一步作出封装:<br>1）UsernamePasswordAuthenticationToken：SpringSecurity用于表示基于用户名和密码地身份验证对象，继承自AbstractAuthenticationToken类，包含了用户名和密码等凭据信息，在身份验证过程中，UsernamePasswordAuthenticationToken用于封装用户提交地身份验证凭据，并在后续身份验证过程中进行传递和处理。<br>2）SecurityContextHolder：SpringSecurity用于管理安全上下文地持有者，提供一个静态方法getContext()用于获取当前线程中地安全上下文。<br>最后，我们将这个过滤器，添加到SpringSecurity的配置类中</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Configuration</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">SecurityConfig</span> &#123;<br>    <span class=\"hljs-meta\">@Bean</span><br>    SecurityFilterChain <span class=\"hljs-title function_\">filterChain</span><span class=\"hljs-params\">(HttpSecurity httpSecurity)</span> <span class=\"hljs-keyword\">throws</span> Exception &#123;<br>        <span class=\"hljs-comment\">// 登录和注册接口，放行</span><br>        <span class=\"hljs-keyword\">return</span> httpSecurity.authorizeRequests()<br>                .antMatchers(<span class=\"hljs-string\">&quot;/user/login&quot;</span>).permitAll()<br>                .antMatchers(<span class=\"hljs-string\">&quot;/user/register&quot;</span>).permitAll()<br>                .anyRequest().authenticated()<br>                .and()<br>                .csrf().disable()<br>                .sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS) <span class=\"hljs-comment\">// 设置无状态连接，即不创建session</span><br>                .and()<br>                .cors().disable() <span class=\"hljs-comment\">// 解决跨域问题</span><br>                .exceptionHandling()<br>                .authenticationEntryPoint(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">JwtAuthenticationExceptionHandler</span>()) <span class=\"hljs-comment\">// 未认证异常处理</span><br>                .accessDeniedHandler(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">JwtAccessDeniedExceptionHandler</span>()) <span class=\"hljs-comment\">// 权限不足异常处理</span><br>                .and()<br>                .addFilterBefore(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">JwtTokenVerifyFilter</span>(), UsernamePasswordAuthenticationFilter.class) <span class=\"hljs-comment\">// 添加自定义过滤器</span><br>                .build();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>然后我们启动项目，先进行登录</p>\n<img src=\"/2024/04/03/SpringSecurity%E5%AD%A6%E4%B9%A01%E2%80%94SpringSecurity%E8%AE%A4%E8%AF%81/12.png\" class=\"\">\n<p>登录成功后，携带该token，作为请求头，访问&#x2F;security&#x2F;hello测试接口,访问成功</p>\n<img src=\"/2024/04/03/SpringSecurity%E5%AD%A6%E4%B9%A01%E2%80%94SpringSecurity%E8%AE%A4%E8%AF%81/13.png\" class=\"\">\n<p>然后我们携带一个无效的token，作为请求头，再次访问&#x2F;security&#x2F;hello测试接口</p>\n<img src=\"/2024/04/03/SpringSecurity%E5%AD%A6%E4%B9%A01%E2%80%94SpringSecurity%E8%AE%A4%E8%AF%81/14.png\" class=\"\">\n\n<h3 id=\"3-参考文章\"><a href=\"#3-参考文章\" class=\"headerlink\" title=\"3. 参考文章\"></a>3. 参考文章</h3><p><a href=\"https://segmentfault.com/a/1190000041947192\">https://segmentfault.com/a/1190000041947192</a><br><a href=\"https://blog.csdn.net/m0_37989980/article/details/107519382\">https://blog.csdn.net/m0_37989980/article/details/107519382</a><br><a href=\"https://zhuanlan.zhihu.com/p/455858001\">https://zhuanlan.zhihu.com/p/455858001</a></p>\n","excerpt":"","more":"<h3 id=\"1-简介\"><a href=\"#1-简介\" class=\"headerlink\" title=\"1. 简介\"></a>1. 简介</h3><p>Spring Security是一个用于包含应用程序安全性的Java框架，它提供了一套全面的安全解决方案，包括身份验证、授权、防止攻击等功能。它基于过滤器链的概念，可以轻松地集成到任何基于Spring的应用程序中，它支持多种身份验证选项和授权策略，此外，还提供一些附加功能，如集成第三方身份验证提供商和单点登录，以及会话管理和密码编码等。</p>\n<h3 id=\"2-SpringBoot整合SpringSecurity\"><a href=\"#2-SpringBoot整合SpringSecurity\" class=\"headerlink\" title=\"2. SpringBoot整合SpringSecurity\"></a>2. SpringBoot整合SpringSecurity</h3><h4 id=\"2-1-引言\"><a href=\"#2-1-引言\" class=\"headerlink\" title=\"2.1. 引言\"></a>2.1. 引言</h4><p>代码实现，基于前两章提到的登录、注册和鉴权项目，这里将使用SpringSecurity框架，逐步替代前两章自定义的认证授权实现。首先，注释掉WebMvcConfiguration类，去除该类对我们后续使用SpringSecurity的影响。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">//package com.yang.infrastructure.configuration;</span><br><span class=\"hljs-comment\">//</span><br><span class=\"hljs-comment\">//import com.yang.infrastructure.auth.interceptors.JwtTokenVerifyInterceptor;</span><br><span class=\"hljs-comment\">//import com.yang.infrastructure.auth.interceptors.PermissionVerifyInterceptor;</span><br><span class=\"hljs-comment\">//import org.springframework.context.annotation.Configuration;</span><br><span class=\"hljs-comment\">//import org.springframework.web.servlet.config.annotation.InterceptorRegistry;</span><br><span class=\"hljs-comment\">//import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;</span><br><span class=\"hljs-comment\">//</span><br><span class=\"hljs-comment\">//@Configuration</span><br><span class=\"hljs-comment\">//public class WebMvcConfiguration implements WebMvcConfigurer &#123;</span><br><span class=\"hljs-comment\">//</span><br><span class=\"hljs-comment\">//    @Override</span><br><span class=\"hljs-comment\">//    public void addInterceptors(InterceptorRegistry registry) &#123;</span><br><span class=\"hljs-comment\">//        registry.addInterceptor(new JwtTokenVerifyInterceptor())</span><br><span class=\"hljs-comment\">//                .addPathPatterns(&quot;/**&quot;) // 拦截所有请求</span><br><span class=\"hljs-comment\">//                .excludePathPatterns(&quot;/user/login&quot;, &quot;/user/register&quot;); // 排除登录、注册接口</span><br><span class=\"hljs-comment\">//</span><br><span class=\"hljs-comment\">//        PermissionVerifyInterceptor permissionVerifyInterceptor = new PermissionVerifyInterceptor();</span><br><span class=\"hljs-comment\">//        permissionVerifyInterceptor.addPermission(&quot;STUDENT&quot;, &quot;/student/needPermission&quot;);</span><br><span class=\"hljs-comment\">//        permissionVerifyInterceptor.addPermission(&quot;COUNSELOR&quot;, &quot;/counselor/*&quot;);</span><br><span class=\"hljs-comment\">//</span><br><span class=\"hljs-comment\">//        registry.addInterceptor(permissionVerifyInterceptor)</span><br><span class=\"hljs-comment\">//                .addPathPatterns(&quot;/**&quot;) // 拦截所有请求</span><br><span class=\"hljs-comment\">//                .excludePathPatterns(&quot;/user/login&quot;, &quot;/user/register&quot;); // 排除登录、注册接口</span><br><span class=\"hljs-comment\">//    &#125;</span><br><span class=\"hljs-comment\">//&#125;</span><br></code></pre></td></tr></table></figure>\n<h4 id=\"2-2-SpringSecurity完整流程\"><a href=\"#2-2-SpringSecurity完整流程\" class=\"headerlink\" title=\"2.2. SpringSecurity完整流程\"></a>2.2. SpringSecurity完整流程</h4><p>SpringSecurity功能的实现主要是一系列过滤器链相互配合完成的</p>\n<img src=\"/2024/04/03/SpringSecurity%E5%AD%A6%E4%B9%A01%E2%80%94SpringSecurity%E8%AE%A4%E8%AF%81/1.png\" class=\"\">\n<p>SecurityContextPersistenceFilter：整个拦截过程的入口和出口（也就是第一个和最后一个拦截器），会在请求开始时从配置后的SecurityContextRepository中获取SecurityContext，然后把它设置给SecurityContextHolder，请求完成后将SecurityContextHolder持有的SecurityContext再保存到配置后的SecurityContextRepository，同时清除SecurityContextHolder所持有的SecurityContext；<br>UsernamePasswordAuthenticationFilter：用于处理来自表单提交的认证，该表单必须提供对应的用户名和密码，其内部还有登录成功或失败后进行处理的AuthenticationSuccessHandler和AuthenticationFailureHandler，这些都可以根据需求做相关改变；<br>Filter Security Interceptor：用于保护web资源，使用AccessDecisionManager对当前用户进行授权访问；<br>ExceptionTranslationFilter：捕获来着FilterChain所有的异常，并进行处理，但它只会处理两类异常：AuthenticationException和AccessDeniedException，其他异常会继续抛出。</p>\n<h4 id=\"2-3-认证流程\"><a href=\"#2-3-认证流程\" class=\"headerlink\" title=\"2.3. 认证流程\"></a>2.3. 认证流程</h4><img src=\"/2024/04/03/SpringSecurity%E5%AD%A6%E4%B9%A01%E2%80%94SpringSecurity%E8%AE%A4%E8%AF%81/2.png\" class=\"\">\n<p>AuthenticationManager：定义认证Authentication的方法<br>UserDetailsService：加载用户特定数据的核心接口，里面定义了一个根据用户名查询用户信息的方法<br>UserDetails接口：提供核心用户信息，通过UserDetailsService根据用户名获取处理的用户信息，要封装成UserDetails对象返回，然后将这些信息封装到Authentication对象中。<br>入门案例<br>引入依赖<br>首先，我们引入SpringSecurity的依赖</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">&lt;dependency&gt;<br>           &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;<br>           &lt;artifactId&gt;spring-boot-starter-security&lt;/artifactId&gt;<br>       &lt;/dependency&gt;<br></code></pre></td></tr></table></figure>\n<p>然后定义一个测试接口，用于测试SpringSecurity：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> com.yang.controller;<br><br><span class=\"hljs-keyword\">import</span> com.yang.infrastructure.common.Response;<br><span class=\"hljs-keyword\">import</span> org.springframework.web.bind.annotation.GetMapping;<br><span class=\"hljs-keyword\">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><span class=\"hljs-keyword\">import</span> org.springframework.web.bind.annotation.RestController;<br><br><span class=\"hljs-meta\">@RestController</span><br><span class=\"hljs-meta\">@RequestMapping(value = &quot;/security&quot;)</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">SecurityController</span> &#123;<br><br>    <span class=\"hljs-meta\">@GetMapping(value = &quot;/hello&quot;)</span><br>    <span class=\"hljs-keyword\">public</span> Response <span class=\"hljs-title function_\">hello</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> Response.success(<span class=\"hljs-string\">&quot;hello&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>启动项目，访问&#x2F;security&#x2F;hello接口，此时会跳转到登录界面</p>\n<img src=\"/2024/04/03/SpringSecurity%E5%AD%A6%E4%B9%A01%E2%80%94SpringSecurity%E8%AE%A4%E8%AF%81/3.png\" class=\"\">\n<p>在控制台中，我们可以看到如下内容</p>\n<img src=\"/2024/04/03/SpringSecurity%E5%AD%A6%E4%B9%A01%E2%80%94SpringSecurity%E8%AE%A4%E8%AF%81/4.png\" class=\"\">\n<p>我们使用user用户名，以及控制台中的密码，在表单提交登录,此时便会跳转到登录成功页面。</p>\n<img src=\"/2024/04/03/SpringSecurity%E5%AD%A6%E4%B9%A01%E2%80%94SpringSecurity%E8%AE%A4%E8%AF%81/5.png\" class=\"\">\n<h4 id=\"2-4-2-UserDetailsService\"><a href=\"#2-4-2-UserDetailsService\" class=\"headerlink\" title=\"2.4.2. UserDetailsService\"></a>2.4.2. UserDetailsService</h4><p>在每次启动项目的时候，我们查看控制台时，总是能看到下面生成了一串UUID字符串</p>\n<img src=\"/2024/04/03/SpringSecurity%E5%AD%A6%E4%B9%A01%E2%80%94SpringSecurity%E8%AE%A4%E8%AF%81/6.png\" class=\"\">\n<p>这是因为在默认情况下，SpringSecurity自动化地帮我们完成以下三件事情：<br>1）开启FormLogin登录认证模式：假设我们还没有登录，然后访问&#x2F;security&#x2F;hello测试接口，那么请求会被重定向到页面&#x2F;login，提示使用用户名和密码登录。<br>2）生成用于登录的用户名和密码：用户名是user，密码就是上面启动日志中随机生成的字符串<br>3）注册用于认证和鉴权的过滤器：SpringSecurity本质就是通过过滤器或过滤器（链）实现的，每一个接口请求都会按顺序经过这些过滤器的“过滤”，每个过滤器承担各自的职责，组合起来共同完成认证和鉴权，根据配置的不同，注册的过滤器有所不同。<br>使用默认用户名和随机密码的方式不够灵活，因此，我们可以实现SpringSecurity提供的UserDetailsService接口。这里先介绍SpringSecurity预置的两种常见的存储介质实现：<br>1）InMemoryUserDetailsManager：基于内存的实现<br>2）JdbcUserDetailsManager：基于数据库的实现<br>我们介绍以下InMemoryUserDetailsManager，我们创建用户实例和InMemoryUserDetailsManager实例，并使用@Bean将InMemoryUserDetailsManager实例注入到SpringSecurity中</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Configuration</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">SecurityConfig</span> &#123;<br><br>    <span class=\"hljs-meta\">@Bean</span><br>    <span class=\"hljs-keyword\">public</span> UserDetailsManager <span class=\"hljs-title function_\">users</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-type\">UserDetails</span> <span class=\"hljs-variable\">user</span> <span class=\"hljs-operator\">=</span> User.builder()<br>                .username(<span class=\"hljs-string\">&quot;cxy&quot;</span>)<br>                .password(<span class=\"hljs-string\">&quot;&#123;bcrypt&#125;$2a$10$CrPsv1X3hM&quot;</span> +<br>                        <span class=\"hljs-string\">&quot;.giwVZyNsrKuaRvpJZyGQycJg78xT7Dm68K4DWN/lxS&quot;</span>) <span class=\"hljs-comment\">// 使用Bcrypt算法加密</span><br>                .roles(<span class=\"hljs-string\">&quot;USER&quot;</span>)<br>                .build();<br><br>        <span class=\"hljs-type\">InMemoryUserDetailsManager</span> <span class=\"hljs-variable\">manager</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">InMemoryUserDetailsManager</span>();<br>        manager.createUser(user);<br>        <span class=\"hljs-keyword\">return</span> manager;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>重新启动项目，访问测试接口&#x2F;security&#x2F;hello，用户名输入cxy，密码输入123456</p>\n<img src=\"/2024/04/03/SpringSecurity%E5%AD%A6%E4%B9%A01%E2%80%94SpringSecurity%E8%AE%A4%E8%AF%81/7.png\" class=\"\">\n<img src=\"/2024/04/03/SpringSecurity%E5%AD%A6%E4%B9%A01%E2%80%94SpringSecurity%E8%AE%A4%E8%AF%81/8.png\" class=\"\">\n<p>JdbcUserDetailsManager的实现与InMemoryUserDetailsManager类似，这里就不赘述了。<br>除了上面这两种内置实现，我们还可以自定义UserDetailsService的实现。但这里不进行介绍，因为UserDetailsService是基于表单认证这种模式的，而有时候，我们的登录方式、登录页面与它提供的又不一样，因此，我们下面会讲到，如何接入我们自定义的登录接口，登录方式。</p>\n<h4 id=\"2-4-3-登录和注册放行\"><a href=\"#2-4-3-登录和注册放行\" class=\"headerlink\" title=\"2.4.3. 登录和注册放行\"></a>2.4.3. 登录和注册放行</h4><p>上面这种整合方式，会对所有的请求进行拦截，但是一般情况下，我们是不拦截用户登录和用户注册接口的，而且现在的项目一般是前后端分离，没必要跳转到专门的登录页面。<br>这里使用的springboot版本是2.7.0，在Spring Boot 2.7.0之前的版本中，我们需要写个配置类继承WebSecurityConfigurerAdapter，然后重写Adapter中的三个方法进行配置，如下所示：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Configuration</span><br><span class=\"hljs-meta\">@EnableWebSecurity</span><br><span class=\"hljs-meta\">@EnableGlobalMethodSecurity(prePostEnabled = true)</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">OldSecurityConfig</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">WebSecurityConfigurerAdapter</span> &#123;<br>    <span class=\"hljs-meta\">@Autowired</span><br>    <span class=\"hljs-keyword\">private</span> UmsAdminService adminService;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">protected</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">configure</span><span class=\"hljs-params\">(HttpSecurity httpSecurity)</span> <span class=\"hljs-keyword\">throws</span> Exception &#123;<br>        <span class=\"hljs-comment\">//省略HttpSecurity的配置</span><br>    &#125;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">protected</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">configure</span><span class=\"hljs-params\">(AuthenticationManagerBuilder auth)</span> <span class=\"hljs-keyword\">throws</span> Exception &#123;<br>        auth.userDetailsService(userDetailsService())<br>                .passwordEncoder(passwordEncoder());<br>    &#125;<br>    <br>    <span class=\"hljs-meta\">@Bean</span><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> AuthenticationManager <span class=\"hljs-title function_\">authenticationManagerBean</span><span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">throws</span> Exception &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">super</span>.authenticationManagerBean();<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>\n<p>但这种方式在SpringBoot 2.7.0中，WebSecurityConfigurerAdapter已经被弃用了，新用法中，无需继承WebSecurityConfigurerAdapter，只需要直接声明一个配置类，再配置一个生成SecurityFilterChainBean方法，配置信息如下，我们对&#x2F;user&#x2F;login和&#x2F;user&#x2F;register接口，进行放行，而其他接口，都需要进行验证。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> com.yang.infrastructure.auth.config;<br><br><span class=\"hljs-keyword\">import</span> org.springframework.context.annotation.Bean;<br><span class=\"hljs-keyword\">import</span> org.springframework.context.annotation.Configuration;<br><span class=\"hljs-keyword\">import</span> org.springframework.security.config.annotation.web.builders.HttpSecurity;<br><span class=\"hljs-keyword\">import</span> org.springframework.security.config.http.SessionCreationPolicy;<br><span class=\"hljs-keyword\">import</span> org.springframework.security.web.SecurityFilterChain;<br><br><span class=\"hljs-meta\">@Configuration</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">SecurityConfig</span> &#123;<br>    <span class=\"hljs-meta\">@Bean</span><br>    SecurityFilterChain <span class=\"hljs-title function_\">filterChain</span><span class=\"hljs-params\">(HttpSecurity httpSecurity)</span> <span class=\"hljs-keyword\">throws</span> Exception &#123;<br>        <span class=\"hljs-comment\">// 登录和注册接口，放行</span><br>        <span class=\"hljs-keyword\">return</span> httpSecurity.authorizeRequests()<br>                .antMatchers(<span class=\"hljs-string\">&quot;/user/login&quot;</span>).permitAll()<br>                .antMatchers(<span class=\"hljs-string\">&quot;/user/register&quot;</span>).permitAll()<br>                .anyRequest().authenticated()<br>                .and()<br>                .csrf().disable()<br>                .sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS) <span class=\"hljs-comment\">// 设置无状态连接，即不创建session</span><br>                .and()<br>                .cors().disable() <span class=\"hljs-comment\">// 解决跨域问题</span><br>                .build();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>http.authorizeHttpRequests(): 指定哪些请求需要什么样的认证或授权，这里使用anyRequest()和authenticated()表示所有请求均需要认证。<br>http.authorizeHttpRequests()：表示我们使用HttpBasic认证。<br>在上面的配置中，我们配置了登录接口和注册接口允许放行，其他接口进行拦截，然后我们访问登录接口，可以看出登录接口放行通过，能顺利访问。</p>\n<img src=\"/2024/04/03/SpringSecurity%E5%AD%A6%E4%B9%A01%E2%80%94SpringSecurity%E8%AE%A4%E8%AF%81/9.png\" class=\"\">\n<p>再访问&#x2F;security&#x2F;hello接口，结果是403，说明无权访问。</p>\n<img src=\"/2024/04/03/SpringSecurity%E5%AD%A6%E4%B9%A01%E2%80%94SpringSecurity%E8%AE%A4%E8%AF%81/10.png\" class=\"\">\n<h5 id=\"2-4-4-异常处理\"><a href=\"#2-4-4-异常处理\" class=\"headerlink\" title=\"2.4.4. 异常处理\"></a>2.4.4. 异常处理</h5><p>在最开始的时候，我们没有配置任何东西时，没有权限便会默认跳转到用户登录界面，现在因为我们没有配置登录表单路径，所以会直接提示403，我们可以在配置类中，配置异常处理方式，方便返回一些格式化的数据供前端做出决策。<br>我们创建一个JwtAuthenticationExceptionHandler，该类实现自AuthenticationEntryPoint接口</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">JwtAuthenticationExceptionHandler</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">AuthenticationEntryPoint</span> &#123;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">commence</span><span class=\"hljs-params\">(HttpServletRequest request, HttpServletResponse response, AuthenticationException authException)</span> <span class=\"hljs-keyword\">throws</span> IOException, ServletException &#123;<br>        sendErrorResponse(response);<br>    &#125;<br><br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">sendErrorResponse</span><span class=\"hljs-params\">(HttpServletResponse response)</span> <span class=\"hljs-keyword\">throws</span> IOException &#123;<br>        Response&lt;Object&gt; errorResponse = Response.fail(ResultCode.AUTHENTICATION_FAIL);<br>        response.setCharacterEncoding(<span class=\"hljs-string\">&quot;UTF-8&quot;</span>);<br>        response.setStatus(HttpStatus.UNAUTHORIZED.value());<br>        <span class=\"hljs-type\">PrintWriter</span> <span class=\"hljs-variable\">writer</span> <span class=\"hljs-operator\">=</span> response.getWriter();<br>        writer.write(JSONObject.toJSONString(errorResponse));<br>        writer.flush();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>然后我们修改SpringSecurity的配置类，添加上和异常处理相关的配置：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Configuration</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">SecurityConfig</span> &#123;<br>    <span class=\"hljs-meta\">@Bean</span><br>    SecurityFilterChain <span class=\"hljs-title function_\">filterChain</span><span class=\"hljs-params\">(HttpSecurity httpSecurity)</span> <span class=\"hljs-keyword\">throws</span> Exception &#123;<br>        <span class=\"hljs-comment\">// 登录和注册接口，放行</span><br>        <span class=\"hljs-keyword\">return</span> httpSecurity.authorizeRequests()<br>                .antMatchers(<span class=\"hljs-string\">&quot;/user/login&quot;</span>).permitAll()<br>                .antMatchers(<span class=\"hljs-string\">&quot;/user/register&quot;</span>).permitAll()<br>                .anyRequest().authenticated()<br>                .and()<br>                .csrf().disable()<br>                .sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS) <span class=\"hljs-comment\">// 设置无状态连接，即不创建session</span><br>                .and()<br>                .cors().disable() <span class=\"hljs-comment\">// 解决跨域问题</span><br>                .exceptionHandling()<br>                .authenticationEntryPoint(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">JwtAuthenticationExceptionHandler</span>()) <span class=\"hljs-comment\">// 未认证异常处理</span><br>                .and()<br>                .build();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>接着再次访问&#x2F;security&#x2F;hello接口，结果如下：</p>\n<img src=\"/2024/04/03/SpringSecurity%E5%AD%A6%E4%B9%A01%E2%80%94SpringSecurity%E8%AE%A4%E8%AF%81/11.png\" class=\"\">\n<p>同理，在权限不足的情况下，我们也可以实现相关的异常处理类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">JwtAccessDeniedExceptionHandler</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">AccessDeniedHandler</span> &#123;<br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">handle</span><span class=\"hljs-params\">(HttpServletRequest request, HttpServletResponse response, AccessDeniedException accessDeniedException)</span> <span class=\"hljs-keyword\">throws</span> IOException, ServletException &#123;<br>        sendErrorResponse(response);<br>    &#125;<br><br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">sendErrorResponse</span><span class=\"hljs-params\">(HttpServletResponse response)</span> <span class=\"hljs-keyword\">throws</span> IOException &#123;<br>        Response&lt;Object&gt; errorResponse = Response.fail(ResultCode.ACCESS_DENIED);<br>        response.setCharacterEncoding(<span class=\"hljs-string\">&quot;UTF-8&quot;</span>);<br>        response.setStatus(HttpStatus.UNAUTHORIZED.value());<br>        <span class=\"hljs-type\">PrintWriter</span> <span class=\"hljs-variable\">writer</span> <span class=\"hljs-operator\">=</span> response.getWriter();<br>        writer.write(JSONObject.toJSONString(errorResponse));<br>        writer.flush();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>修改配置类：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Configuration</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">SecurityConfig</span> &#123;<br>    <span class=\"hljs-meta\">@Bean</span><br>    SecurityFilterChain <span class=\"hljs-title function_\">filterChain</span><span class=\"hljs-params\">(HttpSecurity httpSecurity)</span> <span class=\"hljs-keyword\">throws</span> Exception &#123;<br>        <span class=\"hljs-comment\">// 登录和注册接口，放行</span><br>        <span class=\"hljs-keyword\">return</span> httpSecurity.authorizeRequests()<br>                .antMatchers(<span class=\"hljs-string\">&quot;/user/login&quot;</span>).permitAll()<br>                .antMatchers(<span class=\"hljs-string\">&quot;/user/register&quot;</span>).permitAll()<br>                .anyRequest().authenticated()<br>                .and()<br>                .csrf().disable()<br>                .sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS) <span class=\"hljs-comment\">// 设置无状态连接，即不创建session</span><br>                .and()<br>                .cors().disable() <span class=\"hljs-comment\">// 解决跨域问题</span><br>                .exceptionHandling()<br>                .authenticationEntryPoint(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">JwtAuthenticationExceptionHandler</span>()) <span class=\"hljs-comment\">// 未认证异常处理</span><br>                .accessDeniedHandler(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">JwtAccessDeniedExceptionHandler</span>()) <span class=\"hljs-comment\">// 权限不足异常处理</span><br>                .and()<br>                .build();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h5 id=\"2-4-5-认证过滤器\"><a href=\"#2-4-5-认证过滤器\" class=\"headerlink\" title=\"2.4.5. 认证过滤器\"></a>2.4.5. 认证过滤器</h5><p>当我们登录成功后，一般会返回一个token，然后前端后续将这个token，携带于请求头，想后端发起访问，后端解析这个token，来判断该请求是否认证通过，通过，则放行。在SpringSecurity中，我们可以通过addFilterBefore()将我们自定义过滤器添加上去，然后再我们的自定义过滤器中，实现相关的token解析逻辑。<br>首先我们定义一个MyUserDetails类，实现UserDetails接口，UserDetails提供用户的核心信息，在前两篇文章中，用户的核心信息，存储于UserContextDetails类中，这里我们沿用该类，当然，也可以自己重新定义一个类用于保存用户的核心信息，甚至直接把用户实体类作为核心信息，这个依据项目的需要。目前的实现中，除了获取用户名之外，其他都是空实现，因为其他的接口，暂时还不需要。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> com.yang.infrastructure.security;<br><br><span class=\"hljs-keyword\">import</span> com.yang.infrastructure.auth.UserContextDetails;<br><span class=\"hljs-keyword\">import</span> lombok.Data;<br><span class=\"hljs-keyword\">import</span> org.springframework.security.core.GrantedAuthority;<br><span class=\"hljs-keyword\">import</span> org.springframework.security.core.userdetails.UserDetails;<br><br><span class=\"hljs-keyword\">import</span> java.util.Collection;<br><br><span class=\"hljs-meta\">@Data</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MyUserDetails</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">UserDetails</span> &#123;<br>    <span class=\"hljs-keyword\">private</span> UserContextDetails userContextDetails;<br><br>    <span class=\"hljs-keyword\">private</span> String password;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">MyUserDetails</span><span class=\"hljs-params\">(UserContextDetails userContextDetails)</span> &#123;<br>        <span class=\"hljs-built_in\">this</span>.userContextDetails = userContextDetails;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">MyUserDetails</span><span class=\"hljs-params\">(UserContextDetails userContextDetails, String password)</span> &#123;<br>        <span class=\"hljs-built_in\">this</span>.userContextDetails = userContextDetails;<br>        <span class=\"hljs-built_in\">this</span>.password = password;<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> Collection&lt;? <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">GrantedAuthority</span>&gt; getAuthorities() &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>;<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title function_\">getPassword</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>.password;<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title function_\">getUsername</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> userContextDetails.getUsername();<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">isAccountNonExpired</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">isAccountNonLocked</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">isCredentialsNonExpired</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">isEnabled</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>我们我们添加一个JwtTokenVerifyFilter，这个类继承于OncePerRequestFilter，其具体实现如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> com.yang.infrastructure.security.filter;<br><br><span class=\"hljs-keyword\">import</span> com.alibaba.fastjson.JSONObject;<br><span class=\"hljs-keyword\">import</span> com.yang.domain.data.Role;<br><span class=\"hljs-keyword\">import</span> com.yang.infrastructure.auth.PermissionDetails;<br><span class=\"hljs-keyword\">import</span> com.yang.infrastructure.auth.UserContextDetails;<br><span class=\"hljs-keyword\">import</span> com.yang.infrastructure.auth.config.JwtTokenProperty;<br><span class=\"hljs-keyword\">import</span> com.yang.infrastructure.auth.request.JwtTokenVerifyRequest;<br><span class=\"hljs-keyword\">import</span> com.yang.infrastructure.auth.response.JwtTokenVerifyDTO;<br><span class=\"hljs-keyword\">import</span> com.yang.infrastructure.auth.service.JwtTokenService;<br><span class=\"hljs-keyword\">import</span> com.yang.infrastructure.security.MyUserDetails;<br><span class=\"hljs-keyword\">import</span> com.yang.infrastructure.utils.RedisUtils;<br><span class=\"hljs-keyword\">import</span> com.yang.infrastructure.utils.SpringContextUtils;<br><span class=\"hljs-keyword\">import</span> org.apache.commons.lang3.StringUtils;<br><span class=\"hljs-keyword\">import</span> org.springframework.security.authentication.UsernamePasswordAuthenticationToken;<br><span class=\"hljs-keyword\">import</span> org.springframework.security.core.context.SecurityContextHolder;<br><span class=\"hljs-keyword\">import</span> org.springframework.security.core.userdetails.UserDetails;<br><span class=\"hljs-keyword\">import</span> org.springframework.web.filter.OncePerRequestFilter;<br><br><span class=\"hljs-keyword\">import</span> javax.servlet.FilterChain;<br><span class=\"hljs-keyword\">import</span> javax.servlet.ServletException;<br><span class=\"hljs-keyword\">import</span> javax.servlet.http.HttpServletRequest;<br><span class=\"hljs-keyword\">import</span> javax.servlet.http.HttpServletResponse;<br><span class=\"hljs-keyword\">import</span> java.io.IOException;<br><span class=\"hljs-keyword\">import</span> java.util.List;<br><span class=\"hljs-keyword\">import</span> java.util.stream.Collectors;<br><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">JwtTokenVerifyFilter</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">OncePerRequestFilter</span> &#123;<br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">protected</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">doFilterInternal</span><span class=\"hljs-params\">(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)</span> <span class=\"hljs-keyword\">throws</span> ServletException, IOException &#123;<br>        <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">token</span> <span class=\"hljs-operator\">=</span> request.getHeader(<span class=\"hljs-string\">&quot;token&quot;</span>);<br>        <span class=\"hljs-keyword\">if</span> (StringUtils.isEmpty(token)) &#123;<br>            filterChain.doFilter(request, response);<br>            <span class=\"hljs-keyword\">return</span>;<br>        &#125;<br><br>        <span class=\"hljs-type\">UserContextDetails</span> <span class=\"hljs-variable\">userContextDetails</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-literal\">null</span>;<br>        <span class=\"hljs-type\">Object</span> <span class=\"hljs-variable\">userDetailsFromRedis</span> <span class=\"hljs-operator\">=</span> getUserDetailsFromRedis(token);<br>        <span class=\"hljs-keyword\">if</span> (userDetailsFromRedis != <span class=\"hljs-literal\">null</span>) &#123;<br>            userContextDetails = (UserContextDetails) userDetailsFromRedis;<br>        &#125;<br><br>        <span class=\"hljs-keyword\">if</span> (userContextDetails == <span class=\"hljs-literal\">null</span>) &#123;<br>            <span class=\"hljs-type\">JwtTokenService</span> <span class=\"hljs-variable\">jwtTokenService</span> <span class=\"hljs-operator\">=</span> SpringContextUtils.getBeanOfType(JwtTokenService.class);<br>            <span class=\"hljs-type\">JwtTokenProperty</span> <span class=\"hljs-variable\">jwtTokenProperty</span> <span class=\"hljs-operator\">=</span> SpringContextUtils.getBeanOfType(JwtTokenProperty.class);<br><br>            <span class=\"hljs-type\">JwtTokenVerifyRequest</span> <span class=\"hljs-variable\">jwtTokenVerifyRequest</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">JwtTokenVerifyRequest</span>();<br>            jwtTokenVerifyRequest.setToken(token);<br>            jwtTokenVerifyRequest.setSecret(jwtTokenProperty.getSecret());<br><br>            <span class=\"hljs-type\">JwtTokenVerifyDTO</span> <span class=\"hljs-variable\">verify</span> <span class=\"hljs-operator\">=</span> jwtTokenService.verify(jwtTokenVerifyRequest);<br>            <span class=\"hljs-keyword\">if</span> (verify == <span class=\"hljs-literal\">null</span>) &#123;<br>                filterChain.doFilter(request, response);<br>                <span class=\"hljs-keyword\">return</span>;<br>            &#125;<br><br>            userContextDetails = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">UserContextDetails</span>();<br>            userContextDetails.setId(Integer.valueOf(verify.getSubject()));<br>            userContextDetails.setToken(token);<br>            userContextDetails.setUsername(verify.getPayLoads().get(<span class=\"hljs-string\">&quot;username&quot;</span>));<br>            userContextDetails.setExtendMap(verify.getPayLoads());<br>            List&lt;Role&gt; roles = JSONObject.parseArray(verify.getPayLoads().get(<span class=\"hljs-string\">&quot;roles&quot;</span>), Role.class);<br>            userContextDetails.setPermissionDetails(roles.stream().map(role -&gt; &#123;<br>                <span class=\"hljs-type\">PermissionDetails</span> <span class=\"hljs-variable\">permissionDetails</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">PermissionDetails</span>();<br>                permissionDetails.setName(role.getCode());<br>                <span class=\"hljs-keyword\">return</span> permissionDetails;<br>            &#125;).collect(Collectors.toList()));<br>        &#125;<br><br>        <span class=\"hljs-keyword\">if</span> (userContextDetails == <span class=\"hljs-literal\">null</span>) &#123;<br>            filterChain.doFilter(request, response);<br>            <span class=\"hljs-keyword\">return</span>;<br>        &#125;<br>        <span class=\"hljs-type\">UserDetails</span> <span class=\"hljs-variable\">userDetails</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">MyUserDetails</span>(userContextDetails);<br>        <span class=\"hljs-type\">UsernamePasswordAuthenticationToken</span> <span class=\"hljs-variable\">authenticationToken</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">UsernamePasswordAuthenticationToken</span>(userDetails, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-literal\">null</span>);<br>        SecurityContextHolder.getContext().setAuthentication(authenticationToken);<br>        filterChain.doFilter(request, response);<br>    &#125;<br><br>    <span class=\"hljs-keyword\">private</span> Object <span class=\"hljs-title function_\">getUserDetailsFromRedis</span><span class=\"hljs-params\">(String token)</span> &#123;<br>        <span class=\"hljs-type\">RedisUtils</span> <span class=\"hljs-variable\">redisUtils</span> <span class=\"hljs-operator\">=</span> SpringContextUtils.getBeanOfType(RedisUtils.class);<br>        <span class=\"hljs-keyword\">return</span> redisUtils.getKey(<span class=\"hljs-string\">&quot;token:&quot;</span> + token);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>其实从上面的实现中，会发现，与我们之前的JwtTokenVerifyInterceptor很像，不过我们当时只是简单地通过线程上下文来传递用户核心信息，而SpringSecurity对此进一步作出封装:<br>1）UsernamePasswordAuthenticationToken：SpringSecurity用于表示基于用户名和密码地身份验证对象，继承自AbstractAuthenticationToken类，包含了用户名和密码等凭据信息，在身份验证过程中，UsernamePasswordAuthenticationToken用于封装用户提交地身份验证凭据，并在后续身份验证过程中进行传递和处理。<br>2）SecurityContextHolder：SpringSecurity用于管理安全上下文地持有者，提供一个静态方法getContext()用于获取当前线程中地安全上下文。<br>最后，我们将这个过滤器，添加到SpringSecurity的配置类中</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Configuration</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">SecurityConfig</span> &#123;<br>    <span class=\"hljs-meta\">@Bean</span><br>    SecurityFilterChain <span class=\"hljs-title function_\">filterChain</span><span class=\"hljs-params\">(HttpSecurity httpSecurity)</span> <span class=\"hljs-keyword\">throws</span> Exception &#123;<br>        <span class=\"hljs-comment\">// 登录和注册接口，放行</span><br>        <span class=\"hljs-keyword\">return</span> httpSecurity.authorizeRequests()<br>                .antMatchers(<span class=\"hljs-string\">&quot;/user/login&quot;</span>).permitAll()<br>                .antMatchers(<span class=\"hljs-string\">&quot;/user/register&quot;</span>).permitAll()<br>                .anyRequest().authenticated()<br>                .and()<br>                .csrf().disable()<br>                .sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS) <span class=\"hljs-comment\">// 设置无状态连接，即不创建session</span><br>                .and()<br>                .cors().disable() <span class=\"hljs-comment\">// 解决跨域问题</span><br>                .exceptionHandling()<br>                .authenticationEntryPoint(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">JwtAuthenticationExceptionHandler</span>()) <span class=\"hljs-comment\">// 未认证异常处理</span><br>                .accessDeniedHandler(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">JwtAccessDeniedExceptionHandler</span>()) <span class=\"hljs-comment\">// 权限不足异常处理</span><br>                .and()<br>                .addFilterBefore(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">JwtTokenVerifyFilter</span>(), UsernamePasswordAuthenticationFilter.class) <span class=\"hljs-comment\">// 添加自定义过滤器</span><br>                .build();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>然后我们启动项目，先进行登录</p>\n<img src=\"/2024/04/03/SpringSecurity%E5%AD%A6%E4%B9%A01%E2%80%94SpringSecurity%E8%AE%A4%E8%AF%81/12.png\" class=\"\">\n<p>登录成功后，携带该token，作为请求头，访问&#x2F;security&#x2F;hello测试接口,访问成功</p>\n<img src=\"/2024/04/03/SpringSecurity%E5%AD%A6%E4%B9%A01%E2%80%94SpringSecurity%E8%AE%A4%E8%AF%81/13.png\" class=\"\">\n<p>然后我们携带一个无效的token，作为请求头，再次访问&#x2F;security&#x2F;hello测试接口</p>\n<img src=\"/2024/04/03/SpringSecurity%E5%AD%A6%E4%B9%A01%E2%80%94SpringSecurity%E8%AE%A4%E8%AF%81/14.png\" class=\"\">\n\n<h3 id=\"3-参考文章\"><a href=\"#3-参考文章\" class=\"headerlink\" title=\"3. 参考文章\"></a>3. 参考文章</h3><p><a href=\"https://segmentfault.com/a/1190000041947192\">https://segmentfault.com/a/1190000041947192</a><br><a href=\"https://blog.csdn.net/m0_37989980/article/details/107519382\">https://blog.csdn.net/m0_37989980/article/details/107519382</a><br><a href=\"https://zhuanlan.zhihu.com/p/455858001\">https://zhuanlan.zhihu.com/p/455858001</a></p>\n"},{"title":"SpringSecurity学习2—SpringSecurity授权","date":"2024-04-03T07:36:26.000Z","_content":"### 1. 引言\nSpring Security进行认证和鉴权的时候，就是利用一系列的Filter来进行拦截的。如下图所示，一个请求想要访问到API就会从左到右经过蓝线框里的过滤器，其中黄色部分是负责认证的过滤器，蓝色部分负责异常处理，橙色部分则是负责授权。经过一些列拦截最终访问到我们的API。\n{% asset_img 1.png %}\n这里需要重点关注两个过滤器：UsernamePasswordAuthenticationFilter负责登录认证，FilterSecurityInterceptor负责权限授权。\n在SpringSecurity中，会使用默认的FilterSecurityInterceptor来进行权限校验，在FilterSecurityInterceptor中会从SecurityContextHolder获取其中的Authentication，然后获取其中的权限信息，判断当前用户是否拥有访问当前资源所需的权限。\nSpringSecurity中的Authentication类\n```java\npublic interface Authentication extends Principal, Serializable {\n\t//权限数据列表\n    Collection<? extends GrantedAuthority> getAuthorities();\n\n    Object getCredentials();\n\n    Object getDetails();\n\n    Object getPrincipal();\n\n    boolean isAuthenticated();\n\n    void setAuthenticated(boolean var1) throws IllegalArgumentException;\n}\n```\nPrincipal: 用户信息，没有认证时一般是用户名，认证后一般是用户对象\nCredentials: 用户凭证，一般是密码\nAuthorities: 用户权限\n### 2. 代码示例\n将权限信息，赋值给UserDetails\n在我们之前自定义的UserContextDetails中，已经有对应的权限信息了，因此，我们可以将其权限信息，转化为对应的Authority类，我们修改MyUserDetails类，将UserContextDetails中和权限相关的类，转化为SpringSecurity体系中的权限类。\n```java\npackage com.yang.infrastructure.security;\n\nimport com.alibaba.fastjson.JSONObject;\nimport com.yang.infrastructure.auth.PermissionDetails;\nimport com.yang.infrastructure.auth.UserContextDetails;\nimport lombok.Data;\nimport org.springframework.security.core.GrantedAuthority;\nimport org.springframework.security.core.authority.AuthorityUtils;\nimport org.springframework.security.core.userdetails.UserDetails;\nimport org.springframework.util.CollectionUtils;\n\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.List;\nimport java.util.stream.Collectors;\n\n@Data\npublic class MyUserDetails implements UserDetails {\n    private UserContextDetails userContextDetails;\n\n    private String password;\n\n    private List<GrantedAuthority> authorityList = new ArrayList<>();\n\n    public MyUserDetails(UserContextDetails userContextDetails) {\n        this.userContextDetails = userContextDetails;\n        richAuthority();\n    }\n\n    private void richAuthority() {\n        List<PermissionDetails> permissionDetails = userContextDetails.getPermissionDetails();\n        if (CollectionUtils.isEmpty(permissionDetails)) {\n            return;\n        }\n        String[] permissions = permissionDetails.stream().map(PermissionDetails::getName)\n                .collect(Collectors.toList()).toArray(new String[0]);\n        this.authorityList = AuthorityUtils.createAuthorityList(permissions);\n    }\n\n    public MyUserDetails(UserContextDetails userContextDetails, String password) {\n        this.userContextDetails = userContextDetails;\n        this.password = password;\n    }\n\n    @Override\n    public Collection<? extends GrantedAuthority> getAuthorities() {\n        return this.authorityList;\n    }\n\n    @Override\n    public String getPassword() {\n        return this.password;\n    }\n\n    @Override\n    public String getUsername() {\n        return userContextDetails.getUsername();\n    }\n\n    @Override\n    public boolean isAccountNonExpired() {\n        return true;\n    }\n\n    @Override\n    public boolean isAccountNonLocked() {\n        return true;\n    }\n\n    @Override\n    public boolean isCredentialsNonExpired() {\n        return true;\n    }\n\n    @Override\n    public boolean isEnabled() {\n        return true;\n    }\n}\n```\n然后还需要修改JwtTokenVerifyFilter类，在构建UsernamePasswordAuthenticationToken的时候，将权限赋值上去。\n```java\npackage com.yang.infrastructure.security.filter;\n\nimport com.alibaba.fastjson.JSONObject;\nimport com.yang.domain.data.Role;\nimport com.yang.infrastructure.auth.PermissionDetails;\nimport com.yang.infrastructure.auth.UserContextDetails;\nimport com.yang.infrastructure.auth.config.JwtTokenProperty;\nimport com.yang.infrastructure.auth.request.JwtTokenVerifyRequest;\nimport com.yang.infrastructure.auth.response.JwtTokenVerifyDTO;\nimport com.yang.infrastructure.auth.service.JwtTokenService;\nimport com.yang.infrastructure.security.MyUserDetails;\nimport com.yang.infrastructure.utils.RedisUtils;\nimport com.yang.infrastructure.utils.SpringContextUtils;\nimport org.apache.commons.lang3.StringUtils;\nimport org.springframework.security.authentication.UsernamePasswordAuthenticationToken;\nimport org.springframework.security.core.context.SecurityContextHolder;\nimport org.springframework.security.core.userdetails.UserDetails;\nimport org.springframework.web.filter.OncePerRequestFilter;\n\nimport javax.servlet.FilterChain;\nimport javax.servlet.ServletException;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport java.io.IOException;\nimport java.util.List;\nimport java.util.stream.Collectors;\n\npublic class JwtTokenVerifyFilter extends OncePerRequestFilter {\n    @Override\n    protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain) throws ServletException, IOException {\n        String token = request.getHeader(\"token\");\n        if (StringUtils.isEmpty(token)) {\n            filterChain.doFilter(request, response);\n            return;\n        }\n\n        UserContextDetails userContextDetails = null;\n        Object userDetailsFromRedis = getUserDetailsFromRedis(token);\n        if (userDetailsFromRedis != null) {\n            userContextDetails = (UserContextDetails) userDetailsFromRedis;\n        }\n\n        if (userContextDetails == null) {\n            JwtTokenService jwtTokenService = SpringContextUtils.getBeanOfType(JwtTokenService.class);\n            JwtTokenProperty jwtTokenProperty = SpringContextUtils.getBeanOfType(JwtTokenProperty.class);\n\n            JwtTokenVerifyRequest jwtTokenVerifyRequest = new JwtTokenVerifyRequest();\n            jwtTokenVerifyRequest.setToken(token);\n            jwtTokenVerifyRequest.setSecret(jwtTokenProperty.getSecret());\n\n            JwtTokenVerifyDTO verify = jwtTokenService.verify(jwtTokenVerifyRequest);\n            if (verify == null) {\n                filterChain.doFilter(request, response);\n                return;\n            }\n\n            userContextDetails = new UserContextDetails();\n            userContextDetails.setId(Integer.valueOf(verify.getSubject()));\n            userContextDetails.setToken(token);\n            userContextDetails.setUsername(verify.getPayLoads().get(\"username\"));\n            userContextDetails.setExtendMap(verify.getPayLoads());\n            List<Role> roles = JSONObject.parseArray(verify.getPayLoads().get(\"roles\"), Role.class);\n            userContextDetails.setPermissionDetails(roles.stream().map(role -> {\n                PermissionDetails permissionDetails = new PermissionDetails();\n                permissionDetails.setName(role.getCode());\n                return permissionDetails;\n            }).collect(Collectors.toList()));\n        }\n\n        if (userContextDetails == null) {\n            filterChain.doFilter(request, response);\n            return;\n        }\n        UserDetails userDetails = new MyUserDetails(userContextDetails);\n        UsernamePasswordAuthenticationToken authenticationToken = new UsernamePasswordAuthenticationToken(userDetails, null, userDetails.getAuthorities());\n        SecurityContextHolder.getContext().setAuthentication(authenticationToken);\n        filterChain.doFilter(request, response);\n    }\n\n    private Object getUserDetailsFromRedis(String token) {\n        RedisUtils redisUtils = SpringContextUtils.getBeanOfType(RedisUtils.class);\n        return redisUtils.getKey(\"token:\" + token);\n    }\n}\n```\n#### 2.2. URL层面的授权\n在配置类中，http.authorizeRequests()主要是对url进行控制，配置顺序会影响之后授权的效果，越是具体的应该放前面，越是笼统的应该放后面。\nanyRequest(): 表示匹配所有的请求，一般情况下此方法都会使用，设置全部内容都需要进行认证，会放到最后。\nantMatchers：参数是不定向参数，每个参数是一个ant表达式，用于匹配URL规则。\n```\nANT 通配符说明\n? 匹配任何单字符\n* 匹配0或者任意数量的字符\n** 匹配0或者更多的目录\n```\n假设我们对/security/permitAll可以免认证，配置为：\n```java\nhttp.authorizeRequests\n.antMatchers(\"/security/permitAll\").permitAll()\n```\n在上述配置中，我们在antMatchers(\"/security/permitAll\")后调用了permitAll()表示不需要认证，随意访问，在SpringSecurity中提供了多种内置控制。\n##### 2.2.1. 直接授权\n|方法\t\t\t|说明|\n|--|--|\n|permitAll()\t|所匹配的 URL ,任何人都允许访问|\n|denyAll()\t|所匹配的 URL, 任何人都不允许被访问|\n|authenticated()\t|所匹配的 URL ,任何人 都需要被认证才能访问|\n|anonymous()\t|表示可以匿名访问匹配的 URL。和 permitAll()效果类似，只是设置为 anonymous()的 url 会执行 filter 链中|\n|rememberMe()\t|被“remember me”的用户允许访问|\n|fullyAuthenticated()\t|如果用户不是被 remember me ,才可以访问。|\n\nanonymouse和permitAll的区别：前者表示匿名访问，仅允许匿名用户访问，如果登录认证后，带有token信息再去请求，这个anonymouse关联的资源就不能访问；permitAll登录能访问，不登陆也能返回，一般用于静态资源js等。\n假设我们的SpringSecurity配置如下：\n```java\npackage com.yang.infrastructure.security.config;\n\nimport com.yang.infrastructure.security.filter.JwtTokenVerifyFilter;\nimport com.yang.infrastructure.security.handler.JwtAccessDeniedExceptionHandler;\nimport com.yang.infrastructure.security.handler.JwtAuthenticationExceptionHandler;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.security.config.annotation.web.builders.HttpSecurity;\nimport org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;\nimport org.springframework.security.config.http.SessionCreationPolicy;\nimport org.springframework.security.web.SecurityFilterChain;\nimport org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;\n\n\n@Configuration\n@EnableWebSecurity\npublic class SecurityConfig {\n\n    @Bean\n    SecurityFilterChain filterChain(HttpSecurity httpSecurity) throws Exception {\n        httpSecurity.headers().cacheControl(); // 禁用缓存\n        // 登录和注册接口，放行\n        return httpSecurity.authorizeRequests()\n                .antMatchers(\"/user/login\").permitAll()\n                .antMatchers(\"/user/register\").permitAll()\n                .antMatchers(\"/security/permitAll\").permitAll()\n                .antMatchers(\"/security/anonymous\").anonymous()\n                .anyRequest().authenticated()\n                .and()\n                .csrf().disable()\n                .sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS) // 设置无状态连接，即不创建session\n                .and()\n                .cors().disable() // 解决跨域问题\n                .exceptionHandling()\n                .authenticationEntryPoint(new JwtAuthenticationExceptionHandler()) // 未认证异常处理\n                .accessDeniedHandler(new JwtAccessDeniedExceptionHandler()) // 权限不足异常处理\n                .and()\n                .addFilterBefore(new JwtTokenVerifyFilter(), UsernamePasswordAuthenticationFilter.class) // 添加自定义过滤器\n                .build();\n    }\n}\n```\n这里对登录、注册、permitAll接口放行，对anonymouse接口允许匿名访问。然后我们添加对应的controller\n```java\npackage com.yang.controller;\n\nimport com.yang.infrastructure.common.Response;\nimport org.springframework.security.core.context.SecurityContextHolder;\nimport org.springframework.security.core.userdetails.UserDetails;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\n\n@RestController\n@RequestMapping(value = \"/security\")\npublic class SecurityController {\n\n    @GetMapping(value = \"/hello\")\n    public Response hello() {\n        UserDetails  userDetails = (UserDetails) SecurityContextHolder.getContext().getAuthentication().getPrincipal();\n        System.out.println(userDetails);\n        return Response.success(\"hello\");\n    }\n\n    @GetMapping(value = \"/anonymous\")\n    public Response anonymous() {\n        return Response.success(\"anonymous\");\n    }\n\n    @GetMapping(value = \"/permitAll\")\n    public Response permitAll() {\n        return Response.success(\"permitAll\");\n    }\n}\n```\n运行项目，进行测试，在未登录的情况下，访问anonymous和permitAll接口：\n{% asset_img 2.png %}\n{% asset_img 3.png %}\n在登录情况下访问anonymous和permitAll\n{% asset_img 4.png %}\n{% asset_img 5.png %}\n##### 2.2.2. 权限授权\n|方法\t\t\t|说明|\n|--|--|\n|hasAuthority(String authorities)\t|拥有指定权限的用户可以访问|\n|hasAnyAuthority(String... authorities)\t|拥有指定任一权限的用户可访问|\n\n我们修改SpringSecurity的配置，添加下面的权限信息：\n```java\n .antMatchers(\"/security/student\")\n .hasAuthority(\"STUDENT\")\n .antMatchers(\"/security/studentOrCounselor\")\n .hasAnyAuthority(\"STUDENT\", \"COUNSELOR\")\n ```\n然后添加相应的测试接口\n```java\n    @GetMapping(value = \"/student\")\n    public Response student() {\n        return Response.success(\"学生可以访问\");\n    }\n    \n    @GetMapping(value = \"/studentOrCounselor\")\n    public Response studentOrCounselor() {\n        return Response.success(\"学生或辅导员可以访问\");\n    }\n```\n接着，使用学生账号访问上面两个接口：\n{% asset_img 6.png %}\n{% asset_img 7.png %}\n使用辅导员账号访问上面两个接口\n{% asset_img 8.png %}\n{% asset_img 9.png %}\n##### 2.2.3. 角色授权\n|方法\t\t\t|说明|\n|--|--|\n|hasRole(String role)\t|拥有指定角色的用户可以访问,角色将被增加ROLE_前缀|\n|hasAnyRoles(String... roles)\t|拥有指定任一角色的用户可访问|\n\n这个功能和基于权限认证感觉差不多，只是我们在设置Authority的时候，要加上ROLE_前缀，不然匹配不上，这里就不做演示了。\n#### 2.3. 基于注解进行权限校验\n在SpringSecurity中，可以通过使用注解的方式进行权限校验，以下是一些常用的SpringSecurity注解：\n1）@PreAuthorize和@ PostAuthorize: 用于方法安全性，可以定义方法执行前或执行后的权限校验。前者用于方法执行前，可以根据表达式判断是否有权限执行该方法，后者用于方法执行后，可以检测方法执行的结果是否有权限。\n2）@Secured：该注解用于方法或类上，要求用户具有所有的指定角色。\n3）@PermitAll：用于方法或类上，表示该方法对所有用户开放，无需权限即可访问。\n4）@DenyAll：用于方法或类上，表示该方法对所有用户都不可访问。\n5）@Authenticated：用于方法上，表示用户需要被认证（即已经通过身份验证）。\n上述这些注解，SpringSecurity会利用表达式进行动态权限校验，其中可以使用hasRole、hasAuthority、hasAnyRole、hasAnyAuthority等方法来判断用户角色或权限。\n在方法的权限控制上，SpringSecurity支持三种类型的注解，JSR-250注解，@Secured注解和表达式的注解，这三种注解默认都没有启动，需要通过@EnableGlobalMethodSecurity来启用，这些注解都可以卸载Service接口或方法上，也可以写到Controller或Controller的方法上。\n##### 2.3.1. 表达式的注解\n我们以PreAuthorize注解为例，首先，要在配置类中开启注解，在配置类上，加上下面这行代码\n```java\n@EnableGlobalMethodSecurity(prePostEnabled = true)\n```\n然后，我们添加两个接口，用于测试PreAuthorize注解\n```java\n  @PreAuthorize(value = \"hasAuthority('STUDENT')\")\n    @GetMapping(value = \"/permitStudent\")\n    public Response permitStudent() {\n        return Response.success(\"学生才有权限\");\n    }\n\n    @PreAuthorize(value = \"hasAnyAuthority('STUDENT', 'COUNSELOR')\")\n    @GetMapping(value = \"/permitStudentAndCounselor\")\n    public Response permitStudentAndCounselor() {\n        return Response.success(\"学生和辅导员才有权限\");\n    }\n```\n使用学生账号，访问上面两个接口：\n{% asset_img 10.png %}\n{% asset_img 11.png %}\n使用辅导员账号访问上面两个接口：\n{% asset_img 12.png %}\n{% asset_img 13.png %}\n##### 2.3.2. JSR-250注解\n首先，修改SpringSecurity配置类，在刚才的基础上，开启jsr-250注解\n```java\n@EnableGlobalMethodSecurity(prePostEnabled = true, jsr250Enabled = true)\n```\n然后添加一个接口，用于测试\n```java\n   @PermitAll\n    @GetMapping(value = \"/jsr250PermitAll\")\n    public Response jsr250PermitAll() {\n        return Response.success(\"jsr250PermitAll\");\n    }\n```\n首先，分别使用不同权限的用户登录token，访问该接口，结果如下：\n{% asset_img 14.png %}\n然后，不携带token访问该接口（未登录状态下访问接口）：\n{% asset_img 15.png %}\n这里会被拦截，原因是会先经过FilterSecurityInterceptor过滤器，利用匿名的认证用户进行投票决策，此时vote返回-1（因为没有匹配到当前url，只能匹配authenticated)，默认AffirmativeBased决策下就会直接抛出AccessDeniedException，因此就不会今日到MethodSecurityInterceptor的判断逻辑，必须认证之后才行。debug过程如下：\n首先会浸入FilterSecurityInterceptor过滤器：\n{% asset_img 16.png %}\n{% asset_img 17.png %}\n此时使用的是匿名的认证用户，进行投票决策\n{% asset_img 18.png %}\n{% asset_img 19.png %}\n因为没有匹配到当前url，智能匹配authenticated，因此vote返回-1\n{% asset_img 20.png %}\n{% asset_img 21.png %}\n最后，抛出AccessDeniedException异常\n{% asset_img 22.png %}\n##### 2.3.3. Secured注解\n首先，修改SpringSecurity的配置类，开启Secured注解的支持。\n```java\n@EnableGlobalMethodSecurity(prePostEnabled = true, jsr250Enabled = true, securedEnabled = true)\n```\nSecured是专门用来判断是否具有角色的，参数要以ROLE开头，不过我们之前设置的权限，如STUDENT、COUNSELOR都没有以ROLE开头，我们先修改一些MyUserDetails类的richAuthority，加上ROLE前缀。\n```java\n  private void richAuthority() {\n        List<PermissionDetails> permissionDetails = userContextDetails.getPermissionDetails();\n        if (CollectionUtils.isEmpty(permissionDetails)) {\n            return;\n        }\n        String[] permissions = permissionDetails.stream().map(permission -> \"ROLE_\" + permission.getName())\n                .collect(Collectors.toList()).toArray(new String[0]);\n        this.authorityList = AuthorityUtils.createAuthorityList(permissions);\n    }\n```\n然后添加测试方法：\n```java\n @Secured(value = \"ROLE_STUDENT\")\n    @GetMapping(value = \"/securedStudent\")\n    public Response securedStudent() {\n        return Response.success(\"securedStudent\");\n    }\n```\n分别用学生账号和辅导员账号访问该接口，结果如下：\n{% asset_img 23.png %}\n{% asset_img 24.png %}\n### 3. 参考文章\nhttps://blog.csdn.net/weixin_46073538/article/details/128641746\nhttps://blog.csdn.net/qq_41071876/article/details/122086856","source":"_posts/SpringSecurity学习2—SpringSecurity授权.md","raw":"---\ntitle: SpringSecurity学习2—SpringSecurity授权\ndate: 2024-04-03 15:36:26\ntags:\n    - SpringBoot\n    - SpringSecurity\n---\n### 1. 引言\nSpring Security进行认证和鉴权的时候，就是利用一系列的Filter来进行拦截的。如下图所示，一个请求想要访问到API就会从左到右经过蓝线框里的过滤器，其中黄色部分是负责认证的过滤器，蓝色部分负责异常处理，橙色部分则是负责授权。经过一些列拦截最终访问到我们的API。\n{% asset_img 1.png %}\n这里需要重点关注两个过滤器：UsernamePasswordAuthenticationFilter负责登录认证，FilterSecurityInterceptor负责权限授权。\n在SpringSecurity中，会使用默认的FilterSecurityInterceptor来进行权限校验，在FilterSecurityInterceptor中会从SecurityContextHolder获取其中的Authentication，然后获取其中的权限信息，判断当前用户是否拥有访问当前资源所需的权限。\nSpringSecurity中的Authentication类\n```java\npublic interface Authentication extends Principal, Serializable {\n\t//权限数据列表\n    Collection<? extends GrantedAuthority> getAuthorities();\n\n    Object getCredentials();\n\n    Object getDetails();\n\n    Object getPrincipal();\n\n    boolean isAuthenticated();\n\n    void setAuthenticated(boolean var1) throws IllegalArgumentException;\n}\n```\nPrincipal: 用户信息，没有认证时一般是用户名，认证后一般是用户对象\nCredentials: 用户凭证，一般是密码\nAuthorities: 用户权限\n### 2. 代码示例\n将权限信息，赋值给UserDetails\n在我们之前自定义的UserContextDetails中，已经有对应的权限信息了，因此，我们可以将其权限信息，转化为对应的Authority类，我们修改MyUserDetails类，将UserContextDetails中和权限相关的类，转化为SpringSecurity体系中的权限类。\n```java\npackage com.yang.infrastructure.security;\n\nimport com.alibaba.fastjson.JSONObject;\nimport com.yang.infrastructure.auth.PermissionDetails;\nimport com.yang.infrastructure.auth.UserContextDetails;\nimport lombok.Data;\nimport org.springframework.security.core.GrantedAuthority;\nimport org.springframework.security.core.authority.AuthorityUtils;\nimport org.springframework.security.core.userdetails.UserDetails;\nimport org.springframework.util.CollectionUtils;\n\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.List;\nimport java.util.stream.Collectors;\n\n@Data\npublic class MyUserDetails implements UserDetails {\n    private UserContextDetails userContextDetails;\n\n    private String password;\n\n    private List<GrantedAuthority> authorityList = new ArrayList<>();\n\n    public MyUserDetails(UserContextDetails userContextDetails) {\n        this.userContextDetails = userContextDetails;\n        richAuthority();\n    }\n\n    private void richAuthority() {\n        List<PermissionDetails> permissionDetails = userContextDetails.getPermissionDetails();\n        if (CollectionUtils.isEmpty(permissionDetails)) {\n            return;\n        }\n        String[] permissions = permissionDetails.stream().map(PermissionDetails::getName)\n                .collect(Collectors.toList()).toArray(new String[0]);\n        this.authorityList = AuthorityUtils.createAuthorityList(permissions);\n    }\n\n    public MyUserDetails(UserContextDetails userContextDetails, String password) {\n        this.userContextDetails = userContextDetails;\n        this.password = password;\n    }\n\n    @Override\n    public Collection<? extends GrantedAuthority> getAuthorities() {\n        return this.authorityList;\n    }\n\n    @Override\n    public String getPassword() {\n        return this.password;\n    }\n\n    @Override\n    public String getUsername() {\n        return userContextDetails.getUsername();\n    }\n\n    @Override\n    public boolean isAccountNonExpired() {\n        return true;\n    }\n\n    @Override\n    public boolean isAccountNonLocked() {\n        return true;\n    }\n\n    @Override\n    public boolean isCredentialsNonExpired() {\n        return true;\n    }\n\n    @Override\n    public boolean isEnabled() {\n        return true;\n    }\n}\n```\n然后还需要修改JwtTokenVerifyFilter类，在构建UsernamePasswordAuthenticationToken的时候，将权限赋值上去。\n```java\npackage com.yang.infrastructure.security.filter;\n\nimport com.alibaba.fastjson.JSONObject;\nimport com.yang.domain.data.Role;\nimport com.yang.infrastructure.auth.PermissionDetails;\nimport com.yang.infrastructure.auth.UserContextDetails;\nimport com.yang.infrastructure.auth.config.JwtTokenProperty;\nimport com.yang.infrastructure.auth.request.JwtTokenVerifyRequest;\nimport com.yang.infrastructure.auth.response.JwtTokenVerifyDTO;\nimport com.yang.infrastructure.auth.service.JwtTokenService;\nimport com.yang.infrastructure.security.MyUserDetails;\nimport com.yang.infrastructure.utils.RedisUtils;\nimport com.yang.infrastructure.utils.SpringContextUtils;\nimport org.apache.commons.lang3.StringUtils;\nimport org.springframework.security.authentication.UsernamePasswordAuthenticationToken;\nimport org.springframework.security.core.context.SecurityContextHolder;\nimport org.springframework.security.core.userdetails.UserDetails;\nimport org.springframework.web.filter.OncePerRequestFilter;\n\nimport javax.servlet.FilterChain;\nimport javax.servlet.ServletException;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport java.io.IOException;\nimport java.util.List;\nimport java.util.stream.Collectors;\n\npublic class JwtTokenVerifyFilter extends OncePerRequestFilter {\n    @Override\n    protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain) throws ServletException, IOException {\n        String token = request.getHeader(\"token\");\n        if (StringUtils.isEmpty(token)) {\n            filterChain.doFilter(request, response);\n            return;\n        }\n\n        UserContextDetails userContextDetails = null;\n        Object userDetailsFromRedis = getUserDetailsFromRedis(token);\n        if (userDetailsFromRedis != null) {\n            userContextDetails = (UserContextDetails) userDetailsFromRedis;\n        }\n\n        if (userContextDetails == null) {\n            JwtTokenService jwtTokenService = SpringContextUtils.getBeanOfType(JwtTokenService.class);\n            JwtTokenProperty jwtTokenProperty = SpringContextUtils.getBeanOfType(JwtTokenProperty.class);\n\n            JwtTokenVerifyRequest jwtTokenVerifyRequest = new JwtTokenVerifyRequest();\n            jwtTokenVerifyRequest.setToken(token);\n            jwtTokenVerifyRequest.setSecret(jwtTokenProperty.getSecret());\n\n            JwtTokenVerifyDTO verify = jwtTokenService.verify(jwtTokenVerifyRequest);\n            if (verify == null) {\n                filterChain.doFilter(request, response);\n                return;\n            }\n\n            userContextDetails = new UserContextDetails();\n            userContextDetails.setId(Integer.valueOf(verify.getSubject()));\n            userContextDetails.setToken(token);\n            userContextDetails.setUsername(verify.getPayLoads().get(\"username\"));\n            userContextDetails.setExtendMap(verify.getPayLoads());\n            List<Role> roles = JSONObject.parseArray(verify.getPayLoads().get(\"roles\"), Role.class);\n            userContextDetails.setPermissionDetails(roles.stream().map(role -> {\n                PermissionDetails permissionDetails = new PermissionDetails();\n                permissionDetails.setName(role.getCode());\n                return permissionDetails;\n            }).collect(Collectors.toList()));\n        }\n\n        if (userContextDetails == null) {\n            filterChain.doFilter(request, response);\n            return;\n        }\n        UserDetails userDetails = new MyUserDetails(userContextDetails);\n        UsernamePasswordAuthenticationToken authenticationToken = new UsernamePasswordAuthenticationToken(userDetails, null, userDetails.getAuthorities());\n        SecurityContextHolder.getContext().setAuthentication(authenticationToken);\n        filterChain.doFilter(request, response);\n    }\n\n    private Object getUserDetailsFromRedis(String token) {\n        RedisUtils redisUtils = SpringContextUtils.getBeanOfType(RedisUtils.class);\n        return redisUtils.getKey(\"token:\" + token);\n    }\n}\n```\n#### 2.2. URL层面的授权\n在配置类中，http.authorizeRequests()主要是对url进行控制，配置顺序会影响之后授权的效果，越是具体的应该放前面，越是笼统的应该放后面。\nanyRequest(): 表示匹配所有的请求，一般情况下此方法都会使用，设置全部内容都需要进行认证，会放到最后。\nantMatchers：参数是不定向参数，每个参数是一个ant表达式，用于匹配URL规则。\n```\nANT 通配符说明\n? 匹配任何单字符\n* 匹配0或者任意数量的字符\n** 匹配0或者更多的目录\n```\n假设我们对/security/permitAll可以免认证，配置为：\n```java\nhttp.authorizeRequests\n.antMatchers(\"/security/permitAll\").permitAll()\n```\n在上述配置中，我们在antMatchers(\"/security/permitAll\")后调用了permitAll()表示不需要认证，随意访问，在SpringSecurity中提供了多种内置控制。\n##### 2.2.1. 直接授权\n|方法\t\t\t|说明|\n|--|--|\n|permitAll()\t|所匹配的 URL ,任何人都允许访问|\n|denyAll()\t|所匹配的 URL, 任何人都不允许被访问|\n|authenticated()\t|所匹配的 URL ,任何人 都需要被认证才能访问|\n|anonymous()\t|表示可以匿名访问匹配的 URL。和 permitAll()效果类似，只是设置为 anonymous()的 url 会执行 filter 链中|\n|rememberMe()\t|被“remember me”的用户允许访问|\n|fullyAuthenticated()\t|如果用户不是被 remember me ,才可以访问。|\n\nanonymouse和permitAll的区别：前者表示匿名访问，仅允许匿名用户访问，如果登录认证后，带有token信息再去请求，这个anonymouse关联的资源就不能访问；permitAll登录能访问，不登陆也能返回，一般用于静态资源js等。\n假设我们的SpringSecurity配置如下：\n```java\npackage com.yang.infrastructure.security.config;\n\nimport com.yang.infrastructure.security.filter.JwtTokenVerifyFilter;\nimport com.yang.infrastructure.security.handler.JwtAccessDeniedExceptionHandler;\nimport com.yang.infrastructure.security.handler.JwtAuthenticationExceptionHandler;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.security.config.annotation.web.builders.HttpSecurity;\nimport org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;\nimport org.springframework.security.config.http.SessionCreationPolicy;\nimport org.springframework.security.web.SecurityFilterChain;\nimport org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;\n\n\n@Configuration\n@EnableWebSecurity\npublic class SecurityConfig {\n\n    @Bean\n    SecurityFilterChain filterChain(HttpSecurity httpSecurity) throws Exception {\n        httpSecurity.headers().cacheControl(); // 禁用缓存\n        // 登录和注册接口，放行\n        return httpSecurity.authorizeRequests()\n                .antMatchers(\"/user/login\").permitAll()\n                .antMatchers(\"/user/register\").permitAll()\n                .antMatchers(\"/security/permitAll\").permitAll()\n                .antMatchers(\"/security/anonymous\").anonymous()\n                .anyRequest().authenticated()\n                .and()\n                .csrf().disable()\n                .sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS) // 设置无状态连接，即不创建session\n                .and()\n                .cors().disable() // 解决跨域问题\n                .exceptionHandling()\n                .authenticationEntryPoint(new JwtAuthenticationExceptionHandler()) // 未认证异常处理\n                .accessDeniedHandler(new JwtAccessDeniedExceptionHandler()) // 权限不足异常处理\n                .and()\n                .addFilterBefore(new JwtTokenVerifyFilter(), UsernamePasswordAuthenticationFilter.class) // 添加自定义过滤器\n                .build();\n    }\n}\n```\n这里对登录、注册、permitAll接口放行，对anonymouse接口允许匿名访问。然后我们添加对应的controller\n```java\npackage com.yang.controller;\n\nimport com.yang.infrastructure.common.Response;\nimport org.springframework.security.core.context.SecurityContextHolder;\nimport org.springframework.security.core.userdetails.UserDetails;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\n\n@RestController\n@RequestMapping(value = \"/security\")\npublic class SecurityController {\n\n    @GetMapping(value = \"/hello\")\n    public Response hello() {\n        UserDetails  userDetails = (UserDetails) SecurityContextHolder.getContext().getAuthentication().getPrincipal();\n        System.out.println(userDetails);\n        return Response.success(\"hello\");\n    }\n\n    @GetMapping(value = \"/anonymous\")\n    public Response anonymous() {\n        return Response.success(\"anonymous\");\n    }\n\n    @GetMapping(value = \"/permitAll\")\n    public Response permitAll() {\n        return Response.success(\"permitAll\");\n    }\n}\n```\n运行项目，进行测试，在未登录的情况下，访问anonymous和permitAll接口：\n{% asset_img 2.png %}\n{% asset_img 3.png %}\n在登录情况下访问anonymous和permitAll\n{% asset_img 4.png %}\n{% asset_img 5.png %}\n##### 2.2.2. 权限授权\n|方法\t\t\t|说明|\n|--|--|\n|hasAuthority(String authorities)\t|拥有指定权限的用户可以访问|\n|hasAnyAuthority(String... authorities)\t|拥有指定任一权限的用户可访问|\n\n我们修改SpringSecurity的配置，添加下面的权限信息：\n```java\n .antMatchers(\"/security/student\")\n .hasAuthority(\"STUDENT\")\n .antMatchers(\"/security/studentOrCounselor\")\n .hasAnyAuthority(\"STUDENT\", \"COUNSELOR\")\n ```\n然后添加相应的测试接口\n```java\n    @GetMapping(value = \"/student\")\n    public Response student() {\n        return Response.success(\"学生可以访问\");\n    }\n    \n    @GetMapping(value = \"/studentOrCounselor\")\n    public Response studentOrCounselor() {\n        return Response.success(\"学生或辅导员可以访问\");\n    }\n```\n接着，使用学生账号访问上面两个接口：\n{% asset_img 6.png %}\n{% asset_img 7.png %}\n使用辅导员账号访问上面两个接口\n{% asset_img 8.png %}\n{% asset_img 9.png %}\n##### 2.2.3. 角色授权\n|方法\t\t\t|说明|\n|--|--|\n|hasRole(String role)\t|拥有指定角色的用户可以访问,角色将被增加ROLE_前缀|\n|hasAnyRoles(String... roles)\t|拥有指定任一角色的用户可访问|\n\n这个功能和基于权限认证感觉差不多，只是我们在设置Authority的时候，要加上ROLE_前缀，不然匹配不上，这里就不做演示了。\n#### 2.3. 基于注解进行权限校验\n在SpringSecurity中，可以通过使用注解的方式进行权限校验，以下是一些常用的SpringSecurity注解：\n1）@PreAuthorize和@ PostAuthorize: 用于方法安全性，可以定义方法执行前或执行后的权限校验。前者用于方法执行前，可以根据表达式判断是否有权限执行该方法，后者用于方法执行后，可以检测方法执行的结果是否有权限。\n2）@Secured：该注解用于方法或类上，要求用户具有所有的指定角色。\n3）@PermitAll：用于方法或类上，表示该方法对所有用户开放，无需权限即可访问。\n4）@DenyAll：用于方法或类上，表示该方法对所有用户都不可访问。\n5）@Authenticated：用于方法上，表示用户需要被认证（即已经通过身份验证）。\n上述这些注解，SpringSecurity会利用表达式进行动态权限校验，其中可以使用hasRole、hasAuthority、hasAnyRole、hasAnyAuthority等方法来判断用户角色或权限。\n在方法的权限控制上，SpringSecurity支持三种类型的注解，JSR-250注解，@Secured注解和表达式的注解，这三种注解默认都没有启动，需要通过@EnableGlobalMethodSecurity来启用，这些注解都可以卸载Service接口或方法上，也可以写到Controller或Controller的方法上。\n##### 2.3.1. 表达式的注解\n我们以PreAuthorize注解为例，首先，要在配置类中开启注解，在配置类上，加上下面这行代码\n```java\n@EnableGlobalMethodSecurity(prePostEnabled = true)\n```\n然后，我们添加两个接口，用于测试PreAuthorize注解\n```java\n  @PreAuthorize(value = \"hasAuthority('STUDENT')\")\n    @GetMapping(value = \"/permitStudent\")\n    public Response permitStudent() {\n        return Response.success(\"学生才有权限\");\n    }\n\n    @PreAuthorize(value = \"hasAnyAuthority('STUDENT', 'COUNSELOR')\")\n    @GetMapping(value = \"/permitStudentAndCounselor\")\n    public Response permitStudentAndCounselor() {\n        return Response.success(\"学生和辅导员才有权限\");\n    }\n```\n使用学生账号，访问上面两个接口：\n{% asset_img 10.png %}\n{% asset_img 11.png %}\n使用辅导员账号访问上面两个接口：\n{% asset_img 12.png %}\n{% asset_img 13.png %}\n##### 2.3.2. JSR-250注解\n首先，修改SpringSecurity配置类，在刚才的基础上，开启jsr-250注解\n```java\n@EnableGlobalMethodSecurity(prePostEnabled = true, jsr250Enabled = true)\n```\n然后添加一个接口，用于测试\n```java\n   @PermitAll\n    @GetMapping(value = \"/jsr250PermitAll\")\n    public Response jsr250PermitAll() {\n        return Response.success(\"jsr250PermitAll\");\n    }\n```\n首先，分别使用不同权限的用户登录token，访问该接口，结果如下：\n{% asset_img 14.png %}\n然后，不携带token访问该接口（未登录状态下访问接口）：\n{% asset_img 15.png %}\n这里会被拦截，原因是会先经过FilterSecurityInterceptor过滤器，利用匿名的认证用户进行投票决策，此时vote返回-1（因为没有匹配到当前url，只能匹配authenticated)，默认AffirmativeBased决策下就会直接抛出AccessDeniedException，因此就不会今日到MethodSecurityInterceptor的判断逻辑，必须认证之后才行。debug过程如下：\n首先会浸入FilterSecurityInterceptor过滤器：\n{% asset_img 16.png %}\n{% asset_img 17.png %}\n此时使用的是匿名的认证用户，进行投票决策\n{% asset_img 18.png %}\n{% asset_img 19.png %}\n因为没有匹配到当前url，智能匹配authenticated，因此vote返回-1\n{% asset_img 20.png %}\n{% asset_img 21.png %}\n最后，抛出AccessDeniedException异常\n{% asset_img 22.png %}\n##### 2.3.3. Secured注解\n首先，修改SpringSecurity的配置类，开启Secured注解的支持。\n```java\n@EnableGlobalMethodSecurity(prePostEnabled = true, jsr250Enabled = true, securedEnabled = true)\n```\nSecured是专门用来判断是否具有角色的，参数要以ROLE开头，不过我们之前设置的权限，如STUDENT、COUNSELOR都没有以ROLE开头，我们先修改一些MyUserDetails类的richAuthority，加上ROLE前缀。\n```java\n  private void richAuthority() {\n        List<PermissionDetails> permissionDetails = userContextDetails.getPermissionDetails();\n        if (CollectionUtils.isEmpty(permissionDetails)) {\n            return;\n        }\n        String[] permissions = permissionDetails.stream().map(permission -> \"ROLE_\" + permission.getName())\n                .collect(Collectors.toList()).toArray(new String[0]);\n        this.authorityList = AuthorityUtils.createAuthorityList(permissions);\n    }\n```\n然后添加测试方法：\n```java\n @Secured(value = \"ROLE_STUDENT\")\n    @GetMapping(value = \"/securedStudent\")\n    public Response securedStudent() {\n        return Response.success(\"securedStudent\");\n    }\n```\n分别用学生账号和辅导员账号访问该接口，结果如下：\n{% asset_img 23.png %}\n{% asset_img 24.png %}\n### 3. 参考文章\nhttps://blog.csdn.net/weixin_46073538/article/details/128641746\nhttps://blog.csdn.net/qq_41071876/article/details/122086856","slug":"SpringSecurity学习2—SpringSecurity授权","published":1,"updated":"2024-04-03T07:53:35.920Z","_id":"clujia8lv0001hkvl3souhul2","comments":1,"layout":"post","photos":[],"content":"<h3 id=\"1-引言\"><a href=\"#1-引言\" class=\"headerlink\" title=\"1. 引言\"></a>1. 引言</h3><p>Spring Security进行认证和鉴权的时候，就是利用一系列的Filter来进行拦截的。如下图所示，一个请求想要访问到API就会从左到右经过蓝线框里的过滤器，其中黄色部分是负责认证的过滤器，蓝色部分负责异常处理，橙色部分则是负责授权。经过一些列拦截最终访问到我们的API。</p>\n<img src=\"/2024/04/03/SpringSecurity%E5%AD%A6%E4%B9%A02%E2%80%94SpringSecurity%E6%8E%88%E6%9D%83/1.png\" class=\"\">\n<p>这里需要重点关注两个过滤器：UsernamePasswordAuthenticationFilter负责登录认证，FilterSecurityInterceptor负责权限授权。<br>在SpringSecurity中，会使用默认的FilterSecurityInterceptor来进行权限校验，在FilterSecurityInterceptor中会从SecurityContextHolder获取其中的Authentication，然后获取其中的权限信息，判断当前用户是否拥有访问当前资源所需的权限。<br>SpringSecurity中的Authentication类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">Authentication</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">Principal</span>, Serializable &#123;<br>\t<span class=\"hljs-comment\">//权限数据列表</span><br>    Collection&lt;? <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">GrantedAuthority</span>&gt; getAuthorities();<br><br>    Object <span class=\"hljs-title function_\">getCredentials</span><span class=\"hljs-params\">()</span>;<br><br>    Object <span class=\"hljs-title function_\">getDetails</span><span class=\"hljs-params\">()</span>;<br><br>    Object <span class=\"hljs-title function_\">getPrincipal</span><span class=\"hljs-params\">()</span>;<br><br>    <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">isAuthenticated</span><span class=\"hljs-params\">()</span>;<br><br>    <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">setAuthenticated</span><span class=\"hljs-params\">(<span class=\"hljs-type\">boolean</span> var1)</span> <span class=\"hljs-keyword\">throws</span> IllegalArgumentException;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>Principal: 用户信息，没有认证时一般是用户名，认证后一般是用户对象<br>Credentials: 用户凭证，一般是密码<br>Authorities: 用户权限</p>\n<h3 id=\"2-代码示例\"><a href=\"#2-代码示例\" class=\"headerlink\" title=\"2. 代码示例\"></a>2. 代码示例</h3><p>将权限信息，赋值给UserDetails<br>在我们之前自定义的UserContextDetails中，已经有对应的权限信息了，因此，我们可以将其权限信息，转化为对应的Authority类，我们修改MyUserDetails类，将UserContextDetails中和权限相关的类，转化为SpringSecurity体系中的权限类。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> com.yang.infrastructure.security;<br><br><span class=\"hljs-keyword\">import</span> com.alibaba.fastjson.JSONObject;<br><span class=\"hljs-keyword\">import</span> com.yang.infrastructure.auth.PermissionDetails;<br><span class=\"hljs-keyword\">import</span> com.yang.infrastructure.auth.UserContextDetails;<br><span class=\"hljs-keyword\">import</span> lombok.Data;<br><span class=\"hljs-keyword\">import</span> org.springframework.security.core.GrantedAuthority;<br><span class=\"hljs-keyword\">import</span> org.springframework.security.core.authority.AuthorityUtils;<br><span class=\"hljs-keyword\">import</span> org.springframework.security.core.userdetails.UserDetails;<br><span class=\"hljs-keyword\">import</span> org.springframework.util.CollectionUtils;<br><br><span class=\"hljs-keyword\">import</span> java.util.ArrayList;<br><span class=\"hljs-keyword\">import</span> java.util.Collection;<br><span class=\"hljs-keyword\">import</span> java.util.List;<br><span class=\"hljs-keyword\">import</span> java.util.stream.Collectors;<br><br><span class=\"hljs-meta\">@Data</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MyUserDetails</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">UserDetails</span> &#123;<br>    <span class=\"hljs-keyword\">private</span> UserContextDetails userContextDetails;<br><br>    <span class=\"hljs-keyword\">private</span> String password;<br><br>    <span class=\"hljs-keyword\">private</span> List&lt;GrantedAuthority&gt; authorityList = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayList</span>&lt;&gt;();<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">MyUserDetails</span><span class=\"hljs-params\">(UserContextDetails userContextDetails)</span> &#123;<br>        <span class=\"hljs-built_in\">this</span>.userContextDetails = userContextDetails;<br>        richAuthority();<br>    &#125;<br><br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">richAuthority</span><span class=\"hljs-params\">()</span> &#123;<br>        List&lt;PermissionDetails&gt; permissionDetails = userContextDetails.getPermissionDetails();<br>        <span class=\"hljs-keyword\">if</span> (CollectionUtils.isEmpty(permissionDetails)) &#123;<br>            <span class=\"hljs-keyword\">return</span>;<br>        &#125;<br>        String[] permissions = permissionDetails.stream().map(PermissionDetails::getName)<br>                .collect(Collectors.toList()).toArray(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">String</span>[<span class=\"hljs-number\">0</span>]);<br>        <span class=\"hljs-built_in\">this</span>.authorityList = AuthorityUtils.createAuthorityList(permissions);<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">MyUserDetails</span><span class=\"hljs-params\">(UserContextDetails userContextDetails, String password)</span> &#123;<br>        <span class=\"hljs-built_in\">this</span>.userContextDetails = userContextDetails;<br>        <span class=\"hljs-built_in\">this</span>.password = password;<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> Collection&lt;? <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">GrantedAuthority</span>&gt; getAuthorities() &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>.authorityList;<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title function_\">getPassword</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>.password;<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title function_\">getUsername</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> userContextDetails.getUsername();<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">isAccountNonExpired</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">isAccountNonLocked</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">isCredentialsNonExpired</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">isEnabled</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>然后还需要修改JwtTokenVerifyFilter类，在构建UsernamePasswordAuthenticationToken的时候，将权限赋值上去。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> com.yang.infrastructure.security.filter;<br><br><span class=\"hljs-keyword\">import</span> com.alibaba.fastjson.JSONObject;<br><span class=\"hljs-keyword\">import</span> com.yang.domain.data.Role;<br><span class=\"hljs-keyword\">import</span> com.yang.infrastructure.auth.PermissionDetails;<br><span class=\"hljs-keyword\">import</span> com.yang.infrastructure.auth.UserContextDetails;<br><span class=\"hljs-keyword\">import</span> com.yang.infrastructure.auth.config.JwtTokenProperty;<br><span class=\"hljs-keyword\">import</span> com.yang.infrastructure.auth.request.JwtTokenVerifyRequest;<br><span class=\"hljs-keyword\">import</span> com.yang.infrastructure.auth.response.JwtTokenVerifyDTO;<br><span class=\"hljs-keyword\">import</span> com.yang.infrastructure.auth.service.JwtTokenService;<br><span class=\"hljs-keyword\">import</span> com.yang.infrastructure.security.MyUserDetails;<br><span class=\"hljs-keyword\">import</span> com.yang.infrastructure.utils.RedisUtils;<br><span class=\"hljs-keyword\">import</span> com.yang.infrastructure.utils.SpringContextUtils;<br><span class=\"hljs-keyword\">import</span> org.apache.commons.lang3.StringUtils;<br><span class=\"hljs-keyword\">import</span> org.springframework.security.authentication.UsernamePasswordAuthenticationToken;<br><span class=\"hljs-keyword\">import</span> org.springframework.security.core.context.SecurityContextHolder;<br><span class=\"hljs-keyword\">import</span> org.springframework.security.core.userdetails.UserDetails;<br><span class=\"hljs-keyword\">import</span> org.springframework.web.filter.OncePerRequestFilter;<br><br><span class=\"hljs-keyword\">import</span> javax.servlet.FilterChain;<br><span class=\"hljs-keyword\">import</span> javax.servlet.ServletException;<br><span class=\"hljs-keyword\">import</span> javax.servlet.http.HttpServletRequest;<br><span class=\"hljs-keyword\">import</span> javax.servlet.http.HttpServletResponse;<br><span class=\"hljs-keyword\">import</span> java.io.IOException;<br><span class=\"hljs-keyword\">import</span> java.util.List;<br><span class=\"hljs-keyword\">import</span> java.util.stream.Collectors;<br><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">JwtTokenVerifyFilter</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">OncePerRequestFilter</span> &#123;<br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">protected</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">doFilterInternal</span><span class=\"hljs-params\">(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)</span> <span class=\"hljs-keyword\">throws</span> ServletException, IOException &#123;<br>        <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">token</span> <span class=\"hljs-operator\">=</span> request.getHeader(<span class=\"hljs-string\">&quot;token&quot;</span>);<br>        <span class=\"hljs-keyword\">if</span> (StringUtils.isEmpty(token)) &#123;<br>            filterChain.doFilter(request, response);<br>            <span class=\"hljs-keyword\">return</span>;<br>        &#125;<br><br>        <span class=\"hljs-type\">UserContextDetails</span> <span class=\"hljs-variable\">userContextDetails</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-literal\">null</span>;<br>        <span class=\"hljs-type\">Object</span> <span class=\"hljs-variable\">userDetailsFromRedis</span> <span class=\"hljs-operator\">=</span> getUserDetailsFromRedis(token);<br>        <span class=\"hljs-keyword\">if</span> (userDetailsFromRedis != <span class=\"hljs-literal\">null</span>) &#123;<br>            userContextDetails = (UserContextDetails) userDetailsFromRedis;<br>        &#125;<br><br>        <span class=\"hljs-keyword\">if</span> (userContextDetails == <span class=\"hljs-literal\">null</span>) &#123;<br>            <span class=\"hljs-type\">JwtTokenService</span> <span class=\"hljs-variable\">jwtTokenService</span> <span class=\"hljs-operator\">=</span> SpringContextUtils.getBeanOfType(JwtTokenService.class);<br>            <span class=\"hljs-type\">JwtTokenProperty</span> <span class=\"hljs-variable\">jwtTokenProperty</span> <span class=\"hljs-operator\">=</span> SpringContextUtils.getBeanOfType(JwtTokenProperty.class);<br><br>            <span class=\"hljs-type\">JwtTokenVerifyRequest</span> <span class=\"hljs-variable\">jwtTokenVerifyRequest</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">JwtTokenVerifyRequest</span>();<br>            jwtTokenVerifyRequest.setToken(token);<br>            jwtTokenVerifyRequest.setSecret(jwtTokenProperty.getSecret());<br><br>            <span class=\"hljs-type\">JwtTokenVerifyDTO</span> <span class=\"hljs-variable\">verify</span> <span class=\"hljs-operator\">=</span> jwtTokenService.verify(jwtTokenVerifyRequest);<br>            <span class=\"hljs-keyword\">if</span> (verify == <span class=\"hljs-literal\">null</span>) &#123;<br>                filterChain.doFilter(request, response);<br>                <span class=\"hljs-keyword\">return</span>;<br>            &#125;<br><br>            userContextDetails = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">UserContextDetails</span>();<br>            userContextDetails.setId(Integer.valueOf(verify.getSubject()));<br>            userContextDetails.setToken(token);<br>            userContextDetails.setUsername(verify.getPayLoads().get(<span class=\"hljs-string\">&quot;username&quot;</span>));<br>            userContextDetails.setExtendMap(verify.getPayLoads());<br>            List&lt;Role&gt; roles = JSONObject.parseArray(verify.getPayLoads().get(<span class=\"hljs-string\">&quot;roles&quot;</span>), Role.class);<br>            userContextDetails.setPermissionDetails(roles.stream().map(role -&gt; &#123;<br>                <span class=\"hljs-type\">PermissionDetails</span> <span class=\"hljs-variable\">permissionDetails</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">PermissionDetails</span>();<br>                permissionDetails.setName(role.getCode());<br>                <span class=\"hljs-keyword\">return</span> permissionDetails;<br>            &#125;).collect(Collectors.toList()));<br>        &#125;<br><br>        <span class=\"hljs-keyword\">if</span> (userContextDetails == <span class=\"hljs-literal\">null</span>) &#123;<br>            filterChain.doFilter(request, response);<br>            <span class=\"hljs-keyword\">return</span>;<br>        &#125;<br>        <span class=\"hljs-type\">UserDetails</span> <span class=\"hljs-variable\">userDetails</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">MyUserDetails</span>(userContextDetails);<br>        <span class=\"hljs-type\">UsernamePasswordAuthenticationToken</span> <span class=\"hljs-variable\">authenticationToken</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">UsernamePasswordAuthenticationToken</span>(userDetails, <span class=\"hljs-literal\">null</span>, userDetails.getAuthorities());<br>        SecurityContextHolder.getContext().setAuthentication(authenticationToken);<br>        filterChain.doFilter(request, response);<br>    &#125;<br><br>    <span class=\"hljs-keyword\">private</span> Object <span class=\"hljs-title function_\">getUserDetailsFromRedis</span><span class=\"hljs-params\">(String token)</span> &#123;<br>        <span class=\"hljs-type\">RedisUtils</span> <span class=\"hljs-variable\">redisUtils</span> <span class=\"hljs-operator\">=</span> SpringContextUtils.getBeanOfType(RedisUtils.class);<br>        <span class=\"hljs-keyword\">return</span> redisUtils.getKey(<span class=\"hljs-string\">&quot;token:&quot;</span> + token);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h4 id=\"2-2-URL层面的授权\"><a href=\"#2-2-URL层面的授权\" class=\"headerlink\" title=\"2.2. URL层面的授权\"></a>2.2. URL层面的授权</h4><p>在配置类中，http.authorizeRequests()主要是对url进行控制，配置顺序会影响之后授权的效果，越是具体的应该放前面，越是笼统的应该放后面。<br>anyRequest(): 表示匹配所有的请求，一般情况下此方法都会使用，设置全部内容都需要进行认证，会放到最后。<br>antMatchers：参数是不定向参数，每个参数是一个ant表达式，用于匹配URL规则。</p>\n<figure class=\"highlight asciidoc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs asciidoc\">ANT 通配符说明<br>? 匹配任何单字符<br><span class=\"hljs-bullet\">* </span>匹配0或者任意数量的字符<br><span class=\"hljs-bullet\">** </span>匹配0或者更多的目录<br></code></pre></td></tr></table></figure>\n<p>假设我们对&#x2F;security&#x2F;permitAll可以免认证，配置为：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">http.authorizeRequests<br>.antMatchers(<span class=\"hljs-string\">&quot;/security/permitAll&quot;</span>).permitAll()<br></code></pre></td></tr></table></figure>\n<p>在上述配置中，我们在antMatchers(“&#x2F;security&#x2F;permitAll”)后调用了permitAll()表示不需要认证，随意访问，在SpringSecurity中提供了多种内置控制。</p>\n<h5 id=\"2-2-1-直接授权\"><a href=\"#2-2-1-直接授权\" class=\"headerlink\" title=\"2.2.1. 直接授权\"></a>2.2.1. 直接授权</h5><table>\n<thead>\n<tr>\n<th>方法</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>permitAll()</td>\n<td>所匹配的 URL ,任何人都允许访问</td>\n</tr>\n<tr>\n<td>denyAll()</td>\n<td>所匹配的 URL, 任何人都不允许被访问</td>\n</tr>\n<tr>\n<td>authenticated()</td>\n<td>所匹配的 URL ,任何人 都需要被认证才能访问</td>\n</tr>\n<tr>\n<td>anonymous()</td>\n<td>表示可以匿名访问匹配的 URL。和 permitAll()效果类似，只是设置为 anonymous()的 url 会执行 filter 链中</td>\n</tr>\n<tr>\n<td>rememberMe()</td>\n<td>被“remember me”的用户允许访问</td>\n</tr>\n<tr>\n<td>fullyAuthenticated()</td>\n<td>如果用户不是被 remember me ,才可以访问。</td>\n</tr>\n</tbody></table>\n<p>anonymouse和permitAll的区别：前者表示匿名访问，仅允许匿名用户访问，如果登录认证后，带有token信息再去请求，这个anonymouse关联的资源就不能访问；permitAll登录能访问，不登陆也能返回，一般用于静态资源js等。<br>假设我们的SpringSecurity配置如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> com.yang.infrastructure.security.config;<br><br><span class=\"hljs-keyword\">import</span> com.yang.infrastructure.security.filter.JwtTokenVerifyFilter;<br><span class=\"hljs-keyword\">import</span> com.yang.infrastructure.security.handler.JwtAccessDeniedExceptionHandler;<br><span class=\"hljs-keyword\">import</span> com.yang.infrastructure.security.handler.JwtAuthenticationExceptionHandler;<br><span class=\"hljs-keyword\">import</span> org.springframework.context.annotation.Bean;<br><span class=\"hljs-keyword\">import</span> org.springframework.context.annotation.Configuration;<br><span class=\"hljs-keyword\">import</span> org.springframework.security.config.annotation.web.builders.HttpSecurity;<br><span class=\"hljs-keyword\">import</span> org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;<br><span class=\"hljs-keyword\">import</span> org.springframework.security.config.http.SessionCreationPolicy;<br><span class=\"hljs-keyword\">import</span> org.springframework.security.web.SecurityFilterChain;<br><span class=\"hljs-keyword\">import</span> org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;<br><br><br><span class=\"hljs-meta\">@Configuration</span><br><span class=\"hljs-meta\">@EnableWebSecurity</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">SecurityConfig</span> &#123;<br><br>    <span class=\"hljs-meta\">@Bean</span><br>    SecurityFilterChain <span class=\"hljs-title function_\">filterChain</span><span class=\"hljs-params\">(HttpSecurity httpSecurity)</span> <span class=\"hljs-keyword\">throws</span> Exception &#123;<br>        httpSecurity.headers().cacheControl(); <span class=\"hljs-comment\">// 禁用缓存</span><br>        <span class=\"hljs-comment\">// 登录和注册接口，放行</span><br>        <span class=\"hljs-keyword\">return</span> httpSecurity.authorizeRequests()<br>                .antMatchers(<span class=\"hljs-string\">&quot;/user/login&quot;</span>).permitAll()<br>                .antMatchers(<span class=\"hljs-string\">&quot;/user/register&quot;</span>).permitAll()<br>                .antMatchers(<span class=\"hljs-string\">&quot;/security/permitAll&quot;</span>).permitAll()<br>                .antMatchers(<span class=\"hljs-string\">&quot;/security/anonymous&quot;</span>).anonymous()<br>                .anyRequest().authenticated()<br>                .and()<br>                .csrf().disable()<br>                .sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS) <span class=\"hljs-comment\">// 设置无状态连接，即不创建session</span><br>                .and()<br>                .cors().disable() <span class=\"hljs-comment\">// 解决跨域问题</span><br>                .exceptionHandling()<br>                .authenticationEntryPoint(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">JwtAuthenticationExceptionHandler</span>()) <span class=\"hljs-comment\">// 未认证异常处理</span><br>                .accessDeniedHandler(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">JwtAccessDeniedExceptionHandler</span>()) <span class=\"hljs-comment\">// 权限不足异常处理</span><br>                .and()<br>                .addFilterBefore(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">JwtTokenVerifyFilter</span>(), UsernamePasswordAuthenticationFilter.class) <span class=\"hljs-comment\">// 添加自定义过滤器</span><br>                .build();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>这里对登录、注册、permitAll接口放行，对anonymouse接口允许匿名访问。然后我们添加对应的controller</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> com.yang.controller;<br><br><span class=\"hljs-keyword\">import</span> com.yang.infrastructure.common.Response;<br><span class=\"hljs-keyword\">import</span> org.springframework.security.core.context.SecurityContextHolder;<br><span class=\"hljs-keyword\">import</span> org.springframework.security.core.userdetails.UserDetails;<br><span class=\"hljs-keyword\">import</span> org.springframework.web.bind.annotation.GetMapping;<br><span class=\"hljs-keyword\">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><span class=\"hljs-keyword\">import</span> org.springframework.web.bind.annotation.RestController;<br><br><br><span class=\"hljs-meta\">@RestController</span><br><span class=\"hljs-meta\">@RequestMapping(value = &quot;/security&quot;)</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">SecurityController</span> &#123;<br><br>    <span class=\"hljs-meta\">@GetMapping(value = &quot;/hello&quot;)</span><br>    <span class=\"hljs-keyword\">public</span> Response <span class=\"hljs-title function_\">hello</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-type\">UserDetails</span>  <span class=\"hljs-variable\">userDetails</span> <span class=\"hljs-operator\">=</span> (UserDetails) SecurityContextHolder.getContext().getAuthentication().getPrincipal();<br>        System.out.println(userDetails);<br>        <span class=\"hljs-keyword\">return</span> Response.success(<span class=\"hljs-string\">&quot;hello&quot;</span>);<br>    &#125;<br><br>    <span class=\"hljs-meta\">@GetMapping(value = &quot;/anonymous&quot;)</span><br>    <span class=\"hljs-keyword\">public</span> Response <span class=\"hljs-title function_\">anonymous</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> Response.success(<span class=\"hljs-string\">&quot;anonymous&quot;</span>);<br>    &#125;<br><br>    <span class=\"hljs-meta\">@GetMapping(value = &quot;/permitAll&quot;)</span><br>    <span class=\"hljs-keyword\">public</span> Response <span class=\"hljs-title function_\">permitAll</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> Response.success(<span class=\"hljs-string\">&quot;permitAll&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>运行项目，进行测试，在未登录的情况下，访问anonymous和permitAll接口：</p>\n<img src=\"/2024/04/03/SpringSecurity%E5%AD%A6%E4%B9%A02%E2%80%94SpringSecurity%E6%8E%88%E6%9D%83/2.png\" class=\"\">\n<img src=\"/2024/04/03/SpringSecurity%E5%AD%A6%E4%B9%A02%E2%80%94SpringSecurity%E6%8E%88%E6%9D%83/3.png\" class=\"\">\n<p>在登录情况下访问anonymous和permitAll</p>\n<img src=\"/2024/04/03/SpringSecurity%E5%AD%A6%E4%B9%A02%E2%80%94SpringSecurity%E6%8E%88%E6%9D%83/4.png\" class=\"\">\n<img src=\"/2024/04/03/SpringSecurity%E5%AD%A6%E4%B9%A02%E2%80%94SpringSecurity%E6%8E%88%E6%9D%83/5.png\" class=\"\">\n<h5 id=\"2-2-2-权限授权\"><a href=\"#2-2-2-权限授权\" class=\"headerlink\" title=\"2.2.2. 权限授权\"></a>2.2.2. 权限授权</h5><table>\n<thead>\n<tr>\n<th>方法</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>hasAuthority(String authorities)</td>\n<td>拥有指定权限的用户可以访问</td>\n</tr>\n<tr>\n<td>hasAnyAuthority(String… authorities)</td>\n<td>拥有指定任一权限的用户可访问</td>\n</tr>\n</tbody></table>\n<p>我们修改SpringSecurity的配置，添加下面的权限信息：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">.antMatchers(<span class=\"hljs-string\">&quot;/security/student&quot;</span>)<br>.hasAuthority(<span class=\"hljs-string\">&quot;STUDENT&quot;</span>)<br>.antMatchers(<span class=\"hljs-string\">&quot;/security/studentOrCounselor&quot;</span>)<br>.hasAnyAuthority(<span class=\"hljs-string\">&quot;STUDENT&quot;</span>, <span class=\"hljs-string\">&quot;COUNSELOR&quot;</span>)<br></code></pre></td></tr></table></figure>\n<p>然后添加相应的测试接口</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@GetMapping(value = &quot;/student&quot;)</span><br><span class=\"hljs-keyword\">public</span> Response <span class=\"hljs-title function_\">student</span><span class=\"hljs-params\">()</span> &#123;<br>    <span class=\"hljs-keyword\">return</span> Response.success(<span class=\"hljs-string\">&quot;学生可以访问&quot;</span>);<br>&#125;<br><br><span class=\"hljs-meta\">@GetMapping(value = &quot;/studentOrCounselor&quot;)</span><br><span class=\"hljs-keyword\">public</span> Response <span class=\"hljs-title function_\">studentOrCounselor</span><span class=\"hljs-params\">()</span> &#123;<br>    <span class=\"hljs-keyword\">return</span> Response.success(<span class=\"hljs-string\">&quot;学生或辅导员可以访问&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>接着，使用学生账号访问上面两个接口：</p>\n<img src=\"/2024/04/03/SpringSecurity%E5%AD%A6%E4%B9%A02%E2%80%94SpringSecurity%E6%8E%88%E6%9D%83/6.png\" class=\"\">\n<img src=\"/2024/04/03/SpringSecurity%E5%AD%A6%E4%B9%A02%E2%80%94SpringSecurity%E6%8E%88%E6%9D%83/7.png\" class=\"\">\n<p>使用辅导员账号访问上面两个接口</p>\n<img src=\"/2024/04/03/SpringSecurity%E5%AD%A6%E4%B9%A02%E2%80%94SpringSecurity%E6%8E%88%E6%9D%83/8.png\" class=\"\">\n<img src=\"/2024/04/03/SpringSecurity%E5%AD%A6%E4%B9%A02%E2%80%94SpringSecurity%E6%8E%88%E6%9D%83/9.png\" class=\"\">\n<h5 id=\"2-2-3-角色授权\"><a href=\"#2-2-3-角色授权\" class=\"headerlink\" title=\"2.2.3. 角色授权\"></a>2.2.3. 角色授权</h5><table>\n<thead>\n<tr>\n<th>方法</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>hasRole(String role)</td>\n<td>拥有指定角色的用户可以访问,角色将被增加ROLE_前缀</td>\n</tr>\n<tr>\n<td>hasAnyRoles(String… roles)</td>\n<td>拥有指定任一角色的用户可访问</td>\n</tr>\n</tbody></table>\n<p>这个功能和基于权限认证感觉差不多，只是我们在设置Authority的时候，要加上ROLE_前缀，不然匹配不上，这里就不做演示了。</p>\n<h4 id=\"2-3-基于注解进行权限校验\"><a href=\"#2-3-基于注解进行权限校验\" class=\"headerlink\" title=\"2.3. 基于注解进行权限校验\"></a>2.3. 基于注解进行权限校验</h4><p>在SpringSecurity中，可以通过使用注解的方式进行权限校验，以下是一些常用的SpringSecurity注解：<br>1）@PreAuthorize和@ PostAuthorize: 用于方法安全性，可以定义方法执行前或执行后的权限校验。前者用于方法执行前，可以根据表达式判断是否有权限执行该方法，后者用于方法执行后，可以检测方法执行的结果是否有权限。<br>2）@Secured：该注解用于方法或类上，要求用户具有所有的指定角色。<br>3）@PermitAll：用于方法或类上，表示该方法对所有用户开放，无需权限即可访问。<br>4）@DenyAll：用于方法或类上，表示该方法对所有用户都不可访问。<br>5）@Authenticated：用于方法上，表示用户需要被认证（即已经通过身份验证）。<br>上述这些注解，SpringSecurity会利用表达式进行动态权限校验，其中可以使用hasRole、hasAuthority、hasAnyRole、hasAnyAuthority等方法来判断用户角色或权限。<br>在方法的权限控制上，SpringSecurity支持三种类型的注解，JSR-250注解，@Secured注解和表达式的注解，这三种注解默认都没有启动，需要通过@EnableGlobalMethodSecurity来启用，这些注解都可以卸载Service接口或方法上，也可以写到Controller或Controller的方法上。</p>\n<h5 id=\"2-3-1-表达式的注解\"><a href=\"#2-3-1-表达式的注解\" class=\"headerlink\" title=\"2.3.1. 表达式的注解\"></a>2.3.1. 表达式的注解</h5><p>我们以PreAuthorize注解为例，首先，要在配置类中开启注解，在配置类上，加上下面这行代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@EnableGlobalMethodSecurity(prePostEnabled = true)</span><br></code></pre></td></tr></table></figure>\n<p>然后，我们添加两个接口，用于测试PreAuthorize注解</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@PreAuthorize(value = &quot;hasAuthority(&#x27;STUDENT&#x27;)&quot;)</span><br>  <span class=\"hljs-meta\">@GetMapping(value = &quot;/permitStudent&quot;)</span><br>  <span class=\"hljs-keyword\">public</span> Response <span class=\"hljs-title function_\">permitStudent</span><span class=\"hljs-params\">()</span> &#123;<br>      <span class=\"hljs-keyword\">return</span> Response.success(<span class=\"hljs-string\">&quot;学生才有权限&quot;</span>);<br>  &#125;<br><br>  <span class=\"hljs-meta\">@PreAuthorize(value = &quot;hasAnyAuthority(&#x27;STUDENT&#x27;, &#x27;COUNSELOR&#x27;)&quot;)</span><br>  <span class=\"hljs-meta\">@GetMapping(value = &quot;/permitStudentAndCounselor&quot;)</span><br>  <span class=\"hljs-keyword\">public</span> Response <span class=\"hljs-title function_\">permitStudentAndCounselor</span><span class=\"hljs-params\">()</span> &#123;<br>      <span class=\"hljs-keyword\">return</span> Response.success(<span class=\"hljs-string\">&quot;学生和辅导员才有权限&quot;</span>);<br>  &#125;<br></code></pre></td></tr></table></figure>\n<p>使用学生账号，访问上面两个接口：</p>\n<img src=\"/2024/04/03/SpringSecurity%E5%AD%A6%E4%B9%A02%E2%80%94SpringSecurity%E6%8E%88%E6%9D%83/10.png\" class=\"\">\n<img src=\"/2024/04/03/SpringSecurity%E5%AD%A6%E4%B9%A02%E2%80%94SpringSecurity%E6%8E%88%E6%9D%83/11.png\" class=\"\">\n<p>使用辅导员账号访问上面两个接口：</p>\n<img src=\"/2024/04/03/SpringSecurity%E5%AD%A6%E4%B9%A02%E2%80%94SpringSecurity%E6%8E%88%E6%9D%83/12.png\" class=\"\">\n<img src=\"/2024/04/03/SpringSecurity%E5%AD%A6%E4%B9%A02%E2%80%94SpringSecurity%E6%8E%88%E6%9D%83/13.png\" class=\"\">\n<h5 id=\"2-3-2-JSR-250注解\"><a href=\"#2-3-2-JSR-250注解\" class=\"headerlink\" title=\"2.3.2. JSR-250注解\"></a>2.3.2. JSR-250注解</h5><p>首先，修改SpringSecurity配置类，在刚才的基础上，开启jsr-250注解</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@EnableGlobalMethodSecurity(prePostEnabled = true, jsr250Enabled = true)</span><br></code></pre></td></tr></table></figure>\n<p>然后添加一个接口，用于测试</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@PermitAll</span><br> <span class=\"hljs-meta\">@GetMapping(value = &quot;/jsr250PermitAll&quot;)</span><br> <span class=\"hljs-keyword\">public</span> Response <span class=\"hljs-title function_\">jsr250PermitAll</span><span class=\"hljs-params\">()</span> &#123;<br>     <span class=\"hljs-keyword\">return</span> Response.success(<span class=\"hljs-string\">&quot;jsr250PermitAll&quot;</span>);<br> &#125;<br></code></pre></td></tr></table></figure>\n<p>首先，分别使用不同权限的用户登录token，访问该接口，结果如下：</p>\n<img src=\"/2024/04/03/SpringSecurity%E5%AD%A6%E4%B9%A02%E2%80%94SpringSecurity%E6%8E%88%E6%9D%83/14.png\" class=\"\">\n<p>然后，不携带token访问该接口（未登录状态下访问接口）：</p>\n<img src=\"/2024/04/03/SpringSecurity%E5%AD%A6%E4%B9%A02%E2%80%94SpringSecurity%E6%8E%88%E6%9D%83/15.png\" class=\"\">\n<p>这里会被拦截，原因是会先经过FilterSecurityInterceptor过滤器，利用匿名的认证用户进行投票决策，此时vote返回-1（因为没有匹配到当前url，只能匹配authenticated)，默认AffirmativeBased决策下就会直接抛出AccessDeniedException，因此就不会今日到MethodSecurityInterceptor的判断逻辑，必须认证之后才行。debug过程如下：<br>首先会浸入FilterSecurityInterceptor过滤器：</p>\n<img src=\"/2024/04/03/SpringSecurity%E5%AD%A6%E4%B9%A02%E2%80%94SpringSecurity%E6%8E%88%E6%9D%83/16.png\" class=\"\">\n<img src=\"/2024/04/03/SpringSecurity%E5%AD%A6%E4%B9%A02%E2%80%94SpringSecurity%E6%8E%88%E6%9D%83/17.png\" class=\"\">\n<p>此时使用的是匿名的认证用户，进行投票决策</p>\n<img src=\"/2024/04/03/SpringSecurity%E5%AD%A6%E4%B9%A02%E2%80%94SpringSecurity%E6%8E%88%E6%9D%83/18.png\" class=\"\">\n<img src=\"/2024/04/03/SpringSecurity%E5%AD%A6%E4%B9%A02%E2%80%94SpringSecurity%E6%8E%88%E6%9D%83/19.png\" class=\"\">\n<p>因为没有匹配到当前url，智能匹配authenticated，因此vote返回-1</p>\n<img src=\"/2024/04/03/SpringSecurity%E5%AD%A6%E4%B9%A02%E2%80%94SpringSecurity%E6%8E%88%E6%9D%83/20.png\" class=\"\">\n<img src=\"/2024/04/03/SpringSecurity%E5%AD%A6%E4%B9%A02%E2%80%94SpringSecurity%E6%8E%88%E6%9D%83/21.png\" class=\"\">\n<p>最后，抛出AccessDeniedException异常</p>\n<img src=\"/2024/04/03/SpringSecurity%E5%AD%A6%E4%B9%A02%E2%80%94SpringSecurity%E6%8E%88%E6%9D%83/22.png\" class=\"\">\n<h5 id=\"2-3-3-Secured注解\"><a href=\"#2-3-3-Secured注解\" class=\"headerlink\" title=\"2.3.3. Secured注解\"></a>2.3.3. Secured注解</h5><p>首先，修改SpringSecurity的配置类，开启Secured注解的支持。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@EnableGlobalMethodSecurity(prePostEnabled = true, jsr250Enabled = true, securedEnabled = true)</span><br></code></pre></td></tr></table></figure>\n<p>Secured是专门用来判断是否具有角色的，参数要以ROLE开头，不过我们之前设置的权限，如STUDENT、COUNSELOR都没有以ROLE开头，我们先修改一些MyUserDetails类的richAuthority，加上ROLE前缀。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">richAuthority</span><span class=\"hljs-params\">()</span> &#123;<br>      List&lt;PermissionDetails&gt; permissionDetails = userContextDetails.getPermissionDetails();<br>      <span class=\"hljs-keyword\">if</span> (CollectionUtils.isEmpty(permissionDetails)) &#123;<br>          <span class=\"hljs-keyword\">return</span>;<br>      &#125;<br>      String[] permissions = permissionDetails.stream().map(permission -&gt; <span class=\"hljs-string\">&quot;ROLE_&quot;</span> + permission.getName())<br>              .collect(Collectors.toList()).toArray(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">String</span>[<span class=\"hljs-number\">0</span>]);<br>      <span class=\"hljs-built_in\">this</span>.authorityList = AuthorityUtils.createAuthorityList(permissions);<br>  &#125;<br></code></pre></td></tr></table></figure>\n<p>然后添加测试方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Secured(value = &quot;ROLE_STUDENT&quot;)</span><br>   <span class=\"hljs-meta\">@GetMapping(value = &quot;/securedStudent&quot;)</span><br>   <span class=\"hljs-keyword\">public</span> Response <span class=\"hljs-title function_\">securedStudent</span><span class=\"hljs-params\">()</span> &#123;<br>       <span class=\"hljs-keyword\">return</span> Response.success(<span class=\"hljs-string\">&quot;securedStudent&quot;</span>);<br>   &#125;<br></code></pre></td></tr></table></figure>\n<p>分别用学生账号和辅导员账号访问该接口，结果如下：</p>\n<img src=\"/2024/04/03/SpringSecurity%E5%AD%A6%E4%B9%A02%E2%80%94SpringSecurity%E6%8E%88%E6%9D%83/23.png\" class=\"\">\n<img src=\"/2024/04/03/SpringSecurity%E5%AD%A6%E4%B9%A02%E2%80%94SpringSecurity%E6%8E%88%E6%9D%83/24.png\" class=\"\">\n<h3 id=\"3-参考文章\"><a href=\"#3-参考文章\" class=\"headerlink\" title=\"3. 参考文章\"></a>3. 参考文章</h3><p><a href=\"https://blog.csdn.net/weixin_46073538/article/details/128641746\">https://blog.csdn.net/weixin_46073538/article/details/128641746</a><br><a href=\"https://blog.csdn.net/qq_41071876/article/details/122086856\">https://blog.csdn.net/qq_41071876/article/details/122086856</a></p>\n","excerpt":"","more":"<h3 id=\"1-引言\"><a href=\"#1-引言\" class=\"headerlink\" title=\"1. 引言\"></a>1. 引言</h3><p>Spring Security进行认证和鉴权的时候，就是利用一系列的Filter来进行拦截的。如下图所示，一个请求想要访问到API就会从左到右经过蓝线框里的过滤器，其中黄色部分是负责认证的过滤器，蓝色部分负责异常处理，橙色部分则是负责授权。经过一些列拦截最终访问到我们的API。</p>\n<img src=\"/2024/04/03/SpringSecurity%E5%AD%A6%E4%B9%A02%E2%80%94SpringSecurity%E6%8E%88%E6%9D%83/1.png\" class=\"\">\n<p>这里需要重点关注两个过滤器：UsernamePasswordAuthenticationFilter负责登录认证，FilterSecurityInterceptor负责权限授权。<br>在SpringSecurity中，会使用默认的FilterSecurityInterceptor来进行权限校验，在FilterSecurityInterceptor中会从SecurityContextHolder获取其中的Authentication，然后获取其中的权限信息，判断当前用户是否拥有访问当前资源所需的权限。<br>SpringSecurity中的Authentication类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">Authentication</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">Principal</span>, Serializable &#123;<br>\t<span class=\"hljs-comment\">//权限数据列表</span><br>    Collection&lt;? <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">GrantedAuthority</span>&gt; getAuthorities();<br><br>    Object <span class=\"hljs-title function_\">getCredentials</span><span class=\"hljs-params\">()</span>;<br><br>    Object <span class=\"hljs-title function_\">getDetails</span><span class=\"hljs-params\">()</span>;<br><br>    Object <span class=\"hljs-title function_\">getPrincipal</span><span class=\"hljs-params\">()</span>;<br><br>    <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">isAuthenticated</span><span class=\"hljs-params\">()</span>;<br><br>    <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">setAuthenticated</span><span class=\"hljs-params\">(<span class=\"hljs-type\">boolean</span> var1)</span> <span class=\"hljs-keyword\">throws</span> IllegalArgumentException;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>Principal: 用户信息，没有认证时一般是用户名，认证后一般是用户对象<br>Credentials: 用户凭证，一般是密码<br>Authorities: 用户权限</p>\n<h3 id=\"2-代码示例\"><a href=\"#2-代码示例\" class=\"headerlink\" title=\"2. 代码示例\"></a>2. 代码示例</h3><p>将权限信息，赋值给UserDetails<br>在我们之前自定义的UserContextDetails中，已经有对应的权限信息了，因此，我们可以将其权限信息，转化为对应的Authority类，我们修改MyUserDetails类，将UserContextDetails中和权限相关的类，转化为SpringSecurity体系中的权限类。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> com.yang.infrastructure.security;<br><br><span class=\"hljs-keyword\">import</span> com.alibaba.fastjson.JSONObject;<br><span class=\"hljs-keyword\">import</span> com.yang.infrastructure.auth.PermissionDetails;<br><span class=\"hljs-keyword\">import</span> com.yang.infrastructure.auth.UserContextDetails;<br><span class=\"hljs-keyword\">import</span> lombok.Data;<br><span class=\"hljs-keyword\">import</span> org.springframework.security.core.GrantedAuthority;<br><span class=\"hljs-keyword\">import</span> org.springframework.security.core.authority.AuthorityUtils;<br><span class=\"hljs-keyword\">import</span> org.springframework.security.core.userdetails.UserDetails;<br><span class=\"hljs-keyword\">import</span> org.springframework.util.CollectionUtils;<br><br><span class=\"hljs-keyword\">import</span> java.util.ArrayList;<br><span class=\"hljs-keyword\">import</span> java.util.Collection;<br><span class=\"hljs-keyword\">import</span> java.util.List;<br><span class=\"hljs-keyword\">import</span> java.util.stream.Collectors;<br><br><span class=\"hljs-meta\">@Data</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MyUserDetails</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">UserDetails</span> &#123;<br>    <span class=\"hljs-keyword\">private</span> UserContextDetails userContextDetails;<br><br>    <span class=\"hljs-keyword\">private</span> String password;<br><br>    <span class=\"hljs-keyword\">private</span> List&lt;GrantedAuthority&gt; authorityList = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayList</span>&lt;&gt;();<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">MyUserDetails</span><span class=\"hljs-params\">(UserContextDetails userContextDetails)</span> &#123;<br>        <span class=\"hljs-built_in\">this</span>.userContextDetails = userContextDetails;<br>        richAuthority();<br>    &#125;<br><br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">richAuthority</span><span class=\"hljs-params\">()</span> &#123;<br>        List&lt;PermissionDetails&gt; permissionDetails = userContextDetails.getPermissionDetails();<br>        <span class=\"hljs-keyword\">if</span> (CollectionUtils.isEmpty(permissionDetails)) &#123;<br>            <span class=\"hljs-keyword\">return</span>;<br>        &#125;<br>        String[] permissions = permissionDetails.stream().map(PermissionDetails::getName)<br>                .collect(Collectors.toList()).toArray(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">String</span>[<span class=\"hljs-number\">0</span>]);<br>        <span class=\"hljs-built_in\">this</span>.authorityList = AuthorityUtils.createAuthorityList(permissions);<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">MyUserDetails</span><span class=\"hljs-params\">(UserContextDetails userContextDetails, String password)</span> &#123;<br>        <span class=\"hljs-built_in\">this</span>.userContextDetails = userContextDetails;<br>        <span class=\"hljs-built_in\">this</span>.password = password;<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> Collection&lt;? <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">GrantedAuthority</span>&gt; getAuthorities() &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>.authorityList;<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title function_\">getPassword</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>.password;<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title function_\">getUsername</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> userContextDetails.getUsername();<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">isAccountNonExpired</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">isAccountNonLocked</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">isCredentialsNonExpired</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">isEnabled</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>然后还需要修改JwtTokenVerifyFilter类，在构建UsernamePasswordAuthenticationToken的时候，将权限赋值上去。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> com.yang.infrastructure.security.filter;<br><br><span class=\"hljs-keyword\">import</span> com.alibaba.fastjson.JSONObject;<br><span class=\"hljs-keyword\">import</span> com.yang.domain.data.Role;<br><span class=\"hljs-keyword\">import</span> com.yang.infrastructure.auth.PermissionDetails;<br><span class=\"hljs-keyword\">import</span> com.yang.infrastructure.auth.UserContextDetails;<br><span class=\"hljs-keyword\">import</span> com.yang.infrastructure.auth.config.JwtTokenProperty;<br><span class=\"hljs-keyword\">import</span> com.yang.infrastructure.auth.request.JwtTokenVerifyRequest;<br><span class=\"hljs-keyword\">import</span> com.yang.infrastructure.auth.response.JwtTokenVerifyDTO;<br><span class=\"hljs-keyword\">import</span> com.yang.infrastructure.auth.service.JwtTokenService;<br><span class=\"hljs-keyword\">import</span> com.yang.infrastructure.security.MyUserDetails;<br><span class=\"hljs-keyword\">import</span> com.yang.infrastructure.utils.RedisUtils;<br><span class=\"hljs-keyword\">import</span> com.yang.infrastructure.utils.SpringContextUtils;<br><span class=\"hljs-keyword\">import</span> org.apache.commons.lang3.StringUtils;<br><span class=\"hljs-keyword\">import</span> org.springframework.security.authentication.UsernamePasswordAuthenticationToken;<br><span class=\"hljs-keyword\">import</span> org.springframework.security.core.context.SecurityContextHolder;<br><span class=\"hljs-keyword\">import</span> org.springframework.security.core.userdetails.UserDetails;<br><span class=\"hljs-keyword\">import</span> org.springframework.web.filter.OncePerRequestFilter;<br><br><span class=\"hljs-keyword\">import</span> javax.servlet.FilterChain;<br><span class=\"hljs-keyword\">import</span> javax.servlet.ServletException;<br><span class=\"hljs-keyword\">import</span> javax.servlet.http.HttpServletRequest;<br><span class=\"hljs-keyword\">import</span> javax.servlet.http.HttpServletResponse;<br><span class=\"hljs-keyword\">import</span> java.io.IOException;<br><span class=\"hljs-keyword\">import</span> java.util.List;<br><span class=\"hljs-keyword\">import</span> java.util.stream.Collectors;<br><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">JwtTokenVerifyFilter</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">OncePerRequestFilter</span> &#123;<br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">protected</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">doFilterInternal</span><span class=\"hljs-params\">(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)</span> <span class=\"hljs-keyword\">throws</span> ServletException, IOException &#123;<br>        <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">token</span> <span class=\"hljs-operator\">=</span> request.getHeader(<span class=\"hljs-string\">&quot;token&quot;</span>);<br>        <span class=\"hljs-keyword\">if</span> (StringUtils.isEmpty(token)) &#123;<br>            filterChain.doFilter(request, response);<br>            <span class=\"hljs-keyword\">return</span>;<br>        &#125;<br><br>        <span class=\"hljs-type\">UserContextDetails</span> <span class=\"hljs-variable\">userContextDetails</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-literal\">null</span>;<br>        <span class=\"hljs-type\">Object</span> <span class=\"hljs-variable\">userDetailsFromRedis</span> <span class=\"hljs-operator\">=</span> getUserDetailsFromRedis(token);<br>        <span class=\"hljs-keyword\">if</span> (userDetailsFromRedis != <span class=\"hljs-literal\">null</span>) &#123;<br>            userContextDetails = (UserContextDetails) userDetailsFromRedis;<br>        &#125;<br><br>        <span class=\"hljs-keyword\">if</span> (userContextDetails == <span class=\"hljs-literal\">null</span>) &#123;<br>            <span class=\"hljs-type\">JwtTokenService</span> <span class=\"hljs-variable\">jwtTokenService</span> <span class=\"hljs-operator\">=</span> SpringContextUtils.getBeanOfType(JwtTokenService.class);<br>            <span class=\"hljs-type\">JwtTokenProperty</span> <span class=\"hljs-variable\">jwtTokenProperty</span> <span class=\"hljs-operator\">=</span> SpringContextUtils.getBeanOfType(JwtTokenProperty.class);<br><br>            <span class=\"hljs-type\">JwtTokenVerifyRequest</span> <span class=\"hljs-variable\">jwtTokenVerifyRequest</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">JwtTokenVerifyRequest</span>();<br>            jwtTokenVerifyRequest.setToken(token);<br>            jwtTokenVerifyRequest.setSecret(jwtTokenProperty.getSecret());<br><br>            <span class=\"hljs-type\">JwtTokenVerifyDTO</span> <span class=\"hljs-variable\">verify</span> <span class=\"hljs-operator\">=</span> jwtTokenService.verify(jwtTokenVerifyRequest);<br>            <span class=\"hljs-keyword\">if</span> (verify == <span class=\"hljs-literal\">null</span>) &#123;<br>                filterChain.doFilter(request, response);<br>                <span class=\"hljs-keyword\">return</span>;<br>            &#125;<br><br>            userContextDetails = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">UserContextDetails</span>();<br>            userContextDetails.setId(Integer.valueOf(verify.getSubject()));<br>            userContextDetails.setToken(token);<br>            userContextDetails.setUsername(verify.getPayLoads().get(<span class=\"hljs-string\">&quot;username&quot;</span>));<br>            userContextDetails.setExtendMap(verify.getPayLoads());<br>            List&lt;Role&gt; roles = JSONObject.parseArray(verify.getPayLoads().get(<span class=\"hljs-string\">&quot;roles&quot;</span>), Role.class);<br>            userContextDetails.setPermissionDetails(roles.stream().map(role -&gt; &#123;<br>                <span class=\"hljs-type\">PermissionDetails</span> <span class=\"hljs-variable\">permissionDetails</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">PermissionDetails</span>();<br>                permissionDetails.setName(role.getCode());<br>                <span class=\"hljs-keyword\">return</span> permissionDetails;<br>            &#125;).collect(Collectors.toList()));<br>        &#125;<br><br>        <span class=\"hljs-keyword\">if</span> (userContextDetails == <span class=\"hljs-literal\">null</span>) &#123;<br>            filterChain.doFilter(request, response);<br>            <span class=\"hljs-keyword\">return</span>;<br>        &#125;<br>        <span class=\"hljs-type\">UserDetails</span> <span class=\"hljs-variable\">userDetails</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">MyUserDetails</span>(userContextDetails);<br>        <span class=\"hljs-type\">UsernamePasswordAuthenticationToken</span> <span class=\"hljs-variable\">authenticationToken</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">UsernamePasswordAuthenticationToken</span>(userDetails, <span class=\"hljs-literal\">null</span>, userDetails.getAuthorities());<br>        SecurityContextHolder.getContext().setAuthentication(authenticationToken);<br>        filterChain.doFilter(request, response);<br>    &#125;<br><br>    <span class=\"hljs-keyword\">private</span> Object <span class=\"hljs-title function_\">getUserDetailsFromRedis</span><span class=\"hljs-params\">(String token)</span> &#123;<br>        <span class=\"hljs-type\">RedisUtils</span> <span class=\"hljs-variable\">redisUtils</span> <span class=\"hljs-operator\">=</span> SpringContextUtils.getBeanOfType(RedisUtils.class);<br>        <span class=\"hljs-keyword\">return</span> redisUtils.getKey(<span class=\"hljs-string\">&quot;token:&quot;</span> + token);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h4 id=\"2-2-URL层面的授权\"><a href=\"#2-2-URL层面的授权\" class=\"headerlink\" title=\"2.2. URL层面的授权\"></a>2.2. URL层面的授权</h4><p>在配置类中，http.authorizeRequests()主要是对url进行控制，配置顺序会影响之后授权的效果，越是具体的应该放前面，越是笼统的应该放后面。<br>anyRequest(): 表示匹配所有的请求，一般情况下此方法都会使用，设置全部内容都需要进行认证，会放到最后。<br>antMatchers：参数是不定向参数，每个参数是一个ant表达式，用于匹配URL规则。</p>\n<figure class=\"highlight asciidoc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs asciidoc\">ANT 通配符说明<br>? 匹配任何单字符<br><span class=\"hljs-bullet\">* </span>匹配0或者任意数量的字符<br><span class=\"hljs-bullet\">** </span>匹配0或者更多的目录<br></code></pre></td></tr></table></figure>\n<p>假设我们对&#x2F;security&#x2F;permitAll可以免认证，配置为：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">http.authorizeRequests<br>.antMatchers(<span class=\"hljs-string\">&quot;/security/permitAll&quot;</span>).permitAll()<br></code></pre></td></tr></table></figure>\n<p>在上述配置中，我们在antMatchers(“&#x2F;security&#x2F;permitAll”)后调用了permitAll()表示不需要认证，随意访问，在SpringSecurity中提供了多种内置控制。</p>\n<h5 id=\"2-2-1-直接授权\"><a href=\"#2-2-1-直接授权\" class=\"headerlink\" title=\"2.2.1. 直接授权\"></a>2.2.1. 直接授权</h5><table>\n<thead>\n<tr>\n<th>方法</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>permitAll()</td>\n<td>所匹配的 URL ,任何人都允许访问</td>\n</tr>\n<tr>\n<td>denyAll()</td>\n<td>所匹配的 URL, 任何人都不允许被访问</td>\n</tr>\n<tr>\n<td>authenticated()</td>\n<td>所匹配的 URL ,任何人 都需要被认证才能访问</td>\n</tr>\n<tr>\n<td>anonymous()</td>\n<td>表示可以匿名访问匹配的 URL。和 permitAll()效果类似，只是设置为 anonymous()的 url 会执行 filter 链中</td>\n</tr>\n<tr>\n<td>rememberMe()</td>\n<td>被“remember me”的用户允许访问</td>\n</tr>\n<tr>\n<td>fullyAuthenticated()</td>\n<td>如果用户不是被 remember me ,才可以访问。</td>\n</tr>\n</tbody></table>\n<p>anonymouse和permitAll的区别：前者表示匿名访问，仅允许匿名用户访问，如果登录认证后，带有token信息再去请求，这个anonymouse关联的资源就不能访问；permitAll登录能访问，不登陆也能返回，一般用于静态资源js等。<br>假设我们的SpringSecurity配置如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> com.yang.infrastructure.security.config;<br><br><span class=\"hljs-keyword\">import</span> com.yang.infrastructure.security.filter.JwtTokenVerifyFilter;<br><span class=\"hljs-keyword\">import</span> com.yang.infrastructure.security.handler.JwtAccessDeniedExceptionHandler;<br><span class=\"hljs-keyword\">import</span> com.yang.infrastructure.security.handler.JwtAuthenticationExceptionHandler;<br><span class=\"hljs-keyword\">import</span> org.springframework.context.annotation.Bean;<br><span class=\"hljs-keyword\">import</span> org.springframework.context.annotation.Configuration;<br><span class=\"hljs-keyword\">import</span> org.springframework.security.config.annotation.web.builders.HttpSecurity;<br><span class=\"hljs-keyword\">import</span> org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;<br><span class=\"hljs-keyword\">import</span> org.springframework.security.config.http.SessionCreationPolicy;<br><span class=\"hljs-keyword\">import</span> org.springframework.security.web.SecurityFilterChain;<br><span class=\"hljs-keyword\">import</span> org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;<br><br><br><span class=\"hljs-meta\">@Configuration</span><br><span class=\"hljs-meta\">@EnableWebSecurity</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">SecurityConfig</span> &#123;<br><br>    <span class=\"hljs-meta\">@Bean</span><br>    SecurityFilterChain <span class=\"hljs-title function_\">filterChain</span><span class=\"hljs-params\">(HttpSecurity httpSecurity)</span> <span class=\"hljs-keyword\">throws</span> Exception &#123;<br>        httpSecurity.headers().cacheControl(); <span class=\"hljs-comment\">// 禁用缓存</span><br>        <span class=\"hljs-comment\">// 登录和注册接口，放行</span><br>        <span class=\"hljs-keyword\">return</span> httpSecurity.authorizeRequests()<br>                .antMatchers(<span class=\"hljs-string\">&quot;/user/login&quot;</span>).permitAll()<br>                .antMatchers(<span class=\"hljs-string\">&quot;/user/register&quot;</span>).permitAll()<br>                .antMatchers(<span class=\"hljs-string\">&quot;/security/permitAll&quot;</span>).permitAll()<br>                .antMatchers(<span class=\"hljs-string\">&quot;/security/anonymous&quot;</span>).anonymous()<br>                .anyRequest().authenticated()<br>                .and()<br>                .csrf().disable()<br>                .sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS) <span class=\"hljs-comment\">// 设置无状态连接，即不创建session</span><br>                .and()<br>                .cors().disable() <span class=\"hljs-comment\">// 解决跨域问题</span><br>                .exceptionHandling()<br>                .authenticationEntryPoint(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">JwtAuthenticationExceptionHandler</span>()) <span class=\"hljs-comment\">// 未认证异常处理</span><br>                .accessDeniedHandler(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">JwtAccessDeniedExceptionHandler</span>()) <span class=\"hljs-comment\">// 权限不足异常处理</span><br>                .and()<br>                .addFilterBefore(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">JwtTokenVerifyFilter</span>(), UsernamePasswordAuthenticationFilter.class) <span class=\"hljs-comment\">// 添加自定义过滤器</span><br>                .build();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>这里对登录、注册、permitAll接口放行，对anonymouse接口允许匿名访问。然后我们添加对应的controller</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> com.yang.controller;<br><br><span class=\"hljs-keyword\">import</span> com.yang.infrastructure.common.Response;<br><span class=\"hljs-keyword\">import</span> org.springframework.security.core.context.SecurityContextHolder;<br><span class=\"hljs-keyword\">import</span> org.springframework.security.core.userdetails.UserDetails;<br><span class=\"hljs-keyword\">import</span> org.springframework.web.bind.annotation.GetMapping;<br><span class=\"hljs-keyword\">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><span class=\"hljs-keyword\">import</span> org.springframework.web.bind.annotation.RestController;<br><br><br><span class=\"hljs-meta\">@RestController</span><br><span class=\"hljs-meta\">@RequestMapping(value = &quot;/security&quot;)</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">SecurityController</span> &#123;<br><br>    <span class=\"hljs-meta\">@GetMapping(value = &quot;/hello&quot;)</span><br>    <span class=\"hljs-keyword\">public</span> Response <span class=\"hljs-title function_\">hello</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-type\">UserDetails</span>  <span class=\"hljs-variable\">userDetails</span> <span class=\"hljs-operator\">=</span> (UserDetails) SecurityContextHolder.getContext().getAuthentication().getPrincipal();<br>        System.out.println(userDetails);<br>        <span class=\"hljs-keyword\">return</span> Response.success(<span class=\"hljs-string\">&quot;hello&quot;</span>);<br>    &#125;<br><br>    <span class=\"hljs-meta\">@GetMapping(value = &quot;/anonymous&quot;)</span><br>    <span class=\"hljs-keyword\">public</span> Response <span class=\"hljs-title function_\">anonymous</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> Response.success(<span class=\"hljs-string\">&quot;anonymous&quot;</span>);<br>    &#125;<br><br>    <span class=\"hljs-meta\">@GetMapping(value = &quot;/permitAll&quot;)</span><br>    <span class=\"hljs-keyword\">public</span> Response <span class=\"hljs-title function_\">permitAll</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> Response.success(<span class=\"hljs-string\">&quot;permitAll&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>运行项目，进行测试，在未登录的情况下，访问anonymous和permitAll接口：</p>\n<img src=\"/2024/04/03/SpringSecurity%E5%AD%A6%E4%B9%A02%E2%80%94SpringSecurity%E6%8E%88%E6%9D%83/2.png\" class=\"\">\n<img src=\"/2024/04/03/SpringSecurity%E5%AD%A6%E4%B9%A02%E2%80%94SpringSecurity%E6%8E%88%E6%9D%83/3.png\" class=\"\">\n<p>在登录情况下访问anonymous和permitAll</p>\n<img src=\"/2024/04/03/SpringSecurity%E5%AD%A6%E4%B9%A02%E2%80%94SpringSecurity%E6%8E%88%E6%9D%83/4.png\" class=\"\">\n<img src=\"/2024/04/03/SpringSecurity%E5%AD%A6%E4%B9%A02%E2%80%94SpringSecurity%E6%8E%88%E6%9D%83/5.png\" class=\"\">\n<h5 id=\"2-2-2-权限授权\"><a href=\"#2-2-2-权限授权\" class=\"headerlink\" title=\"2.2.2. 权限授权\"></a>2.2.2. 权限授权</h5><table>\n<thead>\n<tr>\n<th>方法</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>hasAuthority(String authorities)</td>\n<td>拥有指定权限的用户可以访问</td>\n</tr>\n<tr>\n<td>hasAnyAuthority(String… authorities)</td>\n<td>拥有指定任一权限的用户可访问</td>\n</tr>\n</tbody></table>\n<p>我们修改SpringSecurity的配置，添加下面的权限信息：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">.antMatchers(<span class=\"hljs-string\">&quot;/security/student&quot;</span>)<br>.hasAuthority(<span class=\"hljs-string\">&quot;STUDENT&quot;</span>)<br>.antMatchers(<span class=\"hljs-string\">&quot;/security/studentOrCounselor&quot;</span>)<br>.hasAnyAuthority(<span class=\"hljs-string\">&quot;STUDENT&quot;</span>, <span class=\"hljs-string\">&quot;COUNSELOR&quot;</span>)<br></code></pre></td></tr></table></figure>\n<p>然后添加相应的测试接口</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@GetMapping(value = &quot;/student&quot;)</span><br><span class=\"hljs-keyword\">public</span> Response <span class=\"hljs-title function_\">student</span><span class=\"hljs-params\">()</span> &#123;<br>    <span class=\"hljs-keyword\">return</span> Response.success(<span class=\"hljs-string\">&quot;学生可以访问&quot;</span>);<br>&#125;<br><br><span class=\"hljs-meta\">@GetMapping(value = &quot;/studentOrCounselor&quot;)</span><br><span class=\"hljs-keyword\">public</span> Response <span class=\"hljs-title function_\">studentOrCounselor</span><span class=\"hljs-params\">()</span> &#123;<br>    <span class=\"hljs-keyword\">return</span> Response.success(<span class=\"hljs-string\">&quot;学生或辅导员可以访问&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>接着，使用学生账号访问上面两个接口：</p>\n<img src=\"/2024/04/03/SpringSecurity%E5%AD%A6%E4%B9%A02%E2%80%94SpringSecurity%E6%8E%88%E6%9D%83/6.png\" class=\"\">\n<img src=\"/2024/04/03/SpringSecurity%E5%AD%A6%E4%B9%A02%E2%80%94SpringSecurity%E6%8E%88%E6%9D%83/7.png\" class=\"\">\n<p>使用辅导员账号访问上面两个接口</p>\n<img src=\"/2024/04/03/SpringSecurity%E5%AD%A6%E4%B9%A02%E2%80%94SpringSecurity%E6%8E%88%E6%9D%83/8.png\" class=\"\">\n<img src=\"/2024/04/03/SpringSecurity%E5%AD%A6%E4%B9%A02%E2%80%94SpringSecurity%E6%8E%88%E6%9D%83/9.png\" class=\"\">\n<h5 id=\"2-2-3-角色授权\"><a href=\"#2-2-3-角色授权\" class=\"headerlink\" title=\"2.2.3. 角色授权\"></a>2.2.3. 角色授权</h5><table>\n<thead>\n<tr>\n<th>方法</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>hasRole(String role)</td>\n<td>拥有指定角色的用户可以访问,角色将被增加ROLE_前缀</td>\n</tr>\n<tr>\n<td>hasAnyRoles(String… roles)</td>\n<td>拥有指定任一角色的用户可访问</td>\n</tr>\n</tbody></table>\n<p>这个功能和基于权限认证感觉差不多，只是我们在设置Authority的时候，要加上ROLE_前缀，不然匹配不上，这里就不做演示了。</p>\n<h4 id=\"2-3-基于注解进行权限校验\"><a href=\"#2-3-基于注解进行权限校验\" class=\"headerlink\" title=\"2.3. 基于注解进行权限校验\"></a>2.3. 基于注解进行权限校验</h4><p>在SpringSecurity中，可以通过使用注解的方式进行权限校验，以下是一些常用的SpringSecurity注解：<br>1）@PreAuthorize和@ PostAuthorize: 用于方法安全性，可以定义方法执行前或执行后的权限校验。前者用于方法执行前，可以根据表达式判断是否有权限执行该方法，后者用于方法执行后，可以检测方法执行的结果是否有权限。<br>2）@Secured：该注解用于方法或类上，要求用户具有所有的指定角色。<br>3）@PermitAll：用于方法或类上，表示该方法对所有用户开放，无需权限即可访问。<br>4）@DenyAll：用于方法或类上，表示该方法对所有用户都不可访问。<br>5）@Authenticated：用于方法上，表示用户需要被认证（即已经通过身份验证）。<br>上述这些注解，SpringSecurity会利用表达式进行动态权限校验，其中可以使用hasRole、hasAuthority、hasAnyRole、hasAnyAuthority等方法来判断用户角色或权限。<br>在方法的权限控制上，SpringSecurity支持三种类型的注解，JSR-250注解，@Secured注解和表达式的注解，这三种注解默认都没有启动，需要通过@EnableGlobalMethodSecurity来启用，这些注解都可以卸载Service接口或方法上，也可以写到Controller或Controller的方法上。</p>\n<h5 id=\"2-3-1-表达式的注解\"><a href=\"#2-3-1-表达式的注解\" class=\"headerlink\" title=\"2.3.1. 表达式的注解\"></a>2.3.1. 表达式的注解</h5><p>我们以PreAuthorize注解为例，首先，要在配置类中开启注解，在配置类上，加上下面这行代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@EnableGlobalMethodSecurity(prePostEnabled = true)</span><br></code></pre></td></tr></table></figure>\n<p>然后，我们添加两个接口，用于测试PreAuthorize注解</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@PreAuthorize(value = &quot;hasAuthority(&#x27;STUDENT&#x27;)&quot;)</span><br>  <span class=\"hljs-meta\">@GetMapping(value = &quot;/permitStudent&quot;)</span><br>  <span class=\"hljs-keyword\">public</span> Response <span class=\"hljs-title function_\">permitStudent</span><span class=\"hljs-params\">()</span> &#123;<br>      <span class=\"hljs-keyword\">return</span> Response.success(<span class=\"hljs-string\">&quot;学生才有权限&quot;</span>);<br>  &#125;<br><br>  <span class=\"hljs-meta\">@PreAuthorize(value = &quot;hasAnyAuthority(&#x27;STUDENT&#x27;, &#x27;COUNSELOR&#x27;)&quot;)</span><br>  <span class=\"hljs-meta\">@GetMapping(value = &quot;/permitStudentAndCounselor&quot;)</span><br>  <span class=\"hljs-keyword\">public</span> Response <span class=\"hljs-title function_\">permitStudentAndCounselor</span><span class=\"hljs-params\">()</span> &#123;<br>      <span class=\"hljs-keyword\">return</span> Response.success(<span class=\"hljs-string\">&quot;学生和辅导员才有权限&quot;</span>);<br>  &#125;<br></code></pre></td></tr></table></figure>\n<p>使用学生账号，访问上面两个接口：</p>\n<img src=\"/2024/04/03/SpringSecurity%E5%AD%A6%E4%B9%A02%E2%80%94SpringSecurity%E6%8E%88%E6%9D%83/10.png\" class=\"\">\n<img src=\"/2024/04/03/SpringSecurity%E5%AD%A6%E4%B9%A02%E2%80%94SpringSecurity%E6%8E%88%E6%9D%83/11.png\" class=\"\">\n<p>使用辅导员账号访问上面两个接口：</p>\n<img src=\"/2024/04/03/SpringSecurity%E5%AD%A6%E4%B9%A02%E2%80%94SpringSecurity%E6%8E%88%E6%9D%83/12.png\" class=\"\">\n<img src=\"/2024/04/03/SpringSecurity%E5%AD%A6%E4%B9%A02%E2%80%94SpringSecurity%E6%8E%88%E6%9D%83/13.png\" class=\"\">\n<h5 id=\"2-3-2-JSR-250注解\"><a href=\"#2-3-2-JSR-250注解\" class=\"headerlink\" title=\"2.3.2. JSR-250注解\"></a>2.3.2. JSR-250注解</h5><p>首先，修改SpringSecurity配置类，在刚才的基础上，开启jsr-250注解</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@EnableGlobalMethodSecurity(prePostEnabled = true, jsr250Enabled = true)</span><br></code></pre></td></tr></table></figure>\n<p>然后添加一个接口，用于测试</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@PermitAll</span><br> <span class=\"hljs-meta\">@GetMapping(value = &quot;/jsr250PermitAll&quot;)</span><br> <span class=\"hljs-keyword\">public</span> Response <span class=\"hljs-title function_\">jsr250PermitAll</span><span class=\"hljs-params\">()</span> &#123;<br>     <span class=\"hljs-keyword\">return</span> Response.success(<span class=\"hljs-string\">&quot;jsr250PermitAll&quot;</span>);<br> &#125;<br></code></pre></td></tr></table></figure>\n<p>首先，分别使用不同权限的用户登录token，访问该接口，结果如下：</p>\n<img src=\"/2024/04/03/SpringSecurity%E5%AD%A6%E4%B9%A02%E2%80%94SpringSecurity%E6%8E%88%E6%9D%83/14.png\" class=\"\">\n<p>然后，不携带token访问该接口（未登录状态下访问接口）：</p>\n<img src=\"/2024/04/03/SpringSecurity%E5%AD%A6%E4%B9%A02%E2%80%94SpringSecurity%E6%8E%88%E6%9D%83/15.png\" class=\"\">\n<p>这里会被拦截，原因是会先经过FilterSecurityInterceptor过滤器，利用匿名的认证用户进行投票决策，此时vote返回-1（因为没有匹配到当前url，只能匹配authenticated)，默认AffirmativeBased决策下就会直接抛出AccessDeniedException，因此就不会今日到MethodSecurityInterceptor的判断逻辑，必须认证之后才行。debug过程如下：<br>首先会浸入FilterSecurityInterceptor过滤器：</p>\n<img src=\"/2024/04/03/SpringSecurity%E5%AD%A6%E4%B9%A02%E2%80%94SpringSecurity%E6%8E%88%E6%9D%83/16.png\" class=\"\">\n<img src=\"/2024/04/03/SpringSecurity%E5%AD%A6%E4%B9%A02%E2%80%94SpringSecurity%E6%8E%88%E6%9D%83/17.png\" class=\"\">\n<p>此时使用的是匿名的认证用户，进行投票决策</p>\n<img src=\"/2024/04/03/SpringSecurity%E5%AD%A6%E4%B9%A02%E2%80%94SpringSecurity%E6%8E%88%E6%9D%83/18.png\" class=\"\">\n<img src=\"/2024/04/03/SpringSecurity%E5%AD%A6%E4%B9%A02%E2%80%94SpringSecurity%E6%8E%88%E6%9D%83/19.png\" class=\"\">\n<p>因为没有匹配到当前url，智能匹配authenticated，因此vote返回-1</p>\n<img src=\"/2024/04/03/SpringSecurity%E5%AD%A6%E4%B9%A02%E2%80%94SpringSecurity%E6%8E%88%E6%9D%83/20.png\" class=\"\">\n<img src=\"/2024/04/03/SpringSecurity%E5%AD%A6%E4%B9%A02%E2%80%94SpringSecurity%E6%8E%88%E6%9D%83/21.png\" class=\"\">\n<p>最后，抛出AccessDeniedException异常</p>\n<img src=\"/2024/04/03/SpringSecurity%E5%AD%A6%E4%B9%A02%E2%80%94SpringSecurity%E6%8E%88%E6%9D%83/22.png\" class=\"\">\n<h5 id=\"2-3-3-Secured注解\"><a href=\"#2-3-3-Secured注解\" class=\"headerlink\" title=\"2.3.3. Secured注解\"></a>2.3.3. Secured注解</h5><p>首先，修改SpringSecurity的配置类，开启Secured注解的支持。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@EnableGlobalMethodSecurity(prePostEnabled = true, jsr250Enabled = true, securedEnabled = true)</span><br></code></pre></td></tr></table></figure>\n<p>Secured是专门用来判断是否具有角色的，参数要以ROLE开头，不过我们之前设置的权限，如STUDENT、COUNSELOR都没有以ROLE开头，我们先修改一些MyUserDetails类的richAuthority，加上ROLE前缀。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">richAuthority</span><span class=\"hljs-params\">()</span> &#123;<br>      List&lt;PermissionDetails&gt; permissionDetails = userContextDetails.getPermissionDetails();<br>      <span class=\"hljs-keyword\">if</span> (CollectionUtils.isEmpty(permissionDetails)) &#123;<br>          <span class=\"hljs-keyword\">return</span>;<br>      &#125;<br>      String[] permissions = permissionDetails.stream().map(permission -&gt; <span class=\"hljs-string\">&quot;ROLE_&quot;</span> + permission.getName())<br>              .collect(Collectors.toList()).toArray(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">String</span>[<span class=\"hljs-number\">0</span>]);<br>      <span class=\"hljs-built_in\">this</span>.authorityList = AuthorityUtils.createAuthorityList(permissions);<br>  &#125;<br></code></pre></td></tr></table></figure>\n<p>然后添加测试方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Secured(value = &quot;ROLE_STUDENT&quot;)</span><br>   <span class=\"hljs-meta\">@GetMapping(value = &quot;/securedStudent&quot;)</span><br>   <span class=\"hljs-keyword\">public</span> Response <span class=\"hljs-title function_\">securedStudent</span><span class=\"hljs-params\">()</span> &#123;<br>       <span class=\"hljs-keyword\">return</span> Response.success(<span class=\"hljs-string\">&quot;securedStudent&quot;</span>);<br>   &#125;<br></code></pre></td></tr></table></figure>\n<p>分别用学生账号和辅导员账号访问该接口，结果如下：</p>\n<img src=\"/2024/04/03/SpringSecurity%E5%AD%A6%E4%B9%A02%E2%80%94SpringSecurity%E6%8E%88%E6%9D%83/23.png\" class=\"\">\n<img src=\"/2024/04/03/SpringSecurity%E5%AD%A6%E4%B9%A02%E2%80%94SpringSecurity%E6%8E%88%E6%9D%83/24.png\" class=\"\">\n<h3 id=\"3-参考文章\"><a href=\"#3-参考文章\" class=\"headerlink\" title=\"3. 参考文章\"></a>3. 参考文章</h3><p><a href=\"https://blog.csdn.net/weixin_46073538/article/details/128641746\">https://blog.csdn.net/weixin_46073538/article/details/128641746</a><br><a href=\"https://blog.csdn.net/qq_41071876/article/details/122086856\">https://blog.csdn.net/qq_41071876/article/details/122086856</a></p>\n"},{"title":"手撸Mybatis（一）——代理mapper","date":"2024-05-04T06:52:01.000Z","_content":"### 引言\n最近刚写完毕设，闲来无事，看到网上有一个手撸Mybatis的教程，于是想自己实现一个简易版的Mybatis。\n### 创建简单的映射器代理工厂\n在使用mybatis的时候，我们一般只需要定义mapper的接口，并添加相应的@Mapper注解，然后实现对应的xml文件即可，而不需要对mapper接口进行具体的实现。其实本质上，这些mapper接口是有实现的，但不是我们手动通过implement来实现，而是通过代理的方式进行实现。因此，对于Mybatis的手撸，首先要关注的，就是如何对mapper进行代理。\n首先我们定义一个MapperProxy，该类实现InvocationHandler接口，通过实现该接口，实现动态代理。这里有两个属性——sqlSession和mapperInterface，其中，sqlSession是用来模拟执行sql语句的。\n```json\npackage com.yang.mybatis.proxy;\n\nimport java.lang.reflect.InvocationHandler;\nimport java.lang.reflect.Method;\nimport java.util.Map;\n\npublic class MapperProxy<T> implements InvocationHandler {\nprivate Map<String, Object> sqlSession ;\n\nprivate Class<T> mapperInterface;\n\npublic MapperProxy(Map<String, Object> sqlSession, Class<T> mapperInterface) {\nthis.sqlSession = sqlSession;\nthis.mapperInterface = mapperInterface;\n}\n\n@Override\npublic Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\nif (Object.class.equals(method.getDeclaringClass())) {\nreturn method.invoke(this, args);\n}\nString key = this.mapperInterface.getName() + \".\" + method.getName();\nreturn sqlSession.get(key);\n}\n}\n\n```\n当我们在执行mapper的某个方法时，最终会进入到invoke方法，并通过sqlSession来获取模拟值。\n接着我们定义MapperProxyFactory，每一个mapper都有一个MapperProxyFactory与之相对于，然后newInstance方法接收模拟的sql结果，并通过Proxy.newProxyInstance创建动态代理对象。\n```json\npackage com.yang.mybatis.proxy;\n\nimport java.lang.reflect.Proxy;\nimport java.util.Map;\n\npublic class MapperProxyFactory <T> {\nprivate final Class<T> mapperInterface;\n\npublic MapperProxyFactory(Class<T> mapperInterface) {\nthis.mapperInterface = mapperInterface;\n}\n\npublic T newInstance(Map<String, Object> sqlSession) {\nMapperProxy<T> mapperProxy = new MapperProxy<>(sqlSession, mapperInterface);\nreturn (T) Proxy.newProxyInstance(mapperInterface.getClassLoader(),\nnew Class[]{mapperInterface},\nmapperProxy);\n}\n}\n\n```\n最后，我们先创建一个IUserMapper类\n```json\npackage com.yang.mybatis.test;\n\npublic interface IUserMapper {\nString queryUserName(Integer id);\n\nInteger queryUserAge(Integer id);\n}\n\n```\n然后创建对应的测试方法\n```json\npackage com.yang.mybatis.test;\n\nimport com.yang.mybatis.proxy.MapperProxyFactory;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class Main {\npublic static void main(String[] args) {\nMapperProxyFactory<IUserMapper> userDaoMapperProxyFactory = new MapperProxyFactory<>(IUserMapper.class);\nMap<String, Object> sqlSession = new HashMap<>();\nsqlSession.put(\"com.yang.mybatis.test.IUserMapper.queryUserName\", \"模拟查询用户名\");\nsqlSession.put(\"com.yang.mybatis.test.IUserMapper.queryUserAge\", 1);\nIUserMapper iUserMapper = userDaoMapperProxyFactory.newInstance(sqlSession);\nSystem.out.println(iUserMapper.queryUserAge(1));\nSystem.out.println(iUserMapper.queryUserName(1));\n}\n}\n\n```\n运行结果如下：\n{% asset_img 1.png %}\n### 实现映射器的注册和使用\n像上述的这种方法，我们每次要获取一个Mapper，就要new一个对应的MapperProxyFactory，这样不太方便。一般情况下，mapper是放在同一个包下的，那么我们可以通过扫描包，来初始化MapperProxyFactory。至于上一节的sqlSession，因为我们目前是模拟数据，所以在初始化过程中，把这些模拟数据要随便mock住就行。\n因为要扫描包获取包下的Class类，我们先添加hutool-all，以便通过其提供的ClassScanner获取包\n```json\n<dependency>\n<groupId>cn.hutool</groupId>\n<artifactId>hutool-all</artifactId>\n<version>5.8.12</version>\n</dependency>\n```\n然后，我们修改MapperProxyFactory\n```json\npackage com.yang.mybatis.proxy;\n\nimport cn.hutool.core.lang.ClassScanner;\n\nimport java.lang.reflect.Method;\nimport java.lang.reflect.Proxy;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.Set;\n\npublic class MapperProxyFactory {\nprivate Map<Class, MapperProxy> mapperProxyMap = new HashMap<>();\n\npublic MapperProxyFactory(String packageName) {\n// 扫描包\nClassScanner scanner = new ClassScanner(packageName);\nSet<Class<?>> mapperTypes = scanner.scan();\nfor (Class<?> mapperType : mapperTypes) {\nif (!mapperType.isInterface()) {\n// 只对接口进行处理\ncontinue;\n}\n\nMap<String, String> mockSqlSession = mockSqlSession(mapperType);\nMapperProxy mapperProxy = new MapperProxy(mockSqlSession, mapperType);\nmapperProxyMap.put(mapperType, mapperProxy);\n}\n}\n\npublic Object newInstance(Class mapperType) {\nMapperProxy mapperProxy = mapperProxyMap.get(mapperType);\nreturn Proxy.newProxyInstance(mapperType.getClassLoader(),\nnew Class[]{mapperType},\nmapperProxy);\n}\n\nprivate Map<String, String> mockSqlSession(Class mapperType) {\nMap<String, String> sqlSession = new HashMap<>();\nfor (Method method : mapperType.getMethods()) {\nString methodName = method.getName();\nString key = mapperType.getName() + \".\" + methodName;\nsqlSession.put(key, key);\n}\nreturn sqlSession;\n}\n}\n```\n最后进行测试：\n```json\npublic static void main(String[] args) {\nMapperProxyFactory mapperProxyFactory = new MapperProxyFactory(\"com.yang.mybatis.test\");\nIUserMapper iUserMapper = (IUserMapper) mapperProxyFactory.newInstance(IUserMapper.class);\nSystem.out.println(iUserMapper.queryUserName(1));\n}\n```\n测试结果如下：\n{% asset_img 2.png %}\n\n\n","source":"_posts/手撸Mybatis（一）——代理mapper.md","raw":"---\ntitle: 手撸Mybatis（一）——代理mapper\ndate: 2024-05-04 14:52:01\ntags:\n    - Mybatis\n---\n### 引言\n最近刚写完毕设，闲来无事，看到网上有一个手撸Mybatis的教程，于是想自己实现一个简易版的Mybatis。\n### 创建简单的映射器代理工厂\n在使用mybatis的时候，我们一般只需要定义mapper的接口，并添加相应的@Mapper注解，然后实现对应的xml文件即可，而不需要对mapper接口进行具体的实现。其实本质上，这些mapper接口是有实现的，但不是我们手动通过implement来实现，而是通过代理的方式进行实现。因此，对于Mybatis的手撸，首先要关注的，就是如何对mapper进行代理。\n首先我们定义一个MapperProxy，该类实现InvocationHandler接口，通过实现该接口，实现动态代理。这里有两个属性——sqlSession和mapperInterface，其中，sqlSession是用来模拟执行sql语句的。\n```json\npackage com.yang.mybatis.proxy;\n\nimport java.lang.reflect.InvocationHandler;\nimport java.lang.reflect.Method;\nimport java.util.Map;\n\npublic class MapperProxy<T> implements InvocationHandler {\nprivate Map<String, Object> sqlSession ;\n\nprivate Class<T> mapperInterface;\n\npublic MapperProxy(Map<String, Object> sqlSession, Class<T> mapperInterface) {\nthis.sqlSession = sqlSession;\nthis.mapperInterface = mapperInterface;\n}\n\n@Override\npublic Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\nif (Object.class.equals(method.getDeclaringClass())) {\nreturn method.invoke(this, args);\n}\nString key = this.mapperInterface.getName() + \".\" + method.getName();\nreturn sqlSession.get(key);\n}\n}\n\n```\n当我们在执行mapper的某个方法时，最终会进入到invoke方法，并通过sqlSession来获取模拟值。\n接着我们定义MapperProxyFactory，每一个mapper都有一个MapperProxyFactory与之相对于，然后newInstance方法接收模拟的sql结果，并通过Proxy.newProxyInstance创建动态代理对象。\n```json\npackage com.yang.mybatis.proxy;\n\nimport java.lang.reflect.Proxy;\nimport java.util.Map;\n\npublic class MapperProxyFactory <T> {\nprivate final Class<T> mapperInterface;\n\npublic MapperProxyFactory(Class<T> mapperInterface) {\nthis.mapperInterface = mapperInterface;\n}\n\npublic T newInstance(Map<String, Object> sqlSession) {\nMapperProxy<T> mapperProxy = new MapperProxy<>(sqlSession, mapperInterface);\nreturn (T) Proxy.newProxyInstance(mapperInterface.getClassLoader(),\nnew Class[]{mapperInterface},\nmapperProxy);\n}\n}\n\n```\n最后，我们先创建一个IUserMapper类\n```json\npackage com.yang.mybatis.test;\n\npublic interface IUserMapper {\nString queryUserName(Integer id);\n\nInteger queryUserAge(Integer id);\n}\n\n```\n然后创建对应的测试方法\n```json\npackage com.yang.mybatis.test;\n\nimport com.yang.mybatis.proxy.MapperProxyFactory;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class Main {\npublic static void main(String[] args) {\nMapperProxyFactory<IUserMapper> userDaoMapperProxyFactory = new MapperProxyFactory<>(IUserMapper.class);\nMap<String, Object> sqlSession = new HashMap<>();\nsqlSession.put(\"com.yang.mybatis.test.IUserMapper.queryUserName\", \"模拟查询用户名\");\nsqlSession.put(\"com.yang.mybatis.test.IUserMapper.queryUserAge\", 1);\nIUserMapper iUserMapper = userDaoMapperProxyFactory.newInstance(sqlSession);\nSystem.out.println(iUserMapper.queryUserAge(1));\nSystem.out.println(iUserMapper.queryUserName(1));\n}\n}\n\n```\n运行结果如下：\n{% asset_img 1.png %}\n### 实现映射器的注册和使用\n像上述的这种方法，我们每次要获取一个Mapper，就要new一个对应的MapperProxyFactory，这样不太方便。一般情况下，mapper是放在同一个包下的，那么我们可以通过扫描包，来初始化MapperProxyFactory。至于上一节的sqlSession，因为我们目前是模拟数据，所以在初始化过程中，把这些模拟数据要随便mock住就行。\n因为要扫描包获取包下的Class类，我们先添加hutool-all，以便通过其提供的ClassScanner获取包\n```json\n<dependency>\n<groupId>cn.hutool</groupId>\n<artifactId>hutool-all</artifactId>\n<version>5.8.12</version>\n</dependency>\n```\n然后，我们修改MapperProxyFactory\n```json\npackage com.yang.mybatis.proxy;\n\nimport cn.hutool.core.lang.ClassScanner;\n\nimport java.lang.reflect.Method;\nimport java.lang.reflect.Proxy;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.Set;\n\npublic class MapperProxyFactory {\nprivate Map<Class, MapperProxy> mapperProxyMap = new HashMap<>();\n\npublic MapperProxyFactory(String packageName) {\n// 扫描包\nClassScanner scanner = new ClassScanner(packageName);\nSet<Class<?>> mapperTypes = scanner.scan();\nfor (Class<?> mapperType : mapperTypes) {\nif (!mapperType.isInterface()) {\n// 只对接口进行处理\ncontinue;\n}\n\nMap<String, String> mockSqlSession = mockSqlSession(mapperType);\nMapperProxy mapperProxy = new MapperProxy(mockSqlSession, mapperType);\nmapperProxyMap.put(mapperType, mapperProxy);\n}\n}\n\npublic Object newInstance(Class mapperType) {\nMapperProxy mapperProxy = mapperProxyMap.get(mapperType);\nreturn Proxy.newProxyInstance(mapperType.getClassLoader(),\nnew Class[]{mapperType},\nmapperProxy);\n}\n\nprivate Map<String, String> mockSqlSession(Class mapperType) {\nMap<String, String> sqlSession = new HashMap<>();\nfor (Method method : mapperType.getMethods()) {\nString methodName = method.getName();\nString key = mapperType.getName() + \".\" + methodName;\nsqlSession.put(key, key);\n}\nreturn sqlSession;\n}\n}\n```\n最后进行测试：\n```json\npublic static void main(String[] args) {\nMapperProxyFactory mapperProxyFactory = new MapperProxyFactory(\"com.yang.mybatis.test\");\nIUserMapper iUserMapper = (IUserMapper) mapperProxyFactory.newInstance(IUserMapper.class);\nSystem.out.println(iUserMapper.queryUserName(1));\n}\n```\n测试结果如下：\n{% asset_img 2.png %}\n\n\n","slug":"手撸Mybatis（一）——代理mapper","published":1,"updated":"2024-05-04T07:38:16.632Z","_id":"clvrrqyk300002cvl52a85p5t","comments":1,"layout":"post","photos":[],"content":"<h3 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h3><p>最近刚写完毕设，闲来无事，看到网上有一个手撸Mybatis的教程，于是想自己实现一个简易版的Mybatis。</p>\n<h3 id=\"创建简单的映射器代理工厂\"><a href=\"#创建简单的映射器代理工厂\" class=\"headerlink\" title=\"创建简单的映射器代理工厂\"></a>创建简单的映射器代理工厂</h3><p>在使用mybatis的时候，我们一般只需要定义mapper的接口，并添加相应的@Mapper注解，然后实现对应的xml文件即可，而不需要对mapper接口进行具体的实现。其实本质上，这些mapper接口是有实现的，但不是我们手动通过implement来实现，而是通过代理的方式进行实现。因此，对于Mybatis的手撸，首先要关注的，就是如何对mapper进行代理。<br>首先我们定义一个MapperProxy，该类实现InvocationHandler接口，通过实现该接口，实现动态代理。这里有两个属性——sqlSession和mapperInterface，其中，sqlSession是用来模拟执行sql语句的。</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs json\">package com.yang.mybatis.proxy;<br><br>import java.lang.reflect.InvocationHandler;<br>import java.lang.reflect.Method;<br>import java.util.Map;<br><br>public class MapperProxy&lt;T&gt; implements InvocationHandler <span class=\"hljs-punctuation\">&#123;</span><br>private Map&lt;String<span class=\"hljs-punctuation\">,</span> Object&gt; sqlSession ;<br><br>private Class&lt;T&gt; mapperInterface;<br><br>public MapperProxy(Map&lt;String<span class=\"hljs-punctuation\">,</span> Object&gt; sqlSession<span class=\"hljs-punctuation\">,</span> Class&lt;T&gt; mapperInterface) <span class=\"hljs-punctuation\">&#123;</span><br>this.sqlSession = sqlSession;<br>this.mapperInterface = mapperInterface;<br><span class=\"hljs-punctuation\">&#125;</span><br><br>@Override<br>public Object invoke(Object proxy<span class=\"hljs-punctuation\">,</span> Method method<span class=\"hljs-punctuation\">,</span> Object<span class=\"hljs-punctuation\">[</span><span class=\"hljs-punctuation\">]</span> args) throws Throwable <span class=\"hljs-punctuation\">&#123;</span><br>if (Object.class.equals(method.getDeclaringClass())) <span class=\"hljs-punctuation\">&#123;</span><br>return method.invoke(this<span class=\"hljs-punctuation\">,</span> args);<br><span class=\"hljs-punctuation\">&#125;</span><br>String key = this.mapperInterface.getName() + <span class=\"hljs-string\">&quot;.&quot;</span> + method.getName();<br>return sqlSession.get(key);<br><span class=\"hljs-punctuation\">&#125;</span><br><span class=\"hljs-punctuation\">&#125;</span><br><br></code></pre></td></tr></table></figure>\n<p>当我们在执行mapper的某个方法时，最终会进入到invoke方法，并通过sqlSession来获取模拟值。<br>接着我们定义MapperProxyFactory，每一个mapper都有一个MapperProxyFactory与之相对于，然后newInstance方法接收模拟的sql结果，并通过Proxy.newProxyInstance创建动态代理对象。</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs json\">package com.yang.mybatis.proxy;<br><br>import java.lang.reflect.Proxy;<br>import java.util.Map;<br><br>public class MapperProxyFactory &lt;T&gt; <span class=\"hljs-punctuation\">&#123;</span><br>private final Class&lt;T&gt; mapperInterface;<br><br>public MapperProxyFactory(Class&lt;T&gt; mapperInterface) <span class=\"hljs-punctuation\">&#123;</span><br>this.mapperInterface = mapperInterface;<br><span class=\"hljs-punctuation\">&#125;</span><br><br>public T newInstance(Map&lt;String<span class=\"hljs-punctuation\">,</span> Object&gt; sqlSession) <span class=\"hljs-punctuation\">&#123;</span><br>MapperProxy&lt;T&gt; mapperProxy = new MapperProxy&lt;&gt;(sqlSession<span class=\"hljs-punctuation\">,</span> mapperInterface);<br>return (T) Proxy.newProxyInstance(mapperInterface.getClassLoader()<span class=\"hljs-punctuation\">,</span><br>new Class<span class=\"hljs-punctuation\">[</span><span class=\"hljs-punctuation\">]</span><span class=\"hljs-punctuation\">&#123;</span>mapperInterface<span class=\"hljs-punctuation\">&#125;</span><span class=\"hljs-punctuation\">,</span><br>mapperProxy);<br><span class=\"hljs-punctuation\">&#125;</span><br><span class=\"hljs-punctuation\">&#125;</span><br><br></code></pre></td></tr></table></figure>\n<p>最后，我们先创建一个IUserMapper类</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs json\">package com.yang.mybatis.test;<br><br>public interface IUserMapper <span class=\"hljs-punctuation\">&#123;</span><br>String queryUserName(Integer id);<br><br>Integer queryUserAge(Integer id);<br><span class=\"hljs-punctuation\">&#125;</span><br><br></code></pre></td></tr></table></figure>\n<p>然后创建对应的测试方法</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs json\">package com.yang.mybatis.test;<br><br>import com.yang.mybatis.proxy.MapperProxyFactory;<br><br>import java.util.HashMap;<br>import java.util.Map;<br><br>public class Main <span class=\"hljs-punctuation\">&#123;</span><br>public static void main(String<span class=\"hljs-punctuation\">[</span><span class=\"hljs-punctuation\">]</span> args) <span class=\"hljs-punctuation\">&#123;</span><br>MapperProxyFactory&lt;IUserMapper&gt; userDaoMapperProxyFactory = new MapperProxyFactory&lt;&gt;(IUserMapper.class);<br>Map&lt;String<span class=\"hljs-punctuation\">,</span> Object&gt; sqlSession = new HashMap&lt;&gt;();<br>sqlSession.put(<span class=\"hljs-string\">&quot;com.yang.mybatis.test.IUserMapper.queryUserName&quot;</span><span class=\"hljs-punctuation\">,</span> <span class=\"hljs-string\">&quot;模拟查询用户名&quot;</span>);<br>sqlSession.put(<span class=\"hljs-string\">&quot;com.yang.mybatis.test.IUserMapper.queryUserAge&quot;</span><span class=\"hljs-punctuation\">,</span> <span class=\"hljs-number\">1</span>);<br>IUserMapper iUserMapper = userDaoMapperProxyFactory.newInstance(sqlSession);<br>System.out.println(iUserMapper.queryUserAge(<span class=\"hljs-number\">1</span>));<br>System.out.println(iUserMapper.queryUserName(<span class=\"hljs-number\">1</span>));<br><span class=\"hljs-punctuation\">&#125;</span><br><span class=\"hljs-punctuation\">&#125;</span><br><br></code></pre></td></tr></table></figure>\n<p>运行结果如下：</p>\n<img src=\"/2024/05/04/%E6%89%8B%E6%92%B8Mybatis%EF%BC%88%E4%B8%80%EF%BC%89%E2%80%94%E2%80%94%E4%BB%A3%E7%90%86mapper/1.png\" class=\"\">\n<h3 id=\"实现映射器的注册和使用\"><a href=\"#实现映射器的注册和使用\" class=\"headerlink\" title=\"实现映射器的注册和使用\"></a>实现映射器的注册和使用</h3><p>像上述的这种方法，我们每次要获取一个Mapper，就要new一个对应的MapperProxyFactory，这样不太方便。一般情况下，mapper是放在同一个包下的，那么我们可以通过扫描包，来初始化MapperProxyFactory。至于上一节的sqlSession，因为我们目前是模拟数据，所以在初始化过程中，把这些模拟数据要随便mock住就行。<br>因为要扫描包获取包下的Class类，我们先添加hutool-all，以便通过其提供的ClassScanner获取包</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs json\">&lt;dependency&gt;<br>&lt;groupId&gt;cn.hutool&lt;/groupId&gt;<br>&lt;artifactId&gt;hutool-all&lt;/artifactId&gt;<br>&lt;version&gt;<span class=\"hljs-number\">5.8</span><span class=\"hljs-number\">.12</span>&lt;/version&gt;<br>&lt;/dependency&gt;<br></code></pre></td></tr></table></figure>\n<p>然后，我们修改MapperProxyFactory</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs json\">package com.yang.mybatis.proxy;<br><br>import cn.hutool.core.lang.ClassScanner;<br><br>import java.lang.reflect.Method;<br>import java.lang.reflect.Proxy;<br>import java.util.HashMap;<br>import java.util.Map;<br>import java.util.Set;<br><br>public class MapperProxyFactory <span class=\"hljs-punctuation\">&#123;</span><br>private Map&lt;Class<span class=\"hljs-punctuation\">,</span> MapperProxy&gt; mapperProxyMap = new HashMap&lt;&gt;();<br><br>public MapperProxyFactory(String packageName) <span class=\"hljs-punctuation\">&#123;</span><br><span class=\"hljs-comment\">// 扫描包</span><br>ClassScanner scanner = new ClassScanner(packageName);<br>Set&lt;Class&lt;?&gt;&gt; mapperTypes = scanner.scan();<br>for (Class&lt;?&gt; mapperType <span class=\"hljs-punctuation\">:</span> mapperTypes) <span class=\"hljs-punctuation\">&#123;</span><br>if (!mapperType.isInterface()) <span class=\"hljs-punctuation\">&#123;</span><br><span class=\"hljs-comment\">// 只对接口进行处理</span><br>continue;<br><span class=\"hljs-punctuation\">&#125;</span><br><br>Map&lt;String<span class=\"hljs-punctuation\">,</span> String&gt; mockSqlSession = mockSqlSession(mapperType);<br>MapperProxy mapperProxy = new MapperProxy(mockSqlSession<span class=\"hljs-punctuation\">,</span> mapperType);<br>mapperProxyMap.put(mapperType<span class=\"hljs-punctuation\">,</span> mapperProxy);<br><span class=\"hljs-punctuation\">&#125;</span><br><span class=\"hljs-punctuation\">&#125;</span><br><br>public Object newInstance(Class mapperType) <span class=\"hljs-punctuation\">&#123;</span><br>MapperProxy mapperProxy = mapperProxyMap.get(mapperType);<br>return Proxy.newProxyInstance(mapperType.getClassLoader()<span class=\"hljs-punctuation\">,</span><br>new Class<span class=\"hljs-punctuation\">[</span><span class=\"hljs-punctuation\">]</span><span class=\"hljs-punctuation\">&#123;</span>mapperType<span class=\"hljs-punctuation\">&#125;</span><span class=\"hljs-punctuation\">,</span><br>mapperProxy);<br><span class=\"hljs-punctuation\">&#125;</span><br><br>private Map&lt;String<span class=\"hljs-punctuation\">,</span> String&gt; mockSqlSession(Class mapperType) <span class=\"hljs-punctuation\">&#123;</span><br>Map&lt;String<span class=\"hljs-punctuation\">,</span> String&gt; sqlSession = new HashMap&lt;&gt;();<br>for (Method method <span class=\"hljs-punctuation\">:</span> mapperType.getMethods()) <span class=\"hljs-punctuation\">&#123;</span><br>String methodName = method.getName();<br>String key = mapperType.getName() + <span class=\"hljs-string\">&quot;.&quot;</span> + methodName;<br>sqlSession.put(key<span class=\"hljs-punctuation\">,</span> key);<br><span class=\"hljs-punctuation\">&#125;</span><br>return sqlSession;<br><span class=\"hljs-punctuation\">&#125;</span><br><span class=\"hljs-punctuation\">&#125;</span><br></code></pre></td></tr></table></figure>\n<p>最后进行测试：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs json\">public static void main(String<span class=\"hljs-punctuation\">[</span><span class=\"hljs-punctuation\">]</span> args) <span class=\"hljs-punctuation\">&#123;</span><br>MapperProxyFactory mapperProxyFactory = new MapperProxyFactory(<span class=\"hljs-string\">&quot;com.yang.mybatis.test&quot;</span>);<br>IUserMapper iUserMapper = (IUserMapper) mapperProxyFactory.newInstance(IUserMapper.class);<br>System.out.println(iUserMapper.queryUserName(<span class=\"hljs-number\">1</span>));<br><span class=\"hljs-punctuation\">&#125;</span><br></code></pre></td></tr></table></figure>\n<p>测试结果如下：</p>\n<img src=\"/2024/05/04/%E6%89%8B%E6%92%B8Mybatis%EF%BC%88%E4%B8%80%EF%BC%89%E2%80%94%E2%80%94%E4%BB%A3%E7%90%86mapper/2.png\" class=\"\">\n\n\n","excerpt":"","more":"<h3 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h3><p>最近刚写完毕设，闲来无事，看到网上有一个手撸Mybatis的教程，于是想自己实现一个简易版的Mybatis。</p>\n<h3 id=\"创建简单的映射器代理工厂\"><a href=\"#创建简单的映射器代理工厂\" class=\"headerlink\" title=\"创建简单的映射器代理工厂\"></a>创建简单的映射器代理工厂</h3><p>在使用mybatis的时候，我们一般只需要定义mapper的接口，并添加相应的@Mapper注解，然后实现对应的xml文件即可，而不需要对mapper接口进行具体的实现。其实本质上，这些mapper接口是有实现的，但不是我们手动通过implement来实现，而是通过代理的方式进行实现。因此，对于Mybatis的手撸，首先要关注的，就是如何对mapper进行代理。<br>首先我们定义一个MapperProxy，该类实现InvocationHandler接口，通过实现该接口，实现动态代理。这里有两个属性——sqlSession和mapperInterface，其中，sqlSession是用来模拟执行sql语句的。</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs json\">package com.yang.mybatis.proxy;<br><br>import java.lang.reflect.InvocationHandler;<br>import java.lang.reflect.Method;<br>import java.util.Map;<br><br>public class MapperProxy&lt;T&gt; implements InvocationHandler <span class=\"hljs-punctuation\">&#123;</span><br>private Map&lt;String<span class=\"hljs-punctuation\">,</span> Object&gt; sqlSession ;<br><br>private Class&lt;T&gt; mapperInterface;<br><br>public MapperProxy(Map&lt;String<span class=\"hljs-punctuation\">,</span> Object&gt; sqlSession<span class=\"hljs-punctuation\">,</span> Class&lt;T&gt; mapperInterface) <span class=\"hljs-punctuation\">&#123;</span><br>this.sqlSession = sqlSession;<br>this.mapperInterface = mapperInterface;<br><span class=\"hljs-punctuation\">&#125;</span><br><br>@Override<br>public Object invoke(Object proxy<span class=\"hljs-punctuation\">,</span> Method method<span class=\"hljs-punctuation\">,</span> Object<span class=\"hljs-punctuation\">[</span><span class=\"hljs-punctuation\">]</span> args) throws Throwable <span class=\"hljs-punctuation\">&#123;</span><br>if (Object.class.equals(method.getDeclaringClass())) <span class=\"hljs-punctuation\">&#123;</span><br>return method.invoke(this<span class=\"hljs-punctuation\">,</span> args);<br><span class=\"hljs-punctuation\">&#125;</span><br>String key = this.mapperInterface.getName() + <span class=\"hljs-string\">&quot;.&quot;</span> + method.getName();<br>return sqlSession.get(key);<br><span class=\"hljs-punctuation\">&#125;</span><br><span class=\"hljs-punctuation\">&#125;</span><br><br></code></pre></td></tr></table></figure>\n<p>当我们在执行mapper的某个方法时，最终会进入到invoke方法，并通过sqlSession来获取模拟值。<br>接着我们定义MapperProxyFactory，每一个mapper都有一个MapperProxyFactory与之相对于，然后newInstance方法接收模拟的sql结果，并通过Proxy.newProxyInstance创建动态代理对象。</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs json\">package com.yang.mybatis.proxy;<br><br>import java.lang.reflect.Proxy;<br>import java.util.Map;<br><br>public class MapperProxyFactory &lt;T&gt; <span class=\"hljs-punctuation\">&#123;</span><br>private final Class&lt;T&gt; mapperInterface;<br><br>public MapperProxyFactory(Class&lt;T&gt; mapperInterface) <span class=\"hljs-punctuation\">&#123;</span><br>this.mapperInterface = mapperInterface;<br><span class=\"hljs-punctuation\">&#125;</span><br><br>public T newInstance(Map&lt;String<span class=\"hljs-punctuation\">,</span> Object&gt; sqlSession) <span class=\"hljs-punctuation\">&#123;</span><br>MapperProxy&lt;T&gt; mapperProxy = new MapperProxy&lt;&gt;(sqlSession<span class=\"hljs-punctuation\">,</span> mapperInterface);<br>return (T) Proxy.newProxyInstance(mapperInterface.getClassLoader()<span class=\"hljs-punctuation\">,</span><br>new Class<span class=\"hljs-punctuation\">[</span><span class=\"hljs-punctuation\">]</span><span class=\"hljs-punctuation\">&#123;</span>mapperInterface<span class=\"hljs-punctuation\">&#125;</span><span class=\"hljs-punctuation\">,</span><br>mapperProxy);<br><span class=\"hljs-punctuation\">&#125;</span><br><span class=\"hljs-punctuation\">&#125;</span><br><br></code></pre></td></tr></table></figure>\n<p>最后，我们先创建一个IUserMapper类</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs json\">package com.yang.mybatis.test;<br><br>public interface IUserMapper <span class=\"hljs-punctuation\">&#123;</span><br>String queryUserName(Integer id);<br><br>Integer queryUserAge(Integer id);<br><span class=\"hljs-punctuation\">&#125;</span><br><br></code></pre></td></tr></table></figure>\n<p>然后创建对应的测试方法</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs json\">package com.yang.mybatis.test;<br><br>import com.yang.mybatis.proxy.MapperProxyFactory;<br><br>import java.util.HashMap;<br>import java.util.Map;<br><br>public class Main <span class=\"hljs-punctuation\">&#123;</span><br>public static void main(String<span class=\"hljs-punctuation\">[</span><span class=\"hljs-punctuation\">]</span> args) <span class=\"hljs-punctuation\">&#123;</span><br>MapperProxyFactory&lt;IUserMapper&gt; userDaoMapperProxyFactory = new MapperProxyFactory&lt;&gt;(IUserMapper.class);<br>Map&lt;String<span class=\"hljs-punctuation\">,</span> Object&gt; sqlSession = new HashMap&lt;&gt;();<br>sqlSession.put(<span class=\"hljs-string\">&quot;com.yang.mybatis.test.IUserMapper.queryUserName&quot;</span><span class=\"hljs-punctuation\">,</span> <span class=\"hljs-string\">&quot;模拟查询用户名&quot;</span>);<br>sqlSession.put(<span class=\"hljs-string\">&quot;com.yang.mybatis.test.IUserMapper.queryUserAge&quot;</span><span class=\"hljs-punctuation\">,</span> <span class=\"hljs-number\">1</span>);<br>IUserMapper iUserMapper = userDaoMapperProxyFactory.newInstance(sqlSession);<br>System.out.println(iUserMapper.queryUserAge(<span class=\"hljs-number\">1</span>));<br>System.out.println(iUserMapper.queryUserName(<span class=\"hljs-number\">1</span>));<br><span class=\"hljs-punctuation\">&#125;</span><br><span class=\"hljs-punctuation\">&#125;</span><br><br></code></pre></td></tr></table></figure>\n<p>运行结果如下：</p>\n<img src=\"/2024/05/04/%E6%89%8B%E6%92%B8Mybatis%EF%BC%88%E4%B8%80%EF%BC%89%E2%80%94%E2%80%94%E4%BB%A3%E7%90%86mapper/1.png\" class=\"\">\n<h3 id=\"实现映射器的注册和使用\"><a href=\"#实现映射器的注册和使用\" class=\"headerlink\" title=\"实现映射器的注册和使用\"></a>实现映射器的注册和使用</h3><p>像上述的这种方法，我们每次要获取一个Mapper，就要new一个对应的MapperProxyFactory，这样不太方便。一般情况下，mapper是放在同一个包下的，那么我们可以通过扫描包，来初始化MapperProxyFactory。至于上一节的sqlSession，因为我们目前是模拟数据，所以在初始化过程中，把这些模拟数据要随便mock住就行。<br>因为要扫描包获取包下的Class类，我们先添加hutool-all，以便通过其提供的ClassScanner获取包</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs json\">&lt;dependency&gt;<br>&lt;groupId&gt;cn.hutool&lt;/groupId&gt;<br>&lt;artifactId&gt;hutool-all&lt;/artifactId&gt;<br>&lt;version&gt;<span class=\"hljs-number\">5.8</span><span class=\"hljs-number\">.12</span>&lt;/version&gt;<br>&lt;/dependency&gt;<br></code></pre></td></tr></table></figure>\n<p>然后，我们修改MapperProxyFactory</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs json\">package com.yang.mybatis.proxy;<br><br>import cn.hutool.core.lang.ClassScanner;<br><br>import java.lang.reflect.Method;<br>import java.lang.reflect.Proxy;<br>import java.util.HashMap;<br>import java.util.Map;<br>import java.util.Set;<br><br>public class MapperProxyFactory <span class=\"hljs-punctuation\">&#123;</span><br>private Map&lt;Class<span class=\"hljs-punctuation\">,</span> MapperProxy&gt; mapperProxyMap = new HashMap&lt;&gt;();<br><br>public MapperProxyFactory(String packageName) <span class=\"hljs-punctuation\">&#123;</span><br><span class=\"hljs-comment\">// 扫描包</span><br>ClassScanner scanner = new ClassScanner(packageName);<br>Set&lt;Class&lt;?&gt;&gt; mapperTypes = scanner.scan();<br>for (Class&lt;?&gt; mapperType <span class=\"hljs-punctuation\">:</span> mapperTypes) <span class=\"hljs-punctuation\">&#123;</span><br>if (!mapperType.isInterface()) <span class=\"hljs-punctuation\">&#123;</span><br><span class=\"hljs-comment\">// 只对接口进行处理</span><br>continue;<br><span class=\"hljs-punctuation\">&#125;</span><br><br>Map&lt;String<span class=\"hljs-punctuation\">,</span> String&gt; mockSqlSession = mockSqlSession(mapperType);<br>MapperProxy mapperProxy = new MapperProxy(mockSqlSession<span class=\"hljs-punctuation\">,</span> mapperType);<br>mapperProxyMap.put(mapperType<span class=\"hljs-punctuation\">,</span> mapperProxy);<br><span class=\"hljs-punctuation\">&#125;</span><br><span class=\"hljs-punctuation\">&#125;</span><br><br>public Object newInstance(Class mapperType) <span class=\"hljs-punctuation\">&#123;</span><br>MapperProxy mapperProxy = mapperProxyMap.get(mapperType);<br>return Proxy.newProxyInstance(mapperType.getClassLoader()<span class=\"hljs-punctuation\">,</span><br>new Class<span class=\"hljs-punctuation\">[</span><span class=\"hljs-punctuation\">]</span><span class=\"hljs-punctuation\">&#123;</span>mapperType<span class=\"hljs-punctuation\">&#125;</span><span class=\"hljs-punctuation\">,</span><br>mapperProxy);<br><span class=\"hljs-punctuation\">&#125;</span><br><br>private Map&lt;String<span class=\"hljs-punctuation\">,</span> String&gt; mockSqlSession(Class mapperType) <span class=\"hljs-punctuation\">&#123;</span><br>Map&lt;String<span class=\"hljs-punctuation\">,</span> String&gt; sqlSession = new HashMap&lt;&gt;();<br>for (Method method <span class=\"hljs-punctuation\">:</span> mapperType.getMethods()) <span class=\"hljs-punctuation\">&#123;</span><br>String methodName = method.getName();<br>String key = mapperType.getName() + <span class=\"hljs-string\">&quot;.&quot;</span> + methodName;<br>sqlSession.put(key<span class=\"hljs-punctuation\">,</span> key);<br><span class=\"hljs-punctuation\">&#125;</span><br>return sqlSession;<br><span class=\"hljs-punctuation\">&#125;</span><br><span class=\"hljs-punctuation\">&#125;</span><br></code></pre></td></tr></table></figure>\n<p>最后进行测试：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs json\">public static void main(String<span class=\"hljs-punctuation\">[</span><span class=\"hljs-punctuation\">]</span> args) <span class=\"hljs-punctuation\">&#123;</span><br>MapperProxyFactory mapperProxyFactory = new MapperProxyFactory(<span class=\"hljs-string\">&quot;com.yang.mybatis.test&quot;</span>);<br>IUserMapper iUserMapper = (IUserMapper) mapperProxyFactory.newInstance(IUserMapper.class);<br>System.out.println(iUserMapper.queryUserName(<span class=\"hljs-number\">1</span>));<br><span class=\"hljs-punctuation\">&#125;</span><br></code></pre></td></tr></table></figure>\n<p>测试结果如下：</p>\n<img src=\"/2024/05/04/%E6%89%8B%E6%92%B8Mybatis%EF%BC%88%E4%B8%80%EF%BC%89%E2%80%94%E2%80%94%E4%BB%A3%E7%90%86mapper/2.png\" class=\"\">\n\n\n"}],"PostAsset":[{"_id":"source/_posts/线程池/image.png","slug":"image.png","post":"clui4qb780000iovldijo3jbx","modified":0,"renderable":0},{"_id":"source/_posts/线程池/image(1).png","slug":"image(1).png","post":"clui4qb780000iovldijo3jbx","modified":0,"renderable":0},{"_id":"source/_posts/线程池/image(2).png","slug":"image(2).png","post":"clui4qb780000iovldijo3jbx","modified":0,"renderable":0},{"_id":"source/_posts/线程池/image(4).png","slug":"image(4).png","post":"clui4qb780000iovldijo3jbx","modified":0,"renderable":0},{"_id":"source/_posts/线程池/image(3).png","slug":"image(3).png","post":"clui4qb780000iovldijo3jbx","modified":0,"renderable":0},{"_id":"source/_posts/线程池/image(6).png","slug":"image(6).png","post":"clui4qb780000iovldijo3jbx","modified":0,"renderable":0},{"_id":"source/_posts/线程池/image(8).png","slug":"image(8).png","post":"clui4qb780000iovldijo3jbx","modified":0,"renderable":0},{"_id":"source/_posts/线程池/image(7).png","slug":"image(7).png","post":"clui4qb780000iovldijo3jbx","modified":0,"renderable":0},{"_id":"source/_posts/线程池/image(5).png","slug":"image(5).png","post":"clui4qb780000iovldijo3jbx","modified":0,"renderable":0},{"_id":"source/_posts/SpringGateway学习1/image1.png","slug":"image1.png","post":"cluic023d0000tsvla7f0hjfz","modified":0,"renderable":0},{"_id":"source/_posts/SpringGateway学习1/image2.png","slug":"image2.png","post":"cluic023d0000tsvla7f0hjfz","modified":0,"renderable":0},{"_id":"source/_posts/SpringGateway学习1/image3.png","slug":"image3.png","post":"cluic023d0000tsvla7f0hjfz","modified":0,"renderable":0},{"_id":"source/_posts/SpringGateway学习1/image4.png","slug":"image4.png","post":"cluic023d0000tsvla7f0hjfz","modified":0,"renderable":0},{"_id":"source/_posts/SpringGateway学习1/image5.png","slug":"image5.png","post":"cluic023d0000tsvla7f0hjfz","modified":0,"renderable":0},{"_id":"source/_posts/SpringGateway学习1/image6.png","slug":"image6.png","post":"cluic023d0000tsvla7f0hjfz","modified":0,"renderable":0},{"_id":"source/_posts/SpringGateway学习2/image.png","slug":"image.png","post":"cluicf3tm00001kvl6htf9wbi","modified":0,"renderable":0},{"_id":"source/_posts/SpringGateway学习2/image1.png","slug":"image1.png","post":"cluicf3tm00001kvl6htf9wbi","modified":0,"renderable":0},{"_id":"source/_posts/SpringGateway学习2/image10.png","slug":"image10.png","post":"cluicf3tm00001kvl6htf9wbi","modified":0,"renderable":0},{"_id":"source/_posts/SpringGateway学习2/image11.png","slug":"image11.png","post":"cluicf3tm00001kvl6htf9wbi","modified":0,"renderable":0},{"_id":"source/_posts/SpringGateway学习2/image12.png","slug":"image12.png","post":"cluicf3tm00001kvl6htf9wbi","modified":0,"renderable":0},{"_id":"source/_posts/SpringGateway学习2/image2.png","slug":"image2.png","post":"cluicf3tm00001kvl6htf9wbi","modified":0,"renderable":0},{"_id":"source/_posts/SpringGateway学习2/image3.png","slug":"image3.png","post":"cluicf3tm00001kvl6htf9wbi","modified":0,"renderable":0},{"_id":"source/_posts/SpringGateway学习2/image4.png","slug":"image4.png","post":"cluicf3tm00001kvl6htf9wbi","modified":0,"renderable":0},{"_id":"source/_posts/SpringGateway学习2/image5.png","slug":"image5.png","post":"cluicf3tm00001kvl6htf9wbi","modified":0,"renderable":0},{"_id":"source/_posts/SpringGateway学习2/image6.png","slug":"image6.png","post":"cluicf3tm00001kvl6htf9wbi","modified":0,"renderable":0},{"_id":"source/_posts/SpringGateway学习2/image7.png","slug":"image7.png","post":"cluicf3tm00001kvl6htf9wbi","modified":0,"renderable":0},{"_id":"source/_posts/SpringGateway学习2/image8.png","slug":"image8.png","post":"cluicf3tm00001kvl6htf9wbi","modified":0,"renderable":0},{"_id":"source/_posts/SpringGateway学习2/image9.png","slug":"image9.png","post":"cluicf3tm00001kvl6htf9wbi","modified":0,"renderable":0},{"_id":"source/_posts/Nacos学习1—介绍、配置中心/image.png","slug":"image.png","post":"cluicrpmy000004vlhna8hb7n","modified":0,"renderable":0},{"_id":"source/_posts/Nacos学习1—介绍、配置中心/image1.png","slug":"image1.png","post":"cluicrpmy000004vlhna8hb7n","modified":0,"renderable":0},{"_id":"source/_posts/Nacos学习1—介绍、配置中心/image10.png","slug":"image10.png","post":"cluicrpmy000004vlhna8hb7n","modified":0,"renderable":0},{"_id":"source/_posts/Nacos学习1—介绍、配置中心/image11.png","slug":"image11.png","post":"cluicrpmy000004vlhna8hb7n","modified":0,"renderable":0},{"_id":"source/_posts/Nacos学习1—介绍、配置中心/image12.png","slug":"image12.png","post":"cluicrpmy000004vlhna8hb7n","modified":0,"renderable":0},{"_id":"source/_posts/Nacos学习1—介绍、配置中心/image13.png","slug":"image13.png","post":"cluicrpmy000004vlhna8hb7n","modified":0,"renderable":0},{"_id":"source/_posts/Nacos学习1—介绍、配置中心/image14.png","slug":"image14.png","post":"cluicrpmy000004vlhna8hb7n","modified":0,"renderable":0},{"_id":"source/_posts/Nacos学习1—介绍、配置中心/image15.png","slug":"image15.png","post":"cluicrpmy000004vlhna8hb7n","modified":0,"renderable":0},{"_id":"source/_posts/Nacos学习1—介绍、配置中心/image16.png","slug":"image16.png","post":"cluicrpmy000004vlhna8hb7n","modified":0,"renderable":0},{"_id":"source/_posts/Nacos学习1—介绍、配置中心/image17.png","slug":"image17.png","post":"cluicrpmy000004vlhna8hb7n","modified":0,"renderable":0},{"_id":"source/_posts/Nacos学习1—介绍、配置中心/image18.png","slug":"image18.png","post":"cluicrpmy000004vlhna8hb7n","modified":0,"renderable":0},{"_id":"source/_posts/Nacos学习1—介绍、配置中心/image19.png","slug":"image19.png","post":"cluicrpmy000004vlhna8hb7n","modified":0,"renderable":0},{"_id":"source/_posts/Nacos学习1—介绍、配置中心/image2.png","slug":"image2.png","post":"cluicrpmy000004vlhna8hb7n","modified":0,"renderable":0},{"_id":"source/_posts/Nacos学习1—介绍、配置中心/image20.png","slug":"image20.png","post":"cluicrpmy000004vlhna8hb7n","modified":0,"renderable":0},{"_id":"source/_posts/Nacos学习1—介绍、配置中心/image21.png","slug":"image21.png","post":"cluicrpmy000004vlhna8hb7n","modified":0,"renderable":0},{"_id":"source/_posts/Nacos学习1—介绍、配置中心/image3.png","slug":"image3.png","post":"cluicrpmy000004vlhna8hb7n","modified":0,"renderable":0},{"_id":"source/_posts/Nacos学习1—介绍、配置中心/image4.png","slug":"image4.png","post":"cluicrpmy000004vlhna8hb7n","modified":0,"renderable":0},{"_id":"source/_posts/Nacos学习1—介绍、配置中心/image5.png","slug":"image5.png","post":"cluicrpmy000004vlhna8hb7n","modified":0,"renderable":0},{"_id":"source/_posts/Nacos学习1—介绍、配置中心/image6.png","slug":"image6.png","post":"cluicrpmy000004vlhna8hb7n","modified":0,"renderable":0},{"_id":"source/_posts/Nacos学习1—介绍、配置中心/image7.png","slug":"image7.png","post":"cluicrpmy000004vlhna8hb7n","modified":0,"renderable":0},{"_id":"source/_posts/Nacos学习1—介绍、配置中心/image8.png","slug":"image8.png","post":"cluicrpmy000004vlhna8hb7n","modified":0,"renderable":0},{"_id":"source/_posts/Nacos学习1—介绍、配置中心/image9.png","slug":"image9.png","post":"cluicrpmy000004vlhna8hb7n","modified":0,"renderable":0},{"_id":"source/_posts/Nacos学习2—Nacos配置中心/image.png","slug":"image.png","post":"cluid7sjg0000b0vlbrh1gj36","modified":0,"renderable":0},{"_id":"source/_posts/Nacos学习2—Nacos配置中心/image1.png","slug":"image1.png","post":"cluid7sjg0000b0vlbrh1gj36","modified":0,"renderable":0},{"_id":"source/_posts/Nacos学习2—Nacos配置中心/image10.png","slug":"image10.png","post":"cluid7sjg0000b0vlbrh1gj36","modified":0,"renderable":0},{"_id":"source/_posts/Nacos学习2—Nacos配置中心/image11.png","slug":"image11.png","post":"cluid7sjg0000b0vlbrh1gj36","modified":0,"renderable":0},{"_id":"source/_posts/Nacos学习2—Nacos配置中心/image12.png","slug":"image12.png","post":"cluid7sjg0000b0vlbrh1gj36","modified":0,"renderable":0},{"_id":"source/_posts/Nacos学习2—Nacos配置中心/image13.png","slug":"image13.png","post":"cluid7sjg0000b0vlbrh1gj36","modified":0,"renderable":0},{"_id":"source/_posts/Nacos学习2—Nacos配置中心/image14.png","slug":"image14.png","post":"cluid7sjg0000b0vlbrh1gj36","modified":0,"renderable":0},{"_id":"source/_posts/Nacos学习2—Nacos配置中心/image15.png","slug":"image15.png","post":"cluid7sjg0000b0vlbrh1gj36","modified":0,"renderable":0},{"_id":"source/_posts/Nacos学习2—Nacos配置中心/image16.png","slug":"image16.png","post":"cluid7sjg0000b0vlbrh1gj36","modified":0,"renderable":0},{"_id":"source/_posts/Nacos学习2—Nacos配置中心/image17.png","slug":"image17.png","post":"cluid7sjg0000b0vlbrh1gj36","modified":0,"renderable":0},{"_id":"source/_posts/Nacos学习2—Nacos配置中心/image18.png","slug":"image18.png","post":"cluid7sjg0000b0vlbrh1gj36","modified":0,"renderable":0},{"_id":"source/_posts/Nacos学习2—Nacos配置中心/image19.png","slug":"image19.png","post":"cluid7sjg0000b0vlbrh1gj36","modified":0,"renderable":0},{"_id":"source/_posts/Nacos学习2—Nacos配置中心/image2.png","slug":"image2.png","post":"cluid7sjg0000b0vlbrh1gj36","modified":0,"renderable":0},{"_id":"source/_posts/Nacos学习2—Nacos配置中心/image20.png","slug":"image20.png","post":"cluid7sjg0000b0vlbrh1gj36","modified":0,"renderable":0},{"_id":"source/_posts/Nacos学习2—Nacos配置中心/image21.png","slug":"image21.png","post":"cluid7sjg0000b0vlbrh1gj36","modified":0,"renderable":0},{"_id":"source/_posts/Nacos学习2—Nacos配置中心/image22.png","slug":"image22.png","post":"cluid7sjg0000b0vlbrh1gj36","modified":0,"renderable":0},{"_id":"source/_posts/Nacos学习2—Nacos配置中心/image23.png","slug":"image23.png","post":"cluid7sjg0000b0vlbrh1gj36","modified":0,"renderable":0},{"_id":"source/_posts/Nacos学习2—Nacos配置中心/image24.png","slug":"image24.png","post":"cluid7sjg0000b0vlbrh1gj36","modified":0,"renderable":0},{"_id":"source/_posts/Nacos学习2—Nacos配置中心/image25.png","slug":"image25.png","post":"cluid7sjg0000b0vlbrh1gj36","modified":0,"renderable":0},{"_id":"source/_posts/Nacos学习2—Nacos配置中心/image26.png","slug":"image26.png","post":"cluid7sjg0000b0vlbrh1gj36","modified":0,"renderable":0},{"_id":"source/_posts/Nacos学习2—Nacos配置中心/image27.png","slug":"image27.png","post":"cluid7sjg0000b0vlbrh1gj36","modified":0,"renderable":0},{"_id":"source/_posts/Nacos学习2—Nacos配置中心/image28.png","slug":"image28.png","post":"cluid7sjg0000b0vlbrh1gj36","modified":0,"renderable":0},{"_id":"source/_posts/Nacos学习2—Nacos配置中心/image3.png","slug":"image3.png","post":"cluid7sjg0000b0vlbrh1gj36","modified":0,"renderable":0},{"_id":"source/_posts/Nacos学习2—Nacos配置中心/image4.png","slug":"image4.png","post":"cluid7sjg0000b0vlbrh1gj36","modified":0,"renderable":0},{"_id":"source/_posts/Nacos学习2—Nacos配置中心/image5.png","slug":"image5.png","post":"cluid7sjg0000b0vlbrh1gj36","modified":0,"renderable":0},{"_id":"source/_posts/Nacos学习2—Nacos配置中心/image6.png","slug":"image6.png","post":"cluid7sjg0000b0vlbrh1gj36","modified":0,"renderable":0},{"_id":"source/_posts/Nacos学习2—Nacos配置中心/image7.png","slug":"image7.png","post":"cluid7sjg0000b0vlbrh1gj36","modified":0,"renderable":0},{"_id":"source/_posts/Nacos学习2—Nacos配置中心/image8.png","slug":"image8.png","post":"cluid7sjg0000b0vlbrh1gj36","modified":0,"renderable":0},{"_id":"source/_posts/Nacos学习2—Nacos配置中心/image9.png","slug":"image9.png","post":"cluid7sjg0000b0vlbrh1gj36","modified":0,"renderable":0},{"_id":"source/_posts/Redis学习1-Redis简介、基础/1.png","slug":"1.png","post":"cluie8bfg0000h0vlgd9m6hpw","modified":0,"renderable":0},{"_id":"source/_posts/Redis学习1-Redis简介、基础/2.png","slug":"2.png","post":"cluie8bfg0000h0vlgd9m6hpw","modified":0,"renderable":0},{"_id":"source/_posts/Redis学习1-Redis简介、基础/3.png","slug":"3.png","post":"cluie8bfg0000h0vlgd9m6hpw","modified":0,"renderable":0},{"_id":"source/_posts/Redis学习1-Redis简介、基础/4.png","slug":"4.png","post":"cluie8bfg0000h0vlgd9m6hpw","modified":0,"renderable":0},{"_id":"source/_posts/Redis学习1-Redis简介、基础/5.png","slug":"5.png","post":"cluie8bfg0000h0vlgd9m6hpw","modified":0,"renderable":0},{"_id":"source/_posts/Redis学习1-Redis简介、基础/6.png","slug":"6.png","post":"cluie8bfg0000h0vlgd9m6hpw","modified":0,"renderable":0},{"_id":"source/_posts/Redis学习1-Redis简介、基础/7.png","slug":"7.png","post":"cluie8bfg0000h0vlgd9m6hpw","modified":0,"renderable":0},{"_id":"source/_posts/Redis学习1-Redis简介、基础/8.png","slug":"8.png","post":"cluie8bfg0000h0vlgd9m6hpw","modified":0,"renderable":0},{"_id":"source/_posts/Redis学习2—SpringBoot整合Redis、Redis工具类/1.png","slug":"1.png","post":"cluifpieg00005svladbt69um","modified":0,"renderable":0},{"_id":"source/_posts/Redis学习2—SpringBoot整合Redis、Redis工具类/2.png","slug":"2.png","post":"cluifpieg00005svladbt69um","modified":0,"renderable":0},{"_id":"source/_posts/Redis学习2—SpringBoot整合Redis、Redis工具类/3.png","slug":"3.png","post":"cluifpieg00005svladbt69um","modified":0,"renderable":0},{"_id":"source/_posts/Redis学习5-Redis应用之签到/1.png","slug":"1.png","post":"cluifpiej00015svl88oz0d1q","modified":0,"renderable":0},{"_id":"source/_posts/Redis学习5-Redis应用之签到/2.png","slug":"2.png","post":"cluifpiej00015svl88oz0d1q","modified":0,"renderable":0},{"_id":"source/_posts/Redis学习5-Redis应用之签到/3.png","slug":"3.png","post":"cluifpiej00015svl88oz0d1q","modified":0,"renderable":0},{"_id":"source/_posts/Redis学习5-Redis应用之签到/4.png","slug":"4.png","post":"cluifpiej00015svl88oz0d1q","modified":0,"renderable":0},{"_id":"source/_posts/Redis学习6—Redis分布式锁/1.png","slug":"1.png","post":"cluifpiel00025svla6o3ga56","modified":0,"renderable":0},{"_id":"source/_posts/Redis学习6—Redis分布式锁/10.png","slug":"10.png","post":"cluifpiel00025svla6o3ga56","modified":0,"renderable":0},{"_id":"source/_posts/Redis学习6—Redis分布式锁/11.png","slug":"11.png","post":"cluifpiel00025svla6o3ga56","modified":0,"renderable":0},{"_id":"source/_posts/Redis学习6—Redis分布式锁/12.png","slug":"12.png","post":"cluifpiel00025svla6o3ga56","modified":0,"renderable":0},{"_id":"source/_posts/Redis学习6—Redis分布式锁/13.png","slug":"13.png","post":"cluifpiel00025svla6o3ga56","modified":0,"renderable":0},{"_id":"source/_posts/Redis学习6—Redis分布式锁/14.png","slug":"14.png","post":"cluifpiel00025svla6o3ga56","modified":0,"renderable":0},{"_id":"source/_posts/Redis学习6—Redis分布式锁/15.png","slug":"15.png","post":"cluifpiel00025svla6o3ga56","modified":0,"renderable":0},{"_id":"source/_posts/Redis学习6—Redis分布式锁/16.png","slug":"16.png","post":"cluifpiel00025svla6o3ga56","modified":0,"renderable":0},{"_id":"source/_posts/Redis学习6—Redis分布式锁/17.png","slug":"17.png","post":"cluifpiel00025svla6o3ga56","modified":0,"renderable":0},{"_id":"source/_posts/Redis学习6—Redis分布式锁/18.png","slug":"18.png","post":"cluifpiel00025svla6o3ga56","modified":0,"renderable":0},{"_id":"source/_posts/Redis学习6—Redis分布式锁/19.png","slug":"19.png","post":"cluifpiel00025svla6o3ga56","modified":0,"renderable":0},{"_id":"source/_posts/Redis学习6—Redis分布式锁/2.png","slug":"2.png","post":"cluifpiel00025svla6o3ga56","modified":0,"renderable":0},{"_id":"source/_posts/Redis学习6—Redis分布式锁/20.png","slug":"20.png","post":"cluifpiel00025svla6o3ga56","modified":0,"renderable":0},{"_id":"source/_posts/Redis学习6—Redis分布式锁/21.png","slug":"21.png","post":"cluifpiel00025svla6o3ga56","modified":0,"renderable":0},{"_id":"source/_posts/Redis学习6—Redis分布式锁/22.png","slug":"22.png","post":"cluifpiel00025svla6o3ga56","modified":0,"renderable":0},{"_id":"source/_posts/Redis学习6—Redis分布式锁/23.png","slug":"23.png","post":"cluifpiel00025svla6o3ga56","modified":0,"renderable":0},{"_id":"source/_posts/Redis学习6—Redis分布式锁/3.png","slug":"3.png","post":"cluifpiel00025svla6o3ga56","modified":0,"renderable":0},{"_id":"source/_posts/Redis学习6—Redis分布式锁/4.png","slug":"4.png","post":"cluifpiel00025svla6o3ga56","modified":0,"renderable":0},{"_id":"source/_posts/Redis学习6—Redis分布式锁/5.png","slug":"5.png","post":"cluifpiel00025svla6o3ga56","modified":0,"renderable":0},{"_id":"source/_posts/Redis学习6—Redis分布式锁/6.png","slug":"6.png","post":"cluifpiel00025svla6o3ga56","modified":0,"renderable":0},{"_id":"source/_posts/Redis学习6—Redis分布式锁/7.png","slug":"7.png","post":"cluifpiel00025svla6o3ga56","modified":0,"renderable":0},{"_id":"source/_posts/Redis学习6—Redis分布式锁/8.png","slug":"8.png","post":"cluifpiel00025svla6o3ga56","modified":0,"renderable":0},{"_id":"source/_posts/Redis学习6—Redis分布式锁/9.png","slug":"9.png","post":"cluifpiel00025svla6o3ga56","modified":0,"renderable":0},{"_id":"source/_posts/Redis学习4—Redis应用之限流/1.png","slug":"1.png","post":"cluifpiel00035svlhi6e396v","modified":0,"renderable":0},{"_id":"source/_posts/Redis学习4—Redis应用之限流/2.png","slug":"2.png","post":"cluifpiel00035svlhi6e396v","modified":0,"renderable":0},{"_id":"source/_posts/Redis学习4—Redis应用之限流/3.png","slug":"3.png","post":"cluifpiel00035svlhi6e396v","modified":0,"renderable":0},{"_id":"source/_posts/Redis学习4—Redis应用之限流/4.png","slug":"4.png","post":"cluifpiel00035svlhi6e396v","modified":0,"renderable":0},{"_id":"source/_posts/Redis学习4—Redis应用之限流/5.png","slug":"5.png","post":"cluifpiel00035svlhi6e396v","modified":0,"renderable":0},{"_id":"source/_posts/Redis学习4—Redis应用之限流/6.png","slug":"6.png","post":"cluifpiel00035svlhi6e396v","modified":0,"renderable":0},{"_id":"source/_posts/Redis学习4—Redis应用之限流/7.png","slug":"7.png","post":"cluifpiel00035svlhi6e396v","modified":0,"renderable":0},{"_id":"source/_posts/Redis学习3—Redis应用之缓存/1.png","slug":"1.png","post":"cluifpiep00045svl1bc540z0","modified":0,"renderable":0},{"_id":"source/_posts/Redis学习3—Redis应用之缓存/10.png","slug":"10.png","post":"cluifpiep00045svl1bc540z0","modified":0,"renderable":0},{"_id":"source/_posts/Redis学习3—Redis应用之缓存/11.png","slug":"11.png","post":"cluifpiep00045svl1bc540z0","modified":0,"renderable":0},{"_id":"source/_posts/Redis学习3—Redis应用之缓存/12.png","slug":"12.png","post":"cluifpiep00045svl1bc540z0","modified":0,"renderable":0},{"_id":"source/_posts/Redis学习3—Redis应用之缓存/13.png","slug":"13.png","post":"cluifpiep00045svl1bc540z0","modified":0,"renderable":0},{"_id":"source/_posts/Redis学习3—Redis应用之缓存/14.png","slug":"14.png","post":"cluifpiep00045svl1bc540z0","modified":0,"renderable":0},{"_id":"source/_posts/Redis学习3—Redis应用之缓存/15.png","slug":"15.png","post":"cluifpiep00045svl1bc540z0","modified":0,"renderable":0},{"_id":"source/_posts/Redis学习3—Redis应用之缓存/16.png","slug":"16.png","post":"cluifpiep00045svl1bc540z0","modified":0,"renderable":0},{"_id":"source/_posts/Redis学习3—Redis应用之缓存/17.png","slug":"17.png","post":"cluifpiep00045svl1bc540z0","modified":0,"renderable":0},{"_id":"source/_posts/Redis学习3—Redis应用之缓存/18.png","slug":"18.png","post":"cluifpiep00045svl1bc540z0","modified":0,"renderable":0},{"_id":"source/_posts/Redis学习3—Redis应用之缓存/19.png","slug":"19.png","post":"cluifpiep00045svl1bc540z0","modified":0,"renderable":0},{"_id":"source/_posts/Redis学习3—Redis应用之缓存/2.png","slug":"2.png","post":"cluifpiep00045svl1bc540z0","modified":0,"renderable":0},{"_id":"source/_posts/Redis学习3—Redis应用之缓存/20.png","slug":"20.png","post":"cluifpiep00045svl1bc540z0","modified":0,"renderable":0},{"_id":"source/_posts/Redis学习3—Redis应用之缓存/22.png","slug":"22.png","post":"cluifpiep00045svl1bc540z0","modified":0,"renderable":0},{"_id":"source/_posts/Redis学习3—Redis应用之缓存/23.png","slug":"23.png","post":"cluifpiep00045svl1bc540z0","modified":0,"renderable":0},{"_id":"source/_posts/Redis学习3—Redis应用之缓存/24.png","slug":"24.png","post":"cluifpiep00045svl1bc540z0","modified":0,"renderable":0},{"_id":"source/_posts/Redis学习3—Redis应用之缓存/25.png","slug":"25.png","post":"cluifpiep00045svl1bc540z0","modified":0,"renderable":0},{"_id":"source/_posts/Redis学习3—Redis应用之缓存/26.png","slug":"26.png","post":"cluifpiep00045svl1bc540z0","modified":0,"renderable":0},{"_id":"source/_posts/Redis学习3—Redis应用之缓存/27.png","slug":"27.png","post":"cluifpiep00045svl1bc540z0","modified":0,"renderable":0},{"_id":"source/_posts/Redis学习3—Redis应用之缓存/3.png","slug":"3.png","post":"cluifpiep00045svl1bc540z0","modified":0,"renderable":0},{"_id":"source/_posts/Redis学习3—Redis应用之缓存/4.png","slug":"4.png","post":"cluifpiep00045svl1bc540z0","modified":0,"renderable":0},{"_id":"source/_posts/Redis学习3—Redis应用之缓存/5.png","slug":"5.png","post":"cluifpiep00045svl1bc540z0","modified":0,"renderable":0},{"_id":"source/_posts/Redis学习3—Redis应用之缓存/6.png","slug":"6.png","post":"cluifpiep00045svl1bc540z0","modified":0,"renderable":0},{"_id":"source/_posts/Redis学习3—Redis应用之缓存/7.png","slug":"7.png","post":"cluifpiep00045svl1bc540z0","modified":0,"renderable":0},{"_id":"source/_posts/Redis学习3—Redis应用之缓存/8.png","slug":"8.png","post":"cluifpiep00045svl1bc540z0","modified":0,"renderable":0},{"_id":"source/_posts/Redis学习3—Redis应用之缓存/9.png","slug":"9.png","post":"cluifpiep00045svl1bc540z0","modified":0,"renderable":0},{"_id":"source/_posts/Redis学习3—Redis应用之缓存/21.png","slug":"21.png","post":"cluifpiep00045svl1bc540z0","modified":0,"renderable":0},{"_id":"source/_posts/Redis学习6—Redis分布式锁/24.png","slug":"24.png","post":"cluifpiel00025svla6o3ga56","modified":0,"renderable":0},{"_id":"source/_posts/MongoDB学习1—MongoDB简介/1.png","slug":"1.png","post":"clujeumc100006wvlawwz33ch","modified":0,"renderable":0},{"_id":"source/_posts/MongoDB学习1—MongoDB简介/2.png","slug":"2.png","post":"clujeumc100006wvlawwz33ch","modified":0,"renderable":0},{"_id":"source/_posts/MongoDB学习1—MongoDB简介/3.png","slug":"3.png","post":"clujeumc100006wvlawwz33ch","modified":0,"renderable":0},{"_id":"source/_posts/MongoDB学习2—SpringBoot集成MongoDB/1.png","slug":"1.png","post":"clujeumc700016wvl7diu5d69","modified":0,"renderable":0},{"_id":"source/_posts/MongoDB学习2—SpringBoot集成MongoDB/10.png","slug":"10.png","post":"clujeumc700016wvl7diu5d69","modified":0,"renderable":0},{"_id":"source/_posts/MongoDB学习2—SpringBoot集成MongoDB/2.png","slug":"2.png","post":"clujeumc700016wvl7diu5d69","modified":0,"renderable":0},{"_id":"source/_posts/MongoDB学习2—SpringBoot集成MongoDB/3.png","slug":"3.png","post":"clujeumc700016wvl7diu5d69","modified":0,"renderable":0},{"_id":"source/_posts/MongoDB学习2—SpringBoot集成MongoDB/4.png","slug":"4.png","post":"clujeumc700016wvl7diu5d69","modified":0,"renderable":0},{"_id":"source/_posts/MongoDB学习2—SpringBoot集成MongoDB/5.png","slug":"5.png","post":"clujeumc700016wvl7diu5d69","modified":0,"renderable":0},{"_id":"source/_posts/MongoDB学习2—SpringBoot集成MongoDB/6.png","slug":"6.png","post":"clujeumc700016wvl7diu5d69","modified":0,"renderable":0},{"_id":"source/_posts/MongoDB学习2—SpringBoot集成MongoDB/7.png","slug":"7.png","post":"clujeumc700016wvl7diu5d69","modified":0,"renderable":0},{"_id":"source/_posts/MongoDB学习2—SpringBoot集成MongoDB/8.png","slug":"8.png","post":"clujeumc700016wvl7diu5d69","modified":0,"renderable":0},{"_id":"source/_posts/MongoDB学习2—SpringBoot集成MongoDB/9.png","slug":"9.png","post":"clujeumc700016wvl7diu5d69","modified":0,"renderable":0},{"_id":"source/_posts/登录、注册学习/1.png","slug":"1.png","post":"clujgs3wr0000qgvl00krchh9","modified":0,"renderable":0},{"_id":"source/_posts/登录、注册学习/10.png","slug":"10.png","post":"clujgs3wr0000qgvl00krchh9","modified":0,"renderable":0},{"_id":"source/_posts/登录、注册学习/11.png","slug":"11.png","post":"clujgs3wr0000qgvl00krchh9","modified":0,"renderable":0},{"_id":"source/_posts/登录、注册学习/12.png","slug":"12.png","post":"clujgs3wr0000qgvl00krchh9","modified":0,"renderable":0},{"_id":"source/_posts/登录、注册学习/13.png","slug":"13.png","post":"clujgs3wr0000qgvl00krchh9","modified":0,"renderable":0},{"_id":"source/_posts/登录、注册学习/14.png","slug":"14.png","post":"clujgs3wr0000qgvl00krchh9","modified":0,"renderable":0},{"_id":"source/_posts/登录、注册学习/15.png","slug":"15.png","post":"clujgs3wr0000qgvl00krchh9","modified":0,"renderable":0},{"_id":"source/_posts/登录、注册学习/16.png","slug":"16.png","post":"clujgs3wr0000qgvl00krchh9","modified":0,"renderable":0},{"_id":"source/_posts/登录、注册学习/17.png","slug":"17.png","post":"clujgs3wr0000qgvl00krchh9","modified":0,"renderable":0},{"_id":"source/_posts/登录、注册学习/18.png","slug":"18.png","post":"clujgs3wr0000qgvl00krchh9","modified":0,"renderable":0},{"_id":"source/_posts/登录、注册学习/19.png","slug":"19.png","post":"clujgs3wr0000qgvl00krchh9","modified":0,"renderable":0},{"_id":"source/_posts/登录、注册学习/2.png","slug":"2.png","post":"clujgs3wr0000qgvl00krchh9","modified":0,"renderable":0},{"_id":"source/_posts/登录、注册学习/20.png","slug":"20.png","post":"clujgs3wr0000qgvl00krchh9","modified":0,"renderable":0},{"_id":"source/_posts/登录、注册学习/21.png","slug":"21.png","post":"clujgs3wr0000qgvl00krchh9","modified":0,"renderable":0},{"_id":"source/_posts/登录、注册学习/22.png","slug":"22.png","post":"clujgs3wr0000qgvl00krchh9","modified":0,"renderable":0},{"_id":"source/_posts/登录、注册学习/23.png","slug":"23.png","post":"clujgs3wr0000qgvl00krchh9","modified":0,"renderable":0},{"_id":"source/_posts/登录、注册学习/24.png","slug":"24.png","post":"clujgs3wr0000qgvl00krchh9","modified":0,"renderable":0},{"_id":"source/_posts/登录、注册学习/25.png","slug":"25.png","post":"clujgs3wr0000qgvl00krchh9","modified":0,"renderable":0},{"_id":"source/_posts/登录、注册学习/26.png","slug":"26.png","post":"clujgs3wr0000qgvl00krchh9","modified":0,"renderable":0},{"_id":"source/_posts/登录、注册学习/27.png","slug":"27.png","post":"clujgs3wr0000qgvl00krchh9","modified":0,"renderable":0},{"_id":"source/_posts/登录、注册学习/3.png","slug":"3.png","post":"clujgs3wr0000qgvl00krchh9","modified":0,"renderable":0},{"_id":"source/_posts/登录、注册学习/4.png","slug":"4.png","post":"clujgs3wr0000qgvl00krchh9","modified":0,"renderable":0},{"_id":"source/_posts/登录、注册学习/5.png","slug":"5.png","post":"clujgs3wr0000qgvl00krchh9","modified":0,"renderable":0},{"_id":"source/_posts/登录、注册学习/6.png","slug":"6.png","post":"clujgs3wr0000qgvl00krchh9","modified":0,"renderable":0},{"_id":"source/_posts/登录、注册学习/7.png","slug":"7.png","post":"clujgs3wr0000qgvl00krchh9","modified":0,"renderable":0},{"_id":"source/_posts/登录、注册学习/8.png","slug":"8.png","post":"clujgs3wr0000qgvl00krchh9","modified":0,"renderable":0},{"_id":"source/_posts/登录、注册学习/9.png","slug":"9.png","post":"clujgs3wr0000qgvl00krchh9","modified":0,"renderable":0},{"_id":"source/_posts/鉴权学习/1.png","slug":"1.png","post":"clujhemkw0000esvl9dij87qe","modified":0,"renderable":0},{"_id":"source/_posts/鉴权学习/10.png","slug":"10.png","post":"clujhemkw0000esvl9dij87qe","modified":0,"renderable":0},{"_id":"source/_posts/鉴权学习/11.png","slug":"11.png","post":"clujhemkw0000esvl9dij87qe","modified":0,"renderable":0},{"_id":"source/_posts/鉴权学习/12.png","slug":"12.png","post":"clujhemkw0000esvl9dij87qe","modified":0,"renderable":0},{"_id":"source/_posts/鉴权学习/13.png","slug":"13.png","post":"clujhemkw0000esvl9dij87qe","modified":0,"renderable":0},{"_id":"source/_posts/鉴权学习/14.png","slug":"14.png","post":"clujhemkw0000esvl9dij87qe","modified":0,"renderable":0},{"_id":"source/_posts/鉴权学习/15.png","slug":"15.png","post":"clujhemkw0000esvl9dij87qe","modified":0,"renderable":0},{"_id":"source/_posts/鉴权学习/16.png","slug":"16.png","post":"clujhemkw0000esvl9dij87qe","modified":0,"renderable":0},{"_id":"source/_posts/鉴权学习/17.png","slug":"17.png","post":"clujhemkw0000esvl9dij87qe","modified":0,"renderable":0},{"_id":"source/_posts/鉴权学习/2.png","slug":"2.png","post":"clujhemkw0000esvl9dij87qe","modified":0,"renderable":0},{"_id":"source/_posts/鉴权学习/3.png","slug":"3.png","post":"clujhemkw0000esvl9dij87qe","modified":0,"renderable":0},{"_id":"source/_posts/鉴权学习/4.png","slug":"4.png","post":"clujhemkw0000esvl9dij87qe","modified":0,"renderable":0},{"_id":"source/_posts/鉴权学习/5.png","slug":"5.png","post":"clujhemkw0000esvl9dij87qe","modified":0,"renderable":0},{"_id":"source/_posts/鉴权学习/6.png","slug":"6.png","post":"clujhemkw0000esvl9dij87qe","modified":0,"renderable":0},{"_id":"source/_posts/鉴权学习/7.png","slug":"7.png","post":"clujhemkw0000esvl9dij87qe","modified":0,"renderable":0},{"_id":"source/_posts/鉴权学习/8.png","slug":"8.png","post":"clujhemkw0000esvl9dij87qe","modified":0,"renderable":0},{"_id":"source/_posts/鉴权学习/9.png","slug":"9.png","post":"clujhemkw0000esvl9dij87qe","modified":0,"renderable":0},{"_id":"source/_posts/SpringSecurity学习1—SpringSecurity认证/1.png","slug":"1.png","post":"clujia8lr0000hkvle54q88zn","modified":0,"renderable":0},{"_id":"source/_posts/SpringSecurity学习1—SpringSecurity认证/10.png","slug":"10.png","post":"clujia8lr0000hkvle54q88zn","modified":0,"renderable":0},{"_id":"source/_posts/SpringSecurity学习1—SpringSecurity认证/11.png","slug":"11.png","post":"clujia8lr0000hkvle54q88zn","modified":0,"renderable":0},{"_id":"source/_posts/SpringSecurity学习1—SpringSecurity认证/12.png","slug":"12.png","post":"clujia8lr0000hkvle54q88zn","modified":0,"renderable":0},{"_id":"source/_posts/SpringSecurity学习1—SpringSecurity认证/13.png","slug":"13.png","post":"clujia8lr0000hkvle54q88zn","modified":0,"renderable":0},{"_id":"source/_posts/SpringSecurity学习1—SpringSecurity认证/14.png","slug":"14.png","post":"clujia8lr0000hkvle54q88zn","modified":0,"renderable":0},{"_id":"source/_posts/SpringSecurity学习1—SpringSecurity认证/2.png","slug":"2.png","post":"clujia8lr0000hkvle54q88zn","modified":0,"renderable":0},{"_id":"source/_posts/SpringSecurity学习1—SpringSecurity认证/3.png","slug":"3.png","post":"clujia8lr0000hkvle54q88zn","modified":0,"renderable":0},{"_id":"source/_posts/SpringSecurity学习1—SpringSecurity认证/4.png","slug":"4.png","post":"clujia8lr0000hkvle54q88zn","modified":0,"renderable":0},{"_id":"source/_posts/SpringSecurity学习1—SpringSecurity认证/5.png","slug":"5.png","post":"clujia8lr0000hkvle54q88zn","modified":0,"renderable":0},{"_id":"source/_posts/SpringSecurity学习1—SpringSecurity认证/6.png","slug":"6.png","post":"clujia8lr0000hkvle54q88zn","modified":0,"renderable":0},{"_id":"source/_posts/SpringSecurity学习1—SpringSecurity认证/7.png","slug":"7.png","post":"clujia8lr0000hkvle54q88zn","modified":0,"renderable":0},{"_id":"source/_posts/SpringSecurity学习1—SpringSecurity认证/8.png","slug":"8.png","post":"clujia8lr0000hkvle54q88zn","modified":0,"renderable":0},{"_id":"source/_posts/SpringSecurity学习1—SpringSecurity认证/9.png","slug":"9.png","post":"clujia8lr0000hkvle54q88zn","modified":0,"renderable":0},{"_id":"source/_posts/SpringSecurity学习2—SpringSecurity授权/1.png","slug":"1.png","post":"clujia8lv0001hkvl3souhul2","modified":0,"renderable":0},{"_id":"source/_posts/SpringSecurity学习2—SpringSecurity授权/10.png","slug":"10.png","post":"clujia8lv0001hkvl3souhul2","modified":0,"renderable":0},{"_id":"source/_posts/SpringSecurity学习2—SpringSecurity授权/11.png","slug":"11.png","post":"clujia8lv0001hkvl3souhul2","modified":0,"renderable":0},{"_id":"source/_posts/SpringSecurity学习2—SpringSecurity授权/12.png","slug":"12.png","post":"clujia8lv0001hkvl3souhul2","modified":0,"renderable":0},{"_id":"source/_posts/SpringSecurity学习2—SpringSecurity授权/13.png","slug":"13.png","post":"clujia8lv0001hkvl3souhul2","modified":0,"renderable":0},{"_id":"source/_posts/SpringSecurity学习2—SpringSecurity授权/14.png","slug":"14.png","post":"clujia8lv0001hkvl3souhul2","modified":0,"renderable":0},{"_id":"source/_posts/SpringSecurity学习2—SpringSecurity授权/15.png","slug":"15.png","post":"clujia8lv0001hkvl3souhul2","modified":0,"renderable":0},{"_id":"source/_posts/SpringSecurity学习2—SpringSecurity授权/16.png","slug":"16.png","post":"clujia8lv0001hkvl3souhul2","modified":0,"renderable":0},{"_id":"source/_posts/SpringSecurity学习2—SpringSecurity授权/17.png","slug":"17.png","post":"clujia8lv0001hkvl3souhul2","modified":0,"renderable":0},{"_id":"source/_posts/SpringSecurity学习2—SpringSecurity授权/18.png","slug":"18.png","post":"clujia8lv0001hkvl3souhul2","modified":0,"renderable":0},{"_id":"source/_posts/SpringSecurity学习2—SpringSecurity授权/19.png","slug":"19.png","post":"clujia8lv0001hkvl3souhul2","modified":0,"renderable":0},{"_id":"source/_posts/SpringSecurity学习2—SpringSecurity授权/2.png","slug":"2.png","post":"clujia8lv0001hkvl3souhul2","modified":0,"renderable":0},{"_id":"source/_posts/SpringSecurity学习2—SpringSecurity授权/20.png","slug":"20.png","post":"clujia8lv0001hkvl3souhul2","modified":0,"renderable":0},{"_id":"source/_posts/SpringSecurity学习2—SpringSecurity授权/21.png","slug":"21.png","post":"clujia8lv0001hkvl3souhul2","modified":0,"renderable":0},{"_id":"source/_posts/SpringSecurity学习2—SpringSecurity授权/22.png","slug":"22.png","post":"clujia8lv0001hkvl3souhul2","modified":0,"renderable":0},{"_id":"source/_posts/SpringSecurity学习2—SpringSecurity授权/23.png","slug":"23.png","post":"clujia8lv0001hkvl3souhul2","modified":0,"renderable":0},{"_id":"source/_posts/SpringSecurity学习2—SpringSecurity授权/24.png","slug":"24.png","post":"clujia8lv0001hkvl3souhul2","modified":0,"renderable":0},{"_id":"source/_posts/SpringSecurity学习2—SpringSecurity授权/3.png","slug":"3.png","post":"clujia8lv0001hkvl3souhul2","modified":0,"renderable":0},{"_id":"source/_posts/SpringSecurity学习2—SpringSecurity授权/4.png","slug":"4.png","post":"clujia8lv0001hkvl3souhul2","modified":0,"renderable":0},{"_id":"source/_posts/SpringSecurity学习2—SpringSecurity授权/5.png","slug":"5.png","post":"clujia8lv0001hkvl3souhul2","modified":0,"renderable":0},{"_id":"source/_posts/SpringSecurity学习2—SpringSecurity授权/6.png","slug":"6.png","post":"clujia8lv0001hkvl3souhul2","modified":0,"renderable":0},{"_id":"source/_posts/SpringSecurity学习2—SpringSecurity授权/7.png","slug":"7.png","post":"clujia8lv0001hkvl3souhul2","modified":0,"renderable":0},{"_id":"source/_posts/SpringSecurity学习2—SpringSecurity授权/8.png","slug":"8.png","post":"clujia8lv0001hkvl3souhul2","modified":0,"renderable":0},{"_id":"source/_posts/SpringSecurity学习2—SpringSecurity授权/9.png","slug":"9.png","post":"clujia8lv0001hkvl3souhul2","modified":0,"renderable":0},{"_id":"source/_posts/手撸Mybatis（一）——代理mapper/1.png","slug":"1.png","post":"clvrrqyk300002cvl52a85p5t","modified":0,"renderable":0},{"_id":"source/_posts/手撸Mybatis（一）——代理mapper/2.png","slug":"2.png","post":"clvrrqyk300002cvl52a85p5t","modified":0,"renderable":0}],"PostCategory":[],"PostTag":[{"post_id":"clui4qb780000iovldijo3jbx","tag_id":"cluig7rjd0000y4vl5e1w1lz8","_id":"cluig7rjg0001y4vl4l2u84uj"},{"post_id":"cluicrpmy000004vlhna8hb7n","tag_id":"clujdw0zx00006gvl13egc167","_id":"clujdw10500036gvl7spx57ub"},{"post_id":"cluicrpmy000004vlhna8hb7n","tag_id":"clujdw10200016gvlf850g6st","_id":"clujdw10500046gvl5ttc3nd6"},{"post_id":"cluid7sjg0000b0vlbrh1gj36","tag_id":"clujdw0zx00006gvl13egc167","_id":"clujdw10600076gvl0ad77k4k"},{"post_id":"cluid7sjg0000b0vlbrh1gj36","tag_id":"clujdw10200016gvlf850g6st","_id":"clujdw10600086gvl0e34f0ud"},{"post_id":"cluie8bfg0000h0vlgd9m6hpw","tag_id":"clujdw0zx00006gvl13egc167","_id":"clujdw107000b6gvlgiut4u3d"},{"post_id":"cluie8bfg0000h0vlgd9m6hpw","tag_id":"clujdw10600096gvlcj7q228a","_id":"clujdw107000c6gvl65mshz7c"},{"post_id":"cluifpiep00045svl1bc540z0","tag_id":"clujdw0zx00006gvl13egc167","_id":"clujdw108000e6gvlerjuhvkh"},{"post_id":"cluifpiep00045svl1bc540z0","tag_id":"clujdw10600096gvlcj7q228a","_id":"clujdw108000f6gvl764u9bes"},{"post_id":"cluifpieg00005svladbt69um","tag_id":"clujdw0zx00006gvl13egc167","_id":"clujdw108000g6gvle2k68m5j"},{"post_id":"cluifpieg00005svladbt69um","tag_id":"clujdw10600096gvlcj7q228a","_id":"clujdw108000h6gvld2qxamku"},{"post_id":"cluifpiel00035svlhi6e396v","tag_id":"clujdw0zx00006gvl13egc167","_id":"clujdw10l000i6gvldpmvcway"},{"post_id":"cluifpiel00035svlhi6e396v","tag_id":"clujdw10600096gvlcj7q228a","_id":"clujdw10l000j6gvl8kgwb78k"},{"post_id":"cluifpiej00015svl88oz0d1q","tag_id":"clujdw0zx00006gvl13egc167","_id":"clujdw10m000k6gvl6jjyeeie"},{"post_id":"cluifpiej00015svl88oz0d1q","tag_id":"clujdw10600096gvlcj7q228a","_id":"clujdw10m000l6gvlc86u69la"},{"post_id":"cluifpiel00025svla6o3ga56","tag_id":"clujdw0zx00006gvl13egc167","_id":"clujdw10m000m6gvl1pe58ngc"},{"post_id":"cluifpiel00025svla6o3ga56","tag_id":"clujdw10600096gvlcj7q228a","_id":"clujdw10m000n6gvlc1kdfqdd"},{"post_id":"cluic023d0000tsvla7f0hjfz","tag_id":"clujdx13g000o6gvl0k953upd","_id":"clujdx13i000q6gvlhodvcfx9"},{"post_id":"cluic023d0000tsvla7f0hjfz","tag_id":"clujdx13h000p6gvl76wmfrfa","_id":"clujdx13i000r6gvl5mqt7t47"},{"post_id":"cluicf3tm00001kvl6htf9wbi","tag_id":"clujdx13g000o6gvl0k953upd","_id":"clujdx8nn000s6gvlb6vic045"},{"post_id":"cluicf3tm00001kvl6htf9wbi","tag_id":"clujdx13h000p6gvl76wmfrfa","_id":"clujdx8nn000t6gvl1apygqaj"},{"post_id":"clujeumc100006wvlawwz33ch","tag_id":"clujdw0zx00006gvl13egc167","_id":"clujeumcd00046wvl3hn70yg7"},{"post_id":"clujeumc100006wvlawwz33ch","tag_id":"clujeumc800026wvlfluuhhl1","_id":"clujeumcd00056wvlbazu5yl6"},{"post_id":"clujeumc700016wvl7diu5d69","tag_id":"clujdw0zx00006gvl13egc167","_id":"clujeumcd00066wvlb7qy1nhg"},{"post_id":"clujeumc700016wvl7diu5d69","tag_id":"clujeumc800026wvlfluuhhl1","_id":"clujeumcd00076wvlb0qw9poo"},{"post_id":"clujgs3wr0000qgvl00krchh9","tag_id":"clujdx13g000o6gvl0k953upd","_id":"clujgs3wx0002qgvl7g3thhgv"},{"post_id":"clujgs3wr0000qgvl00krchh9","tag_id":"clujgs3wu0001qgvl7lzoda35","_id":"clujgs3wx0003qgvl1mzbckn0"},{"post_id":"clujhemkw0000esvl9dij87qe","tag_id":"clujdx13g000o6gvl0k953upd","_id":"clujheml20001esvl2vbb6drh"},{"post_id":"clujhemkw0000esvl9dij87qe","tag_id":"clujgs3wu0001qgvl7lzoda35","_id":"clujheml20002esvl5h5d8xng"},{"post_id":"clujia8lr0000hkvle54q88zn","tag_id":"clujdx13g000o6gvl0k953upd","_id":"clujia8lx0002hkvl25so7qr8"},{"post_id":"clujia8lr0000hkvle54q88zn","tag_id":"clujgs3wu0001qgvl7lzoda35","_id":"clujia8ly0003hkvldefueog7"},{"post_id":"clujia8lv0001hkvl3souhul2","tag_id":"clujdx13g000o6gvl0k953upd","_id":"clujia8ly0004hkvlhlmra82l"},{"post_id":"clujia8lv0001hkvl3souhul2","tag_id":"clujgs3wu0001qgvl7lzoda35","_id":"clujia8ly0005hkvlehtzcuz0"},{"post_id":"clvrrqyk300002cvl52a85p5t","tag_id":"clvrsl9nu0000f0vl0pk42r8c","_id":"clvrsl9o20001f0vl48utbk9v"}],"Tag":[{"name":"Java","_id":"cluig7rjd0000y4vl5e1w1lz8"},{"name":"中间件, Redis","_id":"cluig9y4l0002y4vlf5x9hdhr"},{"name":"中间件, Nacos","_id":"cluigau9d0007y4vlerdv3u1s"},{"name":"SpringBoot, SpringGateway","_id":"cluigbcug000cy4vl02te39nz"},{"name":"中间件 Redis","_id":"cluigef9b0000fwvlcu8ac4lh"},{"name":"中间件","_id":"clujdw0zx00006gvl13egc167"},{"name":"Nacos","_id":"clujdw10200016gvlf850g6st"},{"name":"Redis","_id":"clujdw10600096gvlcj7q228a"},{"name":"SpringBoot","_id":"clujdx13g000o6gvl0k953upd"},{"name":"SpringGateway","_id":"clujdx13h000p6gvl76wmfrfa"},{"name":"MongoDB","_id":"clujeumc800026wvlfluuhhl1"},{"name":"SpringSecurity","_id":"clujgs3wu0001qgvl7lzoda35"},{"name":"Mybatis","_id":"clvrsl9nu0000f0vl0pk42r8c"}]}}